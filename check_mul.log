
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `

	# gold design
    read_verilog signedmul.v
    prep -top signedmul
    design -stash gold
    
	# gate design
    read_verilog synth_alu.v
	read_liberty  -ignore_miss_func /home/min/a/pandit8/Desktop/freepdk-45nm/stdcells.lib
    prep -flatten -top signedmul
    design -stash gate
    

    # prove equivalence
    design -copy-from gold -as gold signedmul
    design -copy-from gate -as gate signedmul
    equiv_make gold gate equiv
    hierarchy -top equiv
	show
    equiv_simple  -v
    equiv_status -assert
' --

1. Executing Verilog-2005 frontend: signedmul.v
Parsing Verilog input from `signedmul.v' to AST representation.
Generating RTLIL representation for module `\signedmul'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \signedmul

2.1.2. Analyzing design hierarchy..
Top module:  \signedmul
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module signedmul.

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \signedmul..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module signedmul..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module signedmul.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\signedmul'.
Removed a total of 0 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \signedmul..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \signedmul.
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\signedmul'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \signedmul..

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module signedmul.

2.6.9. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 8) from port A of cell signedmul.$mul$signedmul.v:40$1 ($mul).
Removed top 4 bits (of 8) from port B of cell signedmul.$mul$signedmul.v:40$1 ($mul).

2.8. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \signedmul..

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module signedmul.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\signedmul'.
Removed a total of 0 cells.

2.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \signedmul..

2.11.5. Finished fast OPT passes.

2.12. Printing statistics.

=== signedmul ===

   Number of wires:                  3
   Number of wire bits:             16
   Number of public wires:           3
   Number of public wire bits:      16
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $mul                            1

2.13. Executing CHECK pass (checking for obvious problems).
checking module signedmul..
found and reported 0 problems.

3. Executing Verilog-2005 frontend: synth_alu.v
Parsing Verilog input from `synth_alu.v' to AST representation.
Generating RTLIL representation for module `\module_fn_alu'.
Successfully finished Verilog frontend.

4. Executing Liberty frontend.
Ignoring cell CLKGATETST_X1 with missing function on output IQ.
Ignoring cell CLKGATETST_X2 with missing function on output IQ.
Ignoring cell CLKGATETST_X4 with missing function on output IQ.
Ignoring cell CLKGATETST_X8 with missing function on output IQ.
Ignoring cell CLKGATE_X1 with missing function on output IQ.
Ignoring cell CLKGATE_X2 with missing function on output IQ.
Ignoring cell CLKGATE_X4 with missing function on output IQ.
Ignoring cell CLKGATE_X8 with missing function on output IQ.
Imported 127 cell types from liberty file.

5. Executing PREP pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).
ERROR: Module `signedmul' not found!
