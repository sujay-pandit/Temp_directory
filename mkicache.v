//
// Generated by Bluespec Compiler, version 2022.01-5-ge3edf4b1 (build e3edf4b1)
//
// On Fri Apr 15 12:47:16 EDT 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_put_core_req_put           O     1
// get_core_resp_get              O    41
// RDY_get_core_resp_get          O     1
// get_read_mem_req_get           O    44 reg
// RDY_get_read_mem_req_get       O     1 reg
// RDY_put_read_mem_resp_put      O     1
// RDY_put_pa_from_tlb_put        O     1
// mv_perf_counters               O     5
// RDY_mv_perf_counters           O     1 const
// RDY_ma_cache_enable            O     1 const
// RDY_ma_curr_priv               O     1 const
// mv_cache_available             O     1
// RDY_mv_cache_available         O     1 const
// pmp_cfg_0                      I     8
// pmp_cfg_1                      I     8
// pmp_cfg_2                      I     8
// pmp_cfg_3                      I     8
// pmp_addr_0                     I    29
// pmp_addr_1                     I    29
// pmp_addr_2                     I    29
// pmp_addr_3                     I    29
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_core_req_put               I    67
// put_read_mem_resp_put          I    66
// put_pa_from_tlb_put            I    39
// ma_cache_enable_c              I     1
// ma_curr_priv_c                 I     2
// EN_put_core_req_put            I     1
// EN_put_read_mem_resp_put       I     1
// EN_put_pa_from_tlb_put         I     1
// EN_ma_cache_enable             I     1
// EN_ma_curr_priv                I     1
// EN_get_core_resp_get           I     1
// EN_get_read_mem_req_get        I     1
//
// Combinational paths from inputs to outputs:
//   (put_read_mem_resp_put,
//    put_pa_from_tlb_put,
//    ma_cache_enable_c,
//    ma_curr_priv_c,
//    EN_put_read_mem_resp_put,
//    EN_put_pa_from_tlb_put,
//    EN_ma_cache_enable,
//    EN_ma_curr_priv,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_get_core_resp_get
//   (put_read_mem_resp_put,
//    put_pa_from_tlb_put,
//    ma_cache_enable_c,
//    ma_curr_priv_c,
//    EN_put_core_req_put,
//    EN_put_read_mem_resp_put,
//    EN_put_pa_from_tlb_put,
//    EN_ma_cache_enable,
//    EN_ma_curr_priv,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> mv_perf_counters
//   (put_read_mem_resp_put,
//    put_pa_from_tlb_put,
//    ma_cache_enable_c,
//    ma_curr_priv_c,
//    EN_put_read_mem_resp_put,
//    EN_put_pa_from_tlb_put,
//    EN_ma_cache_enable,
//    EN_ma_curr_priv,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> get_core_resp_get
//   EN_ma_cache_enable -> RDY_put_core_req_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkicache(pmp_cfg_0,
		pmp_cfg_1,
		pmp_cfg_2,
		pmp_cfg_3,
		pmp_addr_0,
		pmp_addr_1,
		pmp_addr_2,
		pmp_addr_3,
		CLK,
		RST_N,

		put_core_req_put,
		EN_put_core_req_put,
		RDY_put_core_req_put,

		EN_get_core_resp_get,
		get_core_resp_get,
		RDY_get_core_resp_get,

		EN_get_read_mem_req_get,
		get_read_mem_req_get,
		RDY_get_read_mem_req_get,

		put_read_mem_resp_put,
		EN_put_read_mem_resp_put,
		RDY_put_read_mem_resp_put,

		put_pa_from_tlb_put,
		EN_put_pa_from_tlb_put,
		RDY_put_pa_from_tlb_put,

		mv_perf_counters,
		RDY_mv_perf_counters,

		ma_cache_enable_c,
		EN_ma_cache_enable,
		RDY_ma_cache_enable,

		ma_curr_priv_c,
		EN_ma_curr_priv,
		RDY_ma_curr_priv,

		mv_cache_available,
		RDY_mv_cache_available);
  parameter [31 : 0] id = 32'b0;
  input  [7 : 0] pmp_cfg_0;
  input  [7 : 0] pmp_cfg_1;
  input  [7 : 0] pmp_cfg_2;
  input  [7 : 0] pmp_cfg_3;
  input  [28 : 0] pmp_addr_0;
  input  [28 : 0] pmp_addr_1;
  input  [28 : 0] pmp_addr_2;
  input  [28 : 0] pmp_addr_3;
  input  CLK;
  input  RST_N;

  // action method put_core_req_put
  input  [66 : 0] put_core_req_put;
  input  EN_put_core_req_put;
  output RDY_put_core_req_put;

  // actionvalue method get_core_resp_get
  input  EN_get_core_resp_get;
  output [40 : 0] get_core_resp_get;
  output RDY_get_core_resp_get;

  // actionvalue method get_read_mem_req_get
  input  EN_get_read_mem_req_get;
  output [43 : 0] get_read_mem_req_get;
  output RDY_get_read_mem_req_get;

  // action method put_read_mem_resp_put
  input  [65 : 0] put_read_mem_resp_put;
  input  EN_put_read_mem_resp_put;
  output RDY_put_read_mem_resp_put;

  // action method put_pa_from_tlb_put
  input  [38 : 0] put_pa_from_tlb_put;
  input  EN_put_pa_from_tlb_put;
  output RDY_put_pa_from_tlb_put;

  // value method mv_perf_counters
  output [4 : 0] mv_perf_counters;
  output RDY_mv_perf_counters;

  // action method ma_cache_enable
  input  ma_cache_enable_c;
  input  EN_ma_cache_enable;
  output RDY_ma_cache_enable;

  // action method ma_curr_priv
  input  [1 : 0] ma_curr_priv_c;
  input  EN_ma_curr_priv;
  output RDY_ma_curr_priv;

  // value method mv_cache_available
  output mv_cache_available;
  output RDY_mv_cache_available;

  // signals for module outputs
  wire [43 : 0] get_read_mem_req_get;
  wire [40 : 0] get_core_resp_get;
  wire [4 : 0] mv_perf_counters;
  wire RDY_get_core_resp_get,
       RDY_get_read_mem_req_get,
       RDY_ma_cache_enable,
       RDY_ma_curr_priv,
       RDY_mv_cache_available,
       RDY_mv_perf_counters,
       RDY_put_core_req_put,
       RDY_put_pa_from_tlb_put,
       RDY_put_read_mem_resp_put,
       mv_cache_available;

  // inlined wires
  wire [66 : 0] ff_read_mem_response_rv_port0__write_1,
		ff_read_mem_response_rv_port1__read,
		ff_read_mem_response_rv_port1__write_1,
		ff_read_mem_response_rv_port2__read;
  wire [41 : 0] ff_core_response_rv_port0__write_1,
		ff_core_response_rv_port1__read,
		ff_core_response_rv_port1__write_1,
		ff_core_response_rv_port2__read;
  wire [40 : 0] wr_fb_response_wget,
		wr_nc_response_wget,
		wr_ram_response_wget;
  wire [39 : 0] ff_from_tlb_rv_port0__write_1,
		ff_from_tlb_rv_port1__read,
		ff_from_tlb_rv_port1__write_1,
		ff_from_tlb_rv_port2__read;
  wire [1 : 0] wr_fb_state_wget, wr_ram_state_wget;
  wire _mav_allocate_line_RL_rl_send_memory_request_EN_m_fillbuffer_wget,
       ff_read_mem_response_rv_EN_port1__write,
       wr_fault_whas,
       wr_fb_response_whas,
       wr_ram_state_whas,
       wr_total_io_reads_whas,
       wr_total_read_fb_hits_whas,
       wr_total_read_miss_whas;

  // register ff_core_response_rv
  reg [41 : 0] ff_core_response_rv;
  wire [41 : 0] ff_core_response_rv_D_IN;
  wire ff_core_response_rv_EN;

  // register ff_from_tlb_rv
  reg [39 : 0] ff_from_tlb_rv;
  wire [39 : 0] ff_from_tlb_rv_D_IN;
  wire ff_from_tlb_rv_EN;

  // register ff_read_mem_response_rv
  reg [66 : 0] ff_read_mem_response_rv;
  wire [66 : 0] ff_read_mem_response_rv_D_IN;
  wire ff_read_mem_response_rv_EN;

  // register replacement_v_count_0
  reg [1 : 0] replacement_v_count_0;
  wire [1 : 0] replacement_v_count_0_D_IN;
  wire replacement_v_count_0_EN;

  // register replacement_v_count_1
  reg [1 : 0] replacement_v_count_1;
  wire [1 : 0] replacement_v_count_1_D_IN;
  wire replacement_v_count_1_EN;

  // register replacement_v_count_10
  reg [1 : 0] replacement_v_count_10;
  wire [1 : 0] replacement_v_count_10_D_IN;
  wire replacement_v_count_10_EN;

  // register replacement_v_count_11
  reg [1 : 0] replacement_v_count_11;
  wire [1 : 0] replacement_v_count_11_D_IN;
  wire replacement_v_count_11_EN;

  // register replacement_v_count_12
  reg [1 : 0] replacement_v_count_12;
  wire [1 : 0] replacement_v_count_12_D_IN;
  wire replacement_v_count_12_EN;

  // register replacement_v_count_13
  reg [1 : 0] replacement_v_count_13;
  wire [1 : 0] replacement_v_count_13_D_IN;
  wire replacement_v_count_13_EN;

  // register replacement_v_count_14
  reg [1 : 0] replacement_v_count_14;
  wire [1 : 0] replacement_v_count_14_D_IN;
  wire replacement_v_count_14_EN;

  // register replacement_v_count_15
  reg [1 : 0] replacement_v_count_15;
  wire [1 : 0] replacement_v_count_15_D_IN;
  wire replacement_v_count_15_EN;

  // register replacement_v_count_16
  reg [1 : 0] replacement_v_count_16;
  wire [1 : 0] replacement_v_count_16_D_IN;
  wire replacement_v_count_16_EN;

  // register replacement_v_count_17
  reg [1 : 0] replacement_v_count_17;
  wire [1 : 0] replacement_v_count_17_D_IN;
  wire replacement_v_count_17_EN;

  // register replacement_v_count_18
  reg [1 : 0] replacement_v_count_18;
  wire [1 : 0] replacement_v_count_18_D_IN;
  wire replacement_v_count_18_EN;

  // register replacement_v_count_19
  reg [1 : 0] replacement_v_count_19;
  wire [1 : 0] replacement_v_count_19_D_IN;
  wire replacement_v_count_19_EN;

  // register replacement_v_count_2
  reg [1 : 0] replacement_v_count_2;
  wire [1 : 0] replacement_v_count_2_D_IN;
  wire replacement_v_count_2_EN;

  // register replacement_v_count_20
  reg [1 : 0] replacement_v_count_20;
  wire [1 : 0] replacement_v_count_20_D_IN;
  wire replacement_v_count_20_EN;

  // register replacement_v_count_21
  reg [1 : 0] replacement_v_count_21;
  wire [1 : 0] replacement_v_count_21_D_IN;
  wire replacement_v_count_21_EN;

  // register replacement_v_count_22
  reg [1 : 0] replacement_v_count_22;
  wire [1 : 0] replacement_v_count_22_D_IN;
  wire replacement_v_count_22_EN;

  // register replacement_v_count_23
  reg [1 : 0] replacement_v_count_23;
  wire [1 : 0] replacement_v_count_23_D_IN;
  wire replacement_v_count_23_EN;

  // register replacement_v_count_24
  reg [1 : 0] replacement_v_count_24;
  wire [1 : 0] replacement_v_count_24_D_IN;
  wire replacement_v_count_24_EN;

  // register replacement_v_count_25
  reg [1 : 0] replacement_v_count_25;
  wire [1 : 0] replacement_v_count_25_D_IN;
  wire replacement_v_count_25_EN;

  // register replacement_v_count_26
  reg [1 : 0] replacement_v_count_26;
  wire [1 : 0] replacement_v_count_26_D_IN;
  wire replacement_v_count_26_EN;

  // register replacement_v_count_27
  reg [1 : 0] replacement_v_count_27;
  wire [1 : 0] replacement_v_count_27_D_IN;
  wire replacement_v_count_27_EN;

  // register replacement_v_count_28
  reg [1 : 0] replacement_v_count_28;
  wire [1 : 0] replacement_v_count_28_D_IN;
  wire replacement_v_count_28_EN;

  // register replacement_v_count_29
  reg [1 : 0] replacement_v_count_29;
  wire [1 : 0] replacement_v_count_29_D_IN;
  wire replacement_v_count_29_EN;

  // register replacement_v_count_3
  reg [1 : 0] replacement_v_count_3;
  wire [1 : 0] replacement_v_count_3_D_IN;
  wire replacement_v_count_3_EN;

  // register replacement_v_count_30
  reg [1 : 0] replacement_v_count_30;
  wire [1 : 0] replacement_v_count_30_D_IN;
  wire replacement_v_count_30_EN;

  // register replacement_v_count_31
  reg [1 : 0] replacement_v_count_31;
  wire [1 : 0] replacement_v_count_31_D_IN;
  wire replacement_v_count_31_EN;

  // register replacement_v_count_32
  reg [1 : 0] replacement_v_count_32;
  wire [1 : 0] replacement_v_count_32_D_IN;
  wire replacement_v_count_32_EN;

  // register replacement_v_count_33
  reg [1 : 0] replacement_v_count_33;
  wire [1 : 0] replacement_v_count_33_D_IN;
  wire replacement_v_count_33_EN;

  // register replacement_v_count_34
  reg [1 : 0] replacement_v_count_34;
  wire [1 : 0] replacement_v_count_34_D_IN;
  wire replacement_v_count_34_EN;

  // register replacement_v_count_35
  reg [1 : 0] replacement_v_count_35;
  wire [1 : 0] replacement_v_count_35_D_IN;
  wire replacement_v_count_35_EN;

  // register replacement_v_count_36
  reg [1 : 0] replacement_v_count_36;
  wire [1 : 0] replacement_v_count_36_D_IN;
  wire replacement_v_count_36_EN;

  // register replacement_v_count_37
  reg [1 : 0] replacement_v_count_37;
  wire [1 : 0] replacement_v_count_37_D_IN;
  wire replacement_v_count_37_EN;

  // register replacement_v_count_38
  reg [1 : 0] replacement_v_count_38;
  wire [1 : 0] replacement_v_count_38_D_IN;
  wire replacement_v_count_38_EN;

  // register replacement_v_count_39
  reg [1 : 0] replacement_v_count_39;
  wire [1 : 0] replacement_v_count_39_D_IN;
  wire replacement_v_count_39_EN;

  // register replacement_v_count_4
  reg [1 : 0] replacement_v_count_4;
  wire [1 : 0] replacement_v_count_4_D_IN;
  wire replacement_v_count_4_EN;

  // register replacement_v_count_40
  reg [1 : 0] replacement_v_count_40;
  wire [1 : 0] replacement_v_count_40_D_IN;
  wire replacement_v_count_40_EN;

  // register replacement_v_count_41
  reg [1 : 0] replacement_v_count_41;
  wire [1 : 0] replacement_v_count_41_D_IN;
  wire replacement_v_count_41_EN;

  // register replacement_v_count_42
  reg [1 : 0] replacement_v_count_42;
  wire [1 : 0] replacement_v_count_42_D_IN;
  wire replacement_v_count_42_EN;

  // register replacement_v_count_43
  reg [1 : 0] replacement_v_count_43;
  wire [1 : 0] replacement_v_count_43_D_IN;
  wire replacement_v_count_43_EN;

  // register replacement_v_count_44
  reg [1 : 0] replacement_v_count_44;
  wire [1 : 0] replacement_v_count_44_D_IN;
  wire replacement_v_count_44_EN;

  // register replacement_v_count_45
  reg [1 : 0] replacement_v_count_45;
  wire [1 : 0] replacement_v_count_45_D_IN;
  wire replacement_v_count_45_EN;

  // register replacement_v_count_46
  reg [1 : 0] replacement_v_count_46;
  wire [1 : 0] replacement_v_count_46_D_IN;
  wire replacement_v_count_46_EN;

  // register replacement_v_count_47
  reg [1 : 0] replacement_v_count_47;
  wire [1 : 0] replacement_v_count_47_D_IN;
  wire replacement_v_count_47_EN;

  // register replacement_v_count_48
  reg [1 : 0] replacement_v_count_48;
  wire [1 : 0] replacement_v_count_48_D_IN;
  wire replacement_v_count_48_EN;

  // register replacement_v_count_49
  reg [1 : 0] replacement_v_count_49;
  wire [1 : 0] replacement_v_count_49_D_IN;
  wire replacement_v_count_49_EN;

  // register replacement_v_count_5
  reg [1 : 0] replacement_v_count_5;
  wire [1 : 0] replacement_v_count_5_D_IN;
  wire replacement_v_count_5_EN;

  // register replacement_v_count_50
  reg [1 : 0] replacement_v_count_50;
  wire [1 : 0] replacement_v_count_50_D_IN;
  wire replacement_v_count_50_EN;

  // register replacement_v_count_51
  reg [1 : 0] replacement_v_count_51;
  wire [1 : 0] replacement_v_count_51_D_IN;
  wire replacement_v_count_51_EN;

  // register replacement_v_count_52
  reg [1 : 0] replacement_v_count_52;
  wire [1 : 0] replacement_v_count_52_D_IN;
  wire replacement_v_count_52_EN;

  // register replacement_v_count_53
  reg [1 : 0] replacement_v_count_53;
  wire [1 : 0] replacement_v_count_53_D_IN;
  wire replacement_v_count_53_EN;

  // register replacement_v_count_54
  reg [1 : 0] replacement_v_count_54;
  wire [1 : 0] replacement_v_count_54_D_IN;
  wire replacement_v_count_54_EN;

  // register replacement_v_count_55
  reg [1 : 0] replacement_v_count_55;
  wire [1 : 0] replacement_v_count_55_D_IN;
  wire replacement_v_count_55_EN;

  // register replacement_v_count_56
  reg [1 : 0] replacement_v_count_56;
  wire [1 : 0] replacement_v_count_56_D_IN;
  wire replacement_v_count_56_EN;

  // register replacement_v_count_57
  reg [1 : 0] replacement_v_count_57;
  wire [1 : 0] replacement_v_count_57_D_IN;
  wire replacement_v_count_57_EN;

  // register replacement_v_count_58
  reg [1 : 0] replacement_v_count_58;
  wire [1 : 0] replacement_v_count_58_D_IN;
  wire replacement_v_count_58_EN;

  // register replacement_v_count_59
  reg [1 : 0] replacement_v_count_59;
  wire [1 : 0] replacement_v_count_59_D_IN;
  wire replacement_v_count_59_EN;

  // register replacement_v_count_6
  reg [1 : 0] replacement_v_count_6;
  wire [1 : 0] replacement_v_count_6_D_IN;
  wire replacement_v_count_6_EN;

  // register replacement_v_count_60
  reg [1 : 0] replacement_v_count_60;
  wire [1 : 0] replacement_v_count_60_D_IN;
  wire replacement_v_count_60_EN;

  // register replacement_v_count_61
  reg [1 : 0] replacement_v_count_61;
  wire [1 : 0] replacement_v_count_61_D_IN;
  wire replacement_v_count_61_EN;

  // register replacement_v_count_62
  reg [1 : 0] replacement_v_count_62;
  wire [1 : 0] replacement_v_count_62_D_IN;
  wire replacement_v_count_62_EN;

  // register replacement_v_count_63
  reg [1 : 0] replacement_v_count_63;
  wire [1 : 0] replacement_v_count_63_D_IN;
  wire replacement_v_count_63_EN;

  // register replacement_v_count_7
  reg [1 : 0] replacement_v_count_7;
  wire [1 : 0] replacement_v_count_7_D_IN;
  wire replacement_v_count_7_EN;

  // register replacement_v_count_8
  reg [1 : 0] replacement_v_count_8;
  wire [1 : 0] replacement_v_count_8_D_IN;
  wire replacement_v_count_8_EN;

  // register replacement_v_count_9
  reg [1 : 0] replacement_v_count_9;
  wire [1 : 0] replacement_v_count_9_D_IN;
  wire replacement_v_count_9_EN;

  // register rg_fence_stall
  reg rg_fence_stall;
  wire rg_fence_stall_D_IN, rg_fence_stall_EN;

  // register rg_handling_miss
  reg rg_handling_miss;
  wire rg_handling_miss_D_IN, rg_handling_miss_EN;

  // register rg_performing_replay
  reg rg_performing_replay;
  wire rg_performing_replay_D_IN, rg_performing_replay_EN;

  // register rg_polling_mode
  reg rg_polling_mode;
  wire rg_polling_mode_D_IN, rg_polling_mode_EN;

  // register rg_recent_req
  reg [5 : 0] rg_recent_req;
  wire [5 : 0] rg_recent_req_D_IN;
  wire rg_recent_req_EN;

  // register v_reg_valid_0
  reg [3 : 0] v_reg_valid_0;
  wire [3 : 0] v_reg_valid_0_D_IN;
  wire v_reg_valid_0_EN;

  // register v_reg_valid_1
  reg [3 : 0] v_reg_valid_1;
  wire [3 : 0] v_reg_valid_1_D_IN;
  wire v_reg_valid_1_EN;

  // register v_reg_valid_10
  reg [3 : 0] v_reg_valid_10;
  wire [3 : 0] v_reg_valid_10_D_IN;
  wire v_reg_valid_10_EN;

  // register v_reg_valid_11
  reg [3 : 0] v_reg_valid_11;
  wire [3 : 0] v_reg_valid_11_D_IN;
  wire v_reg_valid_11_EN;

  // register v_reg_valid_12
  reg [3 : 0] v_reg_valid_12;
  wire [3 : 0] v_reg_valid_12_D_IN;
  wire v_reg_valid_12_EN;

  // register v_reg_valid_13
  reg [3 : 0] v_reg_valid_13;
  wire [3 : 0] v_reg_valid_13_D_IN;
  wire v_reg_valid_13_EN;

  // register v_reg_valid_14
  reg [3 : 0] v_reg_valid_14;
  wire [3 : 0] v_reg_valid_14_D_IN;
  wire v_reg_valid_14_EN;

  // register v_reg_valid_15
  reg [3 : 0] v_reg_valid_15;
  wire [3 : 0] v_reg_valid_15_D_IN;
  wire v_reg_valid_15_EN;

  // register v_reg_valid_16
  reg [3 : 0] v_reg_valid_16;
  wire [3 : 0] v_reg_valid_16_D_IN;
  wire v_reg_valid_16_EN;

  // register v_reg_valid_17
  reg [3 : 0] v_reg_valid_17;
  wire [3 : 0] v_reg_valid_17_D_IN;
  wire v_reg_valid_17_EN;

  // register v_reg_valid_18
  reg [3 : 0] v_reg_valid_18;
  wire [3 : 0] v_reg_valid_18_D_IN;
  wire v_reg_valid_18_EN;

  // register v_reg_valid_19
  reg [3 : 0] v_reg_valid_19;
  wire [3 : 0] v_reg_valid_19_D_IN;
  wire v_reg_valid_19_EN;

  // register v_reg_valid_2
  reg [3 : 0] v_reg_valid_2;
  wire [3 : 0] v_reg_valid_2_D_IN;
  wire v_reg_valid_2_EN;

  // register v_reg_valid_20
  reg [3 : 0] v_reg_valid_20;
  wire [3 : 0] v_reg_valid_20_D_IN;
  wire v_reg_valid_20_EN;

  // register v_reg_valid_21
  reg [3 : 0] v_reg_valid_21;
  wire [3 : 0] v_reg_valid_21_D_IN;
  wire v_reg_valid_21_EN;

  // register v_reg_valid_22
  reg [3 : 0] v_reg_valid_22;
  wire [3 : 0] v_reg_valid_22_D_IN;
  wire v_reg_valid_22_EN;

  // register v_reg_valid_23
  reg [3 : 0] v_reg_valid_23;
  wire [3 : 0] v_reg_valid_23_D_IN;
  wire v_reg_valid_23_EN;

  // register v_reg_valid_24
  reg [3 : 0] v_reg_valid_24;
  wire [3 : 0] v_reg_valid_24_D_IN;
  wire v_reg_valid_24_EN;

  // register v_reg_valid_25
  reg [3 : 0] v_reg_valid_25;
  wire [3 : 0] v_reg_valid_25_D_IN;
  wire v_reg_valid_25_EN;

  // register v_reg_valid_26
  reg [3 : 0] v_reg_valid_26;
  wire [3 : 0] v_reg_valid_26_D_IN;
  wire v_reg_valid_26_EN;

  // register v_reg_valid_27
  reg [3 : 0] v_reg_valid_27;
  wire [3 : 0] v_reg_valid_27_D_IN;
  wire v_reg_valid_27_EN;

  // register v_reg_valid_28
  reg [3 : 0] v_reg_valid_28;
  wire [3 : 0] v_reg_valid_28_D_IN;
  wire v_reg_valid_28_EN;

  // register v_reg_valid_29
  reg [3 : 0] v_reg_valid_29;
  wire [3 : 0] v_reg_valid_29_D_IN;
  wire v_reg_valid_29_EN;

  // register v_reg_valid_3
  reg [3 : 0] v_reg_valid_3;
  wire [3 : 0] v_reg_valid_3_D_IN;
  wire v_reg_valid_3_EN;

  // register v_reg_valid_30
  reg [3 : 0] v_reg_valid_30;
  wire [3 : 0] v_reg_valid_30_D_IN;
  wire v_reg_valid_30_EN;

  // register v_reg_valid_31
  reg [3 : 0] v_reg_valid_31;
  wire [3 : 0] v_reg_valid_31_D_IN;
  wire v_reg_valid_31_EN;

  // register v_reg_valid_32
  reg [3 : 0] v_reg_valid_32;
  wire [3 : 0] v_reg_valid_32_D_IN;
  wire v_reg_valid_32_EN;

  // register v_reg_valid_33
  reg [3 : 0] v_reg_valid_33;
  wire [3 : 0] v_reg_valid_33_D_IN;
  wire v_reg_valid_33_EN;

  // register v_reg_valid_34
  reg [3 : 0] v_reg_valid_34;
  wire [3 : 0] v_reg_valid_34_D_IN;
  wire v_reg_valid_34_EN;

  // register v_reg_valid_35
  reg [3 : 0] v_reg_valid_35;
  wire [3 : 0] v_reg_valid_35_D_IN;
  wire v_reg_valid_35_EN;

  // register v_reg_valid_36
  reg [3 : 0] v_reg_valid_36;
  wire [3 : 0] v_reg_valid_36_D_IN;
  wire v_reg_valid_36_EN;

  // register v_reg_valid_37
  reg [3 : 0] v_reg_valid_37;
  wire [3 : 0] v_reg_valid_37_D_IN;
  wire v_reg_valid_37_EN;

  // register v_reg_valid_38
  reg [3 : 0] v_reg_valid_38;
  wire [3 : 0] v_reg_valid_38_D_IN;
  wire v_reg_valid_38_EN;

  // register v_reg_valid_39
  reg [3 : 0] v_reg_valid_39;
  wire [3 : 0] v_reg_valid_39_D_IN;
  wire v_reg_valid_39_EN;

  // register v_reg_valid_4
  reg [3 : 0] v_reg_valid_4;
  wire [3 : 0] v_reg_valid_4_D_IN;
  wire v_reg_valid_4_EN;

  // register v_reg_valid_40
  reg [3 : 0] v_reg_valid_40;
  wire [3 : 0] v_reg_valid_40_D_IN;
  wire v_reg_valid_40_EN;

  // register v_reg_valid_41
  reg [3 : 0] v_reg_valid_41;
  wire [3 : 0] v_reg_valid_41_D_IN;
  wire v_reg_valid_41_EN;

  // register v_reg_valid_42
  reg [3 : 0] v_reg_valid_42;
  wire [3 : 0] v_reg_valid_42_D_IN;
  wire v_reg_valid_42_EN;

  // register v_reg_valid_43
  reg [3 : 0] v_reg_valid_43;
  wire [3 : 0] v_reg_valid_43_D_IN;
  wire v_reg_valid_43_EN;

  // register v_reg_valid_44
  reg [3 : 0] v_reg_valid_44;
  wire [3 : 0] v_reg_valid_44_D_IN;
  wire v_reg_valid_44_EN;

  // register v_reg_valid_45
  reg [3 : 0] v_reg_valid_45;
  wire [3 : 0] v_reg_valid_45_D_IN;
  wire v_reg_valid_45_EN;

  // register v_reg_valid_46
  reg [3 : 0] v_reg_valid_46;
  wire [3 : 0] v_reg_valid_46_D_IN;
  wire v_reg_valid_46_EN;

  // register v_reg_valid_47
  reg [3 : 0] v_reg_valid_47;
  wire [3 : 0] v_reg_valid_47_D_IN;
  wire v_reg_valid_47_EN;

  // register v_reg_valid_48
  reg [3 : 0] v_reg_valid_48;
  wire [3 : 0] v_reg_valid_48_D_IN;
  wire v_reg_valid_48_EN;

  // register v_reg_valid_49
  reg [3 : 0] v_reg_valid_49;
  wire [3 : 0] v_reg_valid_49_D_IN;
  wire v_reg_valid_49_EN;

  // register v_reg_valid_5
  reg [3 : 0] v_reg_valid_5;
  wire [3 : 0] v_reg_valid_5_D_IN;
  wire v_reg_valid_5_EN;

  // register v_reg_valid_50
  reg [3 : 0] v_reg_valid_50;
  wire [3 : 0] v_reg_valid_50_D_IN;
  wire v_reg_valid_50_EN;

  // register v_reg_valid_51
  reg [3 : 0] v_reg_valid_51;
  wire [3 : 0] v_reg_valid_51_D_IN;
  wire v_reg_valid_51_EN;

  // register v_reg_valid_52
  reg [3 : 0] v_reg_valid_52;
  wire [3 : 0] v_reg_valid_52_D_IN;
  wire v_reg_valid_52_EN;

  // register v_reg_valid_53
  reg [3 : 0] v_reg_valid_53;
  wire [3 : 0] v_reg_valid_53_D_IN;
  wire v_reg_valid_53_EN;

  // register v_reg_valid_54
  reg [3 : 0] v_reg_valid_54;
  wire [3 : 0] v_reg_valid_54_D_IN;
  wire v_reg_valid_54_EN;

  // register v_reg_valid_55
  reg [3 : 0] v_reg_valid_55;
  wire [3 : 0] v_reg_valid_55_D_IN;
  wire v_reg_valid_55_EN;

  // register v_reg_valid_56
  reg [3 : 0] v_reg_valid_56;
  wire [3 : 0] v_reg_valid_56_D_IN;
  wire v_reg_valid_56_EN;

  // register v_reg_valid_57
  reg [3 : 0] v_reg_valid_57;
  wire [3 : 0] v_reg_valid_57_D_IN;
  wire v_reg_valid_57_EN;

  // register v_reg_valid_58
  reg [3 : 0] v_reg_valid_58;
  wire [3 : 0] v_reg_valid_58_D_IN;
  wire v_reg_valid_58_EN;

  // register v_reg_valid_59
  reg [3 : 0] v_reg_valid_59;
  wire [3 : 0] v_reg_valid_59_D_IN;
  wire v_reg_valid_59_EN;

  // register v_reg_valid_6
  reg [3 : 0] v_reg_valid_6;
  wire [3 : 0] v_reg_valid_6_D_IN;
  wire v_reg_valid_6_EN;

  // register v_reg_valid_60
  reg [3 : 0] v_reg_valid_60;
  wire [3 : 0] v_reg_valid_60_D_IN;
  wire v_reg_valid_60_EN;

  // register v_reg_valid_61
  reg [3 : 0] v_reg_valid_61;
  wire [3 : 0] v_reg_valid_61_D_IN;
  wire v_reg_valid_61_EN;

  // register v_reg_valid_62
  reg [3 : 0] v_reg_valid_62;
  wire [3 : 0] v_reg_valid_62_D_IN;
  wire v_reg_valid_62_EN;

  // register v_reg_valid_63
  reg [3 : 0] v_reg_valid_63;
  wire [3 : 0] v_reg_valid_63_D_IN;
  wire v_reg_valid_63_EN;

  // register v_reg_valid_7
  reg [3 : 0] v_reg_valid_7;
  wire [3 : 0] v_reg_valid_7_D_IN;
  wire v_reg_valid_7_EN;

  // register v_reg_valid_8
  reg [3 : 0] v_reg_valid_8;
  wire [3 : 0] v_reg_valid_8_D_IN;
  wire v_reg_valid_8_EN;

  // register v_reg_valid_9
  reg [3 : 0] v_reg_valid_9;
  wire [3 : 0] v_reg_valid_9_D_IN;
  wire v_reg_valid_9_EN;

  // ports of submodule ff_core_request
  wire [66 : 0] ff_core_request_D_IN, ff_core_request_D_OUT;
  wire ff_core_request_CLR,
       ff_core_request_DEQ,
       ff_core_request_EMPTY_N,
       ff_core_request_ENQ,
       ff_core_request_FULL_N;

  // ports of submodule ff_pending_req
  wire [6 : 0] ff_pending_req_D_IN, ff_pending_req_D_OUT;
  wire ff_pending_req_CLR,
       ff_pending_req_DEQ,
       ff_pending_req_EMPTY_N,
       ff_pending_req_ENQ,
       ff_pending_req_FULL_N;

  // ports of submodule ff_read_mem_request
  wire [43 : 0] ff_read_mem_request_D_IN, ff_read_mem_request_D_OUT;
  wire ff_read_mem_request_CLR,
       ff_read_mem_request_DEQ,
       ff_read_mem_request_EMPTY_N,
       ff_read_mem_request_ENQ,
       ff_read_mem_request_FULL_N;

  // ports of submodule m_data
  reg [5 : 0] m_data_ma_request_index;
  reg [1 : 0] m_data_ma_request_way;
  wire [543 : 0] m_data_mv_read_response;
  wire [511 : 0] m_data_ma_request_dataline;
  wire [15 : 0] m_data_ma_request_banks;
  wire [3 : 0] m_data_mv_read_response_blocknum,
	       m_data_mv_read_response_wayselect;
  wire m_data_EN_ma_request, m_data_ma_request_read_write;

  // ports of submodule m_fillbuffer
  wire [544 : 0] m_fillbuffer_mv_release_info;
  wire [511 : 0] m_fillbuffer_mav_allocate_line_dataline;
  wire [65 : 0] m_fillbuffer_ma_fill_from_memory_mem_resp;
  wire [38 : 0] m_fillbuffer_mav_polling_response;
  wire [31 : 0] m_fillbuffer_mav_allocate_line_address,
		m_fillbuffer_mav_polling_response_address;
  wire [3 : 0] m_fillbuffer_ma_fill_from_memory_init_bank;
  wire [1 : 0] m_fillbuffer_ma_fill_from_memory_fbindex,
	       m_fillbuffer_mav_allocate_line,
	       m_fillbuffer_mav_polling_response_fbindex;
  wire m_fillbuffer_EN_ma_fill_from_memory,
       m_fillbuffer_EN_ma_perform_release,
       m_fillbuffer_EN_mav_allocate_line,
       m_fillbuffer_EN_mav_polling_response,
       m_fillbuffer_mav_allocate_line_from_ram,
       m_fillbuffer_mav_polling_response_fill,
       m_fillbuffer_mv_fbempty,
       m_fillbuffer_mv_fbfull,
       m_fillbuffer_mv_fbhead_valid;

  // ports of submodule m_tag
  reg [5 : 0] m_tag_ma_request_index;
  reg [1 : 0] m_tag_ma_request_way;
  wire [35 : 0] m_tag_mv_read_response;
  wire [31 : 0] m_tag_ma_request_address, m_tag_mv_read_response_address_in;
  wire [1 : 0] m_tag_mv_read_response_wayselect;
  wire m_tag_EN_ma_request, m_tag_ma_request_read_write;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_capture_io_response,
       CAN_FIRE_RL_rl_fence_operation,
       CAN_FIRE_RL_rl_fill_from_memory,
       CAN_FIRE_RL_rl_fillbuffer_check,
       CAN_FIRE_RL_rl_perform_replay,
       CAN_FIRE_RL_rl_ram_check,
       CAN_FIRE_RL_rl_release_from_fillbuffer,
       CAN_FIRE_RL_rl_response_to_core,
       CAN_FIRE_RL_rl_send_memory_request,
       CAN_FIRE___me_check_1,
       CAN_FIRE_get_core_resp_get,
       CAN_FIRE_get_read_mem_req_get,
       CAN_FIRE_ma_cache_enable,
       CAN_FIRE_ma_curr_priv,
       CAN_FIRE_put_core_req_put,
       CAN_FIRE_put_pa_from_tlb_put,
       CAN_FIRE_put_read_mem_resp_put,
       WILL_FIRE_RL_rl_capture_io_response,
       WILL_FIRE_RL_rl_fence_operation,
       WILL_FIRE_RL_rl_fill_from_memory,
       WILL_FIRE_RL_rl_fillbuffer_check,
       WILL_FIRE_RL_rl_perform_replay,
       WILL_FIRE_RL_rl_ram_check,
       WILL_FIRE_RL_rl_release_from_fillbuffer,
       WILL_FIRE_RL_rl_response_to_core,
       WILL_FIRE_RL_rl_send_memory_request,
       WILL_FIRE___me_check_1,
       WILL_FIRE_get_core_resp_get,
       WILL_FIRE_get_read_mem_req_get,
       WILL_FIRE_ma_cache_enable,
       WILL_FIRE_ma_curr_priv,
       WILL_FIRE_put_core_req_put,
       WILL_FIRE_put_pa_from_tlb_put,
       WILL_FIRE_put_read_mem_resp_put;

  // inputs to muxes for submodule ports
  wire [3 : 0] MUX_v_reg_valid_0_write_1__VAL_1;
  wire [1 : 0] MUX_replacement_v_count_0_write_1__VAL_1;
  wire MUX_m_data_ma_request_1__SEL_1,
       MUX_m_data_ma_request_1__SEL_2,
       MUX_replacement_v_count_0_write_1__SEL_1,
       MUX_replacement_v_count_1_write_1__SEL_1,
       MUX_replacement_v_count_10_write_1__SEL_1,
       MUX_replacement_v_count_11_write_1__SEL_1,
       MUX_replacement_v_count_12_write_1__SEL_1,
       MUX_replacement_v_count_13_write_1__SEL_1,
       MUX_replacement_v_count_14_write_1__SEL_1,
       MUX_replacement_v_count_15_write_1__SEL_1,
       MUX_replacement_v_count_16_write_1__SEL_1,
       MUX_replacement_v_count_17_write_1__SEL_1,
       MUX_replacement_v_count_18_write_1__SEL_1,
       MUX_replacement_v_count_19_write_1__SEL_1,
       MUX_replacement_v_count_2_write_1__SEL_1,
       MUX_replacement_v_count_20_write_1__SEL_1,
       MUX_replacement_v_count_21_write_1__SEL_1,
       MUX_replacement_v_count_22_write_1__SEL_1,
       MUX_replacement_v_count_23_write_1__SEL_1,
       MUX_replacement_v_count_24_write_1__SEL_1,
       MUX_replacement_v_count_25_write_1__SEL_1,
       MUX_replacement_v_count_26_write_1__SEL_1,
       MUX_replacement_v_count_27_write_1__SEL_1,
       MUX_replacement_v_count_28_write_1__SEL_1,
       MUX_replacement_v_count_29_write_1__SEL_1,
       MUX_replacement_v_count_3_write_1__SEL_1,
       MUX_replacement_v_count_30_write_1__SEL_1,
       MUX_replacement_v_count_31_write_1__SEL_1,
       MUX_replacement_v_count_32_write_1__SEL_1,
       MUX_replacement_v_count_33_write_1__SEL_1,
       MUX_replacement_v_count_34_write_1__SEL_1,
       MUX_replacement_v_count_35_write_1__SEL_1,
       MUX_replacement_v_count_36_write_1__SEL_1,
       MUX_replacement_v_count_37_write_1__SEL_1,
       MUX_replacement_v_count_38_write_1__SEL_1,
       MUX_replacement_v_count_39_write_1__SEL_1,
       MUX_replacement_v_count_4_write_1__SEL_1,
       MUX_replacement_v_count_40_write_1__SEL_1,
       MUX_replacement_v_count_41_write_1__SEL_1,
       MUX_replacement_v_count_42_write_1__SEL_1,
       MUX_replacement_v_count_43_write_1__SEL_1,
       MUX_replacement_v_count_44_write_1__SEL_1,
       MUX_replacement_v_count_45_write_1__SEL_1,
       MUX_replacement_v_count_46_write_1__SEL_1,
       MUX_replacement_v_count_47_write_1__SEL_1,
       MUX_replacement_v_count_48_write_1__SEL_1,
       MUX_replacement_v_count_49_write_1__SEL_1,
       MUX_replacement_v_count_5_write_1__SEL_1,
       MUX_replacement_v_count_50_write_1__SEL_1,
       MUX_replacement_v_count_51_write_1__SEL_1,
       MUX_replacement_v_count_52_write_1__SEL_1,
       MUX_replacement_v_count_53_write_1__SEL_1,
       MUX_replacement_v_count_54_write_1__SEL_1,
       MUX_replacement_v_count_55_write_1__SEL_1,
       MUX_replacement_v_count_56_write_1__SEL_1,
       MUX_replacement_v_count_57_write_1__SEL_1,
       MUX_replacement_v_count_58_write_1__SEL_1,
       MUX_replacement_v_count_59_write_1__SEL_1,
       MUX_replacement_v_count_6_write_1__SEL_1,
       MUX_replacement_v_count_60_write_1__SEL_1,
       MUX_replacement_v_count_61_write_1__SEL_1,
       MUX_replacement_v_count_62_write_1__SEL_1,
       MUX_replacement_v_count_63_write_1__SEL_1,
       MUX_replacement_v_count_7_write_1__SEL_1,
       MUX_replacement_v_count_8_write_1__SEL_1,
       MUX_replacement_v_count_9_write_1__SEL_1,
       MUX_rg_performing_replay_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d1065;
  reg TASK_testplusargs___d1066;
  reg TASK_testplusargs___d1067;
  reg [63 : 0] v__h66952;
  reg TASK_testplusargs___d1079;
  reg TASK_testplusargs___d1080;
  reg TASK_testplusargs___d1081;
  reg [63 : 0] v__h67344;
  reg TASK_testplusargs___d37;
  reg TASK_testplusargs___d38;
  reg TASK_testplusargs___d39;
  reg [63 : 0] v__h21008;
  reg TASK_testplusargs___d49;
  reg TASK_testplusargs___d50;
  reg TASK_testplusargs___d51;
  reg [63 : 0] v__h21241;
  reg TASK_testplusargs___d58;
  reg TASK_testplusargs___d59;
  reg TASK_testplusargs___d60;
  reg [63 : 0] v__h21412;
  reg TASK_testplusargs___d181;
  reg TASK_testplusargs___d182;
  reg TASK_testplusargs___d183;
  reg [63 : 0] v__h23631;
  reg TASK_testplusargs___d188;
  reg TASK_testplusargs___d189;
  reg TASK_testplusargs___d190;
  reg [63 : 0] v__h23784;
  reg TASK_testplusargs___d196;
  reg TASK_testplusargs___d197;
  reg TASK_testplusargs___d198;
  reg [63 : 0] v__h23892;
  reg TASK_testplusargs___d205;
  reg TASK_testplusargs___d206;
  reg TASK_testplusargs___d207;
  reg [63 : 0] v__h24109;
  reg TASK_testplusargs___d226;
  reg TASK_testplusargs___d227;
  reg TASK_testplusargs___d228;
  reg [63 : 0] v__h24306;
  reg TASK_testplusargs___d236;
  reg TASK_testplusargs___d237;
  reg TASK_testplusargs___d238;
  reg [63 : 0] v__h24530;
  reg TASK_testplusargs___d244;
  reg TASK_testplusargs___d245;
  reg TASK_testplusargs___d246;
  reg [63 : 0] v__h24703;
  reg TASK_testplusargs___d252;
  reg TASK_testplusargs___d253;
  reg TASK_testplusargs___d254;
  reg [63 : 0] v__h24827;
  reg TASK_testplusargs___d778;
  reg TASK_testplusargs___d779;
  reg TASK_testplusargs___d780;
  reg [63 : 0] v__h54932;
  reg TASK_testplusargs___d801;
  reg TASK_testplusargs___d802;
  reg TASK_testplusargs___d803;
  reg [63 : 0] v__h55228;
  reg TASK_testplusargs___d12;
  reg TASK_testplusargs___d13;
  reg TASK_testplusargs___d14;
  reg [63 : 0] v__h10598;
  reg TASK_testplusargs___d299;
  reg TASK_testplusargs___d300;
  reg TASK_testplusargs___d301;
  reg [63 : 0] v__h25272;
  reg TASK_testplusargs___d306;
  reg TASK_testplusargs___d307;
  reg TASK_testplusargs___d308;
  reg [63 : 0] v__h25471;
  reg TASK_testplusargs___d331;
  reg TASK_testplusargs___d332;
  reg TASK_testplusargs___d333;
  reg [63 : 0] v__h25825;
  reg TASK_testplusargs___d698;
  reg TASK_testplusargs___d699;
  reg TASK_testplusargs___d700;
  reg [63 : 0] v__h54014;
  reg TASK_testplusargs___d815;
  reg TASK_testplusargs___d816;
  reg TASK_testplusargs___d817;
  reg [63 : 0] v__h55473;
  reg TASK_testplusargs___d745;
  reg TASK_testplusargs___d746;
  reg TASK_testplusargs___d747;
  reg [63 : 0] v__h54290;
  reg TASK_testplusargs___d755;
  reg TASK_testplusargs___d756;
  reg TASK_testplusargs___d757;
  reg [63 : 0] v__h54503;
  reg TASK_testplusargs___d762;
  reg TASK_testplusargs___d763;
  reg TASK_testplusargs___d764;
  reg [63 : 0] v__h54660;
  reg TASK_testplusargs___d840;
  reg TASK_testplusargs___d841;
  reg TASK_testplusargs___d842;
  reg [63 : 0] v__h57895;
  reg TASK_testplusargs___d1056;
  reg TASK_testplusargs___d1057;
  reg TASK_testplusargs___d1058;
  reg [63 : 0] v__h62008;
  reg m_fillbuffer_mav_polling_response_11_BIT_0_19__ETC___d241;
  reg NOT_m_fillbuffer_mav_polling_response_11_BIT_0_ETC___d249;
  reg TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d320;
  reg TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d324;
  reg TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d45;
  reg TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d47;
  reg TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d216;
  reg TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d218;
  reg TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d220;
  reg TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d222;
  reg m_fillbuffer_mav_polling_response_11_BIT_1_15__ETC___d231;
  reg NOT_m_fillbuffer_mav_polling_response_11_BIT_1_ETC___d257;
  reg IF_wr_ram_state_whas__72_THEN_wr_ram_state_wge_ETC___d304;
  reg IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d311;
  reg IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d336;
  reg TASK_testplusargs_98_OR_TASK_testplusargs_99_A_ETC___d718;
  reg TASK_testplusargs_98_OR_TASK_testplusargs_99_A_ETC___d719;
  reg wr_cache_enable_wget__69_AND_NOT_ff_from_tlb_r_ETC___d750;
  reg NOT_wr_cache_enable_wget__69_33_OR_ff_from_tlb_ETC___d760;
  reg wr_cache_enable_wget__69_AND_NOT_ff_from_tlb_r_ETC___d767;
  reg TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d786;
  reg TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d788;
  reg TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d790;
  reg TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d792;
  reg TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d807;
  reg TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d808;
  reg TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d809;
  reg TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d810;
  reg NOT_m_fillbuffer_mv_release_info__12_BIT_0_24__ETC___d1061;
  reg TASK_testplusargs_065_OR_TASK_testplusargs_066_ETC___d1073;
  reg TASK_testplusargs_065_OR_TASK_testplusargs_066_ETC___d1075;
  // synopsys translate_on

  // remaining internal signals
  reg [3 : 0] SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131,
	      valid__h55561;
  reg [1 : 0] SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913;
  wire [63 : 0] response_word__h55061;
  wire [31 : 0] lv_response_word__h26082,
		lv_response_word__h26098,
		phyaddr__h20938,
		phyaddr__h54097,
		response_word__h21685;
  wire [7 : 0] x_burst_len__h54120;
  wire [6 : 0] fn_pmp_lookup___d146;
  wire [5 : 0] lv_cause__h20940,
	       lv_response_cause__h21706,
	       lv_response_cause__h26084,
	       set_index__h67079,
	       x__h55087;
  wire [4 : 0] x__h21710;
  wire [3 : 0] lv_hitmask__h21344, x__h59386;
  wire [2 : 0] burst_size__h54094,
	       x__h23344,
	       x__h23356,
	       x__h23368,
	       y__h23345,
	       y__h23357,
	       y__h23369;
  wire [1 : 0] IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279,
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269,
	       IF_wr_ram_state_whas__72_THEN_wr_ram_state_wge_ETC___d274,
	       lv_response_epochs__h26085,
	       v__h55558,
	       x__h24963,
	       x__h24975,
	       y__h24964,
	       y__h24976;
  wire IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d346,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d358,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d366,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d375,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d383,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d392,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d400,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d409,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d417,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d426,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d434,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d443,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d451,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d460,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d468,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d477,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d485,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d494,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d502,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d511,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d519,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d528,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d536,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d545,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d553,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d562,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d570,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d579,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d587,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d596,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d604,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d613,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d621,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d631,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d639,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d648,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d656,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d665,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d673,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d682,
       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d690,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d343,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d353,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d356,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d364,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d373,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d381,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d390,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d398,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d407,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d415,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d424,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d432,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d441,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d449,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d458,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d466,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d475,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d483,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d492,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d500,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d509,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d517,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d526,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d534,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d543,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d551,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d560,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d568,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d577,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d585,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d594,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d602,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d611,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d619,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d629,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d637,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d646,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d654,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d663,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d671,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d680,
       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d688,
       NOT_0_CONCAT_m_tag_mv_read_response_ff_from_tl_ETC___d180,
       NOT_IF_wr_fb_state_whas__77_THEN_wr_fb_state_w_ETC___d711,
       NOT_IF_wr_nc_state_whas__67_THEN_wr_nc_state_w_ETC___d707,
       NOT_IF_wr_ram_state_whas__72_THEN_wr_ram_state_ETC___d715,
       NOT_ff_core_request_notEmpty__22_23_AND_NOT_wr_ETC___d833,
       b__h24983,
       ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734,
       m_fillbuffer_mv_release_info__12_BITS_12_TO_7__ETC___d831,
       wr_fault_whas__64_AND_wr_fault_wget__65_66_OR__ETC___d276;

  // action method put_core_req_put
  assign RDY_put_core_req_put =
	     !ff_core_response_rv[41] && !rg_fence_stall &&
	     !m_fillbuffer_mv_fbfull &&
	     !rg_performing_replay &&
	     EN_ma_cache_enable &&
	     ff_core_request_FULL_N ;
  assign CAN_FIRE_put_core_req_put = RDY_put_core_req_put ;
  assign WILL_FIRE_put_core_req_put = EN_put_core_req_put ;

  // actionvalue method get_core_resp_get
  assign get_core_resp_get = ff_core_response_rv_port1__read[40:0] ;
  assign RDY_get_core_resp_get = ff_core_response_rv_port1__read[41] ;
  assign CAN_FIRE_get_core_resp_get = ff_core_response_rv_port1__read[41] ;
  assign WILL_FIRE_get_core_resp_get = EN_get_core_resp_get ;

  // actionvalue method get_read_mem_req_get
  assign get_read_mem_req_get = ff_read_mem_request_D_OUT ;
  assign RDY_get_read_mem_req_get = ff_read_mem_request_EMPTY_N ;
  assign CAN_FIRE_get_read_mem_req_get = ff_read_mem_request_EMPTY_N ;
  assign WILL_FIRE_get_read_mem_req_get = EN_get_read_mem_req_get ;

  // action method put_read_mem_resp_put
  assign RDY_put_read_mem_resp_put = !ff_read_mem_response_rv[66] ;
  assign CAN_FIRE_put_read_mem_resp_put = !ff_read_mem_response_rv[66] ;
  assign WILL_FIRE_put_read_mem_resp_put = EN_put_read_mem_resp_put ;

  // action method put_pa_from_tlb_put
  assign RDY_put_pa_from_tlb_put = !ff_from_tlb_rv[39] ;
  assign CAN_FIRE_put_pa_from_tlb_put = !ff_from_tlb_rv[39] ;
  assign WILL_FIRE_put_pa_from_tlb_put = EN_put_pa_from_tlb_put ;

  // value method mv_perf_counters
  assign mv_perf_counters =
	     { EN_put_core_req_put,
	       wr_total_io_reads_whas,
	       wr_total_read_miss_whas,
	       MUX_m_data_ma_request_1__SEL_2,
	       wr_total_read_fb_hits_whas } ;
  assign RDY_mv_perf_counters = 1'd1 ;

  // action method ma_cache_enable
  assign RDY_ma_cache_enable = 1'd1 ;
  assign CAN_FIRE_ma_cache_enable = 1'd1 ;
  assign WILL_FIRE_ma_cache_enable = EN_ma_cache_enable ;

  // action method ma_curr_priv
  assign RDY_ma_curr_priv = 1'd1 ;
  assign CAN_FIRE_ma_curr_priv = 1'd1 ;
  assign WILL_FIRE_ma_curr_priv = EN_ma_curr_priv ;

  // value method mv_cache_available
  assign mv_cache_available =
	     !ff_core_response_rv[41] && ff_core_request_FULL_N &&
	     !rg_fence_stall &&
	     !m_fillbuffer_mv_fbfull &&
	     !rg_performing_replay ;
  assign RDY_mv_cache_available = 1'd1 ;

  // submodule ff_core_request
  FIFO2 #(.width(32'd67), .guarded(1'd1)) ff_core_request(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(ff_core_request_D_IN),
							  .ENQ(ff_core_request_ENQ),
							  .DEQ(ff_core_request_DEQ),
							  .CLR(ff_core_request_CLR),
							  .D_OUT(ff_core_request_D_OUT),
							  .FULL_N(ff_core_request_FULL_N),
							  .EMPTY_N(ff_core_request_EMPTY_N));

  // submodule ff_pending_req
  FIFO2 #(.width(32'd7), .guarded(1'd0)) ff_pending_req(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ff_pending_req_D_IN),
							.ENQ(ff_pending_req_ENQ),
							.DEQ(ff_pending_req_DEQ),
							.CLR(ff_pending_req_CLR),
							.D_OUT(ff_pending_req_D_OUT),
							.FULL_N(ff_pending_req_FULL_N),
							.EMPTY_N(ff_pending_req_EMPTY_N));

  // submodule ff_read_mem_request
  FIFO2 #(.width(32'd44), .guarded(1'd1)) ff_read_mem_request(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ff_read_mem_request_D_IN),
							      .ENQ(ff_read_mem_request_ENQ),
							      .DEQ(ff_read_mem_request_DEQ),
							      .CLR(ff_read_mem_request_CLR),
							      .D_OUT(ff_read_mem_request_D_OUT),
							      .FULL_N(ff_read_mem_request_FULL_N),
							      .EMPTY_N(ff_read_mem_request_EMPTY_N));

  // submodule m_data
  mkicache_data #(.id(id)) m_data(.CLK(CLK),
				  .RST_N(RST_N),
				  .ma_request_banks(m_data_ma_request_banks),
				  .ma_request_dataline(m_data_ma_request_dataline),
				  .ma_request_index(m_data_ma_request_index),
				  .ma_request_read_write(m_data_ma_request_read_write),
				  .ma_request_way(m_data_ma_request_way),
				  .mv_read_response_blocknum(m_data_mv_read_response_blocknum),
				  .mv_read_response_wayselect(m_data_mv_read_response_wayselect),
				  .EN_ma_request(m_data_EN_ma_request),
				  .RDY_ma_request(),
				  .mv_read_response(m_data_mv_read_response),
				  .RDY_mv_read_response());

  // submodule m_fillbuffer
  mkicache_fb_v2 #(.id(id)) m_fillbuffer(.CLK(CLK),
					 .RST_N(RST_N),
					 .ma_fill_from_memory_fbindex(m_fillbuffer_ma_fill_from_memory_fbindex),
					 .ma_fill_from_memory_init_bank(m_fillbuffer_ma_fill_from_memory_init_bank),
					 .ma_fill_from_memory_mem_resp(m_fillbuffer_ma_fill_from_memory_mem_resp),
					 .mav_allocate_line_address(m_fillbuffer_mav_allocate_line_address),
					 .mav_allocate_line_dataline(m_fillbuffer_mav_allocate_line_dataline),
					 .mav_allocate_line_from_ram(m_fillbuffer_mav_allocate_line_from_ram),
					 .mav_polling_response_address(m_fillbuffer_mav_polling_response_address),
					 .mav_polling_response_fbindex(m_fillbuffer_mav_polling_response_fbindex),
					 .mav_polling_response_fill(m_fillbuffer_mav_polling_response_fill),
					 .EN_mav_allocate_line(m_fillbuffer_EN_mav_allocate_line),
					 .EN_ma_fill_from_memory(m_fillbuffer_EN_ma_fill_from_memory),
					 .EN_ma_perform_release(m_fillbuffer_EN_ma_perform_release),
					 .EN_mav_polling_response(m_fillbuffer_EN_mav_polling_response),
					 .mv_fbfull(m_fillbuffer_mv_fbfull),
					 .mv_fbempty(m_fillbuffer_mv_fbempty),
					 .mv_fbhead_valid(m_fillbuffer_mv_fbhead_valid),
					 .mav_allocate_line(m_fillbuffer_mav_allocate_line),
					 .RDY_mav_allocate_line(),
					 .RDY_ma_fill_from_memory(),
					 .mv_release_info(m_fillbuffer_mv_release_info),
					 .RDY_mv_release_info(),
					 .RDY_ma_perform_release(),
					 .mav_polling_response(m_fillbuffer_mav_polling_response),
					 .RDY_mav_polling_response());

  // submodule m_tag
  mkicache_tag #(.id(id)) m_tag(.CLK(CLK),
				.RST_N(RST_N),
				.ma_request_address(m_tag_ma_request_address),
				.ma_request_index(m_tag_ma_request_index),
				.ma_request_read_write(m_tag_ma_request_read_write),
				.ma_request_way(m_tag_ma_request_way),
				.mv_read_response_address_in(m_tag_mv_read_response_address_in),
				.mv_read_response_wayselect(m_tag_mv_read_response_wayselect),
				.EN_ma_request(m_tag_EN_ma_request),
				.RDY_ma_request(),
				.mv_read_response(m_tag_mv_read_response),
				.RDY_mv_read_response());

  // rule RL_rl_ram_check
  assign CAN_FIRE_RL_rl_ram_check =
	     ff_from_tlb_rv_port1__read[39] && ff_core_request_EMPTY_N &&
	     EN_ma_curr_priv &&
	     EN_ma_cache_enable &&
	     !ff_core_request_D_OUT[2] &&
	     !rg_handling_miss &&
	     !rg_performing_replay &&
	     !rg_polling_mode &&
	     !m_fillbuffer_mv_fbfull ;
  assign WILL_FIRE_RL_rl_ram_check = CAN_FIRE_RL_rl_ram_check ;

  // rule RL_rl_fillbuffer_check
  assign CAN_FIRE_RL_rl_fillbuffer_check =
	     ff_from_tlb_rv_port1__read[39] && ff_core_request_EMPTY_N &&
	     !ff_core_request_D_OUT[2] ;
  assign WILL_FIRE_RL_rl_fillbuffer_check = CAN_FIRE_RL_rl_fillbuffer_check ;

  // rule RL_rl_fill_from_memory
  assign CAN_FIRE_RL_rl_fill_from_memory =
	     ff_read_mem_response_rv_port1__read[66] &&
	     ff_pending_req_EMPTY_N &&
	     !ff_pending_req_D_OUT[0] ;
  assign WILL_FIRE_RL_rl_fill_from_memory = CAN_FIRE_RL_rl_fill_from_memory ;

  // rule RL_rl_capture_io_response
  assign CAN_FIRE_RL_rl_capture_io_response =
	     ff_read_mem_response_rv_port1__read[66] &&
	     ff_core_request_EMPTY_N &&
	     ff_pending_req_EMPTY_N &&
	     ff_pending_req_D_OUT[0] ;
  assign WILL_FIRE_RL_rl_capture_io_response =
	     CAN_FIRE_RL_rl_capture_io_response ;

  // rule RL_rl_fence_operation
  assign CAN_FIRE_RL_rl_fence_operation =
	     ff_core_request_EMPTY_N && ff_core_request_D_OUT[2] &&
	     rg_fence_stall &&
	     m_fillbuffer_mv_fbempty &&
	     !rg_performing_replay ;
  assign WILL_FIRE_RL_rl_fence_operation = CAN_FIRE_RL_rl_fence_operation ;

  // rule RL_rl_response_to_core
  assign CAN_FIRE_RL_rl_response_to_core =
	     ff_core_request_EMPTY_N && ff_from_tlb_rv_port1__read[39] &&
	     !ff_core_response_rv[41] &&
	     !ff_core_request_D_OUT[2] &&
	     (wr_fault_whas__64_AND_wr_fault_wget__65_66_OR__ETC___d276 ||
	      IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	      2'd1) ;
  assign WILL_FIRE_RL_rl_response_to_core = CAN_FIRE_RL_rl_response_to_core ;

  // rule RL_rl_perform_replay
  assign CAN_FIRE_RL_rl_perform_replay = rg_performing_replay ;
  assign WILL_FIRE_RL_rl_perform_replay = rg_performing_replay ;

  // rule RL_rl_send_memory_request
  assign CAN_FIRE_RL_rl_send_memory_request =
	     ff_from_tlb_rv_port1__read[39] && EN_ma_cache_enable &&
	     ff_read_mem_request_FULL_N &&
	     ff_core_request_EMPTY_N &&
	     IF_wr_ram_state_whas__72_THEN_wr_ram_state_wge_ETC___d274 ==
	     2'd0 &&
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd0 &&
	     !m_fillbuffer_mv_fbfull &&
	     !wr_fault_whas &&
	     !ff_core_request_D_OUT[2] &&
	     ff_pending_req_FULL_N ;
  assign WILL_FIRE_RL_rl_send_memory_request =
	     CAN_FIRE_RL_rl_send_memory_request ;

  // rule RL_rl_release_from_fillbuffer
  assign CAN_FIRE_RL_rl_release_from_fillbuffer =
	     (m_fillbuffer_mv_fbfull || rg_fence_stall ||
	      NOT_ff_core_request_notEmpty__22_23_AND_NOT_wr_ETC___d833) &&
	     !m_fillbuffer_mv_fbempty &&
	     m_fillbuffer_mv_fbhead_valid &&
	     !rg_performing_replay ;
  assign WILL_FIRE_RL_rl_release_from_fillbuffer =
	     CAN_FIRE_RL_rl_release_from_fillbuffer && !EN_put_core_req_put ;

  // rule __me_check_1
  assign CAN_FIRE___me_check_1 = 1'b1 ;
  assign WILL_FIRE___me_check_1 = 1'b1 ;

  // inputs to muxes for submodule ports
  assign MUX_m_data_ma_request_1__SEL_1 =
	     EN_put_core_req_put && ma_cache_enable_c ;
  assign MUX_m_data_ma_request_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_0_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd0 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_1_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd1 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_10_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd10 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_11_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd11 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_12_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd12 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_13_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd13 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_14_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd14 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_15_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd15 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_16_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd16 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_17_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd17 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_18_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd18 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_19_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd19 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_2_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd2 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_20_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd20 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_21_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd21 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_22_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd22 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_23_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd23 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_24_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd24 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_25_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd25 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_26_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd26 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_27_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd27 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_28_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd28 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_29_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd29 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_3_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd3 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_30_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd30 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_31_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd31 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_32_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd32 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_33_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd33 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_34_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd34 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_35_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd35 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_36_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd36 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_37_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd37 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_38_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd38 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_39_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd39 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_4_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd4 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_40_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd40 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_41_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd41 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_42_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd42 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_43_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd43 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_44_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd44 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_45_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd45 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_46_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd46 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_47_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd47 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_48_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd48 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_49_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd49 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_5_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd5 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_50_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd50 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_51_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd51 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_52_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd52 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_53_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd53 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_54_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd54 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_55_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd55 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_56_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd56 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_57_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd57 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_58_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd58 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_59_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd59 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_6_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd6 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_60_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd60 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_61_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd61 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_62_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd62 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_63_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd63 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_7_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd7 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_8_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd8 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_replacement_v_count_9_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd9 &&
	     !m_fillbuffer_mv_release_info[0] ;
  assign MUX_rg_performing_replay_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[0] &&
	     m_fillbuffer_mv_release_info__12_BITS_12_TO_7__ETC___d831 ;
  assign MUX_replacement_v_count_0_write_1__VAL_1 =
	     SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 -
	     2'd1 ;
  assign MUX_v_reg_valid_0_write_1__VAL_1 = valid__h55561 | x__h59386 ;

  // inlined wires
  assign wr_fault_whas =
	     WILL_FIRE_RL_rl_ram_check &&
	     (fn_pmp_lookup___d146[6] || ff_from_tlb_rv_port1__read[6]) ;
  assign wr_ram_state_wget =
	     (lv_hitmask__h21344 != 4'd0 && ma_cache_enable_c) ? 2'd1 : 2'd0 ;
  assign wr_ram_state_whas =
	     WILL_FIRE_RL_rl_ram_check && !fn_pmp_lookup___d146[6] &&
	     !ff_from_tlb_rv_port1__read[6] ;
  assign wr_ram_response_wget =
	     { response_word__h21685,
	       fn_pmp_lookup___d146[6] || ff_from_tlb_rv_port1__read[6],
	       lv_response_cause__h21706,
	       ff_core_request_D_OUT[1:0] } ;
  assign wr_fb_state_wget =
	     m_fillbuffer_mav_polling_response[1] ?
	       (m_fillbuffer_mav_polling_response[0] ? 2'd1 : 2'd2) :
	       2'd0 ;
  assign wr_fb_response_wget =
	     { m_fillbuffer_mav_polling_response[37:6],
	       m_fillbuffer_mav_polling_response[38],
	       6'd1,
	       ff_core_request_D_OUT[1:0] } ;
  assign wr_fb_response_whas =
	     WILL_FIRE_RL_rl_fillbuffer_check &&
	     m_fillbuffer_mav_polling_response[1] &&
	     m_fillbuffer_mav_polling_response[0] ;
  assign wr_nc_response_wget =
	     { response_word__h55061[31:0],
	       ff_read_mem_response_rv_port1__read[0],
	       6'd1,
	       ff_core_request_D_OUT[1:0] } ;
  assign wr_total_io_reads_whas =
	     WILL_FIRE_RL_rl_send_memory_request &&
	     (!ma_cache_enable_c ||
	      ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734) ;
  assign wr_total_read_miss_whas =
	     WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734 ;
  assign wr_total_read_fb_hits_whas =
	     WILL_FIRE_RL_rl_response_to_core &&
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     rg_handling_miss ;
  assign _mav_allocate_line_RL_rl_send_memory_request_EN_m_fillbuffer_wget =
	     ma_cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734 ;
  assign ff_core_response_rv_port0__write_1 =
	     { 1'd1,
	       lv_response_word__h26082,
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d353,
	       lv_response_cause__h26084,
	       lv_response_epochs__h26085 } ;
  assign ff_core_response_rv_port1__read =
	     CAN_FIRE_RL_rl_response_to_core ?
	       ff_core_response_rv_port0__write_1 :
	       ff_core_response_rv ;
  assign ff_core_response_rv_port1__write_1 =
	     { 1'd0,
	       41'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_core_response_rv_port2__read =
	     EN_get_core_resp_get ?
	       ff_core_response_rv_port1__write_1 :
	       ff_core_response_rv_port1__read ;
  assign ff_read_mem_response_rv_port0__write_1 =
	     { 1'd1, put_read_mem_resp_put } ;
  assign ff_read_mem_response_rv_port1__read =
	     EN_put_read_mem_resp_put ?
	       ff_read_mem_response_rv_port0__write_1 :
	       ff_read_mem_response_rv ;
  assign ff_read_mem_response_rv_EN_port1__write =
	     WILL_FIRE_RL_rl_capture_io_response ||
	     WILL_FIRE_RL_rl_fill_from_memory ;
  assign ff_read_mem_response_rv_port1__write_1 =
	     { 1'd0,
	       66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_read_mem_response_rv_port2__read =
	     ff_read_mem_response_rv_EN_port1__write ?
	       ff_read_mem_response_rv_port1__write_1 :
	       ff_read_mem_response_rv_port1__read ;
  assign ff_from_tlb_rv_port0__write_1 = { 1'd1, put_pa_from_tlb_put } ;
  assign ff_from_tlb_rv_port1__read =
	     EN_put_pa_from_tlb_put ?
	       ff_from_tlb_rv_port0__write_1 :
	       ff_from_tlb_rv ;
  assign ff_from_tlb_rv_port1__write_1 =
	     { 1'd0,
	       39'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_from_tlb_rv_port2__read =
	     CAN_FIRE_RL_rl_response_to_core ?
	       ff_from_tlb_rv_port1__write_1 :
	       ff_from_tlb_rv_port1__read ;

  // register ff_core_response_rv
  assign ff_core_response_rv_D_IN = ff_core_response_rv_port2__read ;
  assign ff_core_response_rv_EN = 1'b1 ;

  // register ff_from_tlb_rv
  assign ff_from_tlb_rv_D_IN = ff_from_tlb_rv_port2__read ;
  assign ff_from_tlb_rv_EN = 1'b1 ;

  // register ff_read_mem_response_rv
  assign ff_read_mem_response_rv_D_IN = ff_read_mem_response_rv_port2__read ;
  assign ff_read_mem_response_rv_EN = 1'b1 ;

  // register replacement_v_count_0
  assign replacement_v_count_0_D_IN =
	     MUX_replacement_v_count_0_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_0_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd0 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_1
  assign replacement_v_count_1_D_IN =
	     MUX_replacement_v_count_1_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_1_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd1 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_10
  assign replacement_v_count_10_D_IN =
	     MUX_replacement_v_count_10_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_10_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd10 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_11
  assign replacement_v_count_11_D_IN =
	     MUX_replacement_v_count_11_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_11_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd11 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_12
  assign replacement_v_count_12_D_IN =
	     MUX_replacement_v_count_12_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_12_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd12 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_13
  assign replacement_v_count_13_D_IN =
	     MUX_replacement_v_count_13_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_13_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd13 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_14
  assign replacement_v_count_14_D_IN =
	     MUX_replacement_v_count_14_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_14_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd14 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_15
  assign replacement_v_count_15_D_IN =
	     MUX_replacement_v_count_15_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_15_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd15 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_16
  assign replacement_v_count_16_D_IN =
	     MUX_replacement_v_count_16_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_16_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd16 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_17
  assign replacement_v_count_17_D_IN =
	     MUX_replacement_v_count_17_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_17_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd17 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_18
  assign replacement_v_count_18_D_IN =
	     MUX_replacement_v_count_18_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_18_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd18 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_19
  assign replacement_v_count_19_D_IN =
	     MUX_replacement_v_count_19_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_19_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd19 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_2
  assign replacement_v_count_2_D_IN =
	     MUX_replacement_v_count_2_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_2_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd2 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_20
  assign replacement_v_count_20_D_IN =
	     MUX_replacement_v_count_20_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_20_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd20 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_21
  assign replacement_v_count_21_D_IN =
	     MUX_replacement_v_count_21_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_21_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd21 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_22
  assign replacement_v_count_22_D_IN =
	     MUX_replacement_v_count_22_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_22_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd22 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_23
  assign replacement_v_count_23_D_IN =
	     MUX_replacement_v_count_23_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_23_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd23 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_24
  assign replacement_v_count_24_D_IN =
	     MUX_replacement_v_count_24_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_24_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd24 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_25
  assign replacement_v_count_25_D_IN =
	     MUX_replacement_v_count_25_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_25_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd25 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_26
  assign replacement_v_count_26_D_IN =
	     MUX_replacement_v_count_26_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_26_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd26 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_27
  assign replacement_v_count_27_D_IN =
	     MUX_replacement_v_count_27_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_27_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd27 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_28
  assign replacement_v_count_28_D_IN =
	     MUX_replacement_v_count_28_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_28_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd28 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_29
  assign replacement_v_count_29_D_IN =
	     MUX_replacement_v_count_29_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_29_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd29 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_3
  assign replacement_v_count_3_D_IN =
	     MUX_replacement_v_count_3_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_3_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd3 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_30
  assign replacement_v_count_30_D_IN =
	     MUX_replacement_v_count_30_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_30_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd30 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_31
  assign replacement_v_count_31_D_IN =
	     MUX_replacement_v_count_31_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_31_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd31 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_32
  assign replacement_v_count_32_D_IN =
	     MUX_replacement_v_count_32_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_32_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd32 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_33
  assign replacement_v_count_33_D_IN =
	     MUX_replacement_v_count_33_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_33_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd33 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_34
  assign replacement_v_count_34_D_IN =
	     MUX_replacement_v_count_34_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_34_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd34 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_35
  assign replacement_v_count_35_D_IN =
	     MUX_replacement_v_count_35_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_35_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd35 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_36
  assign replacement_v_count_36_D_IN =
	     MUX_replacement_v_count_36_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_36_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd36 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_37
  assign replacement_v_count_37_D_IN =
	     MUX_replacement_v_count_37_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_37_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd37 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_38
  assign replacement_v_count_38_D_IN =
	     MUX_replacement_v_count_38_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_38_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd38 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_39
  assign replacement_v_count_39_D_IN =
	     MUX_replacement_v_count_39_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_39_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd39 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_4
  assign replacement_v_count_4_D_IN =
	     MUX_replacement_v_count_4_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_4_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd4 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_40
  assign replacement_v_count_40_D_IN =
	     MUX_replacement_v_count_40_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_40_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd40 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_41
  assign replacement_v_count_41_D_IN =
	     MUX_replacement_v_count_41_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_41_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd41 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_42
  assign replacement_v_count_42_D_IN =
	     MUX_replacement_v_count_42_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_42_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd42 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_43
  assign replacement_v_count_43_D_IN =
	     MUX_replacement_v_count_43_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_43_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd43 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_44
  assign replacement_v_count_44_D_IN =
	     MUX_replacement_v_count_44_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_44_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd44 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_45
  assign replacement_v_count_45_D_IN =
	     MUX_replacement_v_count_45_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_45_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd45 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_46
  assign replacement_v_count_46_D_IN =
	     MUX_replacement_v_count_46_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_46_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd46 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_47
  assign replacement_v_count_47_D_IN =
	     MUX_replacement_v_count_47_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_47_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd47 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_48
  assign replacement_v_count_48_D_IN =
	     MUX_replacement_v_count_48_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_48_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd48 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_49
  assign replacement_v_count_49_D_IN =
	     MUX_replacement_v_count_49_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_49_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd49 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_5
  assign replacement_v_count_5_D_IN =
	     MUX_replacement_v_count_5_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_5_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd5 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_50
  assign replacement_v_count_50_D_IN =
	     MUX_replacement_v_count_50_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_50_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd50 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_51
  assign replacement_v_count_51_D_IN =
	     MUX_replacement_v_count_51_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_51_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd51 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_52
  assign replacement_v_count_52_D_IN =
	     MUX_replacement_v_count_52_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_52_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd52 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_53
  assign replacement_v_count_53_D_IN =
	     MUX_replacement_v_count_53_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_53_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd53 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_54
  assign replacement_v_count_54_D_IN =
	     MUX_replacement_v_count_54_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_54_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd54 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_55
  assign replacement_v_count_55_D_IN =
	     MUX_replacement_v_count_55_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_55_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd55 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_56
  assign replacement_v_count_56_D_IN =
	     MUX_replacement_v_count_56_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_56_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd56 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_57
  assign replacement_v_count_57_D_IN =
	     MUX_replacement_v_count_57_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_57_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd57 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_58
  assign replacement_v_count_58_D_IN =
	     MUX_replacement_v_count_58_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_58_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd58 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_59
  assign replacement_v_count_59_D_IN =
	     MUX_replacement_v_count_59_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_59_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd59 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_6
  assign replacement_v_count_6_D_IN =
	     MUX_replacement_v_count_6_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_6_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd6 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_60
  assign replacement_v_count_60_D_IN =
	     MUX_replacement_v_count_60_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_60_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd60 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_61
  assign replacement_v_count_61_D_IN =
	     MUX_replacement_v_count_61_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_61_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd61 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_62
  assign replacement_v_count_62_D_IN =
	     MUX_replacement_v_count_62_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_62_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd62 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_63
  assign replacement_v_count_63_D_IN =
	     MUX_replacement_v_count_63_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_63_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd63 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_7
  assign replacement_v_count_7_D_IN =
	     MUX_replacement_v_count_7_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_7_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd7 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_8
  assign replacement_v_count_8_D_IN =
	     MUX_replacement_v_count_8_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_8_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd8 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register replacement_v_count_9
  assign replacement_v_count_9_D_IN =
	     MUX_replacement_v_count_9_write_1__SEL_1 ?
	       MUX_replacement_v_count_0_write_1__VAL_1 :
	       2'd3 ;
  assign replacement_v_count_9_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd9 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register rg_fence_stall
  assign rg_fence_stall_D_IN = EN_put_core_req_put && put_core_req_put[2] ;
  assign rg_fence_stall_EN =
	     EN_put_core_req_put || WILL_FIRE_RL_rl_fence_operation ;

  // register rg_handling_miss
  assign rg_handling_miss_D_IN = WILL_FIRE_RL_rl_send_memory_request ;
  assign rg_handling_miss_EN =
	     WILL_FIRE_RL_rl_response_to_core ||
	     WILL_FIRE_RL_rl_send_memory_request ;

  // register rg_performing_replay
  assign rg_performing_replay_D_IN = MUX_rg_performing_replay_write_1__SEL_1 ;
  assign rg_performing_replay_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[0] &&
	     m_fillbuffer_mv_release_info__12_BITS_12_TO_7__ETC___d831 ||
	     rg_performing_replay ;

  // register rg_polling_mode
  assign rg_polling_mode_D_IN =
	     m_fillbuffer_mav_polling_response[1] &&
	     !m_fillbuffer_mav_polling_response[0] ;
  assign rg_polling_mode_EN = CAN_FIRE_RL_rl_fillbuffer_check ;

  // register rg_recent_req
  assign rg_recent_req_D_IN = set_index__h67079 ;
  assign rg_recent_req_EN = EN_put_core_req_put ;

  // register v_reg_valid_0
  assign v_reg_valid_0_D_IN =
	     MUX_replacement_v_count_0_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_0_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd0 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_1
  assign v_reg_valid_1_D_IN =
	     MUX_replacement_v_count_1_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_1_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd1 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_10
  assign v_reg_valid_10_D_IN =
	     MUX_replacement_v_count_10_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_10_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd10 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_11
  assign v_reg_valid_11_D_IN =
	     MUX_replacement_v_count_11_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_11_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd11 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_12
  assign v_reg_valid_12_D_IN =
	     MUX_replacement_v_count_12_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_12_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd12 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_13
  assign v_reg_valid_13_D_IN =
	     MUX_replacement_v_count_13_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_13_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd13 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_14
  assign v_reg_valid_14_D_IN =
	     MUX_replacement_v_count_14_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_14_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd14 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_15
  assign v_reg_valid_15_D_IN =
	     MUX_replacement_v_count_15_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_15_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd15 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_16
  assign v_reg_valid_16_D_IN =
	     MUX_replacement_v_count_16_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_16_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd16 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_17
  assign v_reg_valid_17_D_IN =
	     MUX_replacement_v_count_17_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_17_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd17 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_18
  assign v_reg_valid_18_D_IN =
	     MUX_replacement_v_count_18_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_18_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd18 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_19
  assign v_reg_valid_19_D_IN =
	     MUX_replacement_v_count_19_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_19_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd19 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_2
  assign v_reg_valid_2_D_IN =
	     MUX_replacement_v_count_2_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_2_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd2 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_20
  assign v_reg_valid_20_D_IN =
	     MUX_replacement_v_count_20_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_20_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd20 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_21
  assign v_reg_valid_21_D_IN =
	     MUX_replacement_v_count_21_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_21_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd21 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_22
  assign v_reg_valid_22_D_IN =
	     MUX_replacement_v_count_22_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_22_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd22 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_23
  assign v_reg_valid_23_D_IN =
	     MUX_replacement_v_count_23_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_23_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd23 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_24
  assign v_reg_valid_24_D_IN =
	     MUX_replacement_v_count_24_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_24_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd24 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_25
  assign v_reg_valid_25_D_IN =
	     MUX_replacement_v_count_25_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_25_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd25 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_26
  assign v_reg_valid_26_D_IN =
	     MUX_replacement_v_count_26_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_26_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd26 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_27
  assign v_reg_valid_27_D_IN =
	     MUX_replacement_v_count_27_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_27_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd27 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_28
  assign v_reg_valid_28_D_IN =
	     MUX_replacement_v_count_28_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_28_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd28 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_29
  assign v_reg_valid_29_D_IN =
	     MUX_replacement_v_count_29_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_29_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd29 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_3
  assign v_reg_valid_3_D_IN =
	     MUX_replacement_v_count_3_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_3_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd3 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_30
  assign v_reg_valid_30_D_IN =
	     MUX_replacement_v_count_30_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_30_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd30 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_31
  assign v_reg_valid_31_D_IN =
	     MUX_replacement_v_count_31_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_31_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd31 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_32
  assign v_reg_valid_32_D_IN =
	     MUX_replacement_v_count_32_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_32_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd32 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_33
  assign v_reg_valid_33_D_IN =
	     MUX_replacement_v_count_33_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_33_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd33 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_34
  assign v_reg_valid_34_D_IN =
	     MUX_replacement_v_count_34_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_34_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd34 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_35
  assign v_reg_valid_35_D_IN =
	     MUX_replacement_v_count_35_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_35_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd35 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_36
  assign v_reg_valid_36_D_IN =
	     MUX_replacement_v_count_36_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_36_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd36 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_37
  assign v_reg_valid_37_D_IN =
	     MUX_replacement_v_count_37_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_37_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd37 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_38
  assign v_reg_valid_38_D_IN =
	     MUX_replacement_v_count_38_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_38_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd38 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_39
  assign v_reg_valid_39_D_IN =
	     MUX_replacement_v_count_39_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_39_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd39 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_4
  assign v_reg_valid_4_D_IN =
	     MUX_replacement_v_count_4_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_4_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd4 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_40
  assign v_reg_valid_40_D_IN =
	     MUX_replacement_v_count_40_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_40_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd40 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_41
  assign v_reg_valid_41_D_IN =
	     MUX_replacement_v_count_41_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_41_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd41 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_42
  assign v_reg_valid_42_D_IN =
	     MUX_replacement_v_count_42_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_42_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd42 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_43
  assign v_reg_valid_43_D_IN =
	     MUX_replacement_v_count_43_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_43_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd43 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_44
  assign v_reg_valid_44_D_IN =
	     MUX_replacement_v_count_44_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_44_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd44 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_45
  assign v_reg_valid_45_D_IN =
	     MUX_replacement_v_count_45_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_45_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd45 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_46
  assign v_reg_valid_46_D_IN =
	     MUX_replacement_v_count_46_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_46_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd46 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_47
  assign v_reg_valid_47_D_IN =
	     MUX_replacement_v_count_47_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_47_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd47 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_48
  assign v_reg_valid_48_D_IN =
	     MUX_replacement_v_count_48_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_48_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd48 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_49
  assign v_reg_valid_49_D_IN =
	     MUX_replacement_v_count_49_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_49_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd49 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_5
  assign v_reg_valid_5_D_IN =
	     MUX_replacement_v_count_5_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_5_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd5 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_50
  assign v_reg_valid_50_D_IN =
	     MUX_replacement_v_count_50_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_50_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd50 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_51
  assign v_reg_valid_51_D_IN =
	     MUX_replacement_v_count_51_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_51_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd51 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_52
  assign v_reg_valid_52_D_IN =
	     MUX_replacement_v_count_52_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_52_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd52 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_53
  assign v_reg_valid_53_D_IN =
	     MUX_replacement_v_count_53_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_53_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd53 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_54
  assign v_reg_valid_54_D_IN =
	     MUX_replacement_v_count_54_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_54_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd54 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_55
  assign v_reg_valid_55_D_IN =
	     MUX_replacement_v_count_55_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_55_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd55 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_56
  assign v_reg_valid_56_D_IN =
	     MUX_replacement_v_count_56_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_56_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd56 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_57
  assign v_reg_valid_57_D_IN =
	     MUX_replacement_v_count_57_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_57_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd57 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_58
  assign v_reg_valid_58_D_IN =
	     MUX_replacement_v_count_58_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_58_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd58 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_59
  assign v_reg_valid_59_D_IN =
	     MUX_replacement_v_count_59_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_59_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd59 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_6
  assign v_reg_valid_6_D_IN =
	     MUX_replacement_v_count_6_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_6_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd6 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_60
  assign v_reg_valid_60_D_IN =
	     MUX_replacement_v_count_60_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_60_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd60 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_61
  assign v_reg_valid_61_D_IN =
	     MUX_replacement_v_count_61_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_61_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd61 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_62
  assign v_reg_valid_62_D_IN =
	     MUX_replacement_v_count_62_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_62_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd62 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_63
  assign v_reg_valid_63_D_IN =
	     MUX_replacement_v_count_63_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_63_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd63 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_7
  assign v_reg_valid_7_D_IN =
	     MUX_replacement_v_count_7_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_7_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd7 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_8
  assign v_reg_valid_8_D_IN =
	     MUX_replacement_v_count_8_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_8_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd8 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // register v_reg_valid_9
  assign v_reg_valid_9_D_IN =
	     MUX_replacement_v_count_9_write_1__SEL_1 ?
	       MUX_v_reg_valid_0_write_1__VAL_1 :
	       4'd0 ;
  assign v_reg_valid_9_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[12:7] == 6'd9 &&
	     !m_fillbuffer_mv_release_info[0] ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // submodule ff_core_request
  assign ff_core_request_D_IN = put_core_req_put ;
  assign ff_core_request_ENQ = EN_put_core_req_put ;
  assign ff_core_request_DEQ =
	     WILL_FIRE_RL_rl_fence_operation ||
	     WILL_FIRE_RL_rl_response_to_core ;
  assign ff_core_request_CLR = 1'b0 ;

  // submodule ff_pending_req
  assign ff_pending_req_D_IN =
	     { phyaddr__h54097[5:2],
	       m_fillbuffer_mav_allocate_line,
	       !ma_cache_enable_c ||
	       ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734 } ;
  assign ff_pending_req_ENQ = CAN_FIRE_RL_rl_send_memory_request ;
  assign ff_pending_req_DEQ =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     ff_read_mem_response_rv_port1__read[1] ||
	     WILL_FIRE_RL_rl_capture_io_response ;
  assign ff_pending_req_CLR = 1'b0 ;

  // submodule ff_read_mem_request
  assign ff_read_mem_request_D_IN =
	     { phyaddr__h54097,
	       x_burst_len__h54120,
	       burst_size__h54094,
	       !ma_cache_enable_c ||
	       ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734 } ;
  assign ff_read_mem_request_ENQ = CAN_FIRE_RL_rl_send_memory_request ;
  assign ff_read_mem_request_DEQ = EN_get_read_mem_req_get ;
  assign ff_read_mem_request_CLR = 1'b0 ;

  // submodule m_data
  assign m_data_ma_request_banks = 16'd65535 ;
  assign m_data_ma_request_dataline = m_fillbuffer_mv_release_info[544:33] ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  set_index__h67079 or
	  MUX_m_data_ma_request_1__SEL_2 or
	  m_fillbuffer_mv_release_info or
	  rg_performing_replay or rg_recent_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_data_ma_request_index = set_index__h67079;
      MUX_m_data_ma_request_1__SEL_2:
	  m_data_ma_request_index = m_fillbuffer_mv_release_info[12:7];
      rg_performing_replay: m_data_ma_request_index = rg_recent_req;
      default: m_data_ma_request_index = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign m_data_ma_request_read_write =
	     !MUX_m_data_ma_request_1__SEL_1 && !rg_performing_replay ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  MUX_m_data_ma_request_1__SEL_2 or v__h55558 or rg_performing_replay)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_data_ma_request_way = 2'bxx /* unspecified value */ ;
      MUX_m_data_ma_request_1__SEL_2: m_data_ma_request_way = v__h55558;
      rg_performing_replay:
	  m_data_ma_request_way = 2'bxx /* unspecified value */ ;
      default: m_data_ma_request_way = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign m_data_mv_read_response_blocknum = ff_from_tlb_rv_port1__read[12:9] ;
  assign m_data_mv_read_response_wayselect = lv_hitmask__h21344 ;
  assign m_data_EN_ma_request =
	     EN_put_core_req_put && ma_cache_enable_c ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[0] ||
	     rg_performing_replay ;

  // submodule m_fillbuffer
  assign m_fillbuffer_ma_fill_from_memory_fbindex =
	     ff_pending_req_D_OUT[2:1] ;
  assign m_fillbuffer_ma_fill_from_memory_init_bank =
	     ff_pending_req_D_OUT[6:3] ;
  assign m_fillbuffer_ma_fill_from_memory_mem_resp =
	     ff_read_mem_response_rv_port1__read[65:0] ;
  assign m_fillbuffer_mav_allocate_line_address = phyaddr__h54097 ;
  assign m_fillbuffer_mav_allocate_line_dataline =
	     512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  ;
  assign m_fillbuffer_mav_allocate_line_from_ram = 1'd0 ;
  assign m_fillbuffer_mav_polling_response_address = phyaddr__h20938 ;
  assign m_fillbuffer_mav_polling_response_fbindex =
	     ff_pending_req_D_OUT[2:1] ;
  assign m_fillbuffer_mav_polling_response_fill = ff_pending_req_EMPTY_N ;
  assign m_fillbuffer_EN_mav_allocate_line =
	     WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734 ;
  assign m_fillbuffer_EN_ma_fill_from_memory =
	     CAN_FIRE_RL_rl_fill_from_memory ;
  assign m_fillbuffer_EN_ma_perform_release =
	     WILL_FIRE_RL_rl_release_from_fillbuffer ;
  assign m_fillbuffer_EN_mav_polling_response =
	     CAN_FIRE_RL_rl_fillbuffer_check ;

  // submodule m_tag
  assign m_tag_ma_request_address = m_fillbuffer_mv_release_info[32:1] ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  set_index__h67079 or
	  MUX_m_data_ma_request_1__SEL_2 or
	  m_fillbuffer_mv_release_info or
	  rg_performing_replay or rg_recent_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_tag_ma_request_index = set_index__h67079;
      MUX_m_data_ma_request_1__SEL_2:
	  m_tag_ma_request_index = m_fillbuffer_mv_release_info[12:7];
      rg_performing_replay: m_tag_ma_request_index = rg_recent_req;
      default: m_tag_ma_request_index = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign m_tag_ma_request_read_write =
	     !MUX_m_data_ma_request_1__SEL_1 && !rg_performing_replay ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  MUX_m_data_ma_request_1__SEL_2 or v__h55558 or rg_performing_replay)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
      MUX_m_data_ma_request_1__SEL_2: m_tag_ma_request_way = v__h55558;
      rg_performing_replay:
	  m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
      default: m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign m_tag_mv_read_response_address_in = phyaddr__h20938 ;
  assign m_tag_mv_read_response_wayselect = 2'bxx /* unspecified value */  ;
  assign m_tag_EN_ma_request =
	     EN_put_core_req_put && ma_cache_enable_c ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[0] ||
	     rg_performing_replay ;

  // remaining internal signals
  module_fn_pmp_lookup instance_fn_pmp_lookup_0(.fn_pmp_lookup_req({ phyaddr__h20938,
								     2'd2 }),
						.fn_pmp_lookup_priv(ma_curr_priv_c),
						.fn_pmp_lookup_pmpcfg({ { pmp_cfg_3,
									  pmp_cfg_2 },
									pmp_cfg_1,
									pmp_cfg_0 }),
						.fn_pmp_lookup_pmpaddr({ { pmp_addr_3,
									   pmp_addr_2 },
									 pmp_addr_1,
									 pmp_addr_0 }),
						.fn_pmp_lookup(fn_pmp_lookup___d146));
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 =
	     CAN_FIRE_RL_rl_fillbuffer_check ? wr_fb_state_wget : 2'd2 ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d346 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[8] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d358 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[40] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d366 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[39] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d375 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[38] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d383 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[37] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d392 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[36] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d400 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[35] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d409 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[34] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d417 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[33] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d426 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[32] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d434 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[31] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d443 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[30] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d451 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[29] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d460 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[28] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d468 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[27] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d477 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[26] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d485 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[25] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d494 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[24] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d502 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[23] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d511 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[22] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d519 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[21] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d528 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[20] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d536 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[19] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d545 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[18] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d553 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[17] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d562 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[16] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d570 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[15] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d579 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[14] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d587 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[13] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d596 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[12] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d604 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[11] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d613 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[10] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d621 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[9] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d631 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[7] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d639 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[6] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d648 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[5] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d656 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[4] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d665 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[3] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d673 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[2] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d682 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[1] ;
  assign IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d690 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[0] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 =
	     CAN_FIRE_RL_rl_capture_io_response ? 2'd1 : 2'd2 ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d343 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[8] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d353 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d343 ||
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d346 ||
	     b__h24983 && wr_ram_response_wget[8] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d356 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[40] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d364 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[39] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d373 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[38] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d381 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[37] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d390 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[36] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d398 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[35] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d407 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[34] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d415 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[33] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d424 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[32] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d432 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[31] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d441 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[30] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d449 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[29] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d458 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[28] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d466 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[27] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d475 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[26] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d483 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[25] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d492 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[24] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d500 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[23] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d509 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[22] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d517 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[21] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d526 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[20] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d534 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[19] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d543 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[18] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d551 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[17] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d560 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[16] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d568 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[15] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d577 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[14] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d585 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[13] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d594 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[12] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d602 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[11] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d611 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[10] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d619 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[9] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d629 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[7] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d637 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[6] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d646 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[5] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d654 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[4] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d663 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[3] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d671 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[2] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d680 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[1] ;
  assign IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d688 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[0] ;
  assign IF_wr_ram_state_whas__72_THEN_wr_ram_state_wge_ETC___d274 =
	     wr_ram_state_whas ? wr_ram_state_wget : 2'd2 ;
  assign NOT_0_CONCAT_m_tag_mv_read_response_ff_from_tl_ETC___d180 =
	     x__h23344 + y__h23345 > 3'd1 ;
  assign NOT_IF_wr_fb_state_whas__77_THEN_wr_fb_state_w_ETC___d711 =
	     IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 !=
	     2'd1 ||
	     wr_fault_whas ||
	     !wr_fb_response_wget[8] ;
  assign NOT_IF_wr_nc_state_whas__67_THEN_wr_nc_state_w_ETC___d707 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 !=
	     2'd1 ||
	     wr_fault_whas ||
	     !wr_nc_response_wget[8] ;
  assign NOT_IF_wr_ram_state_whas__72_THEN_wr_ram_state_ETC___d715 =
	     IF_wr_ram_state_whas__72_THEN_wr_ram_state_wge_ETC___d274 !=
	     2'd1 &&
	     !wr_fault_whas ||
	     !wr_ram_response_wget[8] ;
  assign NOT_ff_core_request_notEmpty__22_23_AND_NOT_wr_ETC___d833 =
	     !ff_core_request_EMPTY_N && !EN_put_core_req_put &&
	     !m_fillbuffer_mv_release_info__12_BITS_12_TO_7__ETC___d831 ;
  assign b__h24983 =
	     IF_wr_ram_state_whas__72_THEN_wr_ram_state_wge_ETC___d274 ==
	     2'd1 ||
	     wr_fault_whas ;
  assign burst_size__h54094 =
	     (!ma_cache_enable_c ||
	      ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734) ?
	       3'd2 :
	       3'd3 ;
  assign ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734 =
	     ff_from_tlb_rv_port1__read[38:7] < 32'h80000000 ;
  assign lv_cause__h20940 =
	     ff_from_tlb_rv_port1__read[6] ?
	       ff_from_tlb_rv_port1__read[5:0] :
	       6'd1 ;
  assign lv_hitmask__h21344 =
	     m_tag_mv_read_response[35:32] &
	     SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 ;
  assign lv_response_cause__h21706 =
	     (!ff_from_tlb_rv_port1__read[6] && fn_pmp_lookup___d146[6]) ?
	       fn_pmp_lookup___d146[5:0] :
	       lv_cause__h20940 ;
  assign lv_response_cause__h26084 =
	     { IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d629 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d631 ||
	       b__h24983 && wr_ram_response_wget[7],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d637 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d639 ||
	       b__h24983 && wr_ram_response_wget[6],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d646 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d648 ||
	       b__h24983 && wr_ram_response_wget[5],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d654 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d656 ||
	       b__h24983 && wr_ram_response_wget[4],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d663 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d665 ||
	       b__h24983 && wr_ram_response_wget[3],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d671 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d673 ||
	       b__h24983 && wr_ram_response_wget[2] } ;
  assign lv_response_epochs__h26085 =
	     { IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d680 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d682 ||
	       b__h24983 && wr_ram_response_wget[1],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d688 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d690 ||
	       b__h24983 && wr_ram_response_wget[0] } ;
  assign lv_response_word__h26082 =
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d353 ?
	       ff_core_request_D_OUT[66:35] :
	       lv_response_word__h26098 ;
  assign lv_response_word__h26098 =
	     { IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d356 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d358 ||
	       b__h24983 && wr_ram_response_wget[40],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d364 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d366 ||
	       b__h24983 && wr_ram_response_wget[39],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d373 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d375 ||
	       b__h24983 && wr_ram_response_wget[38],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d381 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d383 ||
	       b__h24983 && wr_ram_response_wget[37],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d390 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d392 ||
	       b__h24983 && wr_ram_response_wget[36],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d398 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d400 ||
	       b__h24983 && wr_ram_response_wget[35],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d407 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d409 ||
	       b__h24983 && wr_ram_response_wget[34],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d415 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d417 ||
	       b__h24983 && wr_ram_response_wget[33],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d424 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d426 ||
	       b__h24983 && wr_ram_response_wget[32],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d432 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d434 ||
	       b__h24983 && wr_ram_response_wget[31],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d441 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d443 ||
	       b__h24983 && wr_ram_response_wget[30],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d449 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d451 ||
	       b__h24983 && wr_ram_response_wget[29],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d458 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d460 ||
	       b__h24983 && wr_ram_response_wget[28],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d466 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d468 ||
	       b__h24983 && wr_ram_response_wget[27],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d475 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d477 ||
	       b__h24983 && wr_ram_response_wget[26],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d483 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d485 ||
	       b__h24983 && wr_ram_response_wget[25],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d492 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d494 ||
	       b__h24983 && wr_ram_response_wget[24],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d500 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d502 ||
	       b__h24983 && wr_ram_response_wget[23],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d509 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d511 ||
	       b__h24983 && wr_ram_response_wget[22],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d517 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d519 ||
	       b__h24983 && wr_ram_response_wget[21],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d526 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d528 ||
	       b__h24983 && wr_ram_response_wget[20],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d534 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d536 ||
	       b__h24983 && wr_ram_response_wget[19],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d543 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d545 ||
	       b__h24983 && wr_ram_response_wget[18],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d551 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d553 ||
	       b__h24983 && wr_ram_response_wget[17],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d560 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d562 ||
	       b__h24983 && wr_ram_response_wget[16],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d568 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d570 ||
	       b__h24983 && wr_ram_response_wget[15],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d577 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d579 ||
	       b__h24983 && wr_ram_response_wget[14],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d585 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d587 ||
	       b__h24983 && wr_ram_response_wget[13],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d594 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d596 ||
	       b__h24983 && wr_ram_response_wget[12],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d602 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d604 ||
	       b__h24983 && wr_ram_response_wget[11],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d611 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d613 ||
	       b__h24983 && wr_ram_response_wget[10],
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d619 ||
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d621 ||
	       b__h24983 && wr_ram_response_wget[9] } ;
  assign m_fillbuffer_mv_release_info__12_BITS_12_TO_7__ETC___d831 =
	     m_fillbuffer_mv_release_info[12:7] == rg_recent_req ;
  assign phyaddr__h20938 = ff_from_tlb_rv_port1__read[38:7] ;
  assign phyaddr__h54097 =
	     (!ma_cache_enable_c ||
	      ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734) ?
	       ff_from_tlb_rv_port1__read[38:7] :
	       { ff_from_tlb_rv_port1__read[38:10], 3'd0 } ;
  assign response_word__h21685 = m_data_mv_read_response[31:0] >> x__h21710 ;
  assign response_word__h55061 =
	     ff_read_mem_response_rv_port1__read[65:2] >> x__h55087 ;
  assign set_index__h67079 =
	     put_core_req_put[2] ? 6'd0 : put_core_req_put[14:9] ;
  assign v__h55558 =
	     (valid__h55561 == 4'd15) ?
	       SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 :
	       (valid__h55561[3] ?
		  (valid__h55561[2] ?
		     (valid__h55561[1] ?
			(valid__h55561[0] ? 2'd3 : 2'd0) :
			2'd1) :
		     2'd2) :
		  2'd3) ;
  assign wr_fault_whas__64_AND_wr_fault_wget__65_66_OR__ETC___d276 =
	     wr_fault_whas ||
	     IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	     2'd1 ||
	     IF_wr_ram_state_whas__72_THEN_wr_ram_state_wge_ETC___d274 ==
	     2'd1 ;
  assign x__h21710 = { ff_from_tlb_rv_port1__read[8:7], 3'b0 } ;
  assign x__h23344 = x__h23356 + y__h23357 ;
  assign x__h23356 = x__h23368 + y__h23369 ;
  assign x__h23368 = { 2'd0, lv_hitmask__h21344[3] } ;
  assign x__h24963 = x__h24975 + y__h24976 ;
  assign x__h24975 = { 1'd0, b__h24983 } ;
  assign x__h55087 = { ff_core_request_D_OUT[5:3], 3'b0 } ;
  assign x__h59386 = 4'd1 << v__h55558 ;
  assign x_burst_len__h54120 =
	     (!ma_cache_enable_c ||
	      ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734) ?
	       8'd0 :
	       8'd7 ;
  assign y__h23345 = { 2'd0, lv_hitmask__h21344[0] } ;
  assign y__h23357 = { 2'd0, lv_hitmask__h21344[1] } ;
  assign y__h23369 = { 2'd0, lv_hitmask__h21344[2] } ;
  assign y__h24964 =
	     { 1'd0,
	       IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 ==
	       2'd1 &&
	       !wr_fault_whas } ;
  assign y__h24976 =
	     { 1'd0,
	       IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 ==
	       2'd1 &&
	       !wr_fault_whas } ;
  always@(m_fillbuffer_mv_release_info or
	  v_reg_valid_0 or
	  v_reg_valid_1 or
	  v_reg_valid_2 or
	  v_reg_valid_3 or
	  v_reg_valid_4 or
	  v_reg_valid_5 or
	  v_reg_valid_6 or
	  v_reg_valid_7 or
	  v_reg_valid_8 or
	  v_reg_valid_9 or
	  v_reg_valid_10 or
	  v_reg_valid_11 or
	  v_reg_valid_12 or
	  v_reg_valid_13 or
	  v_reg_valid_14 or
	  v_reg_valid_15 or
	  v_reg_valid_16 or
	  v_reg_valid_17 or
	  v_reg_valid_18 or
	  v_reg_valid_19 or
	  v_reg_valid_20 or
	  v_reg_valid_21 or
	  v_reg_valid_22 or
	  v_reg_valid_23 or
	  v_reg_valid_24 or
	  v_reg_valid_25 or
	  v_reg_valid_26 or
	  v_reg_valid_27 or
	  v_reg_valid_28 or
	  v_reg_valid_29 or
	  v_reg_valid_30 or
	  v_reg_valid_31 or
	  v_reg_valid_32 or
	  v_reg_valid_33 or
	  v_reg_valid_34 or
	  v_reg_valid_35 or
	  v_reg_valid_36 or
	  v_reg_valid_37 or
	  v_reg_valid_38 or
	  v_reg_valid_39 or
	  v_reg_valid_40 or
	  v_reg_valid_41 or
	  v_reg_valid_42 or
	  v_reg_valid_43 or
	  v_reg_valid_44 or
	  v_reg_valid_45 or
	  v_reg_valid_46 or
	  v_reg_valid_47 or
	  v_reg_valid_48 or
	  v_reg_valid_49 or
	  v_reg_valid_50 or
	  v_reg_valid_51 or
	  v_reg_valid_52 or
	  v_reg_valid_53 or
	  v_reg_valid_54 or
	  v_reg_valid_55 or
	  v_reg_valid_56 or
	  v_reg_valid_57 or
	  v_reg_valid_58 or
	  v_reg_valid_59 or
	  v_reg_valid_60 or
	  v_reg_valid_61 or v_reg_valid_62 or v_reg_valid_63)
  begin
    case (m_fillbuffer_mv_release_info[12:7])
      6'd0: valid__h55561 = v_reg_valid_0;
      6'd1: valid__h55561 = v_reg_valid_1;
      6'd2: valid__h55561 = v_reg_valid_2;
      6'd3: valid__h55561 = v_reg_valid_3;
      6'd4: valid__h55561 = v_reg_valid_4;
      6'd5: valid__h55561 = v_reg_valid_5;
      6'd6: valid__h55561 = v_reg_valid_6;
      6'd7: valid__h55561 = v_reg_valid_7;
      6'd8: valid__h55561 = v_reg_valid_8;
      6'd9: valid__h55561 = v_reg_valid_9;
      6'd10: valid__h55561 = v_reg_valid_10;
      6'd11: valid__h55561 = v_reg_valid_11;
      6'd12: valid__h55561 = v_reg_valid_12;
      6'd13: valid__h55561 = v_reg_valid_13;
      6'd14: valid__h55561 = v_reg_valid_14;
      6'd15: valid__h55561 = v_reg_valid_15;
      6'd16: valid__h55561 = v_reg_valid_16;
      6'd17: valid__h55561 = v_reg_valid_17;
      6'd18: valid__h55561 = v_reg_valid_18;
      6'd19: valid__h55561 = v_reg_valid_19;
      6'd20: valid__h55561 = v_reg_valid_20;
      6'd21: valid__h55561 = v_reg_valid_21;
      6'd22: valid__h55561 = v_reg_valid_22;
      6'd23: valid__h55561 = v_reg_valid_23;
      6'd24: valid__h55561 = v_reg_valid_24;
      6'd25: valid__h55561 = v_reg_valid_25;
      6'd26: valid__h55561 = v_reg_valid_26;
      6'd27: valid__h55561 = v_reg_valid_27;
      6'd28: valid__h55561 = v_reg_valid_28;
      6'd29: valid__h55561 = v_reg_valid_29;
      6'd30: valid__h55561 = v_reg_valid_30;
      6'd31: valid__h55561 = v_reg_valid_31;
      6'd32: valid__h55561 = v_reg_valid_32;
      6'd33: valid__h55561 = v_reg_valid_33;
      6'd34: valid__h55561 = v_reg_valid_34;
      6'd35: valid__h55561 = v_reg_valid_35;
      6'd36: valid__h55561 = v_reg_valid_36;
      6'd37: valid__h55561 = v_reg_valid_37;
      6'd38: valid__h55561 = v_reg_valid_38;
      6'd39: valid__h55561 = v_reg_valid_39;
      6'd40: valid__h55561 = v_reg_valid_40;
      6'd41: valid__h55561 = v_reg_valid_41;
      6'd42: valid__h55561 = v_reg_valid_42;
      6'd43: valid__h55561 = v_reg_valid_43;
      6'd44: valid__h55561 = v_reg_valid_44;
      6'd45: valid__h55561 = v_reg_valid_45;
      6'd46: valid__h55561 = v_reg_valid_46;
      6'd47: valid__h55561 = v_reg_valid_47;
      6'd48: valid__h55561 = v_reg_valid_48;
      6'd49: valid__h55561 = v_reg_valid_49;
      6'd50: valid__h55561 = v_reg_valid_50;
      6'd51: valid__h55561 = v_reg_valid_51;
      6'd52: valid__h55561 = v_reg_valid_52;
      6'd53: valid__h55561 = v_reg_valid_53;
      6'd54: valid__h55561 = v_reg_valid_54;
      6'd55: valid__h55561 = v_reg_valid_55;
      6'd56: valid__h55561 = v_reg_valid_56;
      6'd57: valid__h55561 = v_reg_valid_57;
      6'd58: valid__h55561 = v_reg_valid_58;
      6'd59: valid__h55561 = v_reg_valid_59;
      6'd60: valid__h55561 = v_reg_valid_60;
      6'd61: valid__h55561 = v_reg_valid_61;
      6'd62: valid__h55561 = v_reg_valid_62;
      6'd63: valid__h55561 = v_reg_valid_63;
    endcase
  end
  always@(m_fillbuffer_mv_release_info or
	  replacement_v_count_0 or
	  replacement_v_count_1 or
	  replacement_v_count_2 or
	  replacement_v_count_3 or
	  replacement_v_count_4 or
	  replacement_v_count_5 or
	  replacement_v_count_6 or
	  replacement_v_count_7 or
	  replacement_v_count_8 or
	  replacement_v_count_9 or
	  replacement_v_count_10 or
	  replacement_v_count_11 or
	  replacement_v_count_12 or
	  replacement_v_count_13 or
	  replacement_v_count_14 or
	  replacement_v_count_15 or
	  replacement_v_count_16 or
	  replacement_v_count_17 or
	  replacement_v_count_18 or
	  replacement_v_count_19 or
	  replacement_v_count_20 or
	  replacement_v_count_21 or
	  replacement_v_count_22 or
	  replacement_v_count_23 or
	  replacement_v_count_24 or
	  replacement_v_count_25 or
	  replacement_v_count_26 or
	  replacement_v_count_27 or
	  replacement_v_count_28 or
	  replacement_v_count_29 or
	  replacement_v_count_30 or
	  replacement_v_count_31 or
	  replacement_v_count_32 or
	  replacement_v_count_33 or
	  replacement_v_count_34 or
	  replacement_v_count_35 or
	  replacement_v_count_36 or
	  replacement_v_count_37 or
	  replacement_v_count_38 or
	  replacement_v_count_39 or
	  replacement_v_count_40 or
	  replacement_v_count_41 or
	  replacement_v_count_42 or
	  replacement_v_count_43 or
	  replacement_v_count_44 or
	  replacement_v_count_45 or
	  replacement_v_count_46 or
	  replacement_v_count_47 or
	  replacement_v_count_48 or
	  replacement_v_count_49 or
	  replacement_v_count_50 or
	  replacement_v_count_51 or
	  replacement_v_count_52 or
	  replacement_v_count_53 or
	  replacement_v_count_54 or
	  replacement_v_count_55 or
	  replacement_v_count_56 or
	  replacement_v_count_57 or
	  replacement_v_count_58 or
	  replacement_v_count_59 or
	  replacement_v_count_60 or
	  replacement_v_count_61 or
	  replacement_v_count_62 or replacement_v_count_63)
  begin
    case (m_fillbuffer_mv_release_info[12:7])
      6'd0:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_0;
      6'd1:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_1;
      6'd2:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_2;
      6'd3:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_3;
      6'd4:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_4;
      6'd5:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_5;
      6'd6:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_6;
      6'd7:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_7;
      6'd8:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_8;
      6'd9:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_9;
      6'd10:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_10;
      6'd11:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_11;
      6'd12:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_12;
      6'd13:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_13;
      6'd14:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_14;
      6'd15:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_15;
      6'd16:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_16;
      6'd17:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_17;
      6'd18:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_18;
      6'd19:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_19;
      6'd20:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_20;
      6'd21:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_21;
      6'd22:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_22;
      6'd23:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_23;
      6'd24:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_24;
      6'd25:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_25;
      6'd26:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_26;
      6'd27:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_27;
      6'd28:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_28;
      6'd29:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_29;
      6'd30:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_30;
      6'd31:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_31;
      6'd32:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_32;
      6'd33:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_33;
      6'd34:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_34;
      6'd35:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_35;
      6'd36:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_36;
      6'd37:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_37;
      6'd38:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_38;
      6'd39:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_39;
      6'd40:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_40;
      6'd41:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_41;
      6'd42:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_42;
      6'd43:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_43;
      6'd44:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_44;
      6'd45:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_45;
      6'd46:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_46;
      6'd47:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_47;
      6'd48:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_48;
      6'd49:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_49;
      6'd50:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_50;
      6'd51:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_51;
      6'd52:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_52;
      6'd53:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_53;
      6'd54:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_54;
      6'd55:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_55;
      6'd56:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_56;
      6'd57:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_57;
      6'd58:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_58;
      6'd59:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_59;
      6'd60:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_60;
      6'd61:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_61;
      6'd62:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_62;
      6'd63:
	  SEL_ARR_replacement_v_count_0_48_replacement_v_ETC___d913 =
	      replacement_v_count_63;
    endcase
  end
  always@(ff_from_tlb_rv_port1__read or
	  v_reg_valid_0 or
	  v_reg_valid_1 or
	  v_reg_valid_2 or
	  v_reg_valid_3 or
	  v_reg_valid_4 or
	  v_reg_valid_5 or
	  v_reg_valid_6 or
	  v_reg_valid_7 or
	  v_reg_valid_8 or
	  v_reg_valid_9 or
	  v_reg_valid_10 or
	  v_reg_valid_11 or
	  v_reg_valid_12 or
	  v_reg_valid_13 or
	  v_reg_valid_14 or
	  v_reg_valid_15 or
	  v_reg_valid_16 or
	  v_reg_valid_17 or
	  v_reg_valid_18 or
	  v_reg_valid_19 or
	  v_reg_valid_20 or
	  v_reg_valid_21 or
	  v_reg_valid_22 or
	  v_reg_valid_23 or
	  v_reg_valid_24 or
	  v_reg_valid_25 or
	  v_reg_valid_26 or
	  v_reg_valid_27 or
	  v_reg_valid_28 or
	  v_reg_valid_29 or
	  v_reg_valid_30 or
	  v_reg_valid_31 or
	  v_reg_valid_32 or
	  v_reg_valid_33 or
	  v_reg_valid_34 or
	  v_reg_valid_35 or
	  v_reg_valid_36 or
	  v_reg_valid_37 or
	  v_reg_valid_38 or
	  v_reg_valid_39 or
	  v_reg_valid_40 or
	  v_reg_valid_41 or
	  v_reg_valid_42 or
	  v_reg_valid_43 or
	  v_reg_valid_44 or
	  v_reg_valid_45 or
	  v_reg_valid_46 or
	  v_reg_valid_47 or
	  v_reg_valid_48 or
	  v_reg_valid_49 or
	  v_reg_valid_50 or
	  v_reg_valid_51 or
	  v_reg_valid_52 or
	  v_reg_valid_53 or
	  v_reg_valid_54 or
	  v_reg_valid_55 or
	  v_reg_valid_56 or
	  v_reg_valid_57 or
	  v_reg_valid_58 or
	  v_reg_valid_59 or
	  v_reg_valid_60 or
	  v_reg_valid_61 or v_reg_valid_62 or v_reg_valid_63)
  begin
    case (ff_from_tlb_rv_port1__read[18:13])
      6'd0:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_0;
      6'd1:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_1;
      6'd2:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_2;
      6'd3:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_3;
      6'd4:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_4;
      6'd5:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_5;
      6'd6:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_6;
      6'd7:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_7;
      6'd8:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_8;
      6'd9:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_9;
      6'd10:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_10;
      6'd11:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_11;
      6'd12:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_12;
      6'd13:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_13;
      6'd14:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_14;
      6'd15:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_15;
      6'd16:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_16;
      6'd17:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_17;
      6'd18:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_18;
      6'd19:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_19;
      6'd20:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_20;
      6'd21:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_21;
      6'd22:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_22;
      6'd23:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_23;
      6'd24:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_24;
      6'd25:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_25;
      6'd26:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_26;
      6'd27:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_27;
      6'd28:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_28;
      6'd29:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_29;
      6'd30:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_30;
      6'd31:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_31;
      6'd32:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_32;
      6'd33:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_33;
      6'd34:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_34;
      6'd35:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_35;
      6'd36:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_36;
      6'd37:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_37;
      6'd38:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_38;
      6'd39:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_39;
      6'd40:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_40;
      6'd41:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_41;
      6'd42:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_42;
      6'd43:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_43;
      6'd44:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_44;
      6'd45:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_45;
      6'd46:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_46;
      6'd47:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_47;
      6'd48:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_48;
      6'd49:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_49;
      6'd50:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_50;
      6'd51:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_51;
      6'd52:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_52;
      6'd53:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_53;
      6'd54:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_54;
      6'd55:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_55;
      6'd56:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_56;
      6'd57:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_57;
      6'd58:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_58;
      6'd59:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_59;
      6'd60:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_60;
      6'd61:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_61;
      6'd62:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_62;
      6'd63:
	  SEL_ARR_v_reg_valid_0_5_v_reg_valid_1_6_v_reg__ETC___d131 =
	      v_reg_valid_63;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ff_core_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      41'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_from_tlb_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      39'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_read_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	replacement_v_count_0 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_1 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_10 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_11 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_12 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_13 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_14 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_15 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_16 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_17 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_18 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_19 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_2 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_20 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_21 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_22 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_23 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_24 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_25 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_26 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_27 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_28 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_29 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_3 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_30 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_31 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_32 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_33 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_34 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_35 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_36 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_37 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_38 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_39 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_4 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_40 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_41 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_42 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_43 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_44 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_45 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_46 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_47 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_48 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_49 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_5 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_50 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_51 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_52 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_53 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_54 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_55 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_56 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_57 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_58 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_59 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_6 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_60 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_61 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_62 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_63 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_7 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_8 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_9 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	rg_fence_stall <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_handling_miss <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_performing_replay <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_polling_mode <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_recent_req <= `BSV_ASSIGNMENT_DELAY 6'd0;
	v_reg_valid_0 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_10 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_11 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_12 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_13 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_14 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_15 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_16 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_17 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_18 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_19 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_2 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_20 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_21 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_22 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_23 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_24 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_25 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_26 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_27 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_28 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_29 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_3 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_30 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_31 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_32 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_33 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_34 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_35 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_36 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_37 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_38 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_39 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_4 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_40 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_41 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_42 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_43 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_44 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_45 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_46 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_47 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_48 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_49 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_5 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_50 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_51 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_52 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_53 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_54 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_55 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_56 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_57 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_58 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_59 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_6 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_60 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_61 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_62 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_63 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_7 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_8 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_9 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (ff_core_response_rv_EN)
	  ff_core_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_core_response_rv_D_IN;
	if (ff_from_tlb_rv_EN)
	  ff_from_tlb_rv <= `BSV_ASSIGNMENT_DELAY ff_from_tlb_rv_D_IN;
	if (ff_read_mem_response_rv_EN)
	  ff_read_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_read_mem_response_rv_D_IN;
	if (replacement_v_count_0_EN)
	  replacement_v_count_0 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_0_D_IN;
	if (replacement_v_count_1_EN)
	  replacement_v_count_1 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_1_D_IN;
	if (replacement_v_count_10_EN)
	  replacement_v_count_10 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_10_D_IN;
	if (replacement_v_count_11_EN)
	  replacement_v_count_11 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_11_D_IN;
	if (replacement_v_count_12_EN)
	  replacement_v_count_12 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_12_D_IN;
	if (replacement_v_count_13_EN)
	  replacement_v_count_13 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_13_D_IN;
	if (replacement_v_count_14_EN)
	  replacement_v_count_14 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_14_D_IN;
	if (replacement_v_count_15_EN)
	  replacement_v_count_15 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_15_D_IN;
	if (replacement_v_count_16_EN)
	  replacement_v_count_16 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_16_D_IN;
	if (replacement_v_count_17_EN)
	  replacement_v_count_17 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_17_D_IN;
	if (replacement_v_count_18_EN)
	  replacement_v_count_18 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_18_D_IN;
	if (replacement_v_count_19_EN)
	  replacement_v_count_19 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_19_D_IN;
	if (replacement_v_count_2_EN)
	  replacement_v_count_2 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_2_D_IN;
	if (replacement_v_count_20_EN)
	  replacement_v_count_20 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_20_D_IN;
	if (replacement_v_count_21_EN)
	  replacement_v_count_21 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_21_D_IN;
	if (replacement_v_count_22_EN)
	  replacement_v_count_22 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_22_D_IN;
	if (replacement_v_count_23_EN)
	  replacement_v_count_23 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_23_D_IN;
	if (replacement_v_count_24_EN)
	  replacement_v_count_24 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_24_D_IN;
	if (replacement_v_count_25_EN)
	  replacement_v_count_25 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_25_D_IN;
	if (replacement_v_count_26_EN)
	  replacement_v_count_26 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_26_D_IN;
	if (replacement_v_count_27_EN)
	  replacement_v_count_27 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_27_D_IN;
	if (replacement_v_count_28_EN)
	  replacement_v_count_28 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_28_D_IN;
	if (replacement_v_count_29_EN)
	  replacement_v_count_29 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_29_D_IN;
	if (replacement_v_count_3_EN)
	  replacement_v_count_3 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_3_D_IN;
	if (replacement_v_count_30_EN)
	  replacement_v_count_30 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_30_D_IN;
	if (replacement_v_count_31_EN)
	  replacement_v_count_31 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_31_D_IN;
	if (replacement_v_count_32_EN)
	  replacement_v_count_32 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_32_D_IN;
	if (replacement_v_count_33_EN)
	  replacement_v_count_33 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_33_D_IN;
	if (replacement_v_count_34_EN)
	  replacement_v_count_34 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_34_D_IN;
	if (replacement_v_count_35_EN)
	  replacement_v_count_35 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_35_D_IN;
	if (replacement_v_count_36_EN)
	  replacement_v_count_36 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_36_D_IN;
	if (replacement_v_count_37_EN)
	  replacement_v_count_37 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_37_D_IN;
	if (replacement_v_count_38_EN)
	  replacement_v_count_38 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_38_D_IN;
	if (replacement_v_count_39_EN)
	  replacement_v_count_39 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_39_D_IN;
	if (replacement_v_count_4_EN)
	  replacement_v_count_4 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_4_D_IN;
	if (replacement_v_count_40_EN)
	  replacement_v_count_40 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_40_D_IN;
	if (replacement_v_count_41_EN)
	  replacement_v_count_41 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_41_D_IN;
	if (replacement_v_count_42_EN)
	  replacement_v_count_42 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_42_D_IN;
	if (replacement_v_count_43_EN)
	  replacement_v_count_43 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_43_D_IN;
	if (replacement_v_count_44_EN)
	  replacement_v_count_44 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_44_D_IN;
	if (replacement_v_count_45_EN)
	  replacement_v_count_45 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_45_D_IN;
	if (replacement_v_count_46_EN)
	  replacement_v_count_46 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_46_D_IN;
	if (replacement_v_count_47_EN)
	  replacement_v_count_47 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_47_D_IN;
	if (replacement_v_count_48_EN)
	  replacement_v_count_48 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_48_D_IN;
	if (replacement_v_count_49_EN)
	  replacement_v_count_49 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_49_D_IN;
	if (replacement_v_count_5_EN)
	  replacement_v_count_5 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_5_D_IN;
	if (replacement_v_count_50_EN)
	  replacement_v_count_50 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_50_D_IN;
	if (replacement_v_count_51_EN)
	  replacement_v_count_51 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_51_D_IN;
	if (replacement_v_count_52_EN)
	  replacement_v_count_52 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_52_D_IN;
	if (replacement_v_count_53_EN)
	  replacement_v_count_53 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_53_D_IN;
	if (replacement_v_count_54_EN)
	  replacement_v_count_54 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_54_D_IN;
	if (replacement_v_count_55_EN)
	  replacement_v_count_55 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_55_D_IN;
	if (replacement_v_count_56_EN)
	  replacement_v_count_56 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_56_D_IN;
	if (replacement_v_count_57_EN)
	  replacement_v_count_57 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_57_D_IN;
	if (replacement_v_count_58_EN)
	  replacement_v_count_58 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_58_D_IN;
	if (replacement_v_count_59_EN)
	  replacement_v_count_59 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_59_D_IN;
	if (replacement_v_count_6_EN)
	  replacement_v_count_6 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_6_D_IN;
	if (replacement_v_count_60_EN)
	  replacement_v_count_60 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_60_D_IN;
	if (replacement_v_count_61_EN)
	  replacement_v_count_61 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_61_D_IN;
	if (replacement_v_count_62_EN)
	  replacement_v_count_62 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_62_D_IN;
	if (replacement_v_count_63_EN)
	  replacement_v_count_63 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_63_D_IN;
	if (replacement_v_count_7_EN)
	  replacement_v_count_7 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_7_D_IN;
	if (replacement_v_count_8_EN)
	  replacement_v_count_8 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_8_D_IN;
	if (replacement_v_count_9_EN)
	  replacement_v_count_9 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_9_D_IN;
	if (rg_fence_stall_EN)
	  rg_fence_stall <= `BSV_ASSIGNMENT_DELAY rg_fence_stall_D_IN;
	if (rg_handling_miss_EN)
	  rg_handling_miss <= `BSV_ASSIGNMENT_DELAY rg_handling_miss_D_IN;
	if (rg_performing_replay_EN)
	  rg_performing_replay <= `BSV_ASSIGNMENT_DELAY
	      rg_performing_replay_D_IN;
	if (rg_polling_mode_EN)
	  rg_polling_mode <= `BSV_ASSIGNMENT_DELAY rg_polling_mode_D_IN;
	if (rg_recent_req_EN)
	  rg_recent_req <= `BSV_ASSIGNMENT_DELAY rg_recent_req_D_IN;
	if (v_reg_valid_0_EN)
	  v_reg_valid_0 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_0_D_IN;
	if (v_reg_valid_1_EN)
	  v_reg_valid_1 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_1_D_IN;
	if (v_reg_valid_10_EN)
	  v_reg_valid_10 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_10_D_IN;
	if (v_reg_valid_11_EN)
	  v_reg_valid_11 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_11_D_IN;
	if (v_reg_valid_12_EN)
	  v_reg_valid_12 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_12_D_IN;
	if (v_reg_valid_13_EN)
	  v_reg_valid_13 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_13_D_IN;
	if (v_reg_valid_14_EN)
	  v_reg_valid_14 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_14_D_IN;
	if (v_reg_valid_15_EN)
	  v_reg_valid_15 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_15_D_IN;
	if (v_reg_valid_16_EN)
	  v_reg_valid_16 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_16_D_IN;
	if (v_reg_valid_17_EN)
	  v_reg_valid_17 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_17_D_IN;
	if (v_reg_valid_18_EN)
	  v_reg_valid_18 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_18_D_IN;
	if (v_reg_valid_19_EN)
	  v_reg_valid_19 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_19_D_IN;
	if (v_reg_valid_2_EN)
	  v_reg_valid_2 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_2_D_IN;
	if (v_reg_valid_20_EN)
	  v_reg_valid_20 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_20_D_IN;
	if (v_reg_valid_21_EN)
	  v_reg_valid_21 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_21_D_IN;
	if (v_reg_valid_22_EN)
	  v_reg_valid_22 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_22_D_IN;
	if (v_reg_valid_23_EN)
	  v_reg_valid_23 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_23_D_IN;
	if (v_reg_valid_24_EN)
	  v_reg_valid_24 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_24_D_IN;
	if (v_reg_valid_25_EN)
	  v_reg_valid_25 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_25_D_IN;
	if (v_reg_valid_26_EN)
	  v_reg_valid_26 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_26_D_IN;
	if (v_reg_valid_27_EN)
	  v_reg_valid_27 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_27_D_IN;
	if (v_reg_valid_28_EN)
	  v_reg_valid_28 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_28_D_IN;
	if (v_reg_valid_29_EN)
	  v_reg_valid_29 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_29_D_IN;
	if (v_reg_valid_3_EN)
	  v_reg_valid_3 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_3_D_IN;
	if (v_reg_valid_30_EN)
	  v_reg_valid_30 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_30_D_IN;
	if (v_reg_valid_31_EN)
	  v_reg_valid_31 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_31_D_IN;
	if (v_reg_valid_32_EN)
	  v_reg_valid_32 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_32_D_IN;
	if (v_reg_valid_33_EN)
	  v_reg_valid_33 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_33_D_IN;
	if (v_reg_valid_34_EN)
	  v_reg_valid_34 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_34_D_IN;
	if (v_reg_valid_35_EN)
	  v_reg_valid_35 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_35_D_IN;
	if (v_reg_valid_36_EN)
	  v_reg_valid_36 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_36_D_IN;
	if (v_reg_valid_37_EN)
	  v_reg_valid_37 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_37_D_IN;
	if (v_reg_valid_38_EN)
	  v_reg_valid_38 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_38_D_IN;
	if (v_reg_valid_39_EN)
	  v_reg_valid_39 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_39_D_IN;
	if (v_reg_valid_4_EN)
	  v_reg_valid_4 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_4_D_IN;
	if (v_reg_valid_40_EN)
	  v_reg_valid_40 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_40_D_IN;
	if (v_reg_valid_41_EN)
	  v_reg_valid_41 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_41_D_IN;
	if (v_reg_valid_42_EN)
	  v_reg_valid_42 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_42_D_IN;
	if (v_reg_valid_43_EN)
	  v_reg_valid_43 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_43_D_IN;
	if (v_reg_valid_44_EN)
	  v_reg_valid_44 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_44_D_IN;
	if (v_reg_valid_45_EN)
	  v_reg_valid_45 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_45_D_IN;
	if (v_reg_valid_46_EN)
	  v_reg_valid_46 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_46_D_IN;
	if (v_reg_valid_47_EN)
	  v_reg_valid_47 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_47_D_IN;
	if (v_reg_valid_48_EN)
	  v_reg_valid_48 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_48_D_IN;
	if (v_reg_valid_49_EN)
	  v_reg_valid_49 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_49_D_IN;
	if (v_reg_valid_5_EN)
	  v_reg_valid_5 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_5_D_IN;
	if (v_reg_valid_50_EN)
	  v_reg_valid_50 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_50_D_IN;
	if (v_reg_valid_51_EN)
	  v_reg_valid_51 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_51_D_IN;
	if (v_reg_valid_52_EN)
	  v_reg_valid_52 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_52_D_IN;
	if (v_reg_valid_53_EN)
	  v_reg_valid_53 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_53_D_IN;
	if (v_reg_valid_54_EN)
	  v_reg_valid_54 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_54_D_IN;
	if (v_reg_valid_55_EN)
	  v_reg_valid_55 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_55_D_IN;
	if (v_reg_valid_56_EN)
	  v_reg_valid_56 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_56_D_IN;
	if (v_reg_valid_57_EN)
	  v_reg_valid_57 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_57_D_IN;
	if (v_reg_valid_58_EN)
	  v_reg_valid_58 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_58_D_IN;
	if (v_reg_valid_59_EN)
	  v_reg_valid_59 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_59_D_IN;
	if (v_reg_valid_6_EN)
	  v_reg_valid_6 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_6_D_IN;
	if (v_reg_valid_60_EN)
	  v_reg_valid_60 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_60_D_IN;
	if (v_reg_valid_61_EN)
	  v_reg_valid_61 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_61_D_IN;
	if (v_reg_valid_62_EN)
	  v_reg_valid_62 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_62_D_IN;
	if (v_reg_valid_63_EN)
	  v_reg_valid_63 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_63_D_IN;
	if (v_reg_valid_7_EN)
	  v_reg_valid_7 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_7_D_IN;
	if (v_reg_valid_8_EN)
	  v_reg_valid_8 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_8_D_IN;
	if (v_reg_valid_9_EN)
	  v_reg_valid_9 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_9_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ff_core_response_rv = 42'h2AAAAAAAAAA;
    ff_from_tlb_rv = 40'hAAAAAAAAAA;
    ff_read_mem_response_rv = 67'h2AAAAAAAAAAAAAAAA;
    replacement_v_count_0 = 2'h2;
    replacement_v_count_1 = 2'h2;
    replacement_v_count_10 = 2'h2;
    replacement_v_count_11 = 2'h2;
    replacement_v_count_12 = 2'h2;
    replacement_v_count_13 = 2'h2;
    replacement_v_count_14 = 2'h2;
    replacement_v_count_15 = 2'h2;
    replacement_v_count_16 = 2'h2;
    replacement_v_count_17 = 2'h2;
    replacement_v_count_18 = 2'h2;
    replacement_v_count_19 = 2'h2;
    replacement_v_count_2 = 2'h2;
    replacement_v_count_20 = 2'h2;
    replacement_v_count_21 = 2'h2;
    replacement_v_count_22 = 2'h2;
    replacement_v_count_23 = 2'h2;
    replacement_v_count_24 = 2'h2;
    replacement_v_count_25 = 2'h2;
    replacement_v_count_26 = 2'h2;
    replacement_v_count_27 = 2'h2;
    replacement_v_count_28 = 2'h2;
    replacement_v_count_29 = 2'h2;
    replacement_v_count_3 = 2'h2;
    replacement_v_count_30 = 2'h2;
    replacement_v_count_31 = 2'h2;
    replacement_v_count_32 = 2'h2;
    replacement_v_count_33 = 2'h2;
    replacement_v_count_34 = 2'h2;
    replacement_v_count_35 = 2'h2;
    replacement_v_count_36 = 2'h2;
    replacement_v_count_37 = 2'h2;
    replacement_v_count_38 = 2'h2;
    replacement_v_count_39 = 2'h2;
    replacement_v_count_4 = 2'h2;
    replacement_v_count_40 = 2'h2;
    replacement_v_count_41 = 2'h2;
    replacement_v_count_42 = 2'h2;
    replacement_v_count_43 = 2'h2;
    replacement_v_count_44 = 2'h2;
    replacement_v_count_45 = 2'h2;
    replacement_v_count_46 = 2'h2;
    replacement_v_count_47 = 2'h2;
    replacement_v_count_48 = 2'h2;
    replacement_v_count_49 = 2'h2;
    replacement_v_count_5 = 2'h2;
    replacement_v_count_50 = 2'h2;
    replacement_v_count_51 = 2'h2;
    replacement_v_count_52 = 2'h2;
    replacement_v_count_53 = 2'h2;
    replacement_v_count_54 = 2'h2;
    replacement_v_count_55 = 2'h2;
    replacement_v_count_56 = 2'h2;
    replacement_v_count_57 = 2'h2;
    replacement_v_count_58 = 2'h2;
    replacement_v_count_59 = 2'h2;
    replacement_v_count_6 = 2'h2;
    replacement_v_count_60 = 2'h2;
    replacement_v_count_61 = 2'h2;
    replacement_v_count_62 = 2'h2;
    replacement_v_count_63 = 2'h2;
    replacement_v_count_7 = 2'h2;
    replacement_v_count_8 = 2'h2;
    replacement_v_count_9 = 2'h2;
    rg_fence_stall = 1'h0;
    rg_handling_miss = 1'h0;
    rg_performing_replay = 1'h0;
    rg_polling_mode = 1'h0;
    rg_recent_req = 6'h2A;
    v_reg_valid_0 = 4'hA;
    v_reg_valid_1 = 4'hA;
    v_reg_valid_10 = 4'hA;
    v_reg_valid_11 = 4'hA;
    v_reg_valid_12 = 4'hA;
    v_reg_valid_13 = 4'hA;
    v_reg_valid_14 = 4'hA;
    v_reg_valid_15 = 4'hA;
    v_reg_valid_16 = 4'hA;
    v_reg_valid_17 = 4'hA;
    v_reg_valid_18 = 4'hA;
    v_reg_valid_19 = 4'hA;
    v_reg_valid_2 = 4'hA;
    v_reg_valid_20 = 4'hA;
    v_reg_valid_21 = 4'hA;
    v_reg_valid_22 = 4'hA;
    v_reg_valid_23 = 4'hA;
    v_reg_valid_24 = 4'hA;
    v_reg_valid_25 = 4'hA;
    v_reg_valid_26 = 4'hA;
    v_reg_valid_27 = 4'hA;
    v_reg_valid_28 = 4'hA;
    v_reg_valid_29 = 4'hA;
    v_reg_valid_3 = 4'hA;
    v_reg_valid_30 = 4'hA;
    v_reg_valid_31 = 4'hA;
    v_reg_valid_32 = 4'hA;
    v_reg_valid_33 = 4'hA;
    v_reg_valid_34 = 4'hA;
    v_reg_valid_35 = 4'hA;
    v_reg_valid_36 = 4'hA;
    v_reg_valid_37 = 4'hA;
    v_reg_valid_38 = 4'hA;
    v_reg_valid_39 = 4'hA;
    v_reg_valid_4 = 4'hA;
    v_reg_valid_40 = 4'hA;
    v_reg_valid_41 = 4'hA;
    v_reg_valid_42 = 4'hA;
    v_reg_valid_43 = 4'hA;
    v_reg_valid_44 = 4'hA;
    v_reg_valid_45 = 4'hA;
    v_reg_valid_46 = 4'hA;
    v_reg_valid_47 = 4'hA;
    v_reg_valid_48 = 4'hA;
    v_reg_valid_49 = 4'hA;
    v_reg_valid_5 = 4'hA;
    v_reg_valid_50 = 4'hA;
    v_reg_valid_51 = 4'hA;
    v_reg_valid_52 = 4'hA;
    v_reg_valid_53 = 4'hA;
    v_reg_valid_54 = 4'hA;
    v_reg_valid_55 = 4'hA;
    v_reg_valid_56 = 4'hA;
    v_reg_valid_57 = 4'hA;
    v_reg_valid_58 = 4'hA;
    v_reg_valid_59 = 4'hA;
    v_reg_valid_6 = 4'hA;
    v_reg_valid_60 = 4'hA;
    v_reg_valid_61 = 4'hA;
    v_reg_valid_62 = 4'hA;
    v_reg_valid_63 = 4'hA;
    v_reg_valid_7 = 4'hA;
    v_reg_valid_8 = 4'hA;
    v_reg_valid_9 = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1065 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1066 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1067 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_065_OR_TASK_testplusargs_066_ETC___d1073 =
	(TASK_testplusargs___d1065 ||
	 TASK_testplusargs___d1066 && TASK_testplusargs___d1067) &&
	put_core_req_put[2];
    TASK_testplusargs_065_OR_TASK_testplusargs_066_ETC___d1075 =
	(TASK_testplusargs___d1065 ||
	 TASK_testplusargs___d1066 && TASK_testplusargs___d1067) &&
	!put_core_req_put[2];
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  v__h66952 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1065 ||
	   TASK_testplusargs___d1066 && TASK_testplusargs___d1067))
	$write("[%10d", v__h66952, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1065 ||
	   TASK_testplusargs___d1066 && TASK_testplusargs___d1067))
	$write("[%2d]ICACHE: Receiving request: ", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1065 ||
	   TASK_testplusargs___d1066 && TASK_testplusargs___d1067))
	$write("ICache_core_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1065 ||
	   TASK_testplusargs___d1066 && TASK_testplusargs___d1067))
	$write("'h%h", put_core_req_put[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1065 ||
	   TASK_testplusargs___d1066 && TASK_testplusargs___d1067))
	$write(", ", "fence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  TASK_testplusargs_065_OR_TASK_testplusargs_066_ETC___d1073)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  TASK_testplusargs_065_OR_TASK_testplusargs_066_ETC___d1075)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1065 ||
	   TASK_testplusargs___d1066 && TASK_testplusargs___d1067))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1065 ||
	   TASK_testplusargs___d1066 && TASK_testplusargs___d1067))
	$write("'h%h", put_core_req_put[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1065 ||
	   TASK_testplusargs___d1066 && TASK_testplusargs___d1067))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1079 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1080 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1081 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  v__h67344 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1079 ||
	   TASK_testplusargs___d1080 && TASK_testplusargs___d1081))
	$write("[%10d", v__h67344, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1079 ||
	   TASK_testplusargs___d1080 && TASK_testplusargs___d1081))
	$write("[%2d]ICACHE: set:%d", id, set_index__h67079);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1079 ||
	   TASK_testplusargs___d1080 && TASK_testplusargs___d1081))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d37 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d38 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d39 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d45 =
	(TASK_testplusargs___d37 ||
	 TASK_testplusargs___d38 && TASK_testplusargs___d39) &&
	ff_from_tlb_rv_port1__read[6];
    TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d47 =
	(TASK_testplusargs___d37 ||
	 TASK_testplusargs___d38 && TASK_testplusargs___d39) &&
	!ff_from_tlb_rv_port1__read[6];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h21008 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d37 ||
	   TASK_testplusargs___d38 && TASK_testplusargs___d39))
	$write("[%10d", v__h21008, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d37 ||
	   TASK_testplusargs___d38 && TASK_testplusargs___d39))
	$write("[%2d]ICACHE: Response from PA:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d37 ||
	   TASK_testplusargs___d38 && TASK_testplusargs___d39))
	$write("ITLB_core_response { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d37 ||
	   TASK_testplusargs___d38 && TASK_testplusargs___d39))
	$write("'h%h", ff_from_tlb_rv_port1__read[38:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d37 ||
	   TASK_testplusargs___d38 && TASK_testplusargs___d39))
	$write(", ", "trap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d45)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d47)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d37 ||
	   TASK_testplusargs___d38 && TASK_testplusargs___d39))
	$write(", ", "cause: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d37 ||
	   TASK_testplusargs___d38 && TASK_testplusargs___d39))
	$write("'h%h", ff_from_tlb_rv_port1__read[5:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d37 ||
	   TASK_testplusargs___d38 && TASK_testplusargs___d39))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d49 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d50 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d51 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h21241 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d49 ||
	   TASK_testplusargs___d50 && TASK_testplusargs___d51))
	$write("[%10d", v__h21241, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d49 ||
	   TASK_testplusargs___d50 && TASK_testplusargs___d51))
	$write("[%2d]ICACHE: lv_tag_resp:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d49 ||
	   TASK_testplusargs___d50 && TASK_testplusargs___d51))
	$write("TagResponse { ", "waymask: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d49 ||
	   TASK_testplusargs___d50 && TASK_testplusargs___d51))
	$write("'h%h", m_tag_mv_read_response[35:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d49 ||
	   TASK_testplusargs___d50 && TASK_testplusargs___d51))
	$write(", ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d49 ||
	   TASK_testplusargs___d50 && TASK_testplusargs___d51))
	$write("'h%h", m_tag_mv_read_response[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d49 ||
	   TASK_testplusargs___d50 && TASK_testplusargs___d51))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d58 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d59 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d60 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h21412 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d58 ||
	   TASK_testplusargs___d59 && TASK_testplusargs___d60))
	$write("[%10d", v__h21412, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d58 ||
	   TASK_testplusargs___d59 && TASK_testplusargs___d60))
	$write("[%2d]ICACHE: lv_data_resp:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d58 ||
	   TASK_testplusargs___d59 && TASK_testplusargs___d60))
	$write("DataResponse { ", "line: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d58 ||
	   TASK_testplusargs___d59 && TASK_testplusargs___d60))
	$write("'h%h", m_data_mv_read_response[543:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d58 ||
	   TASK_testplusargs___d59 && TASK_testplusargs___d60))
	$write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d58 ||
	   TASK_testplusargs___d59 && TASK_testplusargs___d60))
	$write("'h%h", m_data_mv_read_response[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d58 ||
	   TASK_testplusargs___d59 && TASK_testplusargs___d60))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_0_CONCAT_m_tag_mv_read_response_ff_from_tl_ETC___d180)
	$display("Dynamic assertion failed: \"caches_mmu/src/icache_1rw/icache.bsv\", line 514, column 48\nICACHE: More than one way is a hit in the cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_0_CONCAT_m_tag_mv_read_response_ff_from_tl_ETC___d180)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d181 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d182 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d183 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h23631 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write("[%10d", v__h23631, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write("[%2d]ICACHE: RAM Req:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write("ICache_core_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write("'h%h", ff_core_request_D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write(", ", "fence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write("'h%h", ff_core_request_D_OUT[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d181 ||
	   TASK_testplusargs___d182 && TASK_testplusargs___d183))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d188 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d189 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d190 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h23784 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d188 ||
	   TASK_testplusargs___d189 && TASK_testplusargs___d190))
	$write("[%10d", v__h23784, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d188 ||
	   TASK_testplusargs___d189 && TASK_testplusargs___d190))
	$write("[%2d]ICACHE: RAM Hit:%b ", id, lv_hitmask__h21344);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d188 ||
	   TASK_testplusargs___d189 && TASK_testplusargs___d190))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  TASK_testplusargs___d196 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  TASK_testplusargs___d197 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  TASK_testplusargs___d198 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  v__h23892 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d196 ||
	   TASK_testplusargs___d197 && TASK_testplusargs___d198))
	$write("[%10d", v__h23892, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d196 ||
	   TASK_testplusargs___d197 && TASK_testplusargs___d198))
	$write("[%2d]ICACHE: FB: Req:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d196 ||
	   TASK_testplusargs___d197 && TASK_testplusargs___d198))
	$write("ICache_core_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d196 ||
	   TASK_testplusargs___d197 && TASK_testplusargs___d198))
	$write("'h%h", ff_core_request_D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d196 ||
	   TASK_testplusargs___d197 && TASK_testplusargs___d198))
	$write(", ", "fence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d196 ||
	   TASK_testplusargs___d197 && TASK_testplusargs___d198))
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d196 ||
	   TASK_testplusargs___d197 && TASK_testplusargs___d198))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d196 ||
	   TASK_testplusargs___d197 && TASK_testplusargs___d198))
	$write("'h%h", ff_core_request_D_OUT[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d196 ||
	   TASK_testplusargs___d197 && TASK_testplusargs___d198))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  TASK_testplusargs___d205 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  TASK_testplusargs___d206 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  TASK_testplusargs___d207 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d216 =
	(TASK_testplusargs___d205 ||
	 TASK_testplusargs___d206 && TASK_testplusargs___d207) &&
	m_fillbuffer_mav_polling_response[1];
    TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d218 =
	(TASK_testplusargs___d205 ||
	 TASK_testplusargs___d206 && TASK_testplusargs___d207) &&
	!m_fillbuffer_mav_polling_response[1];
    TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d220 =
	(TASK_testplusargs___d205 ||
	 TASK_testplusargs___d206 && TASK_testplusargs___d207) &&
	m_fillbuffer_mav_polling_response[0];
    TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d222 =
	(TASK_testplusargs___d205 ||
	 TASK_testplusargs___d206 && TASK_testplusargs___d207) &&
	!m_fillbuffer_mav_polling_response[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  v__h24109 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d205 ||
	   TASK_testplusargs___d206 && TASK_testplusargs___d207))
	$write("[%10d", v__h24109, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d205 ||
	   TASK_testplusargs___d206 && TASK_testplusargs___d207))
	$write("[%2d]ICACHE: FB: Polling Response:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d205 ||
	   TASK_testplusargs___d206 && TASK_testplusargs___d207))
	$write("PollingResponse { ", "err: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d205 ||
	   TASK_testplusargs___d206 && TASK_testplusargs___d207))
	$write("'h%h", m_fillbuffer_mav_polling_response[38]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d205 ||
	   TASK_testplusargs___d206 && TASK_testplusargs___d207))
	$write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d205 ||
	   TASK_testplusargs___d206 && TASK_testplusargs___d207))
	$write("'h%h", m_fillbuffer_mav_polling_response[37:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d205 ||
	   TASK_testplusargs___d206 && TASK_testplusargs___d207))
	$write(", ", "waymask: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d205 ||
	   TASK_testplusargs___d206 && TASK_testplusargs___d207))
	$write("'h%h", m_fillbuffer_mav_polling_response[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d205 ||
	   TASK_testplusargs___d206 && TASK_testplusargs___d207))
	$write(", ", "line_hit: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d216)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d218)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d205 ||
	   TASK_testplusargs___d206 && TASK_testplusargs___d207))
	$write(", ", "word_hit: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d220)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  TASK_testplusargs_05_OR_TASK_testplusargs_06_A_ETC___d222)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d205 ||
	   TASK_testplusargs___d206 && TASK_testplusargs___d207))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d205 ||
	   TASK_testplusargs___d206 && TASK_testplusargs___d207))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1])
	begin
	  TASK_testplusargs___d226 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1])
	begin
	  TASK_testplusargs___d227 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1])
	begin
	  TASK_testplusargs___d228 = $test$plusargs("l1");
	  #0;
	end
    m_fillbuffer_mav_polling_response_11_BIT_1_15__ETC___d231 =
	m_fillbuffer_mav_polling_response[1] &&
	(TASK_testplusargs___d226 ||
	 TASK_testplusargs___d227 && TASK_testplusargs___d228);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1])
	begin
	  v__h24306 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response_11_BIT_1_15__ETC___d231)
	$write("[%10d", v__h24306, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response_11_BIT_1_15__ETC___d231)
	$write("[%2d]ICACHE: FB: Hit in Line:%b for Addr:%h",
	       id,
	       m_fillbuffer_mav_polling_response[5:2],
	       ff_from_tlb_rv_port1__read[38:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response_11_BIT_1_15__ETC___d231)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1] &&
	  m_fillbuffer_mav_polling_response[0])
	begin
	  TASK_testplusargs___d236 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1] &&
	  m_fillbuffer_mav_polling_response[0])
	begin
	  TASK_testplusargs___d237 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1] &&
	  m_fillbuffer_mav_polling_response[0])
	begin
	  TASK_testplusargs___d238 = $test$plusargs("l1");
	  #0;
	end
    m_fillbuffer_mav_polling_response_11_BIT_0_19__ETC___d241 =
	m_fillbuffer_mav_polling_response[0] &&
	(TASK_testplusargs___d236 ||
	 TASK_testplusargs___d237 && TASK_testplusargs___d238);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1] &&
	  m_fillbuffer_mav_polling_response[0])
	begin
	  v__h24530 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1] &&
	  m_fillbuffer_mav_polling_response_11_BIT_0_19__ETC___d241)
	$write("[%10d", v__h24530, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1] &&
	  m_fillbuffer_mav_polling_response_11_BIT_0_19__ETC___d241)
	$write("[%2d]ICACHE: FB: Required Word found", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1] &&
	  m_fillbuffer_mav_polling_response_11_BIT_0_19__ETC___d241)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1] &&
	  !m_fillbuffer_mav_polling_response[0])
	begin
	  TASK_testplusargs___d244 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1] &&
	  !m_fillbuffer_mav_polling_response[0])
	begin
	  TASK_testplusargs___d245 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1] &&
	  !m_fillbuffer_mav_polling_response[0])
	begin
	  TASK_testplusargs___d246 = $test$plusargs("l1");
	  #0;
	end
    NOT_m_fillbuffer_mav_polling_response_11_BIT_0_ETC___d249 =
	!m_fillbuffer_mav_polling_response[0] &&
	(TASK_testplusargs___d244 ||
	 TASK_testplusargs___d245 && TASK_testplusargs___d246);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1] &&
	  !m_fillbuffer_mav_polling_response[0])
	begin
	  v__h24703 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1] &&
	  NOT_m_fillbuffer_mav_polling_response_11_BIT_0_ETC___d249)
	$write("[%10d", v__h24703, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1] &&
	  NOT_m_fillbuffer_mav_polling_response_11_BIT_0_ETC___d249)
	$write("[%2d]ICACHE: FB: Required word not available yet", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  m_fillbuffer_mav_polling_response[1] &&
	  NOT_m_fillbuffer_mav_polling_response_11_BIT_0_ETC___d249)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  !m_fillbuffer_mav_polling_response[1])
	begin
	  TASK_testplusargs___d252 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  !m_fillbuffer_mav_polling_response[1])
	begin
	  TASK_testplusargs___d253 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  !m_fillbuffer_mav_polling_response[1])
	begin
	  TASK_testplusargs___d254 = $test$plusargs("l1");
	  #0;
	end
    NOT_m_fillbuffer_mav_polling_response_11_BIT_1_ETC___d257 =
	!m_fillbuffer_mav_polling_response[1] &&
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  !m_fillbuffer_mav_polling_response[1])
	begin
	  v__h24827 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  NOT_m_fillbuffer_mav_polling_response_11_BIT_1_ETC___d257)
	$write("[%10d", v__h24827, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  NOT_m_fillbuffer_mav_polling_response_11_BIT_1_ETC___d257)
	$write("[%2d]ICACHE: FB: Miss", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  NOT_m_fillbuffer_mav_polling_response_11_BIT_1_ETC___d257)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d778 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d779 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d780 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d786 =
	(TASK_testplusargs___d778 ||
	 TASK_testplusargs___d779 && TASK_testplusargs___d780) &&
	ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d788 =
	(TASK_testplusargs___d778 ||
	 TASK_testplusargs___d779 && TASK_testplusargs___d780) &&
	!ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d790 =
	(TASK_testplusargs___d778 ||
	 TASK_testplusargs___d779 && TASK_testplusargs___d780) &&
	ff_read_mem_response_rv_port1__read[0];
    TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d792 =
	(TASK_testplusargs___d778 ||
	 TASK_testplusargs___d779 && TASK_testplusargs___d780) &&
	!ff_read_mem_response_rv_port1__read[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  v__h54932 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d778 ||
	   TASK_testplusargs___d779 && TASK_testplusargs___d780))
	$write("[%10d", v__h54932, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d778 ||
	   TASK_testplusargs___d779 && TASK_testplusargs___d780))
	$write("[%2d]ICACHE: FILL: Response from Memory:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d778 ||
	   TASK_testplusargs___d779 && TASK_testplusargs___d780))
	$write("ICache_mem_readresp { ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d778 ||
	   TASK_testplusargs___d779 && TASK_testplusargs___d780))
	$write("'h%h", ff_read_mem_response_rv_port1__read[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d778 ||
	   TASK_testplusargs___d779 && TASK_testplusargs___d780))
	$write(", ", "last: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d786)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d788)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d778 ||
	   TASK_testplusargs___d779 && TASK_testplusargs___d780))
	$write(", ", "err: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d790)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d792)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d778 ||
	   TASK_testplusargs___d779 && TASK_testplusargs___d780))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d778 ||
	   TASK_testplusargs___d779 && TASK_testplusargs___d780))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response)
	begin
	  TASK_testplusargs___d801 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response)
	begin
	  TASK_testplusargs___d802 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response)
	begin
	  TASK_testplusargs___d803 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d807 =
	(TASK_testplusargs___d801 ||
	 TASK_testplusargs___d802 && TASK_testplusargs___d803) &&
	ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d808 =
	(TASK_testplusargs___d801 ||
	 TASK_testplusargs___d802 && TASK_testplusargs___d803) &&
	!ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d809 =
	(TASK_testplusargs___d801 ||
	 TASK_testplusargs___d802 && TASK_testplusargs___d803) &&
	ff_read_mem_response_rv_port1__read[0];
    TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d810 =
	(TASK_testplusargs___d801 ||
	 TASK_testplusargs___d802 && TASK_testplusargs___d803) &&
	!ff_read_mem_response_rv_port1__read[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response)
	begin
	  v__h55228 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d801 ||
	   TASK_testplusargs___d802 && TASK_testplusargs___d803))
	$write("[%10d", v__h55228, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d801 ||
	   TASK_testplusargs___d802 && TASK_testplusargs___d803))
	$write("[%2d]ICACHE: NC Response from Memory: ", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d801 ||
	   TASK_testplusargs___d802 && TASK_testplusargs___d803))
	$write("ICache_mem_readresp { ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d801 ||
	   TASK_testplusargs___d802 && TASK_testplusargs___d803))
	$write("'h%h", ff_read_mem_response_rv_port1__read[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d801 ||
	   TASK_testplusargs___d802 && TASK_testplusargs___d803))
	$write(", ", "last: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d807)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d808)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d801 ||
	   TASK_testplusargs___d802 && TASK_testplusargs___d803))
	$write(", ", "err: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d809)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  TASK_testplusargs_01_OR_TASK_testplusargs_02_A_ETC___d810)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d801 ||
	   TASK_testplusargs___d802 && TASK_testplusargs___d803))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d801 ||
	   TASK_testplusargs___d802 && TASK_testplusargs___d803))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d12 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d13 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d14 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  v__h10598 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d12 ||
	   TASK_testplusargs___d13 && TASK_testplusargs___d14))
	$write("[%10d", v__h10598, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d12 ||
	   TASK_testplusargs___d13 && TASK_testplusargs___d14))
	$write("[%2d]ICACHE : Fence operation in progress", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d12 ||
	   TASK_testplusargs___d13 && TASK_testplusargs___d14))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !wr_fault_whas &&
	  x__h24963 + y__h24964 != 2'd1)
	$display("Dynamic assertion failed: \"caches_mmu/src/icache_1rw/icache.bsv\", line 597, column 51\nMore than one data structure shows a hit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !wr_fault_whas &&
	  x__h24963 + y__h24964 != 2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__72_THEN_wr_ram_state_wge_ETC___d274 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d299 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__72_THEN_wr_ram_state_wge_ETC___d274 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d300 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__72_THEN_wr_ram_state_wge_ETC___d274 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d301 = $test$plusargs("l0");
	  #0;
	end
    IF_wr_ram_state_whas__72_THEN_wr_ram_state_wge_ETC___d304 =
	IF_wr_ram_state_whas__72_THEN_wr_ram_state_wge_ETC___d274 == 2'd1 &&
	!wr_fault_whas &&
	(TASK_testplusargs___d299 ||
	 TASK_testplusargs___d300 && TASK_testplusargs___d301);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__72_THEN_wr_ram_state_wge_ETC___d274 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  v__h25272 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__72_THEN_wr_ram_state_wge_ETC___d304)
	$write("[%10d", v__h25272, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__72_THEN_wr_ram_state_wge_ETC___d304)
	$write("[%2d]ICACHE: Response: Hit from SRAM", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__72_THEN_wr_ram_state_wge_ETC___d304)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d306 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d307 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d308 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d320 =
	(TASK_testplusargs___d306 ||
	 TASK_testplusargs___d307 && TASK_testplusargs___d308) &&
	wr_fb_response_whas &&
	!wr_fb_response_wget[8];
    TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d324 =
	(TASK_testplusargs___d306 ||
	 TASK_testplusargs___d307 && TASK_testplusargs___d308) &&
	(!wr_fb_response_whas || wr_fb_response_wget[8]);
    IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d311 =
	IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 == 2'd1 &&
	!wr_fault_whas &&
	(TASK_testplusargs___d306 ||
	 TASK_testplusargs___d307 && TASK_testplusargs___d308);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  v__h25471 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d311)
	$write("[%10d", v__h25471, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d311)
	$write("[%2d]ICACHE: Response: Hit from Fillbuffer: ", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d311)
	$write("IMem_core_response { ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d311)
	$write("'h%h", wr_fb_response_wget[40:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d311)
	$write(", ", "trap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 == 2'd1 &&
	  !wr_fault_whas &&
	  TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d320)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 == 2'd1 &&
	  !wr_fault_whas &&
	  TASK_testplusargs_06_OR_TASK_testplusargs_07_A_ETC___d324)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d311)
	$write(", ", "cause: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d311)
	$write("'h%h", wr_fb_response_wget[7:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d311)
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d311)
	$write("'h%h", wr_fb_response_wget[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d311)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d331 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d332 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d333 = $test$plusargs("l0");
	  #0;
	end
    IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d336 =
	IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 == 2'd1 &&
	!wr_fault_whas &&
	(TASK_testplusargs___d331 ||
	 TASK_testplusargs___d332 && TASK_testplusargs___d333);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d269 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  v__h25825 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d336)
	$write("[%10d", v__h25825, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d336)
	$write("[%2d]ICACHE: Response: Hit from NC", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d336)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d698 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d699 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d700 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_98_OR_TASK_testplusargs_99_A_ETC___d718 =
	(TASK_testplusargs___d698 ||
	 TASK_testplusargs___d699 && TASK_testplusargs___d700) &&
	NOT_IF_wr_nc_state_whas__67_THEN_wr_nc_state_w_ETC___d707 &&
	NOT_IF_wr_fb_state_whas__77_THEN_wr_fb_state_w_ETC___d711 &&
	NOT_IF_wr_ram_state_whas__72_THEN_wr_ram_state_ETC___d715;
    TASK_testplusargs_98_OR_TASK_testplusargs_99_A_ETC___d719 =
	(TASK_testplusargs___d698 ||
	 TASK_testplusargs___d699 && TASK_testplusargs___d700) &&
	IF_wr_nc_state_whas__67_THEN_wr_nc_state_wget__ETC___d353;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  v__h54014 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d698 ||
	   TASK_testplusargs___d699 && TASK_testplusargs___d700))
	$write("[%10d", v__h54014, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d698 ||
	   TASK_testplusargs___d699 && TASK_testplusargs___d700))
	$write("[%2d]ICACHE: Responding to Core:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d698 ||
	   TASK_testplusargs___d699 && TASK_testplusargs___d700))
	$write("IMem_core_response { ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d698 ||
	   TASK_testplusargs___d699 && TASK_testplusargs___d700))
	$write("'h%h", lv_response_word__h26082);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d698 ||
	   TASK_testplusargs___d699 && TASK_testplusargs___d700))
	$write(", ", "trap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  TASK_testplusargs_98_OR_TASK_testplusargs_99_A_ETC___d718)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  TASK_testplusargs_98_OR_TASK_testplusargs_99_A_ETC___d719)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d698 ||
	   TASK_testplusargs___d699 && TASK_testplusargs___d700))
	$write(", ", "cause: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d698 ||
	   TASK_testplusargs___d699 && TASK_testplusargs___d700))
	$write("'h%h", lv_response_cause__h26084);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d698 ||
	   TASK_testplusargs___d699 && TASK_testplusargs___d700))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d698 ||
	   TASK_testplusargs___d699 && TASK_testplusargs___d700))
	$write("'h%h", lv_response_epochs__h26085, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d698 ||
	   TASK_testplusargs___d699 && TASK_testplusargs___d700))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  TASK_testplusargs___d815 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  TASK_testplusargs___d816 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  TASK_testplusargs___d817 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  v__h55473 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay &&
	  (TASK_testplusargs___d815 ||
	   TASK_testplusargs___d816 && TASK_testplusargs___d817))
	$write("[%10d", v__h55473, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay &&
	  (TASK_testplusargs___d815 ||
	   TASK_testplusargs___d816 && TASK_testplusargs___d817))
	$write("[%2d]ICACHE: Replaying Req. Index:%d", id, rg_recent_req);
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay &&
	  (TASK_testplusargs___d815 ||
	   TASK_testplusargs___d816 && TASK_testplusargs___d817))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734)
	begin
	  TASK_testplusargs___d745 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734)
	begin
	  TASK_testplusargs___d746 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734)
	begin
	  TASK_testplusargs___d747 = $test$plusargs("l0");
	  #0;
	end
    wr_cache_enable_wget__69_AND_NOT_ff_from_tlb_r_ETC___d750 =
	ma_cache_enable_c &&
	!ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734 &&
	(TASK_testplusargs___d745 ||
	 TASK_testplusargs___d746 && TASK_testplusargs___d747);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734)
	begin
	  v__h54290 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__69_AND_NOT_ff_from_tlb_r_ETC___d750)
	$write("[%10d", v__h54290, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__69_AND_NOT_ff_from_tlb_r_ETC___d750)
	$write("[%2d]ICACHE: MemReq: Allocating Fbindex:%d",
	       id,
	       m_fillbuffer_mav_allocate_line);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__69_AND_NOT_ff_from_tlb_r_ETC___d750)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734))
	begin
	  TASK_testplusargs___d755 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734))
	begin
	  TASK_testplusargs___d756 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734))
	begin
	  TASK_testplusargs___d757 = $test$plusargs("l0");
	  #0;
	end
    NOT_wr_cache_enable_wget__69_33_OR_ff_from_tlb_ETC___d760 =
	(!ma_cache_enable_c ||
	 ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734) &&
	(TASK_testplusargs___d755 ||
	 TASK_testplusargs___d756 && TASK_testplusargs___d757);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734))
	begin
	  v__h54503 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  NOT_wr_cache_enable_wget__69_33_OR_ff_from_tlb_ETC___d760)
	$write("[%10d", v__h54503, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  NOT_wr_cache_enable_wget__69_33_OR_ff_from_tlb_ETC___d760)
	$write("[%2d]ICACHE: MemReq: Sending NC Request for Addr:%h",
	       id,
	       phyaddr__h54097);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  NOT_wr_cache_enable_wget__69_33_OR_ff_from_tlb_ETC___d760)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734)
	begin
	  TASK_testplusargs___d762 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734)
	begin
	  TASK_testplusargs___d763 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734)
	begin
	  TASK_testplusargs___d764 = $test$plusargs("l0");
	  #0;
	end
    wr_cache_enable_wget__69_AND_NOT_ff_from_tlb_r_ETC___d767 =
	ma_cache_enable_c &&
	!ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734 &&
	(TASK_testplusargs___d762 ||
	 TASK_testplusargs___d763 && TASK_testplusargs___d764);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__8_BITS_38_TO_7_3_U_ETC___d734)
	begin
	  v__h54660 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__69_AND_NOT_ff_from_tlb_r_ETC___d767)
	$write("[%10d", v__h54660, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__69_AND_NOT_ff_from_tlb_r_ETC___d767)
	$write("[%2d]ICACHE: MemReq: Sending Line Request for Addr:%h",
	       id,
	       phyaddr__h54097);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__69_AND_NOT_ff_from_tlb_r_ETC___d767)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__77_THEN_wr_fb_state_wget__ETC___d279 == 2'd0 &&
	  IF_wr_ram_state_whas__72_THEN_wr_ram_state_wge_ETC___d274 == 2'd0 &&
	  !m_fillbuffer_mv_fbfull &&
	  ff_pending_req_FULL_N &&
	  ff_read_mem_request_FULL_N &&
	  !wr_fault_whas &&
	  ff_from_tlb_rv_port1__read[39] &&
	  ff_core_request_EMPTY_N &&
	  EN_ma_cache_enable)
	$display("Error: \"caches_mmu/src/icache_1rw/icache.bsv\", line 643, column 10: (R0002)\n  Conflict-free rules RL_rl_send_memory_request and RL_rl_response_to_core\n  called conflicting methods first and deq of module instance ff_core_request.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  WILL_FIRE_RL_rl_response_to_core)
	$display("Error: \"caches_mmu/src/icache_1rw/icache.bsv\", line 643, column 10: (R0002)\n  Conflict-free rules RL_rl_send_memory_request and RL_rl_response_to_core\n  called conflicting methods port1__read and port1__write of module instance\n  ff_from_tlb_rv.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer)
	begin
	  TASK_testplusargs___d840 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer)
	begin
	  TASK_testplusargs___d841 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer)
	begin
	  TASK_testplusargs___d842 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer)
	begin
	  v__h57895 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  (TASK_testplusargs___d840 ||
	   TASK_testplusargs___d841 && TASK_testplusargs___d842))
	$write("[%10d", v__h57895, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  (TASK_testplusargs___d840 ||
	   TASK_testplusargs___d841 && TASK_testplusargs___d842))
	$write("[%2d]ICACHE: Release: set%d way:%d valid:%b ",
	       id,
	       m_fillbuffer_mv_release_info[12:7],
	       v__h55558,
	       valid__h55561[v__h55558]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  (TASK_testplusargs___d840 ||
	   TASK_testplusargs___d841 && TASK_testplusargs___d842))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[0])
	begin
	  TASK_testplusargs___d1056 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[0])
	begin
	  TASK_testplusargs___d1057 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[0])
	begin
	  TASK_testplusargs___d1058 = $test$plusargs("l0");
	  #0;
	end
    NOT_m_fillbuffer_mv_release_info__12_BIT_0_24__ETC___d1061 =
	!m_fillbuffer_mv_release_info[0] &&
	(TASK_testplusargs___d1056 ||
	 TASK_testplusargs___d1057 && TASK_testplusargs___d1058);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[0])
	begin
	  v__h62008 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  NOT_m_fillbuffer_mv_release_info__12_BIT_0_24__ETC___d1061)
	$write("[%10d", v__h62008, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  NOT_m_fillbuffer_mv_release_info__12_BIT_0_24__ETC___d1061)
	$write("[%2d]ICACHE: Release: Upd Addr:%h set:%d way:%d data:%h",
	       id,
	       m_fillbuffer_mv_release_info[32:1],
	       m_fillbuffer_mv_release_info[12:7],
	       v__h55558,
	       m_fillbuffer_mv_release_info[544:33]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  NOT_m_fillbuffer_mv_release_info__12_BIT_0_24__ETC___d1061)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  WILL_FIRE_RL_rl_response_to_core &&
	  !m_fillbuffer_mv_fbfull &&
	  !rg_fence_stall &&
	  !m_fillbuffer_mv_release_info__12_BITS_12_TO_7__ETC___d831 &&
	  !rg_performing_replay &&
	  !m_fillbuffer_mv_fbempty &&
	  !EN_put_core_req_put &&
	  m_fillbuffer_mv_fbhead_valid)
	$display("Error: \"caches_mmu/src/icache_1rw/icache.bsv\", line 741, column 10: (R0002)\n  Conflict-free rules RL_rl_release_from_fillbuffer and RL_rl_response_to_core\n  called conflicting methods notEmpty and deq of module instance\n  ff_core_request.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  WILL_FIRE_RL_rl_send_memory_request &&
	  !NOT_ff_core_request_notEmpty__22_23_AND_NOT_wr_ETC___d833 &&
	  !rg_performing_replay &&
	  !m_fillbuffer_mv_fbempty &&
	  m_fillbuffer_mv_fbhead_valid &&
	  !rg_fence_stall &&
	  _mav_allocate_line_RL_rl_send_memory_request_EN_m_fillbuffer_wget)
	$display("Error: \"caches_mmu/src/icache_1rw/icache.bsv\", line 741, column 10: (R0002)\n  Conflict-free rules RL_rl_release_from_fillbuffer and\n  RL_rl_send_memory_request called conflicting methods mv_fbfull and\n  mav_allocate_line of module instance m_fillbuffer.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  WILL_FIRE_RL_rl_send_memory_request &&
	  !rg_performing_replay &&
	  (m_fillbuffer_mv_fbfull || rg_fence_stall ||
	   NOT_ff_core_request_notEmpty__22_23_AND_NOT_wr_ETC___d833) &&
	  m_fillbuffer_mv_fbhead_valid &&
	  _mav_allocate_line_RL_rl_send_memory_request_EN_m_fillbuffer_wget)
	$display("Error: \"caches_mmu/src/icache_1rw/icache.bsv\", line 741, column 10: (R0002)\n  Conflict-free rules RL_rl_release_from_fillbuffer and\n  RL_rl_send_memory_request called conflicting methods mv_fbempty and\n  mav_allocate_line of module instance m_fillbuffer.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  WILL_FIRE_RL_rl_send_memory_request &&
	  _mav_allocate_line_RL_rl_send_memory_request_EN_m_fillbuffer_wget)
	$display("Error: \"caches_mmu/src/icache_1rw/icache.bsv\", line 741, column 10: (R0002)\n  Conflict-free rules RL_rl_release_from_fillbuffer and\n  RL_rl_send_memory_request called conflicting methods mv_release_info and\n  mav_allocate_line of module instance m_fillbuffer.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  WILL_FIRE_RL_rl_release_from_fillbuffer)
	$display("Error: \"caches_mmu/src/icache_1rw/icache.bsv\", line 230, column 53: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_ram_check] and\n  [RL_rl_release_from_fillbuffer] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkicache

