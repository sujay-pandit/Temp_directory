//
// Generated by Bluespec Compiler, version 2022.01-5-ge3edf4b1 (build e3edf4b1)
//
// On Fri Apr 15 12:47:23 EDT 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_ma_request                 O     1 const
// mv_read_response               O    36
// RDY_mv_read_response           O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_request_read_write          I     1
// ma_request_index               I     6
// ma_request_address             I    32
// ma_request_way                 I     2
// mv_read_response_address_in    I    32
// mv_read_response_wayselect     I     2
// EN_ma_request                  I     1
//
// Combinational paths from inputs to outputs:
//   (mv_read_response_address_in,
//    mv_read_response_wayselect) -> mv_read_response
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkdcache_tag(CLK,
		    RST_N,

		    ma_request_read_write,
		    ma_request_index,
		    ma_request_address,
		    ma_request_way,
		    EN_ma_request,
		    RDY_ma_request,

		    mv_read_response_address_in,
		    mv_read_response_wayselect,
		    mv_read_response,
		    RDY_mv_read_response);
  parameter [31 : 0] id = 32'b0;
  input  CLK;
  input  RST_N;

  // action method ma_request
  input  ma_request_read_write;
  input  [5 : 0] ma_request_index;
  input  [31 : 0] ma_request_address;
  input  [1 : 0] ma_request_way;
  input  EN_ma_request;
  output RDY_ma_request;

  // value method mv_read_response
  input  [31 : 0] mv_read_response_address_in;
  input  [1 : 0] mv_read_response_wayselect;
  output [35 : 0] mv_read_response;
  output RDY_mv_read_response;

  // signals for module outputs
  wire [35 : 0] mv_read_response;
  wire RDY_ma_request, RDY_mv_read_response;

  // register v_tags_0_rg_output_0
  reg [19 : 0] v_tags_0_rg_output_0;
  wire [19 : 0] v_tags_0_rg_output_0_D_IN;
  wire v_tags_0_rg_output_0_EN;

  // register v_tags_1_rg_output_0
  reg [19 : 0] v_tags_1_rg_output_0;
  wire [19 : 0] v_tags_1_rg_output_0_D_IN;
  wire v_tags_1_rg_output_0_EN;

  // register v_tags_2_rg_output_0
  reg [19 : 0] v_tags_2_rg_output_0;
  wire [19 : 0] v_tags_2_rg_output_0_D_IN;
  wire v_tags_2_rg_output_0_EN;

  // register v_tags_3_rg_output_0
  reg [19 : 0] v_tags_3_rg_output_0;
  wire [19 : 0] v_tags_3_rg_output_0_D_IN;
  wire v_tags_3_rg_output_0_EN;

  // ports of submodule v_tags_0_ram_single_0
  wire [19 : 0] v_tags_0_ram_single_0_dina, v_tags_0_ram_single_0_douta;
  wire [5 : 0] v_tags_0_ram_single_0_addra;
  wire v_tags_0_ram_single_0_ena, v_tags_0_ram_single_0_wea;

  // ports of submodule v_tags_1_ram_single_0
  wire [19 : 0] v_tags_1_ram_single_0_dina, v_tags_1_ram_single_0_douta;
  wire [5 : 0] v_tags_1_ram_single_0_addra;
  wire v_tags_1_ram_single_0_ena, v_tags_1_ram_single_0_wea;

  // ports of submodule v_tags_2_ram_single_0
  wire [19 : 0] v_tags_2_ram_single_0_dina, v_tags_2_ram_single_0_douta;
  wire [5 : 0] v_tags_2_ram_single_0_addra;
  wire v_tags_2_ram_single_0_ena, v_tags_2_ram_single_0_wea;

  // ports of submodule v_tags_3_ram_single_0
  wire [19 : 0] v_tags_3_ram_single_0_dina, v_tags_3_ram_single_0_douta;
  wire [5 : 0] v_tags_3_ram_single_0_addra;
  wire v_tags_3_ram_single_0_ena, v_tags_3_ram_single_0_wea;

  // rule scheduling signals
  wire CAN_FIRE_RL_v_tags_0_capture_output,
       CAN_FIRE_RL_v_tags_1_capture_output,
       CAN_FIRE_RL_v_tags_2_capture_output,
       CAN_FIRE_RL_v_tags_3_capture_output,
       CAN_FIRE_ma_request,
       WILL_FIRE_RL_v_tags_0_capture_output,
       WILL_FIRE_RL_v_tags_1_capture_output,
       WILL_FIRE_RL_v_tags_2_capture_output,
       WILL_FIRE_RL_v_tags_3_capture_output,
       WILL_FIRE_ma_request;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d15;
  reg TASK_testplusargs___d16;
  reg TASK_testplusargs___d17;
  reg [63 : 0] v__h3061;
  // synopsys translate_on

  // remaining internal signals
  reg [19 : 0] SEL_ARR_v_tags_0_rg_output_0_port1__read__8_v__ETC___d35;
  wire [31 : 0] x__h3905;
  wire [3 : 0] IF_v_tags_0_ram_single_0douta_EQ_mv_read_resp_ETC__q1,
	       x__h3098;
  wire [1 : 0] v_tags_1_rg_output_0_port1__read__6_EQ_mv_read_ETC___d32;

  // action method ma_request
  assign RDY_ma_request = 1'd1 ;
  assign CAN_FIRE_ma_request = 1'd1 ;
  assign WILL_FIRE_ma_request = EN_ma_request ;

  // value method mv_read_response
  assign mv_read_response = { x__h3098, x__h3905 } ;
  assign RDY_mv_read_response = 1'd1 ;

  // submodule v_tags_0_ram_single_0
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd20),
	     .MEMSIZE(32'd64)) v_tags_0_ram_single_0(.clka(CLK),
						     .addra(v_tags_0_ram_single_0_addra),
						     .dina(v_tags_0_ram_single_0_dina),
						     .wea(v_tags_0_ram_single_0_wea),
						     .ena(v_tags_0_ram_single_0_ena),
						     .douta(v_tags_0_ram_single_0_douta));

  // submodule v_tags_1_ram_single_0
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd20),
	     .MEMSIZE(32'd64)) v_tags_1_ram_single_0(.clka(CLK),
						     .addra(v_tags_1_ram_single_0_addra),
						     .dina(v_tags_1_ram_single_0_dina),
						     .wea(v_tags_1_ram_single_0_wea),
						     .ena(v_tags_1_ram_single_0_ena),
						     .douta(v_tags_1_ram_single_0_douta));

  // submodule v_tags_2_ram_single_0
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd20),
	     .MEMSIZE(32'd64)) v_tags_2_ram_single_0(.clka(CLK),
						     .addra(v_tags_2_ram_single_0_addra),
						     .dina(v_tags_2_ram_single_0_dina),
						     .wea(v_tags_2_ram_single_0_wea),
						     .ena(v_tags_2_ram_single_0_ena),
						     .douta(v_tags_2_ram_single_0_douta));

  // submodule v_tags_3_ram_single_0
  bram_1rw #(.ADDR_WIDTH(32'd6),
	     .DATA_WIDTH(32'd20),
	     .MEMSIZE(32'd64)) v_tags_3_ram_single_0(.clka(CLK),
						     .addra(v_tags_3_ram_single_0_addra),
						     .dina(v_tags_3_ram_single_0_dina),
						     .wea(v_tags_3_ram_single_0_wea),
						     .ena(v_tags_3_ram_single_0_ena),
						     .douta(v_tags_3_ram_single_0_douta));

  // rule RL_v_tags_0_capture_output
  assign CAN_FIRE_RL_v_tags_0_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_v_tags_0_capture_output = 1'd1 ;

  // rule RL_v_tags_1_capture_output
  assign CAN_FIRE_RL_v_tags_1_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_v_tags_1_capture_output = 1'd1 ;

  // rule RL_v_tags_2_capture_output
  assign CAN_FIRE_RL_v_tags_2_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_v_tags_2_capture_output = 1'd1 ;

  // rule RL_v_tags_3_capture_output
  assign CAN_FIRE_RL_v_tags_3_capture_output = 1'd1 ;
  assign WILL_FIRE_RL_v_tags_3_capture_output = 1'd1 ;

  // register v_tags_0_rg_output_0
  assign v_tags_0_rg_output_0_D_IN = v_tags_0_ram_single_0_douta ;
  assign v_tags_0_rg_output_0_EN = 1'b1 ;

  // register v_tags_1_rg_output_0
  assign v_tags_1_rg_output_0_D_IN = v_tags_1_ram_single_0_douta ;
  assign v_tags_1_rg_output_0_EN = 1'b1 ;

  // register v_tags_2_rg_output_0
  assign v_tags_2_rg_output_0_D_IN = v_tags_2_ram_single_0_douta ;
  assign v_tags_2_rg_output_0_EN = 1'b1 ;

  // register v_tags_3_rg_output_0
  assign v_tags_3_rg_output_0_D_IN = v_tags_3_ram_single_0_douta ;
  assign v_tags_3_rg_output_0_EN = 1'b1 ;

  // submodule v_tags_0_ram_single_0
  assign v_tags_0_ram_single_0_addra = ma_request_index ;
  assign v_tags_0_ram_single_0_dina = ma_request_address[31:12] ;
  assign v_tags_0_ram_single_0_wea =
	     ma_request_way == 2'd0 && ma_request_read_write ;
  assign v_tags_0_ram_single_0_ena =
	     EN_ma_request &&
	     (ma_request_way == 2'd0 || !ma_request_read_write) ;

  // submodule v_tags_1_ram_single_0
  assign v_tags_1_ram_single_0_addra = ma_request_index ;
  assign v_tags_1_ram_single_0_dina = ma_request_address[31:12] ;
  assign v_tags_1_ram_single_0_wea =
	     ma_request_way == 2'd1 && ma_request_read_write ;
  assign v_tags_1_ram_single_0_ena =
	     EN_ma_request &&
	     (ma_request_way == 2'd1 || !ma_request_read_write) ;

  // submodule v_tags_2_ram_single_0
  assign v_tags_2_ram_single_0_addra = ma_request_index ;
  assign v_tags_2_ram_single_0_dina = ma_request_address[31:12] ;
  assign v_tags_2_ram_single_0_wea =
	     ma_request_way == 2'd2 && ma_request_read_write ;
  assign v_tags_2_ram_single_0_ena =
	     EN_ma_request &&
	     (ma_request_way == 2'd2 || !ma_request_read_write) ;

  // submodule v_tags_3_ram_single_0
  assign v_tags_3_ram_single_0_addra = ma_request_index ;
  assign v_tags_3_ram_single_0_dina = ma_request_address[31:12] ;
  assign v_tags_3_ram_single_0_wea =
	     ma_request_way == 2'd3 && ma_request_read_write ;
  assign v_tags_3_ram_single_0_ena =
	     EN_ma_request &&
	     (ma_request_way == 2'd3 || !ma_request_read_write) ;

  // remaining internal signals
  assign IF_v_tags_0_ram_single_0douta_EQ_mv_read_resp_ETC__q1 =
	     (v_tags_0_ram_single_0_douta ==
	      mv_read_response_address_in[31:12]) ?
	       4'd1 :
	       4'd0 ;
  assign v_tags_1_rg_output_0_port1__read__6_EQ_mv_read_ETC___d32 =
	     { v_tags_1_ram_single_0_douta ==
	       mv_read_response_address_in[31:12],
	       IF_v_tags_0_ram_single_0douta_EQ_mv_read_resp_ETC__q1[0] } ;
  assign x__h3098 =
	     { v_tags_3_ram_single_0_douta ==
	       mv_read_response_address_in[31:12],
	       v_tags_2_ram_single_0_douta ==
	       mv_read_response_address_in[31:12],
	       v_tags_1_rg_output_0_port1__read__6_EQ_mv_read_ETC___d32 } ;
  assign x__h3905 =
	     { SEL_ARR_v_tags_0_rg_output_0_port1__read__8_v__ETC___d35,
	       12'd0 } ;
  always@(mv_read_response_wayselect or
	  v_tags_0_ram_single_0_douta or
	  v_tags_1_ram_single_0_douta or
	  v_tags_2_ram_single_0_douta or v_tags_3_ram_single_0_douta)
  begin
    case (mv_read_response_wayselect)
      2'd0:
	  SEL_ARR_v_tags_0_rg_output_0_port1__read__8_v__ETC___d35 =
	      v_tags_0_ram_single_0_douta;
      2'd1:
	  SEL_ARR_v_tags_0_rg_output_0_port1__read__8_v__ETC___d35 =
	      v_tags_1_ram_single_0_douta;
      2'd2:
	  SEL_ARR_v_tags_0_rg_output_0_port1__read__8_v__ETC___d35 =
	      v_tags_2_ram_single_0_douta;
      2'd3:
	  SEL_ARR_v_tags_0_rg_output_0_port1__read__8_v__ETC___d35 =
	      v_tags_3_ram_single_0_douta;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        v_tags_0_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	v_tags_1_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	v_tags_2_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	v_tags_3_rg_output_0 <= `BSV_ASSIGNMENT_DELAY 20'd0;
      end
    else
      begin
        if (v_tags_0_rg_output_0_EN)
	  v_tags_0_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      v_tags_0_rg_output_0_D_IN;
	if (v_tags_1_rg_output_0_EN)
	  v_tags_1_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      v_tags_1_rg_output_0_D_IN;
	if (v_tags_2_rg_output_0_EN)
	  v_tags_2_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      v_tags_2_rg_output_0_D_IN;
	if (v_tags_3_rg_output_0_EN)
	  v_tags_3_rg_output_0 <= `BSV_ASSIGNMENT_DELAY
	      v_tags_3_rg_output_0_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    v_tags_0_rg_output_0 = 20'hAAAAA;
    v_tags_1_rg_output_0 = 20'hAAAAA;
    v_tags_2_rg_output_0 = 20'hAAAAA;
    v_tags_3_rg_output_0 = 20'hAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (EN_ma_request)
      begin
        TASK_testplusargs___d15 = $test$plusargs("fullverbose");
	#0;
      end
    if (EN_ma_request)
      begin
        TASK_testplusargs___d16 = $test$plusargs("mdcache");
	#0;
      end
    if (EN_ma_request)
      begin
        TASK_testplusargs___d17 = $test$plusargs("l0");
	#0;
      end
    if (EN_ma_request)
      begin
        v__h3061 = $time;
	#0;
      end
    if (EN_ma_request &&
	(TASK_testplusargs___d15 ||
	 TASK_testplusargs___d16 && TASK_testplusargs___d17))
      $write("[%10d", v__h3061, "] ");
    if (EN_ma_request &&
	(TASK_testplusargs___d15 ||
	 TASK_testplusargs___d16 && TASK_testplusargs___d17))
      $write("[%2d]DCACHE: TagReq: Tag:%h RW:%b Way:%d index:%d",
	     id,
	     ma_request_address[31:12],
	     ma_request_read_write,
	     ma_request_way,
	     ma_request_index);
    if (EN_ma_request &&
	(TASK_testplusargs___d15 ||
	 TASK_testplusargs___d16 && TASK_testplusargs___d17))
      $write("\n");
  end
  // synopsys translate_on
endmodule  // mkdcache_tag

