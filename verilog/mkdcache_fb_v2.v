//
// Generated by Bluespec Compiler, version 2022.01-5-ge3edf4b1 (build e3edf4b1)
//
// On Fri Apr 15 12:47:24 EDT 2022
//
//
// Ports:
// Name                         I/O  size props
// mv_fbfull                      O     1
// mv_fbempty                     O     1
// mv_fbhead_valid                O     1
// mav_allocate_line              O     3 reg
// RDY_mav_allocate_line          O     1 const
// RDY_ma_fill_from_memory        O     1 const
// RDY_ma_from_storebuffer        O     1 const
// mv_release_info                O   546
// RDY_mv_release_info            O     1 const
// RDY_ma_perform_release         O     1 const
// mav_polling_response           O    75
// RDY_mav_polling_response       O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// mav_allocate_line_from_ram     I     1
// mav_allocate_line_dataline     I   512
// mav_allocate_line_address      I    32 reg
// mav_allocate_line_dirty        I     1
// ma_fill_from_memory_mem_resp   I    66
// ma_fill_from_memory_fbindex    I     3
// ma_fill_from_memory_init_bank  I     3
// ma_from_storebuffer_mask       I    64
// ma_from_storebuffer_dataword   I    64
// ma_from_storebuffer_fbindex    I     3
// ma_from_storebuffer_address    I    32
// mav_polling_response_address   I    32
// mav_polling_response_fill      I     1
// mav_polling_response_fbindex   I     3
// EN_ma_fill_from_memory         I     1
// EN_ma_from_storebuffer         I     1
// EN_ma_perform_release          I     1
// EN_mav_allocate_line           I     1
// EN_mav_polling_response        I     1 unused
//
// Combinational paths from inputs to outputs:
//   (mav_polling_response_address,
//    mav_polling_response_fill,
//    mav_polling_response_fbindex) -> mav_polling_response
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkdcache_fb_v2(CLK,
		      RST_N,

		      mv_fbfull,

		      mv_fbempty,

		      mv_fbhead_valid,

		      mav_allocate_line_from_ram,
		      mav_allocate_line_dataline,
		      mav_allocate_line_address,
		      mav_allocate_line_dirty,
		      EN_mav_allocate_line,
		      mav_allocate_line,
		      RDY_mav_allocate_line,

		      ma_fill_from_memory_mem_resp,
		      ma_fill_from_memory_fbindex,
		      ma_fill_from_memory_init_bank,
		      EN_ma_fill_from_memory,
		      RDY_ma_fill_from_memory,

		      ma_from_storebuffer_mask,
		      ma_from_storebuffer_dataword,
		      ma_from_storebuffer_fbindex,
		      ma_from_storebuffer_address,
		      EN_ma_from_storebuffer,
		      RDY_ma_from_storebuffer,

		      mv_release_info,
		      RDY_mv_release_info,

		      EN_ma_perform_release,
		      RDY_ma_perform_release,

		      mav_polling_response_address,
		      mav_polling_response_fill,
		      mav_polling_response_fbindex,
		      EN_mav_polling_response,
		      mav_polling_response,
		      RDY_mav_polling_response);
  parameter [31 : 0] id = 32'b0;
  input  CLK;
  input  RST_N;

  // value method mv_fbfull
  output mv_fbfull;

  // value method mv_fbempty
  output mv_fbempty;

  // value method mv_fbhead_valid
  output mv_fbhead_valid;

  // actionvalue method mav_allocate_line
  input  mav_allocate_line_from_ram;
  input  [511 : 0] mav_allocate_line_dataline;
  input  [31 : 0] mav_allocate_line_address;
  input  mav_allocate_line_dirty;
  input  EN_mav_allocate_line;
  output [2 : 0] mav_allocate_line;
  output RDY_mav_allocate_line;

  // action method ma_fill_from_memory
  input  [65 : 0] ma_fill_from_memory_mem_resp;
  input  [2 : 0] ma_fill_from_memory_fbindex;
  input  [2 : 0] ma_fill_from_memory_init_bank;
  input  EN_ma_fill_from_memory;
  output RDY_ma_fill_from_memory;

  // action method ma_from_storebuffer
  input  [63 : 0] ma_from_storebuffer_mask;
  input  [63 : 0] ma_from_storebuffer_dataword;
  input  [2 : 0] ma_from_storebuffer_fbindex;
  input  [31 : 0] ma_from_storebuffer_address;
  input  EN_ma_from_storebuffer;
  output RDY_ma_from_storebuffer;

  // value method mv_release_info
  output [545 : 0] mv_release_info;
  output RDY_mv_release_info;

  // action method ma_perform_release
  input  EN_ma_perform_release;
  output RDY_ma_perform_release;

  // actionvalue method mav_polling_response
  input  [31 : 0] mav_polling_response_address;
  input  mav_polling_response_fill;
  input  [2 : 0] mav_polling_response_fbindex;
  input  EN_mav_polling_response;
  output [74 : 0] mav_polling_response;
  output RDY_mav_polling_response;

  // signals for module outputs
  reg mv_fbhead_valid;
  wire [545 : 0] mv_release_info;
  wire [74 : 0] mav_polling_response;
  wire [2 : 0] mav_allocate_line;
  wire RDY_ma_fill_from_memory,
       RDY_ma_from_storebuffer,
       RDY_ma_perform_release,
       RDY_mav_allocate_line,
       RDY_mav_polling_response,
       RDY_mv_release_info,
       mv_fbempty,
       mv_fbfull;

  // register rg_fb_enables
  reg [7 : 0] rg_fb_enables;
  wire [7 : 0] rg_fb_enables_D_IN;
  wire rg_fb_enables_EN;

  // register rg_fbhead
  reg [2 : 0] rg_fbhead;
  wire [2 : 0] rg_fbhead_D_IN;
  wire rg_fbhead_EN;

  // register rg_fbtail
  reg [2 : 0] rg_fbtail;
  wire [2 : 0] rg_fbtail_D_IN;
  wire rg_fbtail_EN;

  // register rg_next_bank
  reg [2 : 0] rg_next_bank;
  wire [2 : 0] rg_next_bank_D_IN;
  wire rg_next_bank_EN;

  // register v_fb_addr_0
  reg [31 : 0] v_fb_addr_0;
  wire [31 : 0] v_fb_addr_0_D_IN;
  wire v_fb_addr_0_EN;

  // register v_fb_addr_1
  reg [31 : 0] v_fb_addr_1;
  wire [31 : 0] v_fb_addr_1_D_IN;
  wire v_fb_addr_1_EN;

  // register v_fb_addr_2
  reg [31 : 0] v_fb_addr_2;
  wire [31 : 0] v_fb_addr_2_D_IN;
  wire v_fb_addr_2_EN;

  // register v_fb_addr_3
  reg [31 : 0] v_fb_addr_3;
  wire [31 : 0] v_fb_addr_3_D_IN;
  wire v_fb_addr_3_EN;

  // register v_fb_addr_4
  reg [31 : 0] v_fb_addr_4;
  wire [31 : 0] v_fb_addr_4_D_IN;
  wire v_fb_addr_4_EN;

  // register v_fb_addr_5
  reg [31 : 0] v_fb_addr_5;
  wire [31 : 0] v_fb_addr_5_D_IN;
  wire v_fb_addr_5_EN;

  // register v_fb_addr_6
  reg [31 : 0] v_fb_addr_6;
  wire [31 : 0] v_fb_addr_6_D_IN;
  wire v_fb_addr_6_EN;

  // register v_fb_addr_7
  reg [31 : 0] v_fb_addr_7;
  wire [31 : 0] v_fb_addr_7_D_IN;
  wire v_fb_addr_7_EN;

  // register v_fb_addr_valid_0
  reg v_fb_addr_valid_0;
  wire v_fb_addr_valid_0_D_IN, v_fb_addr_valid_0_EN;

  // register v_fb_addr_valid_1
  reg v_fb_addr_valid_1;
  wire v_fb_addr_valid_1_D_IN, v_fb_addr_valid_1_EN;

  // register v_fb_addr_valid_2
  reg v_fb_addr_valid_2;
  wire v_fb_addr_valid_2_D_IN, v_fb_addr_valid_2_EN;

  // register v_fb_addr_valid_3
  reg v_fb_addr_valid_3;
  wire v_fb_addr_valid_3_D_IN, v_fb_addr_valid_3_EN;

  // register v_fb_addr_valid_4
  reg v_fb_addr_valid_4;
  wire v_fb_addr_valid_4_D_IN, v_fb_addr_valid_4_EN;

  // register v_fb_addr_valid_5
  reg v_fb_addr_valid_5;
  wire v_fb_addr_valid_5_D_IN, v_fb_addr_valid_5_EN;

  // register v_fb_addr_valid_6
  reg v_fb_addr_valid_6;
  wire v_fb_addr_valid_6_D_IN, v_fb_addr_valid_6_EN;

  // register v_fb_addr_valid_7
  reg v_fb_addr_valid_7;
  wire v_fb_addr_valid_7_D_IN, v_fb_addr_valid_7_EN;

  // register v_fb_data_0_0
  reg [63 : 0] v_fb_data_0_0;
  reg [63 : 0] v_fb_data_0_0_D_IN;
  wire v_fb_data_0_0_EN;

  // register v_fb_data_0_1
  reg [63 : 0] v_fb_data_0_1;
  reg [63 : 0] v_fb_data_0_1_D_IN;
  wire v_fb_data_0_1_EN;

  // register v_fb_data_0_2
  reg [63 : 0] v_fb_data_0_2;
  reg [63 : 0] v_fb_data_0_2_D_IN;
  wire v_fb_data_0_2_EN;

  // register v_fb_data_0_3
  reg [63 : 0] v_fb_data_0_3;
  reg [63 : 0] v_fb_data_0_3_D_IN;
  wire v_fb_data_0_3_EN;

  // register v_fb_data_0_4
  reg [63 : 0] v_fb_data_0_4;
  reg [63 : 0] v_fb_data_0_4_D_IN;
  wire v_fb_data_0_4_EN;

  // register v_fb_data_0_5
  reg [63 : 0] v_fb_data_0_5;
  reg [63 : 0] v_fb_data_0_5_D_IN;
  wire v_fb_data_0_5_EN;

  // register v_fb_data_0_6
  reg [63 : 0] v_fb_data_0_6;
  reg [63 : 0] v_fb_data_0_6_D_IN;
  wire v_fb_data_0_6_EN;

  // register v_fb_data_0_7
  reg [63 : 0] v_fb_data_0_7;
  reg [63 : 0] v_fb_data_0_7_D_IN;
  wire v_fb_data_0_7_EN;

  // register v_fb_data_1_0
  reg [63 : 0] v_fb_data_1_0;
  reg [63 : 0] v_fb_data_1_0_D_IN;
  wire v_fb_data_1_0_EN;

  // register v_fb_data_1_1
  reg [63 : 0] v_fb_data_1_1;
  reg [63 : 0] v_fb_data_1_1_D_IN;
  wire v_fb_data_1_1_EN;

  // register v_fb_data_1_2
  reg [63 : 0] v_fb_data_1_2;
  reg [63 : 0] v_fb_data_1_2_D_IN;
  wire v_fb_data_1_2_EN;

  // register v_fb_data_1_3
  reg [63 : 0] v_fb_data_1_3;
  reg [63 : 0] v_fb_data_1_3_D_IN;
  wire v_fb_data_1_3_EN;

  // register v_fb_data_1_4
  reg [63 : 0] v_fb_data_1_4;
  reg [63 : 0] v_fb_data_1_4_D_IN;
  wire v_fb_data_1_4_EN;

  // register v_fb_data_1_5
  reg [63 : 0] v_fb_data_1_5;
  reg [63 : 0] v_fb_data_1_5_D_IN;
  wire v_fb_data_1_5_EN;

  // register v_fb_data_1_6
  reg [63 : 0] v_fb_data_1_6;
  reg [63 : 0] v_fb_data_1_6_D_IN;
  wire v_fb_data_1_6_EN;

  // register v_fb_data_1_7
  reg [63 : 0] v_fb_data_1_7;
  reg [63 : 0] v_fb_data_1_7_D_IN;
  wire v_fb_data_1_7_EN;

  // register v_fb_data_2_0
  reg [63 : 0] v_fb_data_2_0;
  reg [63 : 0] v_fb_data_2_0_D_IN;
  wire v_fb_data_2_0_EN;

  // register v_fb_data_2_1
  reg [63 : 0] v_fb_data_2_1;
  reg [63 : 0] v_fb_data_2_1_D_IN;
  wire v_fb_data_2_1_EN;

  // register v_fb_data_2_2
  reg [63 : 0] v_fb_data_2_2;
  reg [63 : 0] v_fb_data_2_2_D_IN;
  wire v_fb_data_2_2_EN;

  // register v_fb_data_2_3
  reg [63 : 0] v_fb_data_2_3;
  reg [63 : 0] v_fb_data_2_3_D_IN;
  wire v_fb_data_2_3_EN;

  // register v_fb_data_2_4
  reg [63 : 0] v_fb_data_2_4;
  reg [63 : 0] v_fb_data_2_4_D_IN;
  wire v_fb_data_2_4_EN;

  // register v_fb_data_2_5
  reg [63 : 0] v_fb_data_2_5;
  reg [63 : 0] v_fb_data_2_5_D_IN;
  wire v_fb_data_2_5_EN;

  // register v_fb_data_2_6
  reg [63 : 0] v_fb_data_2_6;
  reg [63 : 0] v_fb_data_2_6_D_IN;
  wire v_fb_data_2_6_EN;

  // register v_fb_data_2_7
  reg [63 : 0] v_fb_data_2_7;
  reg [63 : 0] v_fb_data_2_7_D_IN;
  wire v_fb_data_2_7_EN;

  // register v_fb_data_3_0
  reg [63 : 0] v_fb_data_3_0;
  reg [63 : 0] v_fb_data_3_0_D_IN;
  wire v_fb_data_3_0_EN;

  // register v_fb_data_3_1
  reg [63 : 0] v_fb_data_3_1;
  reg [63 : 0] v_fb_data_3_1_D_IN;
  wire v_fb_data_3_1_EN;

  // register v_fb_data_3_2
  reg [63 : 0] v_fb_data_3_2;
  reg [63 : 0] v_fb_data_3_2_D_IN;
  wire v_fb_data_3_2_EN;

  // register v_fb_data_3_3
  reg [63 : 0] v_fb_data_3_3;
  reg [63 : 0] v_fb_data_3_3_D_IN;
  wire v_fb_data_3_3_EN;

  // register v_fb_data_3_4
  reg [63 : 0] v_fb_data_3_4;
  reg [63 : 0] v_fb_data_3_4_D_IN;
  wire v_fb_data_3_4_EN;

  // register v_fb_data_3_5
  reg [63 : 0] v_fb_data_3_5;
  reg [63 : 0] v_fb_data_3_5_D_IN;
  wire v_fb_data_3_5_EN;

  // register v_fb_data_3_6
  reg [63 : 0] v_fb_data_3_6;
  reg [63 : 0] v_fb_data_3_6_D_IN;
  wire v_fb_data_3_6_EN;

  // register v_fb_data_3_7
  reg [63 : 0] v_fb_data_3_7;
  reg [63 : 0] v_fb_data_3_7_D_IN;
  wire v_fb_data_3_7_EN;

  // register v_fb_data_4_0
  reg [63 : 0] v_fb_data_4_0;
  reg [63 : 0] v_fb_data_4_0_D_IN;
  wire v_fb_data_4_0_EN;

  // register v_fb_data_4_1
  reg [63 : 0] v_fb_data_4_1;
  reg [63 : 0] v_fb_data_4_1_D_IN;
  wire v_fb_data_4_1_EN;

  // register v_fb_data_4_2
  reg [63 : 0] v_fb_data_4_2;
  reg [63 : 0] v_fb_data_4_2_D_IN;
  wire v_fb_data_4_2_EN;

  // register v_fb_data_4_3
  reg [63 : 0] v_fb_data_4_3;
  reg [63 : 0] v_fb_data_4_3_D_IN;
  wire v_fb_data_4_3_EN;

  // register v_fb_data_4_4
  reg [63 : 0] v_fb_data_4_4;
  reg [63 : 0] v_fb_data_4_4_D_IN;
  wire v_fb_data_4_4_EN;

  // register v_fb_data_4_5
  reg [63 : 0] v_fb_data_4_5;
  reg [63 : 0] v_fb_data_4_5_D_IN;
  wire v_fb_data_4_5_EN;

  // register v_fb_data_4_6
  reg [63 : 0] v_fb_data_4_6;
  reg [63 : 0] v_fb_data_4_6_D_IN;
  wire v_fb_data_4_6_EN;

  // register v_fb_data_4_7
  reg [63 : 0] v_fb_data_4_7;
  reg [63 : 0] v_fb_data_4_7_D_IN;
  wire v_fb_data_4_7_EN;

  // register v_fb_data_5_0
  reg [63 : 0] v_fb_data_5_0;
  reg [63 : 0] v_fb_data_5_0_D_IN;
  wire v_fb_data_5_0_EN;

  // register v_fb_data_5_1
  reg [63 : 0] v_fb_data_5_1;
  reg [63 : 0] v_fb_data_5_1_D_IN;
  wire v_fb_data_5_1_EN;

  // register v_fb_data_5_2
  reg [63 : 0] v_fb_data_5_2;
  reg [63 : 0] v_fb_data_5_2_D_IN;
  wire v_fb_data_5_2_EN;

  // register v_fb_data_5_3
  reg [63 : 0] v_fb_data_5_3;
  reg [63 : 0] v_fb_data_5_3_D_IN;
  wire v_fb_data_5_3_EN;

  // register v_fb_data_5_4
  reg [63 : 0] v_fb_data_5_4;
  reg [63 : 0] v_fb_data_5_4_D_IN;
  wire v_fb_data_5_4_EN;

  // register v_fb_data_5_5
  reg [63 : 0] v_fb_data_5_5;
  reg [63 : 0] v_fb_data_5_5_D_IN;
  wire v_fb_data_5_5_EN;

  // register v_fb_data_5_6
  reg [63 : 0] v_fb_data_5_6;
  reg [63 : 0] v_fb_data_5_6_D_IN;
  wire v_fb_data_5_6_EN;

  // register v_fb_data_5_7
  reg [63 : 0] v_fb_data_5_7;
  reg [63 : 0] v_fb_data_5_7_D_IN;
  wire v_fb_data_5_7_EN;

  // register v_fb_data_6_0
  reg [63 : 0] v_fb_data_6_0;
  reg [63 : 0] v_fb_data_6_0_D_IN;
  wire v_fb_data_6_0_EN;

  // register v_fb_data_6_1
  reg [63 : 0] v_fb_data_6_1;
  reg [63 : 0] v_fb_data_6_1_D_IN;
  wire v_fb_data_6_1_EN;

  // register v_fb_data_6_2
  reg [63 : 0] v_fb_data_6_2;
  reg [63 : 0] v_fb_data_6_2_D_IN;
  wire v_fb_data_6_2_EN;

  // register v_fb_data_6_3
  reg [63 : 0] v_fb_data_6_3;
  reg [63 : 0] v_fb_data_6_3_D_IN;
  wire v_fb_data_6_3_EN;

  // register v_fb_data_6_4
  reg [63 : 0] v_fb_data_6_4;
  reg [63 : 0] v_fb_data_6_4_D_IN;
  wire v_fb_data_6_4_EN;

  // register v_fb_data_6_5
  reg [63 : 0] v_fb_data_6_5;
  reg [63 : 0] v_fb_data_6_5_D_IN;
  wire v_fb_data_6_5_EN;

  // register v_fb_data_6_6
  reg [63 : 0] v_fb_data_6_6;
  reg [63 : 0] v_fb_data_6_6_D_IN;
  wire v_fb_data_6_6_EN;

  // register v_fb_data_6_7
  reg [63 : 0] v_fb_data_6_7;
  reg [63 : 0] v_fb_data_6_7_D_IN;
  wire v_fb_data_6_7_EN;

  // register v_fb_data_7_0
  reg [63 : 0] v_fb_data_7_0;
  reg [63 : 0] v_fb_data_7_0_D_IN;
  wire v_fb_data_7_0_EN;

  // register v_fb_data_7_1
  reg [63 : 0] v_fb_data_7_1;
  reg [63 : 0] v_fb_data_7_1_D_IN;
  wire v_fb_data_7_1_EN;

  // register v_fb_data_7_2
  reg [63 : 0] v_fb_data_7_2;
  reg [63 : 0] v_fb_data_7_2_D_IN;
  wire v_fb_data_7_2_EN;

  // register v_fb_data_7_3
  reg [63 : 0] v_fb_data_7_3;
  reg [63 : 0] v_fb_data_7_3_D_IN;
  wire v_fb_data_7_3_EN;

  // register v_fb_data_7_4
  reg [63 : 0] v_fb_data_7_4;
  reg [63 : 0] v_fb_data_7_4_D_IN;
  wire v_fb_data_7_4_EN;

  // register v_fb_data_7_5
  reg [63 : 0] v_fb_data_7_5;
  reg [63 : 0] v_fb_data_7_5_D_IN;
  wire v_fb_data_7_5_EN;

  // register v_fb_data_7_6
  reg [63 : 0] v_fb_data_7_6;
  reg [63 : 0] v_fb_data_7_6_D_IN;
  wire v_fb_data_7_6_EN;

  // register v_fb_data_7_7
  reg [63 : 0] v_fb_data_7_7;
  reg [63 : 0] v_fb_data_7_7_D_IN;
  wire v_fb_data_7_7_EN;

  // register v_fb_dirty_0
  reg v_fb_dirty_0;
  wire v_fb_dirty_0_D_IN, v_fb_dirty_0_EN;

  // register v_fb_dirty_1
  reg v_fb_dirty_1;
  wire v_fb_dirty_1_D_IN, v_fb_dirty_1_EN;

  // register v_fb_dirty_2
  reg v_fb_dirty_2;
  wire v_fb_dirty_2_D_IN, v_fb_dirty_2_EN;

  // register v_fb_dirty_3
  reg v_fb_dirty_3;
  wire v_fb_dirty_3_D_IN, v_fb_dirty_3_EN;

  // register v_fb_dirty_4
  reg v_fb_dirty_4;
  wire v_fb_dirty_4_D_IN, v_fb_dirty_4_EN;

  // register v_fb_dirty_5
  reg v_fb_dirty_5;
  wire v_fb_dirty_5_D_IN, v_fb_dirty_5_EN;

  // register v_fb_dirty_6
  reg v_fb_dirty_6;
  wire v_fb_dirty_6_D_IN, v_fb_dirty_6_EN;

  // register v_fb_dirty_7
  reg v_fb_dirty_7;
  wire v_fb_dirty_7_D_IN, v_fb_dirty_7_EN;

  // register v_fb_err_0
  reg v_fb_err_0;
  wire v_fb_err_0_D_IN, v_fb_err_0_EN;

  // register v_fb_err_1
  reg v_fb_err_1;
  wire v_fb_err_1_D_IN, v_fb_err_1_EN;

  // register v_fb_err_2
  reg v_fb_err_2;
  wire v_fb_err_2_D_IN, v_fb_err_2_EN;

  // register v_fb_err_3
  reg v_fb_err_3;
  wire v_fb_err_3_D_IN, v_fb_err_3_EN;

  // register v_fb_err_4
  reg v_fb_err_4;
  wire v_fb_err_4_D_IN, v_fb_err_4_EN;

  // register v_fb_err_5
  reg v_fb_err_5;
  wire v_fb_err_5_D_IN, v_fb_err_5_EN;

  // register v_fb_err_6
  reg v_fb_err_6;
  wire v_fb_err_6_D_IN, v_fb_err_6_EN;

  // register v_fb_err_7
  reg v_fb_err_7;
  wire v_fb_err_7_D_IN, v_fb_err_7_EN;

  // register v_fb_line_valid_0
  reg v_fb_line_valid_0;
  reg v_fb_line_valid_0_D_IN;
  wire v_fb_line_valid_0_EN;

  // register v_fb_line_valid_1
  reg v_fb_line_valid_1;
  reg v_fb_line_valid_1_D_IN;
  wire v_fb_line_valid_1_EN;

  // register v_fb_line_valid_2
  reg v_fb_line_valid_2;
  reg v_fb_line_valid_2_D_IN;
  wire v_fb_line_valid_2_EN;

  // register v_fb_line_valid_3
  reg v_fb_line_valid_3;
  reg v_fb_line_valid_3_D_IN;
  wire v_fb_line_valid_3_EN;

  // register v_fb_line_valid_4
  reg v_fb_line_valid_4;
  reg v_fb_line_valid_4_D_IN;
  wire v_fb_line_valid_4_EN;

  // register v_fb_line_valid_5
  reg v_fb_line_valid_5;
  reg v_fb_line_valid_5_D_IN;
  wire v_fb_line_valid_5_EN;

  // register v_fb_line_valid_6
  reg v_fb_line_valid_6;
  reg v_fb_line_valid_6_D_IN;
  wire v_fb_line_valid_6_EN;

  // register v_fb_line_valid_7
  reg v_fb_line_valid_7;
  reg v_fb_line_valid_7_D_IN;
  wire v_fb_line_valid_7_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_print_stats,
       CAN_FIRE_ma_fill_from_memory,
       CAN_FIRE_ma_from_storebuffer,
       CAN_FIRE_ma_perform_release,
       CAN_FIRE_mav_allocate_line,
       CAN_FIRE_mav_polling_response,
       WILL_FIRE_RL_rl_print_stats,
       WILL_FIRE_ma_fill_from_memory,
       WILL_FIRE_ma_from_storebuffer,
       WILL_FIRE_ma_perform_release,
       WILL_FIRE_mav_allocate_line,
       WILL_FIRE_mav_polling_response;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_v_fb_data_0_0_write_1__VAL_2;
  wire MUX_v_fb_addr_valid_0_write_1__SEL_1,
       MUX_v_fb_addr_valid_0_write_1__SEL_2,
       MUX_v_fb_addr_valid_1_write_1__SEL_1,
       MUX_v_fb_addr_valid_1_write_1__SEL_2,
       MUX_v_fb_addr_valid_2_write_1__SEL_1,
       MUX_v_fb_addr_valid_2_write_1__SEL_2,
       MUX_v_fb_addr_valid_3_write_1__SEL_1,
       MUX_v_fb_addr_valid_3_write_1__SEL_2,
       MUX_v_fb_addr_valid_4_write_1__SEL_1,
       MUX_v_fb_addr_valid_4_write_1__SEL_2,
       MUX_v_fb_addr_valid_5_write_1__SEL_1,
       MUX_v_fb_addr_valid_5_write_1__SEL_2,
       MUX_v_fb_addr_valid_6_write_1__SEL_1,
       MUX_v_fb_addr_valid_6_write_1__SEL_2,
       MUX_v_fb_addr_valid_7_write_1__SEL_1,
       MUX_v_fb_addr_valid_7_write_1__SEL_2,
       MUX_v_fb_data_0_0_write_1__SEL_2,
       MUX_v_fb_data_0_0_write_1__SEL_3,
       MUX_v_fb_data_0_1_write_1__SEL_2,
       MUX_v_fb_data_0_1_write_1__SEL_3,
       MUX_v_fb_data_0_2_write_1__SEL_2,
       MUX_v_fb_data_0_2_write_1__SEL_3,
       MUX_v_fb_data_0_3_write_1__SEL_2,
       MUX_v_fb_data_0_3_write_1__SEL_3,
       MUX_v_fb_data_0_4_write_1__SEL_2,
       MUX_v_fb_data_0_4_write_1__SEL_3,
       MUX_v_fb_data_0_5_write_1__SEL_2,
       MUX_v_fb_data_0_5_write_1__SEL_3,
       MUX_v_fb_data_0_6_write_1__SEL_2,
       MUX_v_fb_data_0_6_write_1__SEL_3,
       MUX_v_fb_data_0_7_write_1__SEL_2,
       MUX_v_fb_data_0_7_write_1__SEL_3,
       MUX_v_fb_data_1_0_write_1__SEL_2,
       MUX_v_fb_data_1_0_write_1__SEL_3,
       MUX_v_fb_data_1_1_write_1__SEL_2,
       MUX_v_fb_data_1_1_write_1__SEL_3,
       MUX_v_fb_data_1_2_write_1__SEL_2,
       MUX_v_fb_data_1_2_write_1__SEL_3,
       MUX_v_fb_data_1_3_write_1__SEL_2,
       MUX_v_fb_data_1_3_write_1__SEL_3,
       MUX_v_fb_data_1_4_write_1__SEL_2,
       MUX_v_fb_data_1_4_write_1__SEL_3,
       MUX_v_fb_data_1_5_write_1__SEL_2,
       MUX_v_fb_data_1_5_write_1__SEL_3,
       MUX_v_fb_data_1_6_write_1__SEL_2,
       MUX_v_fb_data_1_6_write_1__SEL_3,
       MUX_v_fb_data_1_7_write_1__SEL_2,
       MUX_v_fb_data_1_7_write_1__SEL_3,
       MUX_v_fb_data_2_0_write_1__SEL_2,
       MUX_v_fb_data_2_0_write_1__SEL_3,
       MUX_v_fb_data_2_1_write_1__SEL_2,
       MUX_v_fb_data_2_1_write_1__SEL_3,
       MUX_v_fb_data_2_2_write_1__SEL_2,
       MUX_v_fb_data_2_2_write_1__SEL_3,
       MUX_v_fb_data_2_3_write_1__SEL_2,
       MUX_v_fb_data_2_3_write_1__SEL_3,
       MUX_v_fb_data_2_4_write_1__SEL_2,
       MUX_v_fb_data_2_4_write_1__SEL_3,
       MUX_v_fb_data_2_5_write_1__SEL_2,
       MUX_v_fb_data_2_5_write_1__SEL_3,
       MUX_v_fb_data_2_6_write_1__SEL_2,
       MUX_v_fb_data_2_6_write_1__SEL_3,
       MUX_v_fb_data_2_7_write_1__SEL_2,
       MUX_v_fb_data_2_7_write_1__SEL_3,
       MUX_v_fb_data_3_0_write_1__SEL_2,
       MUX_v_fb_data_3_0_write_1__SEL_3,
       MUX_v_fb_data_3_1_write_1__SEL_2,
       MUX_v_fb_data_3_1_write_1__SEL_3,
       MUX_v_fb_data_3_2_write_1__SEL_2,
       MUX_v_fb_data_3_2_write_1__SEL_3,
       MUX_v_fb_data_3_3_write_1__SEL_2,
       MUX_v_fb_data_3_3_write_1__SEL_3,
       MUX_v_fb_data_3_4_write_1__SEL_2,
       MUX_v_fb_data_3_4_write_1__SEL_3,
       MUX_v_fb_data_3_5_write_1__SEL_2,
       MUX_v_fb_data_3_5_write_1__SEL_3,
       MUX_v_fb_data_3_6_write_1__SEL_2,
       MUX_v_fb_data_3_6_write_1__SEL_3,
       MUX_v_fb_data_3_7_write_1__SEL_2,
       MUX_v_fb_data_3_7_write_1__SEL_3,
       MUX_v_fb_data_4_0_write_1__SEL_2,
       MUX_v_fb_data_4_0_write_1__SEL_3,
       MUX_v_fb_data_4_1_write_1__SEL_2,
       MUX_v_fb_data_4_1_write_1__SEL_3,
       MUX_v_fb_data_4_2_write_1__SEL_2,
       MUX_v_fb_data_4_2_write_1__SEL_3,
       MUX_v_fb_data_4_3_write_1__SEL_2,
       MUX_v_fb_data_4_3_write_1__SEL_3,
       MUX_v_fb_data_4_4_write_1__SEL_2,
       MUX_v_fb_data_4_4_write_1__SEL_3,
       MUX_v_fb_data_4_5_write_1__SEL_2,
       MUX_v_fb_data_4_5_write_1__SEL_3,
       MUX_v_fb_data_4_6_write_1__SEL_2,
       MUX_v_fb_data_4_6_write_1__SEL_3,
       MUX_v_fb_data_4_7_write_1__SEL_2,
       MUX_v_fb_data_4_7_write_1__SEL_3,
       MUX_v_fb_data_5_0_write_1__SEL_2,
       MUX_v_fb_data_5_0_write_1__SEL_3,
       MUX_v_fb_data_5_1_write_1__SEL_2,
       MUX_v_fb_data_5_1_write_1__SEL_3,
       MUX_v_fb_data_5_2_write_1__SEL_2,
       MUX_v_fb_data_5_2_write_1__SEL_3,
       MUX_v_fb_data_5_3_write_1__SEL_2,
       MUX_v_fb_data_5_3_write_1__SEL_3,
       MUX_v_fb_data_5_4_write_1__SEL_2,
       MUX_v_fb_data_5_4_write_1__SEL_3,
       MUX_v_fb_data_5_5_write_1__SEL_2,
       MUX_v_fb_data_5_5_write_1__SEL_3,
       MUX_v_fb_data_5_6_write_1__SEL_2,
       MUX_v_fb_data_5_6_write_1__SEL_3,
       MUX_v_fb_data_5_7_write_1__SEL_2,
       MUX_v_fb_data_5_7_write_1__SEL_3,
       MUX_v_fb_data_6_0_write_1__SEL_2,
       MUX_v_fb_data_6_0_write_1__SEL_3,
       MUX_v_fb_data_6_1_write_1__SEL_2,
       MUX_v_fb_data_6_1_write_1__SEL_3,
       MUX_v_fb_data_6_2_write_1__SEL_2,
       MUX_v_fb_data_6_2_write_1__SEL_3,
       MUX_v_fb_data_6_3_write_1__SEL_2,
       MUX_v_fb_data_6_3_write_1__SEL_3,
       MUX_v_fb_data_6_4_write_1__SEL_2,
       MUX_v_fb_data_6_4_write_1__SEL_3,
       MUX_v_fb_data_6_5_write_1__SEL_2,
       MUX_v_fb_data_6_5_write_1__SEL_3,
       MUX_v_fb_data_6_6_write_1__SEL_2,
       MUX_v_fb_data_6_6_write_1__SEL_3,
       MUX_v_fb_data_6_7_write_1__SEL_2,
       MUX_v_fb_data_6_7_write_1__SEL_3,
       MUX_v_fb_data_7_0_write_1__SEL_2,
       MUX_v_fb_data_7_0_write_1__SEL_3,
       MUX_v_fb_data_7_1_write_1__SEL_2,
       MUX_v_fb_data_7_1_write_1__SEL_3,
       MUX_v_fb_data_7_2_write_1__SEL_2,
       MUX_v_fb_data_7_2_write_1__SEL_3,
       MUX_v_fb_data_7_3_write_1__SEL_2,
       MUX_v_fb_data_7_3_write_1__SEL_3,
       MUX_v_fb_data_7_4_write_1__SEL_2,
       MUX_v_fb_data_7_4_write_1__SEL_3,
       MUX_v_fb_data_7_5_write_1__SEL_2,
       MUX_v_fb_data_7_5_write_1__SEL_3,
       MUX_v_fb_data_7_6_write_1__SEL_2,
       MUX_v_fb_data_7_6_write_1__SEL_3,
       MUX_v_fb_data_7_7_write_1__SEL_2,
       MUX_v_fb_data_7_7_write_1__SEL_3,
       MUX_v_fb_dirty_0_write_1__VAL_1,
       MUX_v_fb_line_valid_0_write_1__SEL_3,
       MUX_v_fb_line_valid_1_write_1__SEL_3,
       MUX_v_fb_line_valid_2_write_1__SEL_3,
       MUX_v_fb_line_valid_3_write_1__SEL_3,
       MUX_v_fb_line_valid_4_write_1__SEL_3,
       MUX_v_fb_line_valid_5_write_1__SEL_3,
       MUX_v_fb_line_valid_6_write_1__SEL_3,
       MUX_v_fb_line_valid_7_write_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d179;
  reg TASK_testplusargs___d180;
  reg TASK_testplusargs___d181;
  reg [63 : 0] v__h16203;
  reg TASK_testplusargs___d413;
  reg TASK_testplusargs___d414;
  reg TASK_testplusargs___d415;
  reg [63 : 0] v__h25827;
  reg TASK_testplusargs___d1;
  reg TASK_testplusargs___d2;
  reg TASK_testplusargs___d3;
  reg [63 : 0] v__h5329;
  reg TASK_testplusargs___d68;
  reg TASK_testplusargs___d69;
  reg TASK_testplusargs___d70;
  reg [63 : 0] v__h14012;
  reg TASK_testplusargs___d74;
  reg TASK_testplusargs___d75;
  reg TASK_testplusargs___d76;
  reg [63 : 0] v__h14151;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] SEL_ARR_v_fb_data_0_0_read__89_v_fb_data_0_1_r_ETC___d198,
	       SEL_ARR_v_fb_data_1_0_read__99_v_fb_data_1_1_r_ETC___d208,
	       SEL_ARR_v_fb_data_2_0_read__09_v_fb_data_2_1_r_ETC___d218,
	       SEL_ARR_v_fb_data_3_0_read__19_v_fb_data_3_1_r_ETC___d228,
	       SEL_ARR_v_fb_data_4_0_read__29_v_fb_data_4_1_r_ETC___d238,
	       SEL_ARR_v_fb_data_5_0_read__39_v_fb_data_5_1_r_ETC___d248,
	       SEL_ARR_v_fb_data_6_0_read__49_v_fb_data_6_1_r_ETC___d258,
	       SEL_ARR_v_fb_data_7_0_read__59_v_fb_data_7_1_r_ETC___d268,
	       lv_selected_word__h26576,
	       lv_selected_word__h26629,
	       lv_selected_word__h26682,
	       lv_selected_word__h26735,
	       lv_selected_word__h26788,
	       lv_selected_word__h26841,
	       lv_selected_word__h26894,
	       lv_selected_word__h26947,
	       spliced_bits__h24607,
	       spliced_bits__h24636,
	       spliced_bits__h24665,
	       spliced_bits__h24694,
	       spliced_bits__h24723,
	       spliced_bits__h24752,
	       spliced_bits__h24781,
	       spliced_bits__h24810,
	       x__h24380;
  reg [31 : 0] x_mv_release_info_address__h24547;
  reg x__h25351, x__h25378;
  wire [511 : 0] x_mv_release_info_dataline__h24546;
  wire [63 : 0] IF_v_fb_addr_1_read__73_BITS_31_TO_6_38_EQ_mav_ETC___d472,
		IF_v_fb_addr_2_read__74_BITS_31_TO_6_35_EQ_mav_ETC___d473,
		IF_v_fb_addr_3_read__75_BITS_31_TO_6_32_EQ_mav_ETC___d474,
		IF_v_fb_addr_4_read__76_BITS_31_TO_6_29_EQ_mav_ETC___d475,
		IF_v_fb_addr_5_read__77_BITS_31_TO_6_26_EQ_mav_ETC___d476,
		IF_v_fb_addr_6_read__78_BITS_31_TO_6_23_EQ_mav_ETC___d477,
		x__h24378,
		y__h24379,
		y__h24381,
		y_avValue_word__h27011;
  wire [7 : 0] IF_v_fb_addr_0_read__72_BITS_31_TO_6_41_EQ_mav_ETC___d444,
	       _theResult____h25755,
	       x__h15897,
	       x__h15920;
  wire [2 : 0] lv_current_bank__h14246, x__h13915, x__h25475;
  wire IF_v_fb_addr_1_read__73_BITS_31_TO_6_38_EQ_mav_ETC___d447,
       IF_v_fb_addr_1_read__73_BITS_31_TO_6_38_EQ_mav_ETC___d456,
       IF_v_fb_addr_2_read__74_BITS_31_TO_6_35_EQ_mav_ETC___d448,
       IF_v_fb_addr_2_read__74_BITS_31_TO_6_35_EQ_mav_ETC___d457,
       IF_v_fb_addr_3_read__75_BITS_31_TO_6_32_EQ_mav_ETC___d449,
       IF_v_fb_addr_3_read__75_BITS_31_TO_6_32_EQ_mav_ETC___d458,
       IF_v_fb_addr_4_read__76_BITS_31_TO_6_29_EQ_mav_ETC___d450,
       IF_v_fb_addr_4_read__76_BITS_31_TO_6_29_EQ_mav_ETC___d459,
       IF_v_fb_addr_5_read__77_BITS_31_TO_6_26_EQ_mav_ETC___d451,
       IF_v_fb_addr_5_read__77_BITS_31_TO_6_26_EQ_mav_ETC___d460,
       IF_v_fb_addr_6_read__78_BITS_31_TO_6_23_EQ_mav_ETC___d452,
       IF_v_fb_addr_6_read__78_BITS_31_TO_6_23_EQ_mav_ETC___d461,
       IF_v_fb_addr_7_read__79_BITS_31_TO_6_19_EQ_mav_ETC___d453,
       NOT_v_fb_addr_valid_1_read_3_AND_NOT_v_fb_addr_ETC___d35,
       mav_polling_response_fill_AND_v_fb_addr_7_read_ETC___d488,
       v_fb_addr_valid_1_read_AND_v_fb_addr_valid_2_r_ETC___d20,
       y_avValue_err__h27010;

  // value method mv_fbfull
  assign mv_fbfull =
	     v_fb_addr_valid_0 &&
	     v_fb_addr_valid_1_read_AND_v_fb_addr_valid_2_r_ETC___d20 ;

  // value method mv_fbempty
  assign mv_fbempty =
	     !v_fb_addr_valid_0 &&
	     NOT_v_fb_addr_valid_1_read_3_AND_NOT_v_fb_addr_ETC___d35 ;

  // value method mv_fbhead_valid
  always@(rg_fbhead or
	  v_fb_line_valid_0 or
	  v_fb_line_valid_1 or
	  v_fb_line_valid_2 or
	  v_fb_line_valid_3 or
	  v_fb_line_valid_4 or
	  v_fb_line_valid_5 or v_fb_line_valid_6 or v_fb_line_valid_7)
  begin
    case (rg_fbhead)
      3'd0: mv_fbhead_valid = v_fb_line_valid_0;
      3'd1: mv_fbhead_valid = v_fb_line_valid_1;
      3'd2: mv_fbhead_valid = v_fb_line_valid_2;
      3'd3: mv_fbhead_valid = v_fb_line_valid_3;
      3'd4: mv_fbhead_valid = v_fb_line_valid_4;
      3'd5: mv_fbhead_valid = v_fb_line_valid_5;
      3'd6: mv_fbhead_valid = v_fb_line_valid_6;
      3'd7: mv_fbhead_valid = v_fb_line_valid_7;
    endcase
  end

  // actionvalue method mav_allocate_line
  assign mav_allocate_line = rg_fbtail ;
  assign RDY_mav_allocate_line = 1'd1 ;
  assign CAN_FIRE_mav_allocate_line = 1'd1 ;
  assign WILL_FIRE_mav_allocate_line = EN_mav_allocate_line ;

  // action method ma_fill_from_memory
  assign RDY_ma_fill_from_memory = 1'd1 ;
  assign CAN_FIRE_ma_fill_from_memory = 1'd1 ;
  assign WILL_FIRE_ma_fill_from_memory = EN_ma_fill_from_memory ;

  // action method ma_from_storebuffer
  assign RDY_ma_from_storebuffer = 1'd1 ;
  assign CAN_FIRE_ma_from_storebuffer = 1'd1 ;
  assign WILL_FIRE_ma_from_storebuffer = EN_ma_from_storebuffer ;

  // value method mv_release_info
  assign mv_release_info =
	     { x_mv_release_info_dataline__h24546,
	       x_mv_release_info_address__h24547,
	       x__h25351,
	       x__h25378 } ;
  assign RDY_mv_release_info = 1'd1 ;

  // action method ma_perform_release
  assign RDY_ma_perform_release = 1'd1 ;
  assign CAN_FIRE_ma_perform_release = 1'd1 ;
  assign WILL_FIRE_ma_perform_release = EN_ma_perform_release ;

  // actionvalue method mav_polling_response
  assign mav_polling_response =
	     { y_avValue_err__h27010,
	       y_avValue_word__h27011,
	       _theResult____h25755,
	       _theResult____h25755 != 8'd0,
	       IF_v_fb_addr_7_read__79_BITS_31_TO_6_19_EQ_mav_ETC___d453 ||
	       mav_polling_response_fill_AND_v_fb_addr_7_read_ETC___d488 } ;
  assign RDY_mav_polling_response = 1'd1 ;
  assign CAN_FIRE_mav_polling_response = 1'd1 ;
  assign WILL_FIRE_mav_polling_response = EN_mav_polling_response ;

  // rule RL_rl_print_stats
  assign CAN_FIRE_RL_rl_print_stats = 1'd1 ;
  assign WILL_FIRE_RL_rl_print_stats = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_v_fb_addr_valid_0_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 3'd0 ;
  assign MUX_v_fb_addr_valid_0_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ;
  assign MUX_v_fb_addr_valid_1_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 3'd1 ;
  assign MUX_v_fb_addr_valid_1_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ;
  assign MUX_v_fb_addr_valid_2_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 3'd2 ;
  assign MUX_v_fb_addr_valid_2_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ;
  assign MUX_v_fb_addr_valid_3_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 3'd3 ;
  assign MUX_v_fb_addr_valid_3_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ;
  assign MUX_v_fb_addr_valid_4_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 3'd4 ;
  assign MUX_v_fb_addr_valid_4_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ;
  assign MUX_v_fb_addr_valid_5_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 3'd5 ;
  assign MUX_v_fb_addr_valid_5_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ;
  assign MUX_v_fb_addr_valid_6_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 3'd6 ;
  assign MUX_v_fb_addr_valid_6_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ;
  assign MUX_v_fb_addr_valid_7_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 3'd7 ;
  assign MUX_v_fb_addr_valid_7_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ;
  assign MUX_v_fb_data_0_0_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd0 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd0 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_1_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd1 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd1 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_2_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd2 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd2 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_3_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd3 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd3 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_4_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd4 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd4 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_5_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd5 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd5 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_6_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd6 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd6 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_7_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd7 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd7 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_1_0_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd0 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd0 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_1_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd1 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd1 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_2_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd2 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd2 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_3_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd3 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd3 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_4_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd4 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd4 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_5_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd5 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd5 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_6_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd6 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd6 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_7_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd7 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd7 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_2_0_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd0 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd0 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_1_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd1 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd1 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_2_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd2 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd2 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_3_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd3 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd3 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_4_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd4 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd4 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_5_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd5 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd5 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_6_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd6 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd6 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_7_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd7 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd7 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_3_0_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd0 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd0 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_1_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd1 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd1 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_2_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd2 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd2 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_3_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd3 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd3 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_4_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd4 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd4 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_5_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd5 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd5 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_6_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd6 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd6 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_7_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd7 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd7 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_4_0_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd0 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd0 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_1_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd1 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd1 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_2_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd2 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd2 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_3_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd3 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd3 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_4_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd4 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd4 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_5_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd5 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd5 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_6_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd6 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd6 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_7_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd7 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd7 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_5_0_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd0 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd0 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_1_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd1 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd1 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_2_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd2 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd2 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_3_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd3 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd3 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_4_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd4 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd4 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_5_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd5 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd5 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_6_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd6 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd6 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_7_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd7 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd7 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_6_0_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd0 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd0 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_1_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd1 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd1 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_2_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd2 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd2 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_3_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd3 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd3 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_4_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd4 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd4 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_5_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd5 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd5 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_6_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd6 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd6 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_7_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd7 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd7 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_7_0_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd0 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd0 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_1_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd1 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd1 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_2_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd2 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd2 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_3_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd3 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd3 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_4_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd4 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd4 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_5_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd5 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd5 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_6_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd6 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd6 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_7_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd7 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd7 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_line_valid_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd0 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_line_valid_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd1 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_line_valid_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd2 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_line_valid_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd3 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_line_valid_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd4 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_line_valid_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd5 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_line_valid_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd6 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_line_valid_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd7 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_data_0_0_write_1__VAL_2 = x__h24378 | y__h24379 ;
  assign MUX_v_fb_dirty_0_write_1__VAL_1 =
	     mav_allocate_line_from_ram & mav_allocate_line_dirty ;

  // register rg_fb_enables
  assign rg_fb_enables_D_IN =
	     ma_fill_from_memory_mem_resp[1] ? 8'd0 : x__h15897 ;
  assign rg_fb_enables_EN = EN_ma_fill_from_memory ;

  // register rg_fbhead
  assign rg_fbhead_D_IN = (rg_fbhead == 3'd7) ? 3'd0 : x__h25475 ;
  assign rg_fbhead_EN = EN_ma_perform_release ;

  // register rg_fbtail
  assign rg_fbtail_D_IN = (rg_fbtail == 3'd7) ? 3'd0 : x__h13915 ;
  assign rg_fbtail_EN = EN_mav_allocate_line ;

  // register rg_next_bank
  assign rg_next_bank_D_IN = lv_current_bank__h14246 + 3'd1 ;
  assign rg_next_bank_EN = EN_ma_fill_from_memory ;

  // register v_fb_addr_0
  assign v_fb_addr_0_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_0_EN = MUX_v_fb_addr_valid_0_write_1__SEL_2 ;

  // register v_fb_addr_1
  assign v_fb_addr_1_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_1_EN = MUX_v_fb_addr_valid_1_write_1__SEL_2 ;

  // register v_fb_addr_2
  assign v_fb_addr_2_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_2_EN = MUX_v_fb_addr_valid_2_write_1__SEL_2 ;

  // register v_fb_addr_3
  assign v_fb_addr_3_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_3_EN = MUX_v_fb_addr_valid_3_write_1__SEL_2 ;

  // register v_fb_addr_4
  assign v_fb_addr_4_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_4_EN = MUX_v_fb_addr_valid_4_write_1__SEL_2 ;

  // register v_fb_addr_5
  assign v_fb_addr_5_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_5_EN = MUX_v_fb_addr_valid_5_write_1__SEL_2 ;

  // register v_fb_addr_6
  assign v_fb_addr_6_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_6_EN = MUX_v_fb_addr_valid_6_write_1__SEL_2 ;

  // register v_fb_addr_7
  assign v_fb_addr_7_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_7_EN = MUX_v_fb_addr_valid_7_write_1__SEL_2 ;

  // register v_fb_addr_valid_0
  assign v_fb_addr_valid_0_D_IN = !MUX_v_fb_addr_valid_0_write_1__SEL_1 ;
  assign v_fb_addr_valid_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_perform_release && rg_fbhead == 3'd0 ;

  // register v_fb_addr_valid_1
  assign v_fb_addr_valid_1_D_IN = !MUX_v_fb_addr_valid_1_write_1__SEL_1 ;
  assign v_fb_addr_valid_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_perform_release && rg_fbhead == 3'd1 ;

  // register v_fb_addr_valid_2
  assign v_fb_addr_valid_2_D_IN = !MUX_v_fb_addr_valid_2_write_1__SEL_1 ;
  assign v_fb_addr_valid_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_perform_release && rg_fbhead == 3'd2 ;

  // register v_fb_addr_valid_3
  assign v_fb_addr_valid_3_D_IN = !MUX_v_fb_addr_valid_3_write_1__SEL_1 ;
  assign v_fb_addr_valid_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_perform_release && rg_fbhead == 3'd3 ;

  // register v_fb_addr_valid_4
  assign v_fb_addr_valid_4_D_IN = !MUX_v_fb_addr_valid_4_write_1__SEL_1 ;
  assign v_fb_addr_valid_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_perform_release && rg_fbhead == 3'd4 ;

  // register v_fb_addr_valid_5
  assign v_fb_addr_valid_5_D_IN = !MUX_v_fb_addr_valid_5_write_1__SEL_1 ;
  assign v_fb_addr_valid_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_perform_release && rg_fbhead == 3'd5 ;

  // register v_fb_addr_valid_6
  assign v_fb_addr_valid_6_D_IN = !MUX_v_fb_addr_valid_6_write_1__SEL_1 ;
  assign v_fb_addr_valid_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_perform_release && rg_fbhead == 3'd6 ;

  // register v_fb_addr_valid_7
  assign v_fb_addr_valid_7_D_IN = !MUX_v_fb_addr_valid_7_write_1__SEL_1 ;
  assign v_fb_addr_valid_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_perform_release && rg_fbhead == 3'd7 ;

  // register v_fb_data_0_0
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_0_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_0_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_0_D_IN = mav_allocate_line_dataline[63:0];
    MUX_v_fb_data_0_0_write_1__SEL_2:
	v_fb_data_0_0_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_0_write_1__SEL_3:
	v_fb_data_0_0_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_0_0_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd0 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd0 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_1
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_1_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_1_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_1_D_IN = mav_allocate_line_dataline[127:64];
    MUX_v_fb_data_0_1_write_1__SEL_2:
	v_fb_data_0_1_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_1_write_1__SEL_3:
	v_fb_data_0_1_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_0_1_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd1 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd1 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_2
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_2_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_2_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_2_D_IN = mav_allocate_line_dataline[191:128];
    MUX_v_fb_data_0_2_write_1__SEL_2:
	v_fb_data_0_2_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_2_write_1__SEL_3:
	v_fb_data_0_2_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_0_2_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd2 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd2 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_3
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_3_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_3_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_3_D_IN = mav_allocate_line_dataline[255:192];
    MUX_v_fb_data_0_3_write_1__SEL_2:
	v_fb_data_0_3_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_3_write_1__SEL_3:
	v_fb_data_0_3_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_0_3_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd3 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd3 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_4
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_4_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_4_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_4_D_IN = mav_allocate_line_dataline[319:256];
    MUX_v_fb_data_0_4_write_1__SEL_2:
	v_fb_data_0_4_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_4_write_1__SEL_3:
	v_fb_data_0_4_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_0_4_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd4 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd4 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_5
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_5_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_5_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_5_D_IN = mav_allocate_line_dataline[383:320];
    MUX_v_fb_data_0_5_write_1__SEL_2:
	v_fb_data_0_5_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_5_write_1__SEL_3:
	v_fb_data_0_5_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_0_5_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd5 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd5 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_6
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_6_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_6_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_6_D_IN = mav_allocate_line_dataline[447:384];
    MUX_v_fb_data_0_6_write_1__SEL_2:
	v_fb_data_0_6_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_6_write_1__SEL_3:
	v_fb_data_0_6_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_0_6_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd6 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd6 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_7
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_7_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_7_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_7_D_IN = mav_allocate_line_dataline[511:448];
    MUX_v_fb_data_0_7_write_1__SEL_2:
	v_fb_data_0_7_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_7_write_1__SEL_3:
	v_fb_data_0_7_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_0_7_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd7 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd7 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_1_0
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_0_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_0_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_0_D_IN = mav_allocate_line_dataline[63:0];
    MUX_v_fb_data_1_0_write_1__SEL_2:
	v_fb_data_1_0_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_0_write_1__SEL_3:
	v_fb_data_1_0_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_1_0_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd0 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd0 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_1
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_1_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_1_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_1_D_IN = mav_allocate_line_dataline[127:64];
    MUX_v_fb_data_1_1_write_1__SEL_2:
	v_fb_data_1_1_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_1_write_1__SEL_3:
	v_fb_data_1_1_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_1_1_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd1 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd1 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_2
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_2_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_2_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_2_D_IN = mav_allocate_line_dataline[191:128];
    MUX_v_fb_data_1_2_write_1__SEL_2:
	v_fb_data_1_2_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_2_write_1__SEL_3:
	v_fb_data_1_2_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_1_2_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd2 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd2 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_3
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_3_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_3_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_3_D_IN = mav_allocate_line_dataline[255:192];
    MUX_v_fb_data_1_3_write_1__SEL_2:
	v_fb_data_1_3_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_3_write_1__SEL_3:
	v_fb_data_1_3_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_1_3_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd3 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd3 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_4
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_4_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_4_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_4_D_IN = mav_allocate_line_dataline[319:256];
    MUX_v_fb_data_1_4_write_1__SEL_2:
	v_fb_data_1_4_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_4_write_1__SEL_3:
	v_fb_data_1_4_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_1_4_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd4 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd4 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_5
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_5_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_5_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_5_D_IN = mav_allocate_line_dataline[383:320];
    MUX_v_fb_data_1_5_write_1__SEL_2:
	v_fb_data_1_5_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_5_write_1__SEL_3:
	v_fb_data_1_5_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_1_5_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd5 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd5 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_6
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_6_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_6_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_6_D_IN = mav_allocate_line_dataline[447:384];
    MUX_v_fb_data_1_6_write_1__SEL_2:
	v_fb_data_1_6_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_6_write_1__SEL_3:
	v_fb_data_1_6_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_1_6_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd6 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd6 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_7
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_7_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_7_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_7_D_IN = mav_allocate_line_dataline[511:448];
    MUX_v_fb_data_1_7_write_1__SEL_2:
	v_fb_data_1_7_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_7_write_1__SEL_3:
	v_fb_data_1_7_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_1_7_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd7 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd7 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_2_0
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_0_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_0_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_0_D_IN = mav_allocate_line_dataline[63:0];
    MUX_v_fb_data_2_0_write_1__SEL_2:
	v_fb_data_2_0_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_0_write_1__SEL_3:
	v_fb_data_2_0_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_2_0_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd0 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd0 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_1
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_1_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_1_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_1_D_IN = mav_allocate_line_dataline[127:64];
    MUX_v_fb_data_2_1_write_1__SEL_2:
	v_fb_data_2_1_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_1_write_1__SEL_3:
	v_fb_data_2_1_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_2_1_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd1 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd1 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_2
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_2_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_2_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_2_D_IN = mav_allocate_line_dataline[191:128];
    MUX_v_fb_data_2_2_write_1__SEL_2:
	v_fb_data_2_2_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_2_write_1__SEL_3:
	v_fb_data_2_2_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_2_2_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd2 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd2 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_3
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_3_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_3_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_3_D_IN = mav_allocate_line_dataline[255:192];
    MUX_v_fb_data_2_3_write_1__SEL_2:
	v_fb_data_2_3_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_3_write_1__SEL_3:
	v_fb_data_2_3_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_2_3_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd3 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd3 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_4
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_4_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_4_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_4_D_IN = mav_allocate_line_dataline[319:256];
    MUX_v_fb_data_2_4_write_1__SEL_2:
	v_fb_data_2_4_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_4_write_1__SEL_3:
	v_fb_data_2_4_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_2_4_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd4 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd4 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_5
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_5_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_5_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_5_D_IN = mav_allocate_line_dataline[383:320];
    MUX_v_fb_data_2_5_write_1__SEL_2:
	v_fb_data_2_5_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_5_write_1__SEL_3:
	v_fb_data_2_5_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_2_5_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd5 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd5 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_6
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_6_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_6_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_6_D_IN = mav_allocate_line_dataline[447:384];
    MUX_v_fb_data_2_6_write_1__SEL_2:
	v_fb_data_2_6_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_6_write_1__SEL_3:
	v_fb_data_2_6_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_2_6_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd6 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd6 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_7
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_7_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_7_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_7_D_IN = mav_allocate_line_dataline[511:448];
    MUX_v_fb_data_2_7_write_1__SEL_2:
	v_fb_data_2_7_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_7_write_1__SEL_3:
	v_fb_data_2_7_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_2_7_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd7 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd7 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_3_0
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_0_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_0_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_0_D_IN = mav_allocate_line_dataline[63:0];
    MUX_v_fb_data_3_0_write_1__SEL_2:
	v_fb_data_3_0_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_0_write_1__SEL_3:
	v_fb_data_3_0_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_3_0_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd0 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd0 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_1
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_1_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_1_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_1_D_IN = mav_allocate_line_dataline[127:64];
    MUX_v_fb_data_3_1_write_1__SEL_2:
	v_fb_data_3_1_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_1_write_1__SEL_3:
	v_fb_data_3_1_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_3_1_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd1 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd1 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_2
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_2_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_2_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_2_D_IN = mav_allocate_line_dataline[191:128];
    MUX_v_fb_data_3_2_write_1__SEL_2:
	v_fb_data_3_2_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_2_write_1__SEL_3:
	v_fb_data_3_2_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_3_2_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd2 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd2 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_3
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_3_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_3_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_3_D_IN = mav_allocate_line_dataline[255:192];
    MUX_v_fb_data_3_3_write_1__SEL_2:
	v_fb_data_3_3_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_3_write_1__SEL_3:
	v_fb_data_3_3_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_3_3_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd3 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd3 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_4
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_4_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_4_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_4_D_IN = mav_allocate_line_dataline[319:256];
    MUX_v_fb_data_3_4_write_1__SEL_2:
	v_fb_data_3_4_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_4_write_1__SEL_3:
	v_fb_data_3_4_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_3_4_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd4 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd4 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_5
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_5_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_5_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_5_D_IN = mav_allocate_line_dataline[383:320];
    MUX_v_fb_data_3_5_write_1__SEL_2:
	v_fb_data_3_5_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_5_write_1__SEL_3:
	v_fb_data_3_5_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_3_5_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd5 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd5 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_6
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_6_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_6_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_6_D_IN = mav_allocate_line_dataline[447:384];
    MUX_v_fb_data_3_6_write_1__SEL_2:
	v_fb_data_3_6_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_6_write_1__SEL_3:
	v_fb_data_3_6_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_3_6_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd6 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd6 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_7
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_7_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_7_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_7_D_IN = mav_allocate_line_dataline[511:448];
    MUX_v_fb_data_3_7_write_1__SEL_2:
	v_fb_data_3_7_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_7_write_1__SEL_3:
	v_fb_data_3_7_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_3_7_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd7 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd7 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_4_0
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_0_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_0_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_0_D_IN = mav_allocate_line_dataline[63:0];
    MUX_v_fb_data_4_0_write_1__SEL_2:
	v_fb_data_4_0_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_0_write_1__SEL_3:
	v_fb_data_4_0_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_4_0_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd0 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd0 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_1
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_1_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_1_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_1_D_IN = mav_allocate_line_dataline[127:64];
    MUX_v_fb_data_4_1_write_1__SEL_2:
	v_fb_data_4_1_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_1_write_1__SEL_3:
	v_fb_data_4_1_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_4_1_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd1 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd1 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_2
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_2_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_2_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_2_D_IN = mav_allocate_line_dataline[191:128];
    MUX_v_fb_data_4_2_write_1__SEL_2:
	v_fb_data_4_2_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_2_write_1__SEL_3:
	v_fb_data_4_2_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_4_2_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd2 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd2 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_3
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_3_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_3_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_3_D_IN = mav_allocate_line_dataline[255:192];
    MUX_v_fb_data_4_3_write_1__SEL_2:
	v_fb_data_4_3_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_3_write_1__SEL_3:
	v_fb_data_4_3_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_4_3_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd3 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd3 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_4
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_4_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_4_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_4_D_IN = mav_allocate_line_dataline[319:256];
    MUX_v_fb_data_4_4_write_1__SEL_2:
	v_fb_data_4_4_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_4_write_1__SEL_3:
	v_fb_data_4_4_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_4_4_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd4 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd4 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_5
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_5_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_5_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_5_D_IN = mav_allocate_line_dataline[383:320];
    MUX_v_fb_data_4_5_write_1__SEL_2:
	v_fb_data_4_5_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_5_write_1__SEL_3:
	v_fb_data_4_5_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_4_5_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd5 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd5 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_6
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_6_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_6_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_6_D_IN = mav_allocate_line_dataline[447:384];
    MUX_v_fb_data_4_6_write_1__SEL_2:
	v_fb_data_4_6_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_6_write_1__SEL_3:
	v_fb_data_4_6_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_4_6_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd6 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd6 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_7
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_7_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_7_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_7_D_IN = mav_allocate_line_dataline[511:448];
    MUX_v_fb_data_4_7_write_1__SEL_2:
	v_fb_data_4_7_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_7_write_1__SEL_3:
	v_fb_data_4_7_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_4_7_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd7 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd7 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_5_0
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_0_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_0_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_0_D_IN = mav_allocate_line_dataline[63:0];
    MUX_v_fb_data_5_0_write_1__SEL_2:
	v_fb_data_5_0_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_0_write_1__SEL_3:
	v_fb_data_5_0_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_5_0_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd0 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd0 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_1
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_1_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_1_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_1_D_IN = mav_allocate_line_dataline[127:64];
    MUX_v_fb_data_5_1_write_1__SEL_2:
	v_fb_data_5_1_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_1_write_1__SEL_3:
	v_fb_data_5_1_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_5_1_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd1 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd1 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_2
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_2_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_2_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_2_D_IN = mav_allocate_line_dataline[191:128];
    MUX_v_fb_data_5_2_write_1__SEL_2:
	v_fb_data_5_2_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_2_write_1__SEL_3:
	v_fb_data_5_2_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_5_2_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd2 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd2 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_3
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_3_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_3_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_3_D_IN = mav_allocate_line_dataline[255:192];
    MUX_v_fb_data_5_3_write_1__SEL_2:
	v_fb_data_5_3_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_3_write_1__SEL_3:
	v_fb_data_5_3_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_5_3_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd3 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd3 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_4
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_4_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_4_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_4_D_IN = mav_allocate_line_dataline[319:256];
    MUX_v_fb_data_5_4_write_1__SEL_2:
	v_fb_data_5_4_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_4_write_1__SEL_3:
	v_fb_data_5_4_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_5_4_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd4 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd4 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_5
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_5_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_5_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_5_D_IN = mav_allocate_line_dataline[383:320];
    MUX_v_fb_data_5_5_write_1__SEL_2:
	v_fb_data_5_5_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_5_write_1__SEL_3:
	v_fb_data_5_5_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_5_5_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd5 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd5 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_6
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_6_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_6_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_6_D_IN = mav_allocate_line_dataline[447:384];
    MUX_v_fb_data_5_6_write_1__SEL_2:
	v_fb_data_5_6_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_6_write_1__SEL_3:
	v_fb_data_5_6_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_5_6_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd6 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd6 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_7
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_7_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_7_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_7_D_IN = mav_allocate_line_dataline[511:448];
    MUX_v_fb_data_5_7_write_1__SEL_2:
	v_fb_data_5_7_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_7_write_1__SEL_3:
	v_fb_data_5_7_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_5_7_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd7 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd7 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_6_0
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_0_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_0_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_0_D_IN = mav_allocate_line_dataline[63:0];
    MUX_v_fb_data_6_0_write_1__SEL_2:
	v_fb_data_6_0_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_0_write_1__SEL_3:
	v_fb_data_6_0_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_6_0_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd0 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd0 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_1
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_1_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_1_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_1_D_IN = mav_allocate_line_dataline[127:64];
    MUX_v_fb_data_6_1_write_1__SEL_2:
	v_fb_data_6_1_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_1_write_1__SEL_3:
	v_fb_data_6_1_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_6_1_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd1 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd1 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_2
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_2_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_2_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_2_D_IN = mav_allocate_line_dataline[191:128];
    MUX_v_fb_data_6_2_write_1__SEL_2:
	v_fb_data_6_2_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_2_write_1__SEL_3:
	v_fb_data_6_2_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_6_2_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd2 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd2 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_3
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_3_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_3_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_3_D_IN = mav_allocate_line_dataline[255:192];
    MUX_v_fb_data_6_3_write_1__SEL_2:
	v_fb_data_6_3_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_3_write_1__SEL_3:
	v_fb_data_6_3_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_6_3_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd3 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd3 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_4
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_4_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_4_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_4_D_IN = mav_allocate_line_dataline[319:256];
    MUX_v_fb_data_6_4_write_1__SEL_2:
	v_fb_data_6_4_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_4_write_1__SEL_3:
	v_fb_data_6_4_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_6_4_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd4 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd4 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_5
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_5_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_5_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_5_D_IN = mav_allocate_line_dataline[383:320];
    MUX_v_fb_data_6_5_write_1__SEL_2:
	v_fb_data_6_5_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_5_write_1__SEL_3:
	v_fb_data_6_5_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_6_5_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd5 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd5 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_6
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_6_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_6_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_6_D_IN = mav_allocate_line_dataline[447:384];
    MUX_v_fb_data_6_6_write_1__SEL_2:
	v_fb_data_6_6_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_6_write_1__SEL_3:
	v_fb_data_6_6_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_6_6_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd6 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd6 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_7
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_7_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_7_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_7_D_IN = mav_allocate_line_dataline[511:448];
    MUX_v_fb_data_6_7_write_1__SEL_2:
	v_fb_data_6_7_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_7_write_1__SEL_3:
	v_fb_data_6_7_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_6_7_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd7 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd7 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_7_0
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_0_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_0_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_0_D_IN = mav_allocate_line_dataline[63:0];
    MUX_v_fb_data_7_0_write_1__SEL_2:
	v_fb_data_7_0_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_0_write_1__SEL_3:
	v_fb_data_7_0_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_7_0_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd0 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd0 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_1
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_1_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_1_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_1_D_IN = mav_allocate_line_dataline[127:64];
    MUX_v_fb_data_7_1_write_1__SEL_2:
	v_fb_data_7_1_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_1_write_1__SEL_3:
	v_fb_data_7_1_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_7_1_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd1 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd1 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_2
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_2_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_2_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_2_D_IN = mav_allocate_line_dataline[191:128];
    MUX_v_fb_data_7_2_write_1__SEL_2:
	v_fb_data_7_2_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_2_write_1__SEL_3:
	v_fb_data_7_2_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_7_2_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd2 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd2 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_3
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_3_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_3_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_3_D_IN = mav_allocate_line_dataline[255:192];
    MUX_v_fb_data_7_3_write_1__SEL_2:
	v_fb_data_7_3_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_3_write_1__SEL_3:
	v_fb_data_7_3_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_7_3_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd3 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd3 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_4
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_4_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_4_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_4_D_IN = mav_allocate_line_dataline[319:256];
    MUX_v_fb_data_7_4_write_1__SEL_2:
	v_fb_data_7_4_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_4_write_1__SEL_3:
	v_fb_data_7_4_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_7_4_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd4 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd4 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_5
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_5_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_5_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_5_D_IN = mav_allocate_line_dataline[383:320];
    MUX_v_fb_data_7_5_write_1__SEL_2:
	v_fb_data_7_5_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_5_write_1__SEL_3:
	v_fb_data_7_5_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_7_5_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd5 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd5 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_6
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_6_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_6_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_6_D_IN = mav_allocate_line_dataline[447:384];
    MUX_v_fb_data_7_6_write_1__SEL_2:
	v_fb_data_7_6_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_6_write_1__SEL_3:
	v_fb_data_7_6_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_7_6_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd6 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd6 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_7
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_7_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_7_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_7_D_IN = mav_allocate_line_dataline[511:448];
    MUX_v_fb_data_7_7_write_1__SEL_2:
	v_fb_data_7_7_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_7_write_1__SEL_3:
	v_fb_data_7_7_D_IN = ma_fill_from_memory_mem_resp[65:2];
    default: v_fb_data_7_7_D_IN =
		 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h14246 == 3'd7 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:3] == 3'd7 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_dirty_0
  assign v_fb_dirty_0_D_IN =
	     !MUX_v_fb_addr_valid_0_write_1__SEL_2 ||
	     MUX_v_fb_dirty_0_write_1__VAL_1 ;
  assign v_fb_dirty_0_EN =
	     EN_ma_from_storebuffer && ma_from_storebuffer_fbindex == 3'd0 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ;

  // register v_fb_dirty_1
  assign v_fb_dirty_1_D_IN =
	     !MUX_v_fb_addr_valid_1_write_1__SEL_2 ||
	     MUX_v_fb_dirty_0_write_1__VAL_1 ;
  assign v_fb_dirty_1_EN =
	     EN_ma_from_storebuffer && ma_from_storebuffer_fbindex == 3'd1 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ;

  // register v_fb_dirty_2
  assign v_fb_dirty_2_D_IN =
	     !MUX_v_fb_addr_valid_2_write_1__SEL_2 ||
	     MUX_v_fb_dirty_0_write_1__VAL_1 ;
  assign v_fb_dirty_2_EN =
	     EN_ma_from_storebuffer && ma_from_storebuffer_fbindex == 3'd2 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ;

  // register v_fb_dirty_3
  assign v_fb_dirty_3_D_IN =
	     !MUX_v_fb_addr_valid_3_write_1__SEL_2 ||
	     MUX_v_fb_dirty_0_write_1__VAL_1 ;
  assign v_fb_dirty_3_EN =
	     EN_ma_from_storebuffer && ma_from_storebuffer_fbindex == 3'd3 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ;

  // register v_fb_dirty_4
  assign v_fb_dirty_4_D_IN =
	     !MUX_v_fb_addr_valid_4_write_1__SEL_2 ||
	     MUX_v_fb_dirty_0_write_1__VAL_1 ;
  assign v_fb_dirty_4_EN =
	     EN_ma_from_storebuffer && ma_from_storebuffer_fbindex == 3'd4 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ;

  // register v_fb_dirty_5
  assign v_fb_dirty_5_D_IN =
	     !MUX_v_fb_addr_valid_5_write_1__SEL_2 ||
	     MUX_v_fb_dirty_0_write_1__VAL_1 ;
  assign v_fb_dirty_5_EN =
	     EN_ma_from_storebuffer && ma_from_storebuffer_fbindex == 3'd5 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ;

  // register v_fb_dirty_6
  assign v_fb_dirty_6_D_IN =
	     !MUX_v_fb_addr_valid_6_write_1__SEL_2 ||
	     MUX_v_fb_dirty_0_write_1__VAL_1 ;
  assign v_fb_dirty_6_EN =
	     EN_ma_from_storebuffer && ma_from_storebuffer_fbindex == 3'd6 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ;

  // register v_fb_dirty_7
  assign v_fb_dirty_7_D_IN =
	     !MUX_v_fb_addr_valid_7_write_1__SEL_2 ||
	     MUX_v_fb_dirty_0_write_1__VAL_1 ;
  assign v_fb_dirty_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_from_storebuffer && ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_err_0
  assign v_fb_err_0_D_IN =
	     !MUX_v_fb_addr_valid_0_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_0_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ;

  // register v_fb_err_1
  assign v_fb_err_1_D_IN =
	     !MUX_v_fb_addr_valid_1_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_1_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ;

  // register v_fb_err_2
  assign v_fb_err_2_D_IN =
	     !MUX_v_fb_addr_valid_2_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_2_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ;

  // register v_fb_err_3
  assign v_fb_err_3_D_IN =
	     !MUX_v_fb_addr_valid_3_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_3_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ;

  // register v_fb_err_4
  assign v_fb_err_4_D_IN =
	     !MUX_v_fb_addr_valid_4_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_4_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ;

  // register v_fb_err_5
  assign v_fb_err_5_D_IN =
	     !MUX_v_fb_addr_valid_5_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_5_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ;

  // register v_fb_err_6
  assign v_fb_err_6_D_IN =
	     !MUX_v_fb_addr_valid_6_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_6_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ;

  // register v_fb_err_7
  assign v_fb_err_7_D_IN =
	     !MUX_v_fb_addr_valid_7_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd7 ;

  // register v_fb_line_valid_0
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_0_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_1: v_fb_line_valid_0_D_IN = 1'd0;
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_line_valid_0_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_0_write_1__SEL_3: v_fb_line_valid_0_D_IN = 1'd1;
    default: v_fb_line_valid_0_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd0 &&
	     ma_fill_from_memory_mem_resp[1] ||
	     EN_ma_perform_release && rg_fbhead == 3'd0 ;

  // register v_fb_line_valid_1
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_1_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_1: v_fb_line_valid_1_D_IN = 1'd0;
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_line_valid_1_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_1_write_1__SEL_3: v_fb_line_valid_1_D_IN = 1'd1;
    default: v_fb_line_valid_1_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd1 &&
	     ma_fill_from_memory_mem_resp[1] ||
	     EN_ma_perform_release && rg_fbhead == 3'd1 ;

  // register v_fb_line_valid_2
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_2_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_1: v_fb_line_valid_2_D_IN = 1'd0;
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_line_valid_2_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_2_write_1__SEL_3: v_fb_line_valid_2_D_IN = 1'd1;
    default: v_fb_line_valid_2_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd2 &&
	     ma_fill_from_memory_mem_resp[1] ||
	     EN_ma_perform_release && rg_fbhead == 3'd2 ;

  // register v_fb_line_valid_3
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_3_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_1: v_fb_line_valid_3_D_IN = 1'd0;
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_line_valid_3_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_3_write_1__SEL_3: v_fb_line_valid_3_D_IN = 1'd1;
    default: v_fb_line_valid_3_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd3 &&
	     ma_fill_from_memory_mem_resp[1] ||
	     EN_ma_perform_release && rg_fbhead == 3'd3 ;

  // register v_fb_line_valid_4
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_4_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_1: v_fb_line_valid_4_D_IN = 1'd0;
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_line_valid_4_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_4_write_1__SEL_3: v_fb_line_valid_4_D_IN = 1'd1;
    default: v_fb_line_valid_4_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd4 &&
	     ma_fill_from_memory_mem_resp[1] ||
	     EN_ma_perform_release && rg_fbhead == 3'd4 ;

  // register v_fb_line_valid_5
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_5_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_1: v_fb_line_valid_5_D_IN = 1'd0;
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_line_valid_5_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_5_write_1__SEL_3: v_fb_line_valid_5_D_IN = 1'd1;
    default: v_fb_line_valid_5_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd5 &&
	     ma_fill_from_memory_mem_resp[1] ||
	     EN_ma_perform_release && rg_fbhead == 3'd5 ;

  // register v_fb_line_valid_6
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_6_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_1: v_fb_line_valid_6_D_IN = 1'd0;
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_line_valid_6_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_6_write_1__SEL_3: v_fb_line_valid_6_D_IN = 1'd1;
    default: v_fb_line_valid_6_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd6 &&
	     ma_fill_from_memory_mem_resp[1] ||
	     EN_ma_perform_release && rg_fbhead == 3'd6 ;

  // register v_fb_line_valid_7
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_7_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_1: v_fb_line_valid_7_D_IN = 1'd0;
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_line_valid_7_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_7_write_1__SEL_3: v_fb_line_valid_7_D_IN = 1'd1;
    default: v_fb_line_valid_7_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_perform_release && rg_fbhead == 3'd7 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd7 &&
	     ma_fill_from_memory_mem_resp[1] ;

  // remaining internal signals
  assign IF_v_fb_addr_0_read__72_BITS_31_TO_6_41_EQ_mav_ETC___d444 =
	     (v_fb_addr_0[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_0) ?
	       8'd1 :
	       8'd0 ;
  assign IF_v_fb_addr_1_read__73_BITS_31_TO_6_38_EQ_mav_ETC___d447 =
	     (v_fb_addr_1[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_1) ?
	       v_fb_line_valid_1 :
	       IF_v_fb_addr_0_read__72_BITS_31_TO_6_41_EQ_mav_ETC___d444[0] &&
	       v_fb_line_valid_0 ;
  assign IF_v_fb_addr_1_read__73_BITS_31_TO_6_38_EQ_mav_ETC___d456 =
	     (v_fb_addr_1[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_1) ?
	       v_fb_err_1 :
	       v_fb_err_0 ;
  assign IF_v_fb_addr_1_read__73_BITS_31_TO_6_38_EQ_mav_ETC___d472 =
	     (v_fb_addr_1[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_1) ?
	       lv_selected_word__h26894 :
	       lv_selected_word__h26947 ;
  assign IF_v_fb_addr_2_read__74_BITS_31_TO_6_35_EQ_mav_ETC___d448 =
	     (v_fb_addr_2[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_2) ?
	       v_fb_line_valid_2 :
	       IF_v_fb_addr_1_read__73_BITS_31_TO_6_38_EQ_mav_ETC___d447 ;
  assign IF_v_fb_addr_2_read__74_BITS_31_TO_6_35_EQ_mav_ETC___d457 =
	     (v_fb_addr_2[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_2) ?
	       v_fb_err_2 :
	       IF_v_fb_addr_1_read__73_BITS_31_TO_6_38_EQ_mav_ETC___d456 ;
  assign IF_v_fb_addr_2_read__74_BITS_31_TO_6_35_EQ_mav_ETC___d473 =
	     (v_fb_addr_2[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_2) ?
	       lv_selected_word__h26841 :
	       IF_v_fb_addr_1_read__73_BITS_31_TO_6_38_EQ_mav_ETC___d472 ;
  assign IF_v_fb_addr_3_read__75_BITS_31_TO_6_32_EQ_mav_ETC___d449 =
	     (v_fb_addr_3[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_3) ?
	       v_fb_line_valid_3 :
	       IF_v_fb_addr_2_read__74_BITS_31_TO_6_35_EQ_mav_ETC___d448 ;
  assign IF_v_fb_addr_3_read__75_BITS_31_TO_6_32_EQ_mav_ETC___d458 =
	     (v_fb_addr_3[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_3) ?
	       v_fb_err_3 :
	       IF_v_fb_addr_2_read__74_BITS_31_TO_6_35_EQ_mav_ETC___d457 ;
  assign IF_v_fb_addr_3_read__75_BITS_31_TO_6_32_EQ_mav_ETC___d474 =
	     (v_fb_addr_3[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_3) ?
	       lv_selected_word__h26788 :
	       IF_v_fb_addr_2_read__74_BITS_31_TO_6_35_EQ_mav_ETC___d473 ;
  assign IF_v_fb_addr_4_read__76_BITS_31_TO_6_29_EQ_mav_ETC___d450 =
	     (v_fb_addr_4[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_4) ?
	       v_fb_line_valid_4 :
	       IF_v_fb_addr_3_read__75_BITS_31_TO_6_32_EQ_mav_ETC___d449 ;
  assign IF_v_fb_addr_4_read__76_BITS_31_TO_6_29_EQ_mav_ETC___d459 =
	     (v_fb_addr_4[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_4) ?
	       v_fb_err_4 :
	       IF_v_fb_addr_3_read__75_BITS_31_TO_6_32_EQ_mav_ETC___d458 ;
  assign IF_v_fb_addr_4_read__76_BITS_31_TO_6_29_EQ_mav_ETC___d475 =
	     (v_fb_addr_4[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_4) ?
	       lv_selected_word__h26735 :
	       IF_v_fb_addr_3_read__75_BITS_31_TO_6_32_EQ_mav_ETC___d474 ;
  assign IF_v_fb_addr_5_read__77_BITS_31_TO_6_26_EQ_mav_ETC___d451 =
	     (v_fb_addr_5[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_5) ?
	       v_fb_line_valid_5 :
	       IF_v_fb_addr_4_read__76_BITS_31_TO_6_29_EQ_mav_ETC___d450 ;
  assign IF_v_fb_addr_5_read__77_BITS_31_TO_6_26_EQ_mav_ETC___d460 =
	     (v_fb_addr_5[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_5) ?
	       v_fb_err_5 :
	       IF_v_fb_addr_4_read__76_BITS_31_TO_6_29_EQ_mav_ETC___d459 ;
  assign IF_v_fb_addr_5_read__77_BITS_31_TO_6_26_EQ_mav_ETC___d476 =
	     (v_fb_addr_5[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_5) ?
	       lv_selected_word__h26682 :
	       IF_v_fb_addr_4_read__76_BITS_31_TO_6_29_EQ_mav_ETC___d475 ;
  assign IF_v_fb_addr_6_read__78_BITS_31_TO_6_23_EQ_mav_ETC___d452 =
	     (v_fb_addr_6[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_6) ?
	       v_fb_line_valid_6 :
	       IF_v_fb_addr_5_read__77_BITS_31_TO_6_26_EQ_mav_ETC___d451 ;
  assign IF_v_fb_addr_6_read__78_BITS_31_TO_6_23_EQ_mav_ETC___d461 =
	     (v_fb_addr_6[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_6) ?
	       v_fb_err_6 :
	       IF_v_fb_addr_5_read__77_BITS_31_TO_6_26_EQ_mav_ETC___d460 ;
  assign IF_v_fb_addr_6_read__78_BITS_31_TO_6_23_EQ_mav_ETC___d477 =
	     (v_fb_addr_6[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_6) ?
	       lv_selected_word__h26629 :
	       IF_v_fb_addr_5_read__77_BITS_31_TO_6_26_EQ_mav_ETC___d476 ;
  assign IF_v_fb_addr_7_read__79_BITS_31_TO_6_19_EQ_mav_ETC___d453 =
	     (v_fb_addr_7[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_7) ?
	       v_fb_line_valid_7 :
	       IF_v_fb_addr_6_read__78_BITS_31_TO_6_23_EQ_mav_ETC___d452 ;
  assign NOT_v_fb_addr_valid_1_read_3_AND_NOT_v_fb_addr_ETC___d35 =
	     !v_fb_addr_valid_1 && !v_fb_addr_valid_2 && !v_fb_addr_valid_3 &&
	     !v_fb_addr_valid_4 &&
	     !v_fb_addr_valid_5 &&
	     !v_fb_addr_valid_6 &&
	     !v_fb_addr_valid_7 ;
  assign _theResult____h25755 =
	     { v_fb_addr_7[31:6] == mav_polling_response_address[31:6] &&
	       v_fb_addr_valid_7,
	       v_fb_addr_6[31:6] == mav_polling_response_address[31:6] &&
	       v_fb_addr_valid_6,
	       v_fb_addr_5[31:6] == mav_polling_response_address[31:6] &&
	       v_fb_addr_valid_5,
	       v_fb_addr_4[31:6] == mav_polling_response_address[31:6] &&
	       v_fb_addr_valid_4,
	       v_fb_addr_3[31:6] == mav_polling_response_address[31:6] &&
	       v_fb_addr_valid_3,
	       v_fb_addr_2[31:6] == mav_polling_response_address[31:6] &&
	       v_fb_addr_valid_2,
	       v_fb_addr_1[31:6] == mav_polling_response_address[31:6] &&
	       v_fb_addr_valid_1,
	       IF_v_fb_addr_0_read__72_BITS_31_TO_6_41_EQ_mav_ETC___d444[0] } ;
  assign lv_current_bank__h14246 =
	     (rg_fb_enables == 8'd0) ?
	       ma_fill_from_memory_init_bank :
	       rg_next_bank ;
  assign mav_polling_response_fill_AND_v_fb_addr_7_read_ETC___d488 =
	     mav_polling_response_fill &&
	     _theResult____h25755[mav_polling_response_fbindex] &&
	     rg_fb_enables[mav_polling_response_address[5:3]] ;
  assign v_fb_addr_valid_1_read_AND_v_fb_addr_valid_2_r_ETC___d20 =
	     v_fb_addr_valid_1 && v_fb_addr_valid_2 && v_fb_addr_valid_3 &&
	     v_fb_addr_valid_4 &&
	     v_fb_addr_valid_5 &&
	     v_fb_addr_valid_6 &&
	     v_fb_addr_valid_7 ;
  assign x__h13915 = rg_fbtail + 3'd1 ;
  assign x__h15897 = rg_fb_enables | x__h15920 ;
  assign x__h15920 = 8'd1 << lv_current_bank__h14246 ;
  assign x__h24378 = x__h24380 & y__h24381 ;
  assign x__h25475 = rg_fbhead + 3'd1 ;
  assign x_mv_release_info_dataline__h24546 =
	     { spliced_bits__h24607,
	       spliced_bits__h24636,
	       spliced_bits__h24665,
	       spliced_bits__h24694,
	       spliced_bits__h24723,
	       spliced_bits__h24752,
	       spliced_bits__h24781,
	       spliced_bits__h24810 } ;
  assign y__h24379 = ma_from_storebuffer_mask & ma_from_storebuffer_dataword ;
  assign y__h24381 = ~ma_from_storebuffer_mask ;
  assign y_avValue_err__h27010 =
	     (v_fb_addr_7[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_7) ?
	       v_fb_err_7 :
	       IF_v_fb_addr_6_read__78_BITS_31_TO_6_23_EQ_mav_ETC___d461 ;
  assign y_avValue_word__h27011 =
	     (v_fb_addr_7[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_7) ?
	       lv_selected_word__h26576 :
	       IF_v_fb_addr_6_read__78_BITS_31_TO_6_23_EQ_mav_ETC___d477 ;
  always@(rg_fbhead or
	  v_fb_data_0_0 or
	  v_fb_data_1_0 or
	  v_fb_data_2_0 or
	  v_fb_data_3_0 or
	  v_fb_data_4_0 or v_fb_data_5_0 or v_fb_data_6_0 or v_fb_data_7_0)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h24810 = v_fb_data_0_0;
      3'd1: spliced_bits__h24810 = v_fb_data_1_0;
      3'd2: spliced_bits__h24810 = v_fb_data_2_0;
      3'd3: spliced_bits__h24810 = v_fb_data_3_0;
      3'd4: spliced_bits__h24810 = v_fb_data_4_0;
      3'd5: spliced_bits__h24810 = v_fb_data_5_0;
      3'd6: spliced_bits__h24810 = v_fb_data_6_0;
      3'd7: spliced_bits__h24810 = v_fb_data_7_0;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_6 or
	  v_fb_data_1_6 or
	  v_fb_data_2_6 or
	  v_fb_data_3_6 or
	  v_fb_data_4_6 or v_fb_data_5_6 or v_fb_data_6_6 or v_fb_data_7_6)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h24636 = v_fb_data_0_6;
      3'd1: spliced_bits__h24636 = v_fb_data_1_6;
      3'd2: spliced_bits__h24636 = v_fb_data_2_6;
      3'd3: spliced_bits__h24636 = v_fb_data_3_6;
      3'd4: spliced_bits__h24636 = v_fb_data_4_6;
      3'd5: spliced_bits__h24636 = v_fb_data_5_6;
      3'd6: spliced_bits__h24636 = v_fb_data_6_6;
      3'd7: spliced_bits__h24636 = v_fb_data_7_6;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_5 or
	  v_fb_data_1_5 or
	  v_fb_data_2_5 or
	  v_fb_data_3_5 or
	  v_fb_data_4_5 or v_fb_data_5_5 or v_fb_data_6_5 or v_fb_data_7_5)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h24665 = v_fb_data_0_5;
      3'd1: spliced_bits__h24665 = v_fb_data_1_5;
      3'd2: spliced_bits__h24665 = v_fb_data_2_5;
      3'd3: spliced_bits__h24665 = v_fb_data_3_5;
      3'd4: spliced_bits__h24665 = v_fb_data_4_5;
      3'd5: spliced_bits__h24665 = v_fb_data_5_5;
      3'd6: spliced_bits__h24665 = v_fb_data_6_5;
      3'd7: spliced_bits__h24665 = v_fb_data_7_5;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_4 or
	  v_fb_data_1_4 or
	  v_fb_data_2_4 or
	  v_fb_data_3_4 or
	  v_fb_data_4_4 or v_fb_data_5_4 or v_fb_data_6_4 or v_fb_data_7_4)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h24694 = v_fb_data_0_4;
      3'd1: spliced_bits__h24694 = v_fb_data_1_4;
      3'd2: spliced_bits__h24694 = v_fb_data_2_4;
      3'd3: spliced_bits__h24694 = v_fb_data_3_4;
      3'd4: spliced_bits__h24694 = v_fb_data_4_4;
      3'd5: spliced_bits__h24694 = v_fb_data_5_4;
      3'd6: spliced_bits__h24694 = v_fb_data_6_4;
      3'd7: spliced_bits__h24694 = v_fb_data_7_4;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_3 or
	  v_fb_data_1_3 or
	  v_fb_data_2_3 or
	  v_fb_data_3_3 or
	  v_fb_data_4_3 or v_fb_data_5_3 or v_fb_data_6_3 or v_fb_data_7_3)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h24723 = v_fb_data_0_3;
      3'd1: spliced_bits__h24723 = v_fb_data_1_3;
      3'd2: spliced_bits__h24723 = v_fb_data_2_3;
      3'd3: spliced_bits__h24723 = v_fb_data_3_3;
      3'd4: spliced_bits__h24723 = v_fb_data_4_3;
      3'd5: spliced_bits__h24723 = v_fb_data_5_3;
      3'd6: spliced_bits__h24723 = v_fb_data_6_3;
      3'd7: spliced_bits__h24723 = v_fb_data_7_3;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_2 or
	  v_fb_data_1_2 or
	  v_fb_data_2_2 or
	  v_fb_data_3_2 or
	  v_fb_data_4_2 or v_fb_data_5_2 or v_fb_data_6_2 or v_fb_data_7_2)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h24752 = v_fb_data_0_2;
      3'd1: spliced_bits__h24752 = v_fb_data_1_2;
      3'd2: spliced_bits__h24752 = v_fb_data_2_2;
      3'd3: spliced_bits__h24752 = v_fb_data_3_2;
      3'd4: spliced_bits__h24752 = v_fb_data_4_2;
      3'd5: spliced_bits__h24752 = v_fb_data_5_2;
      3'd6: spliced_bits__h24752 = v_fb_data_6_2;
      3'd7: spliced_bits__h24752 = v_fb_data_7_2;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_1 or
	  v_fb_data_1_1 or
	  v_fb_data_2_1 or
	  v_fb_data_3_1 or
	  v_fb_data_4_1 or v_fb_data_5_1 or v_fb_data_6_1 or v_fb_data_7_1)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h24781 = v_fb_data_0_1;
      3'd1: spliced_bits__h24781 = v_fb_data_1_1;
      3'd2: spliced_bits__h24781 = v_fb_data_2_1;
      3'd3: spliced_bits__h24781 = v_fb_data_3_1;
      3'd4: spliced_bits__h24781 = v_fb_data_4_1;
      3'd5: spliced_bits__h24781 = v_fb_data_5_1;
      3'd6: spliced_bits__h24781 = v_fb_data_6_1;
      3'd7: spliced_bits__h24781 = v_fb_data_7_1;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_addr_0 or
	  v_fb_addr_1 or
	  v_fb_addr_2 or
	  v_fb_addr_3 or
	  v_fb_addr_4 or v_fb_addr_5 or v_fb_addr_6 or v_fb_addr_7)
  begin
    case (rg_fbhead)
      3'd0: x_mv_release_info_address__h24547 = v_fb_addr_0;
      3'd1: x_mv_release_info_address__h24547 = v_fb_addr_1;
      3'd2: x_mv_release_info_address__h24547 = v_fb_addr_2;
      3'd3: x_mv_release_info_address__h24547 = v_fb_addr_3;
      3'd4: x_mv_release_info_address__h24547 = v_fb_addr_4;
      3'd5: x_mv_release_info_address__h24547 = v_fb_addr_5;
      3'd6: x_mv_release_info_address__h24547 = v_fb_addr_6;
      3'd7: x_mv_release_info_address__h24547 = v_fb_addr_7;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_7 or
	  v_fb_data_1_7 or
	  v_fb_data_2_7 or
	  v_fb_data_3_7 or
	  v_fb_data_4_7 or v_fb_data_5_7 or v_fb_data_6_7 or v_fb_data_7_7)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h24607 = v_fb_data_0_7;
      3'd1: spliced_bits__h24607 = v_fb_data_1_7;
      3'd2: spliced_bits__h24607 = v_fb_data_2_7;
      3'd3: spliced_bits__h24607 = v_fb_data_3_7;
      3'd4: spliced_bits__h24607 = v_fb_data_4_7;
      3'd5: spliced_bits__h24607 = v_fb_data_5_7;
      3'd6: spliced_bits__h24607 = v_fb_data_6_7;
      3'd7: spliced_bits__h24607 = v_fb_data_7_7;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_err_0 or
	  v_fb_err_1 or
	  v_fb_err_2 or
	  v_fb_err_3 or v_fb_err_4 or v_fb_err_5 or v_fb_err_6 or v_fb_err_7)
  begin
    case (rg_fbhead)
      3'd0: x__h25351 = v_fb_err_0;
      3'd1: x__h25351 = v_fb_err_1;
      3'd2: x__h25351 = v_fb_err_2;
      3'd3: x__h25351 = v_fb_err_3;
      3'd4: x__h25351 = v_fb_err_4;
      3'd5: x__h25351 = v_fb_err_5;
      3'd6: x__h25351 = v_fb_err_6;
      3'd7: x__h25351 = v_fb_err_7;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_dirty_0 or
	  v_fb_dirty_1 or
	  v_fb_dirty_2 or
	  v_fb_dirty_3 or
	  v_fb_dirty_4 or v_fb_dirty_5 or v_fb_dirty_6 or v_fb_dirty_7)
  begin
    case (rg_fbhead)
      3'd0: x__h25378 = v_fb_dirty_0;
      3'd1: x__h25378 = v_fb_dirty_1;
      3'd2: x__h25378 = v_fb_dirty_2;
      3'd3: x__h25378 = v_fb_dirty_3;
      3'd4: x__h25378 = v_fb_dirty_4;
      3'd5: x__h25378 = v_fb_dirty_5;
      3'd6: x__h25378 = v_fb_dirty_6;
      3'd7: x__h25378 = v_fb_dirty_7;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_7_0 or
	  v_fb_data_7_1 or
	  v_fb_data_7_2 or
	  v_fb_data_7_3 or
	  v_fb_data_7_4 or v_fb_data_7_5 or v_fb_data_7_6 or v_fb_data_7_7)
  begin
    case (mav_polling_response_address[5:3])
      3'd0: lv_selected_word__h26576 = v_fb_data_7_0;
      3'd1: lv_selected_word__h26576 = v_fb_data_7_1;
      3'd2: lv_selected_word__h26576 = v_fb_data_7_2;
      3'd3: lv_selected_word__h26576 = v_fb_data_7_3;
      3'd4: lv_selected_word__h26576 = v_fb_data_7_4;
      3'd5: lv_selected_word__h26576 = v_fb_data_7_5;
      3'd6: lv_selected_word__h26576 = v_fb_data_7_6;
      3'd7: lv_selected_word__h26576 = v_fb_data_7_7;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_6_0 or
	  v_fb_data_6_1 or
	  v_fb_data_6_2 or
	  v_fb_data_6_3 or
	  v_fb_data_6_4 or v_fb_data_6_5 or v_fb_data_6_6 or v_fb_data_6_7)
  begin
    case (mav_polling_response_address[5:3])
      3'd0: lv_selected_word__h26629 = v_fb_data_6_0;
      3'd1: lv_selected_word__h26629 = v_fb_data_6_1;
      3'd2: lv_selected_word__h26629 = v_fb_data_6_2;
      3'd3: lv_selected_word__h26629 = v_fb_data_6_3;
      3'd4: lv_selected_word__h26629 = v_fb_data_6_4;
      3'd5: lv_selected_word__h26629 = v_fb_data_6_5;
      3'd6: lv_selected_word__h26629 = v_fb_data_6_6;
      3'd7: lv_selected_word__h26629 = v_fb_data_6_7;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_4_0 or
	  v_fb_data_4_1 or
	  v_fb_data_4_2 or
	  v_fb_data_4_3 or
	  v_fb_data_4_4 or v_fb_data_4_5 or v_fb_data_4_6 or v_fb_data_4_7)
  begin
    case (mav_polling_response_address[5:3])
      3'd0: lv_selected_word__h26735 = v_fb_data_4_0;
      3'd1: lv_selected_word__h26735 = v_fb_data_4_1;
      3'd2: lv_selected_word__h26735 = v_fb_data_4_2;
      3'd3: lv_selected_word__h26735 = v_fb_data_4_3;
      3'd4: lv_selected_word__h26735 = v_fb_data_4_4;
      3'd5: lv_selected_word__h26735 = v_fb_data_4_5;
      3'd6: lv_selected_word__h26735 = v_fb_data_4_6;
      3'd7: lv_selected_word__h26735 = v_fb_data_4_7;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_5_0 or
	  v_fb_data_5_1 or
	  v_fb_data_5_2 or
	  v_fb_data_5_3 or
	  v_fb_data_5_4 or v_fb_data_5_5 or v_fb_data_5_6 or v_fb_data_5_7)
  begin
    case (mav_polling_response_address[5:3])
      3'd0: lv_selected_word__h26682 = v_fb_data_5_0;
      3'd1: lv_selected_word__h26682 = v_fb_data_5_1;
      3'd2: lv_selected_word__h26682 = v_fb_data_5_2;
      3'd3: lv_selected_word__h26682 = v_fb_data_5_3;
      3'd4: lv_selected_word__h26682 = v_fb_data_5_4;
      3'd5: lv_selected_word__h26682 = v_fb_data_5_5;
      3'd6: lv_selected_word__h26682 = v_fb_data_5_6;
      3'd7: lv_selected_word__h26682 = v_fb_data_5_7;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_3_0 or
	  v_fb_data_3_1 or
	  v_fb_data_3_2 or
	  v_fb_data_3_3 or
	  v_fb_data_3_4 or v_fb_data_3_5 or v_fb_data_3_6 or v_fb_data_3_7)
  begin
    case (mav_polling_response_address[5:3])
      3'd0: lv_selected_word__h26788 = v_fb_data_3_0;
      3'd1: lv_selected_word__h26788 = v_fb_data_3_1;
      3'd2: lv_selected_word__h26788 = v_fb_data_3_2;
      3'd3: lv_selected_word__h26788 = v_fb_data_3_3;
      3'd4: lv_selected_word__h26788 = v_fb_data_3_4;
      3'd5: lv_selected_word__h26788 = v_fb_data_3_5;
      3'd6: lv_selected_word__h26788 = v_fb_data_3_6;
      3'd7: lv_selected_word__h26788 = v_fb_data_3_7;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_2_0 or
	  v_fb_data_2_1 or
	  v_fb_data_2_2 or
	  v_fb_data_2_3 or
	  v_fb_data_2_4 or v_fb_data_2_5 or v_fb_data_2_6 or v_fb_data_2_7)
  begin
    case (mav_polling_response_address[5:3])
      3'd0: lv_selected_word__h26841 = v_fb_data_2_0;
      3'd1: lv_selected_word__h26841 = v_fb_data_2_1;
      3'd2: lv_selected_word__h26841 = v_fb_data_2_2;
      3'd3: lv_selected_word__h26841 = v_fb_data_2_3;
      3'd4: lv_selected_word__h26841 = v_fb_data_2_4;
      3'd5: lv_selected_word__h26841 = v_fb_data_2_5;
      3'd6: lv_selected_word__h26841 = v_fb_data_2_6;
      3'd7: lv_selected_word__h26841 = v_fb_data_2_7;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_1_0 or
	  v_fb_data_1_1 or
	  v_fb_data_1_2 or
	  v_fb_data_1_3 or
	  v_fb_data_1_4 or v_fb_data_1_5 or v_fb_data_1_6 or v_fb_data_1_7)
  begin
    case (mav_polling_response_address[5:3])
      3'd0: lv_selected_word__h26894 = v_fb_data_1_0;
      3'd1: lv_selected_word__h26894 = v_fb_data_1_1;
      3'd2: lv_selected_word__h26894 = v_fb_data_1_2;
      3'd3: lv_selected_word__h26894 = v_fb_data_1_3;
      3'd4: lv_selected_word__h26894 = v_fb_data_1_4;
      3'd5: lv_selected_word__h26894 = v_fb_data_1_5;
      3'd6: lv_selected_word__h26894 = v_fb_data_1_6;
      3'd7: lv_selected_word__h26894 = v_fb_data_1_7;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_0_0 or
	  v_fb_data_0_1 or
	  v_fb_data_0_2 or
	  v_fb_data_0_3 or
	  v_fb_data_0_4 or v_fb_data_0_5 or v_fb_data_0_6 or v_fb_data_0_7)
  begin
    case (mav_polling_response_address[5:3])
      3'd0: lv_selected_word__h26947 = v_fb_data_0_0;
      3'd1: lv_selected_word__h26947 = v_fb_data_0_1;
      3'd2: lv_selected_word__h26947 = v_fb_data_0_2;
      3'd3: lv_selected_word__h26947 = v_fb_data_0_3;
      3'd4: lv_selected_word__h26947 = v_fb_data_0_4;
      3'd5: lv_selected_word__h26947 = v_fb_data_0_5;
      3'd6: lv_selected_word__h26947 = v_fb_data_0_6;
      3'd7: lv_selected_word__h26947 = v_fb_data_0_7;
    endcase
  end
  always@(ma_from_storebuffer_address or
	  v_fb_data_0_0 or
	  v_fb_data_0_1 or
	  v_fb_data_0_2 or
	  v_fb_data_0_3 or
	  v_fb_data_0_4 or v_fb_data_0_5 or v_fb_data_0_6 or v_fb_data_0_7)
  begin
    case (ma_from_storebuffer_address[5:3])
      3'd0:
	  SEL_ARR_v_fb_data_0_0_read__89_v_fb_data_0_1_r_ETC___d198 =
	      v_fb_data_0_0;
      3'd1:
	  SEL_ARR_v_fb_data_0_0_read__89_v_fb_data_0_1_r_ETC___d198 =
	      v_fb_data_0_1;
      3'd2:
	  SEL_ARR_v_fb_data_0_0_read__89_v_fb_data_0_1_r_ETC___d198 =
	      v_fb_data_0_2;
      3'd3:
	  SEL_ARR_v_fb_data_0_0_read__89_v_fb_data_0_1_r_ETC___d198 =
	      v_fb_data_0_3;
      3'd4:
	  SEL_ARR_v_fb_data_0_0_read__89_v_fb_data_0_1_r_ETC___d198 =
	      v_fb_data_0_4;
      3'd5:
	  SEL_ARR_v_fb_data_0_0_read__89_v_fb_data_0_1_r_ETC___d198 =
	      v_fb_data_0_5;
      3'd6:
	  SEL_ARR_v_fb_data_0_0_read__89_v_fb_data_0_1_r_ETC___d198 =
	      v_fb_data_0_6;
      3'd7:
	  SEL_ARR_v_fb_data_0_0_read__89_v_fb_data_0_1_r_ETC___d198 =
	      v_fb_data_0_7;
    endcase
  end
  always@(ma_from_storebuffer_address or
	  v_fb_data_1_0 or
	  v_fb_data_1_1 or
	  v_fb_data_1_2 or
	  v_fb_data_1_3 or
	  v_fb_data_1_4 or v_fb_data_1_5 or v_fb_data_1_6 or v_fb_data_1_7)
  begin
    case (ma_from_storebuffer_address[5:3])
      3'd0:
	  SEL_ARR_v_fb_data_1_0_read__99_v_fb_data_1_1_r_ETC___d208 =
	      v_fb_data_1_0;
      3'd1:
	  SEL_ARR_v_fb_data_1_0_read__99_v_fb_data_1_1_r_ETC___d208 =
	      v_fb_data_1_1;
      3'd2:
	  SEL_ARR_v_fb_data_1_0_read__99_v_fb_data_1_1_r_ETC___d208 =
	      v_fb_data_1_2;
      3'd3:
	  SEL_ARR_v_fb_data_1_0_read__99_v_fb_data_1_1_r_ETC___d208 =
	      v_fb_data_1_3;
      3'd4:
	  SEL_ARR_v_fb_data_1_0_read__99_v_fb_data_1_1_r_ETC___d208 =
	      v_fb_data_1_4;
      3'd5:
	  SEL_ARR_v_fb_data_1_0_read__99_v_fb_data_1_1_r_ETC___d208 =
	      v_fb_data_1_5;
      3'd6:
	  SEL_ARR_v_fb_data_1_0_read__99_v_fb_data_1_1_r_ETC___d208 =
	      v_fb_data_1_6;
      3'd7:
	  SEL_ARR_v_fb_data_1_0_read__99_v_fb_data_1_1_r_ETC___d208 =
	      v_fb_data_1_7;
    endcase
  end
  always@(ma_from_storebuffer_address or
	  v_fb_data_2_0 or
	  v_fb_data_2_1 or
	  v_fb_data_2_2 or
	  v_fb_data_2_3 or
	  v_fb_data_2_4 or v_fb_data_2_5 or v_fb_data_2_6 or v_fb_data_2_7)
  begin
    case (ma_from_storebuffer_address[5:3])
      3'd0:
	  SEL_ARR_v_fb_data_2_0_read__09_v_fb_data_2_1_r_ETC___d218 =
	      v_fb_data_2_0;
      3'd1:
	  SEL_ARR_v_fb_data_2_0_read__09_v_fb_data_2_1_r_ETC___d218 =
	      v_fb_data_2_1;
      3'd2:
	  SEL_ARR_v_fb_data_2_0_read__09_v_fb_data_2_1_r_ETC___d218 =
	      v_fb_data_2_2;
      3'd3:
	  SEL_ARR_v_fb_data_2_0_read__09_v_fb_data_2_1_r_ETC___d218 =
	      v_fb_data_2_3;
      3'd4:
	  SEL_ARR_v_fb_data_2_0_read__09_v_fb_data_2_1_r_ETC___d218 =
	      v_fb_data_2_4;
      3'd5:
	  SEL_ARR_v_fb_data_2_0_read__09_v_fb_data_2_1_r_ETC___d218 =
	      v_fb_data_2_5;
      3'd6:
	  SEL_ARR_v_fb_data_2_0_read__09_v_fb_data_2_1_r_ETC___d218 =
	      v_fb_data_2_6;
      3'd7:
	  SEL_ARR_v_fb_data_2_0_read__09_v_fb_data_2_1_r_ETC___d218 =
	      v_fb_data_2_7;
    endcase
  end
  always@(ma_from_storebuffer_address or
	  v_fb_data_3_0 or
	  v_fb_data_3_1 or
	  v_fb_data_3_2 or
	  v_fb_data_3_3 or
	  v_fb_data_3_4 or v_fb_data_3_5 or v_fb_data_3_6 or v_fb_data_3_7)
  begin
    case (ma_from_storebuffer_address[5:3])
      3'd0:
	  SEL_ARR_v_fb_data_3_0_read__19_v_fb_data_3_1_r_ETC___d228 =
	      v_fb_data_3_0;
      3'd1:
	  SEL_ARR_v_fb_data_3_0_read__19_v_fb_data_3_1_r_ETC___d228 =
	      v_fb_data_3_1;
      3'd2:
	  SEL_ARR_v_fb_data_3_0_read__19_v_fb_data_3_1_r_ETC___d228 =
	      v_fb_data_3_2;
      3'd3:
	  SEL_ARR_v_fb_data_3_0_read__19_v_fb_data_3_1_r_ETC___d228 =
	      v_fb_data_3_3;
      3'd4:
	  SEL_ARR_v_fb_data_3_0_read__19_v_fb_data_3_1_r_ETC___d228 =
	      v_fb_data_3_4;
      3'd5:
	  SEL_ARR_v_fb_data_3_0_read__19_v_fb_data_3_1_r_ETC___d228 =
	      v_fb_data_3_5;
      3'd6:
	  SEL_ARR_v_fb_data_3_0_read__19_v_fb_data_3_1_r_ETC___d228 =
	      v_fb_data_3_6;
      3'd7:
	  SEL_ARR_v_fb_data_3_0_read__19_v_fb_data_3_1_r_ETC___d228 =
	      v_fb_data_3_7;
    endcase
  end
  always@(ma_from_storebuffer_address or
	  v_fb_data_4_0 or
	  v_fb_data_4_1 or
	  v_fb_data_4_2 or
	  v_fb_data_4_3 or
	  v_fb_data_4_4 or v_fb_data_4_5 or v_fb_data_4_6 or v_fb_data_4_7)
  begin
    case (ma_from_storebuffer_address[5:3])
      3'd0:
	  SEL_ARR_v_fb_data_4_0_read__29_v_fb_data_4_1_r_ETC___d238 =
	      v_fb_data_4_0;
      3'd1:
	  SEL_ARR_v_fb_data_4_0_read__29_v_fb_data_4_1_r_ETC___d238 =
	      v_fb_data_4_1;
      3'd2:
	  SEL_ARR_v_fb_data_4_0_read__29_v_fb_data_4_1_r_ETC___d238 =
	      v_fb_data_4_2;
      3'd3:
	  SEL_ARR_v_fb_data_4_0_read__29_v_fb_data_4_1_r_ETC___d238 =
	      v_fb_data_4_3;
      3'd4:
	  SEL_ARR_v_fb_data_4_0_read__29_v_fb_data_4_1_r_ETC___d238 =
	      v_fb_data_4_4;
      3'd5:
	  SEL_ARR_v_fb_data_4_0_read__29_v_fb_data_4_1_r_ETC___d238 =
	      v_fb_data_4_5;
      3'd6:
	  SEL_ARR_v_fb_data_4_0_read__29_v_fb_data_4_1_r_ETC___d238 =
	      v_fb_data_4_6;
      3'd7:
	  SEL_ARR_v_fb_data_4_0_read__29_v_fb_data_4_1_r_ETC___d238 =
	      v_fb_data_4_7;
    endcase
  end
  always@(ma_from_storebuffer_address or
	  v_fb_data_5_0 or
	  v_fb_data_5_1 or
	  v_fb_data_5_2 or
	  v_fb_data_5_3 or
	  v_fb_data_5_4 or v_fb_data_5_5 or v_fb_data_5_6 or v_fb_data_5_7)
  begin
    case (ma_from_storebuffer_address[5:3])
      3'd0:
	  SEL_ARR_v_fb_data_5_0_read__39_v_fb_data_5_1_r_ETC___d248 =
	      v_fb_data_5_0;
      3'd1:
	  SEL_ARR_v_fb_data_5_0_read__39_v_fb_data_5_1_r_ETC___d248 =
	      v_fb_data_5_1;
      3'd2:
	  SEL_ARR_v_fb_data_5_0_read__39_v_fb_data_5_1_r_ETC___d248 =
	      v_fb_data_5_2;
      3'd3:
	  SEL_ARR_v_fb_data_5_0_read__39_v_fb_data_5_1_r_ETC___d248 =
	      v_fb_data_5_3;
      3'd4:
	  SEL_ARR_v_fb_data_5_0_read__39_v_fb_data_5_1_r_ETC___d248 =
	      v_fb_data_5_4;
      3'd5:
	  SEL_ARR_v_fb_data_5_0_read__39_v_fb_data_5_1_r_ETC___d248 =
	      v_fb_data_5_5;
      3'd6:
	  SEL_ARR_v_fb_data_5_0_read__39_v_fb_data_5_1_r_ETC___d248 =
	      v_fb_data_5_6;
      3'd7:
	  SEL_ARR_v_fb_data_5_0_read__39_v_fb_data_5_1_r_ETC___d248 =
	      v_fb_data_5_7;
    endcase
  end
  always@(ma_from_storebuffer_address or
	  v_fb_data_6_0 or
	  v_fb_data_6_1 or
	  v_fb_data_6_2 or
	  v_fb_data_6_3 or
	  v_fb_data_6_4 or v_fb_data_6_5 or v_fb_data_6_6 or v_fb_data_6_7)
  begin
    case (ma_from_storebuffer_address[5:3])
      3'd0:
	  SEL_ARR_v_fb_data_6_0_read__49_v_fb_data_6_1_r_ETC___d258 =
	      v_fb_data_6_0;
      3'd1:
	  SEL_ARR_v_fb_data_6_0_read__49_v_fb_data_6_1_r_ETC___d258 =
	      v_fb_data_6_1;
      3'd2:
	  SEL_ARR_v_fb_data_6_0_read__49_v_fb_data_6_1_r_ETC___d258 =
	      v_fb_data_6_2;
      3'd3:
	  SEL_ARR_v_fb_data_6_0_read__49_v_fb_data_6_1_r_ETC___d258 =
	      v_fb_data_6_3;
      3'd4:
	  SEL_ARR_v_fb_data_6_0_read__49_v_fb_data_6_1_r_ETC___d258 =
	      v_fb_data_6_4;
      3'd5:
	  SEL_ARR_v_fb_data_6_0_read__49_v_fb_data_6_1_r_ETC___d258 =
	      v_fb_data_6_5;
      3'd6:
	  SEL_ARR_v_fb_data_6_0_read__49_v_fb_data_6_1_r_ETC___d258 =
	      v_fb_data_6_6;
      3'd7:
	  SEL_ARR_v_fb_data_6_0_read__49_v_fb_data_6_1_r_ETC___d258 =
	      v_fb_data_6_7;
    endcase
  end
  always@(ma_from_storebuffer_address or
	  v_fb_data_7_0 or
	  v_fb_data_7_1 or
	  v_fb_data_7_2 or
	  v_fb_data_7_3 or
	  v_fb_data_7_4 or v_fb_data_7_5 or v_fb_data_7_6 or v_fb_data_7_7)
  begin
    case (ma_from_storebuffer_address[5:3])
      3'd0:
	  SEL_ARR_v_fb_data_7_0_read__59_v_fb_data_7_1_r_ETC___d268 =
	      v_fb_data_7_0;
      3'd1:
	  SEL_ARR_v_fb_data_7_0_read__59_v_fb_data_7_1_r_ETC___d268 =
	      v_fb_data_7_1;
      3'd2:
	  SEL_ARR_v_fb_data_7_0_read__59_v_fb_data_7_1_r_ETC___d268 =
	      v_fb_data_7_2;
      3'd3:
	  SEL_ARR_v_fb_data_7_0_read__59_v_fb_data_7_1_r_ETC___d268 =
	      v_fb_data_7_3;
      3'd4:
	  SEL_ARR_v_fb_data_7_0_read__59_v_fb_data_7_1_r_ETC___d268 =
	      v_fb_data_7_4;
      3'd5:
	  SEL_ARR_v_fb_data_7_0_read__59_v_fb_data_7_1_r_ETC___d268 =
	      v_fb_data_7_5;
      3'd6:
	  SEL_ARR_v_fb_data_7_0_read__59_v_fb_data_7_1_r_ETC___d268 =
	      v_fb_data_7_6;
      3'd7:
	  SEL_ARR_v_fb_data_7_0_read__59_v_fb_data_7_1_r_ETC___d268 =
	      v_fb_data_7_7;
    endcase
  end
  always@(ma_from_storebuffer_fbindex or
	  SEL_ARR_v_fb_data_0_0_read__89_v_fb_data_0_1_r_ETC___d198 or
	  SEL_ARR_v_fb_data_1_0_read__99_v_fb_data_1_1_r_ETC___d208 or
	  SEL_ARR_v_fb_data_2_0_read__09_v_fb_data_2_1_r_ETC___d218 or
	  SEL_ARR_v_fb_data_3_0_read__19_v_fb_data_3_1_r_ETC___d228 or
	  SEL_ARR_v_fb_data_4_0_read__29_v_fb_data_4_1_r_ETC___d238 or
	  SEL_ARR_v_fb_data_5_0_read__39_v_fb_data_5_1_r_ETC___d248 or
	  SEL_ARR_v_fb_data_6_0_read__49_v_fb_data_6_1_r_ETC___d258 or
	  SEL_ARR_v_fb_data_7_0_read__59_v_fb_data_7_1_r_ETC___d268)
  begin
    case (ma_from_storebuffer_fbindex)
      3'd0:
	  x__h24380 =
	      SEL_ARR_v_fb_data_0_0_read__89_v_fb_data_0_1_r_ETC___d198;
      3'd1:
	  x__h24380 =
	      SEL_ARR_v_fb_data_1_0_read__99_v_fb_data_1_1_r_ETC___d208;
      3'd2:
	  x__h24380 =
	      SEL_ARR_v_fb_data_2_0_read__09_v_fb_data_2_1_r_ETC___d218;
      3'd3:
	  x__h24380 =
	      SEL_ARR_v_fb_data_3_0_read__19_v_fb_data_3_1_r_ETC___d228;
      3'd4:
	  x__h24380 =
	      SEL_ARR_v_fb_data_4_0_read__29_v_fb_data_4_1_r_ETC___d238;
      3'd5:
	  x__h24380 =
	      SEL_ARR_v_fb_data_5_0_read__39_v_fb_data_5_1_r_ETC___d248;
      3'd6:
	  x__h24380 =
	      SEL_ARR_v_fb_data_6_0_read__49_v_fb_data_6_1_r_ETC___d258;
      3'd7:
	  x__h24380 =
	      SEL_ARR_v_fb_data_7_0_read__59_v_fb_data_7_1_r_ETC___d268;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_fb_enables <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_fbhead <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_fbtail <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_next_bank <= `BSV_ASSIGNMENT_DELAY 3'd0;
	v_fb_addr_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_addr_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_addr_valid_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_addr_valid_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_addr_valid_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_addr_valid_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_addr_valid_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_addr_valid_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_data_0_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_0_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_0_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_0_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_0_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_0_5 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_0_6 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_0_7 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_1_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_1_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_1_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_1_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_1_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_1_5 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_1_6 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_1_7 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_2_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_2_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_2_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_2_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_2_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_2_5 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_2_6 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_2_7 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_3_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_3_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_3_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_3_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_3_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_3_5 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_3_6 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_3_7 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_4_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_4_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_4_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_4_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_4_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_4_5 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_4_6 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_4_7 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_5_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_5_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_5_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_5_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_5_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_5_5 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_5_6 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_5_7 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_6_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_6_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_6_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_6_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_6_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_6_5 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_6_6 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_6_7 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_7_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_7_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_7_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_7_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_7_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_7_5 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_7_6 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_data_7_7 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_fb_dirty_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_dirty_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_dirty_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_dirty_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_dirty_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_dirty_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_dirty_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_dirty_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_fb_enables_EN)
	  rg_fb_enables <= `BSV_ASSIGNMENT_DELAY rg_fb_enables_D_IN;
	if (rg_fbhead_EN) rg_fbhead <= `BSV_ASSIGNMENT_DELAY rg_fbhead_D_IN;
	if (rg_fbtail_EN) rg_fbtail <= `BSV_ASSIGNMENT_DELAY rg_fbtail_D_IN;
	if (rg_next_bank_EN)
	  rg_next_bank <= `BSV_ASSIGNMENT_DELAY rg_next_bank_D_IN;
	if (v_fb_addr_0_EN)
	  v_fb_addr_0 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_0_D_IN;
	if (v_fb_addr_1_EN)
	  v_fb_addr_1 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_1_D_IN;
	if (v_fb_addr_2_EN)
	  v_fb_addr_2 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_2_D_IN;
	if (v_fb_addr_3_EN)
	  v_fb_addr_3 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_3_D_IN;
	if (v_fb_addr_4_EN)
	  v_fb_addr_4 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_4_D_IN;
	if (v_fb_addr_5_EN)
	  v_fb_addr_5 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_5_D_IN;
	if (v_fb_addr_6_EN)
	  v_fb_addr_6 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_6_D_IN;
	if (v_fb_addr_7_EN)
	  v_fb_addr_7 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_7_D_IN;
	if (v_fb_addr_valid_0_EN)
	  v_fb_addr_valid_0 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_0_D_IN;
	if (v_fb_addr_valid_1_EN)
	  v_fb_addr_valid_1 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_1_D_IN;
	if (v_fb_addr_valid_2_EN)
	  v_fb_addr_valid_2 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_2_D_IN;
	if (v_fb_addr_valid_3_EN)
	  v_fb_addr_valid_3 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_3_D_IN;
	if (v_fb_addr_valid_4_EN)
	  v_fb_addr_valid_4 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_4_D_IN;
	if (v_fb_addr_valid_5_EN)
	  v_fb_addr_valid_5 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_5_D_IN;
	if (v_fb_addr_valid_6_EN)
	  v_fb_addr_valid_6 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_6_D_IN;
	if (v_fb_addr_valid_7_EN)
	  v_fb_addr_valid_7 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_7_D_IN;
	if (v_fb_data_0_0_EN)
	  v_fb_data_0_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_0_D_IN;
	if (v_fb_data_0_1_EN)
	  v_fb_data_0_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_1_D_IN;
	if (v_fb_data_0_2_EN)
	  v_fb_data_0_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_2_D_IN;
	if (v_fb_data_0_3_EN)
	  v_fb_data_0_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_3_D_IN;
	if (v_fb_data_0_4_EN)
	  v_fb_data_0_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_4_D_IN;
	if (v_fb_data_0_5_EN)
	  v_fb_data_0_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_5_D_IN;
	if (v_fb_data_0_6_EN)
	  v_fb_data_0_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_6_D_IN;
	if (v_fb_data_0_7_EN)
	  v_fb_data_0_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_7_D_IN;
	if (v_fb_data_1_0_EN)
	  v_fb_data_1_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_0_D_IN;
	if (v_fb_data_1_1_EN)
	  v_fb_data_1_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_1_D_IN;
	if (v_fb_data_1_2_EN)
	  v_fb_data_1_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_2_D_IN;
	if (v_fb_data_1_3_EN)
	  v_fb_data_1_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_3_D_IN;
	if (v_fb_data_1_4_EN)
	  v_fb_data_1_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_4_D_IN;
	if (v_fb_data_1_5_EN)
	  v_fb_data_1_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_5_D_IN;
	if (v_fb_data_1_6_EN)
	  v_fb_data_1_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_6_D_IN;
	if (v_fb_data_1_7_EN)
	  v_fb_data_1_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_7_D_IN;
	if (v_fb_data_2_0_EN)
	  v_fb_data_2_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_0_D_IN;
	if (v_fb_data_2_1_EN)
	  v_fb_data_2_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_1_D_IN;
	if (v_fb_data_2_2_EN)
	  v_fb_data_2_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_2_D_IN;
	if (v_fb_data_2_3_EN)
	  v_fb_data_2_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_3_D_IN;
	if (v_fb_data_2_4_EN)
	  v_fb_data_2_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_4_D_IN;
	if (v_fb_data_2_5_EN)
	  v_fb_data_2_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_5_D_IN;
	if (v_fb_data_2_6_EN)
	  v_fb_data_2_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_6_D_IN;
	if (v_fb_data_2_7_EN)
	  v_fb_data_2_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_7_D_IN;
	if (v_fb_data_3_0_EN)
	  v_fb_data_3_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_0_D_IN;
	if (v_fb_data_3_1_EN)
	  v_fb_data_3_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_1_D_IN;
	if (v_fb_data_3_2_EN)
	  v_fb_data_3_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_2_D_IN;
	if (v_fb_data_3_3_EN)
	  v_fb_data_3_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_3_D_IN;
	if (v_fb_data_3_4_EN)
	  v_fb_data_3_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_4_D_IN;
	if (v_fb_data_3_5_EN)
	  v_fb_data_3_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_5_D_IN;
	if (v_fb_data_3_6_EN)
	  v_fb_data_3_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_6_D_IN;
	if (v_fb_data_3_7_EN)
	  v_fb_data_3_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_7_D_IN;
	if (v_fb_data_4_0_EN)
	  v_fb_data_4_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_0_D_IN;
	if (v_fb_data_4_1_EN)
	  v_fb_data_4_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_1_D_IN;
	if (v_fb_data_4_2_EN)
	  v_fb_data_4_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_2_D_IN;
	if (v_fb_data_4_3_EN)
	  v_fb_data_4_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_3_D_IN;
	if (v_fb_data_4_4_EN)
	  v_fb_data_4_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_4_D_IN;
	if (v_fb_data_4_5_EN)
	  v_fb_data_4_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_5_D_IN;
	if (v_fb_data_4_6_EN)
	  v_fb_data_4_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_6_D_IN;
	if (v_fb_data_4_7_EN)
	  v_fb_data_4_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_7_D_IN;
	if (v_fb_data_5_0_EN)
	  v_fb_data_5_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_0_D_IN;
	if (v_fb_data_5_1_EN)
	  v_fb_data_5_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_1_D_IN;
	if (v_fb_data_5_2_EN)
	  v_fb_data_5_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_2_D_IN;
	if (v_fb_data_5_3_EN)
	  v_fb_data_5_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_3_D_IN;
	if (v_fb_data_5_4_EN)
	  v_fb_data_5_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_4_D_IN;
	if (v_fb_data_5_5_EN)
	  v_fb_data_5_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_5_D_IN;
	if (v_fb_data_5_6_EN)
	  v_fb_data_5_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_6_D_IN;
	if (v_fb_data_5_7_EN)
	  v_fb_data_5_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_7_D_IN;
	if (v_fb_data_6_0_EN)
	  v_fb_data_6_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_0_D_IN;
	if (v_fb_data_6_1_EN)
	  v_fb_data_6_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_1_D_IN;
	if (v_fb_data_6_2_EN)
	  v_fb_data_6_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_2_D_IN;
	if (v_fb_data_6_3_EN)
	  v_fb_data_6_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_3_D_IN;
	if (v_fb_data_6_4_EN)
	  v_fb_data_6_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_4_D_IN;
	if (v_fb_data_6_5_EN)
	  v_fb_data_6_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_5_D_IN;
	if (v_fb_data_6_6_EN)
	  v_fb_data_6_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_6_D_IN;
	if (v_fb_data_6_7_EN)
	  v_fb_data_6_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_7_D_IN;
	if (v_fb_data_7_0_EN)
	  v_fb_data_7_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_0_D_IN;
	if (v_fb_data_7_1_EN)
	  v_fb_data_7_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_1_D_IN;
	if (v_fb_data_7_2_EN)
	  v_fb_data_7_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_2_D_IN;
	if (v_fb_data_7_3_EN)
	  v_fb_data_7_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_3_D_IN;
	if (v_fb_data_7_4_EN)
	  v_fb_data_7_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_4_D_IN;
	if (v_fb_data_7_5_EN)
	  v_fb_data_7_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_5_D_IN;
	if (v_fb_data_7_6_EN)
	  v_fb_data_7_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_6_D_IN;
	if (v_fb_data_7_7_EN)
	  v_fb_data_7_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_7_D_IN;
	if (v_fb_dirty_0_EN)
	  v_fb_dirty_0 <= `BSV_ASSIGNMENT_DELAY v_fb_dirty_0_D_IN;
	if (v_fb_dirty_1_EN)
	  v_fb_dirty_1 <= `BSV_ASSIGNMENT_DELAY v_fb_dirty_1_D_IN;
	if (v_fb_dirty_2_EN)
	  v_fb_dirty_2 <= `BSV_ASSIGNMENT_DELAY v_fb_dirty_2_D_IN;
	if (v_fb_dirty_3_EN)
	  v_fb_dirty_3 <= `BSV_ASSIGNMENT_DELAY v_fb_dirty_3_D_IN;
	if (v_fb_dirty_4_EN)
	  v_fb_dirty_4 <= `BSV_ASSIGNMENT_DELAY v_fb_dirty_4_D_IN;
	if (v_fb_dirty_5_EN)
	  v_fb_dirty_5 <= `BSV_ASSIGNMENT_DELAY v_fb_dirty_5_D_IN;
	if (v_fb_dirty_6_EN)
	  v_fb_dirty_6 <= `BSV_ASSIGNMENT_DELAY v_fb_dirty_6_D_IN;
	if (v_fb_dirty_7_EN)
	  v_fb_dirty_7 <= `BSV_ASSIGNMENT_DELAY v_fb_dirty_7_D_IN;
	if (v_fb_err_0_EN)
	  v_fb_err_0 <= `BSV_ASSIGNMENT_DELAY v_fb_err_0_D_IN;
	if (v_fb_err_1_EN)
	  v_fb_err_1 <= `BSV_ASSIGNMENT_DELAY v_fb_err_1_D_IN;
	if (v_fb_err_2_EN)
	  v_fb_err_2 <= `BSV_ASSIGNMENT_DELAY v_fb_err_2_D_IN;
	if (v_fb_err_3_EN)
	  v_fb_err_3 <= `BSV_ASSIGNMENT_DELAY v_fb_err_3_D_IN;
	if (v_fb_err_4_EN)
	  v_fb_err_4 <= `BSV_ASSIGNMENT_DELAY v_fb_err_4_D_IN;
	if (v_fb_err_5_EN)
	  v_fb_err_5 <= `BSV_ASSIGNMENT_DELAY v_fb_err_5_D_IN;
	if (v_fb_err_6_EN)
	  v_fb_err_6 <= `BSV_ASSIGNMENT_DELAY v_fb_err_6_D_IN;
	if (v_fb_err_7_EN)
	  v_fb_err_7 <= `BSV_ASSIGNMENT_DELAY v_fb_err_7_D_IN;
	if (v_fb_line_valid_0_EN)
	  v_fb_line_valid_0 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_0_D_IN;
	if (v_fb_line_valid_1_EN)
	  v_fb_line_valid_1 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_1_D_IN;
	if (v_fb_line_valid_2_EN)
	  v_fb_line_valid_2 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_2_D_IN;
	if (v_fb_line_valid_3_EN)
	  v_fb_line_valid_3 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_3_D_IN;
	if (v_fb_line_valid_4_EN)
	  v_fb_line_valid_4 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_4_D_IN;
	if (v_fb_line_valid_5_EN)
	  v_fb_line_valid_5 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_5_D_IN;
	if (v_fb_line_valid_6_EN)
	  v_fb_line_valid_6 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_6_D_IN;
	if (v_fb_line_valid_7_EN)
	  v_fb_line_valid_7 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_7_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_fb_enables = 8'hAA;
    rg_fbhead = 3'h2;
    rg_fbtail = 3'h2;
    rg_next_bank = 3'h2;
    v_fb_addr_0 = 32'hAAAAAAAA;
    v_fb_addr_1 = 32'hAAAAAAAA;
    v_fb_addr_2 = 32'hAAAAAAAA;
    v_fb_addr_3 = 32'hAAAAAAAA;
    v_fb_addr_4 = 32'hAAAAAAAA;
    v_fb_addr_5 = 32'hAAAAAAAA;
    v_fb_addr_6 = 32'hAAAAAAAA;
    v_fb_addr_7 = 32'hAAAAAAAA;
    v_fb_addr_valid_0 = 1'h0;
    v_fb_addr_valid_1 = 1'h0;
    v_fb_addr_valid_2 = 1'h0;
    v_fb_addr_valid_3 = 1'h0;
    v_fb_addr_valid_4 = 1'h0;
    v_fb_addr_valid_5 = 1'h0;
    v_fb_addr_valid_6 = 1'h0;
    v_fb_addr_valid_7 = 1'h0;
    v_fb_data_0_0 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_0_1 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_0_2 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_0_3 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_0_4 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_0_5 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_0_6 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_0_7 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_1_0 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_1_1 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_1_2 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_1_3 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_1_4 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_1_5 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_1_6 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_1_7 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_2_0 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_2_1 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_2_2 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_2_3 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_2_4 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_2_5 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_2_6 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_2_7 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_3_0 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_3_1 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_3_2 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_3_3 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_3_4 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_3_5 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_3_6 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_3_7 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_4_0 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_4_1 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_4_2 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_4_3 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_4_4 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_4_5 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_4_6 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_4_7 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_5_0 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_5_1 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_5_2 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_5_3 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_5_4 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_5_5 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_5_6 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_5_7 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_6_0 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_6_1 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_6_2 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_6_3 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_6_4 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_6_5 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_6_6 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_6_7 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_7_0 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_7_1 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_7_2 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_7_3 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_7_4 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_7_5 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_7_6 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_data_7_7 = 64'hAAAAAAAAAAAAAAAA;
    v_fb_dirty_0 = 1'h0;
    v_fb_dirty_1 = 1'h0;
    v_fb_dirty_2 = 1'h0;
    v_fb_dirty_3 = 1'h0;
    v_fb_dirty_4 = 1'h0;
    v_fb_dirty_5 = 1'h0;
    v_fb_dirty_6 = 1'h0;
    v_fb_dirty_7 = 1'h0;
    v_fb_err_0 = 1'h0;
    v_fb_err_1 = 1'h0;
    v_fb_err_2 = 1'h0;
    v_fb_err_3 = 1'h0;
    v_fb_err_4 = 1'h0;
    v_fb_err_5 = 1'h0;
    v_fb_err_6 = 1'h0;
    v_fb_err_7 = 1'h0;
    v_fb_line_valid_0 = 1'h0;
    v_fb_line_valid_1 = 1'h0;
    v_fb_line_valid_2 = 1'h0;
    v_fb_line_valid_3 = 1'h0;
    v_fb_line_valid_4 = 1'h0;
    v_fb_line_valid_5 = 1'h0;
    v_fb_line_valid_6 = 1'h0;
    v_fb_line_valid_7 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory)
	begin
	  TASK_testplusargs___d179 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory)
	begin
	  TASK_testplusargs___d180 = $test$plusargs("mdcache ");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory)
	begin
	  TASK_testplusargs___d181 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory)
	begin
	  v__h16203 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory &&
	  (TASK_testplusargs___d179 ||
	   TASK_testplusargs___d180 && TASK_testplusargs___d181))
	$write("[%10d", v__h16203, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory &&
	  (TASK_testplusargs___d179 ||
	   TASK_testplusargs___d180 && TASK_testplusargs___d181))
	$write("[%2d]DCACHE: FB Fill: fbindex:%d ibank:%d cbank:%d fben:%b",
	       id,
	       ma_fill_from_memory_fbindex,
	       ma_fill_from_memory_init_bank,
	       lv_current_bank__h14246,
	       rg_fb_enables);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory &&
	  (TASK_testplusargs___d179 ||
	   TASK_testplusargs___d180 && TASK_testplusargs___d181))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response)
	begin
	  TASK_testplusargs___d413 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response)
	begin
	  TASK_testplusargs___d414 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response)
	begin
	  TASK_testplusargs___d415 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response)
	begin
	  v__h25827 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response &&
	  (TASK_testplusargs___d413 ||
	   TASK_testplusargs___d414 && TASK_testplusargs___d415))
	$write("[%10d", v__h25827, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response &&
	  (TASK_testplusargs___d413 ||
	   TASK_testplusargs___d414 && TASK_testplusargs___d415))
	$write("[%2d]DCACHE: FB: Polling: linevalid:%b blockoffset:%d",
	       id,
	       IF_v_fb_addr_7_read__79_BITS_31_TO_6_19_EQ_mav_ETC___d453,
	       mav_polling_response_address[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response &&
	  (TASK_testplusargs___d413 ||
	   TASK_testplusargs___d414 && TASK_testplusargs___d415))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d1 = $test$plusargs("fullverbose");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d2 = $test$plusargs("mdcache");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d3 = $test$plusargs("l3");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        v__h5329 = $time;
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("[%10d", v__h5329, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("[%2d]DCACHE: fb_full:%b fb_empty:%b fbhead:%d fbtail:%d fbheadvalid:%b",
	       id,
	       v_fb_addr_valid_0 &&
	       v_fb_addr_valid_1_read_AND_v_fb_addr_valid_2_r_ETC___d20,
	       !v_fb_addr_valid_0 &&
	       NOT_v_fb_addr_valid_1_read_3_AND_NOT_v_fb_addr_ETC___d35,
	       rg_fbhead,
	       rg_fbtail,
	       mv_fbhead_valid);
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d68 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d69 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d70 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  v__h14012 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d68 ||
	   TASK_testplusargs___d69 && TASK_testplusargs___d70))
	$write("[%10d", v__h14012, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d68 ||
	   TASK_testplusargs___d69 && TASK_testplusargs___d70))
	$write("[%2d]DCACHE: FB: Allocating: fromram:%b address:%h dirty:%b",
	       id,
	       mav_allocate_line_from_ram,
	       mav_allocate_line_address,
	       mav_allocate_line_dirty);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d68 ||
	   TASK_testplusargs___d69 && TASK_testplusargs___d70))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d74 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d75 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d76 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  v__h14151 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d74 ||
	   TASK_testplusargs___d75 && TASK_testplusargs___d76))
	$write("[%10d", v__h14151, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d74 ||
	   TASK_testplusargs___d75 && TASK_testplusargs___d76))
	$write("[%2d]DCACHE: FB: Allocating fbindex:%d", id, rg_fbtail);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d74 ||
	   TASK_testplusargs___d75 && TASK_testplusargs___d76))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkdcache_fb_v2

