//
// Generated by Bluespec Compiler, version 2022.01-5-ge3edf4b1 (build e3edf4b1)
//
// On Fri Apr 15 12:47:38 EDT 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_put_core_req_put           O     1
// get_core_resp_get              O    72
// RDY_get_core_resp_get          O     1
// mv_storebuffer_empty           O     1
// RDY_mv_storebuffer_empty       O     1 const
// RDY_ma_perform_store           O     1
// mv_write_mem_req_rd            O   556 reg
// RDY_mv_write_mem_req_rd        O     1 reg
// RDY_put_write_mem_resp_put     O     1
// RDY_ma_write_mem_req_deq       O     1 reg
// RDY_ma_cache_enable            O     1 const
// get_read_mem_req_get           O    44 reg
// RDY_get_read_mem_req_get       O     1 reg
// RDY_put_read_mem_resp_put      O     1
// mv_cacheable_store             O     1
// RDY_mv_cacheable_store         O     1 const
// mv_cache_available             O     1
// RDY_mv_cache_available         O     1 const
// mv_commit_store_ready          O     1
// RDY_mv_commit_store_ready      O     1 const
// get_ptw_resp_get               O    72
// RDY_get_ptw_resp_get           O     1
// get_req_to_ptw_get             O    66 reg
// RDY_get_req_to_ptw_get         O     1 reg
// RDY_put_resp_from_ptw_put      O     1
// RDY_ma_satp_from_csr           O     1 const
// RDY_ma_mstatus_from_csr        O     1 const
// get_hold_req_get               O   141
// RDY_get_hold_req_get           O     1
// mv_dcache_perf_counters        O    13
// RDY_mv_dcache_perf_counters    O     1 const
// mv_dtlb_perf_counters          O     1
// RDY_mv_dtlb_perf_counters      O     1 const
// pmp_cfg_0                      I     8
// pmp_cfg_1                      I     8
// pmp_cfg_2                      I     8
// pmp_cfg_3                      I     8
// pmp_addr_0                     I    29
// pmp_addr_1                     I    29
// pmp_addr_2                     I    29
// pmp_addr_3                     I    29
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_core_req_put               I   143
// ma_perform_store_currepoch     I     1
// put_write_mem_resp_put         I     1
// ma_cache_enable_c              I     1
// put_read_mem_resp_put          I    66
// ma_curr_priv_c                 I     2
// put_resp_from_ptw_put          I    63
// ma_satp_from_csr_s             I    64
// ma_mstatus_from_csr_m          I    64
// EN_put_core_req_put            I     1
// EN_ma_perform_store            I     1
// EN_put_write_mem_resp_put      I     1
// EN_ma_write_mem_req_deq        I     1
// EN_ma_cache_enable             I     1
// EN_put_read_mem_resp_put       I     1
// EN_put_resp_from_ptw_put       I     1
// EN_ma_satp_from_csr            I     1
// EN_ma_mstatus_from_csr         I     1
// EN_get_core_resp_get           I     1
// EN_get_read_mem_req_get        I     1
// EN_get_ptw_resp_get            I     1
// EN_get_req_to_ptw_get          I     1
// EN_get_hold_req_get            I     1
//
// Combinational paths from inputs to outputs:
//   (put_core_req_put,
//    ma_cache_enable_c,
//    put_read_mem_resp_put,
//    ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_put_core_req_put,
//    EN_ma_perform_store,
//    EN_ma_cache_enable,
//    EN_put_read_mem_resp_put,
//    EN_ma_satp_from_csr,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> mv_dcache_perf_counters
//   (put_core_req_put,
//    ma_curr_priv_c,
//    ma_satp_from_csr_s,
//    ma_mstatus_from_csr_m,
//    EN_put_core_req_put,
//    EN_ma_cache_enable,
//    EN_ma_satp_from_csr,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> mv_dtlb_perf_counters
//   (ma_cache_enable_c,
//    put_read_mem_resp_put,
//    ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_ma_perform_store,
//    EN_ma_cache_enable,
//    EN_put_read_mem_resp_put,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_get_core_resp_get
//   (ma_cache_enable_c,
//    put_read_mem_resp_put,
//    ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_ma_cache_enable,
//    EN_put_read_mem_resp_put,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_get_ptw_resp_get
//   (ma_cache_enable_c,
//    put_read_mem_resp_put,
//    ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_ma_cache_enable,
//    EN_put_read_mem_resp_put,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_get_hold_req_get
//   (ma_cache_enable_c,
//    put_read_mem_resp_put,
//    ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_ma_perform_store,
//    EN_ma_cache_enable,
//    EN_put_read_mem_resp_put,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> get_core_resp_get
//   (ma_cache_enable_c,
//    put_read_mem_resp_put,
//    ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_ma_cache_enable,
//    EN_put_read_mem_resp_put,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> get_ptw_resp_get
//   (ma_cache_enable_c,
//    put_read_mem_resp_put,
//    ma_curr_priv_c,
//    ma_mstatus_from_csr_m,
//    EN_ma_cache_enable,
//    EN_put_read_mem_resp_put,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> get_hold_req_get
//   (EN_ma_cache_enable,
//    EN_ma_satp_from_csr,
//    EN_ma_mstatus_from_csr,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_put_core_req_put
//   EN_ma_satp_from_csr -> RDY_put_resp_from_ptw_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkdmem(pmp_cfg_0,
	      pmp_cfg_1,
	      pmp_cfg_2,
	      pmp_cfg_3,
	      pmp_addr_0,
	      pmp_addr_1,
	      pmp_addr_2,
	      pmp_addr_3,
	      CLK,
	      RST_N,

	      put_core_req_put,
	      EN_put_core_req_put,
	      RDY_put_core_req_put,

	      EN_get_core_resp_get,
	      get_core_resp_get,
	      RDY_get_core_resp_get,

	      mv_storebuffer_empty,
	      RDY_mv_storebuffer_empty,

	      ma_perform_store_currepoch,
	      EN_ma_perform_store,
	      RDY_ma_perform_store,

	      mv_write_mem_req_rd,
	      RDY_mv_write_mem_req_rd,

	      put_write_mem_resp_put,
	      EN_put_write_mem_resp_put,
	      RDY_put_write_mem_resp_put,

	      EN_ma_write_mem_req_deq,
	      RDY_ma_write_mem_req_deq,

	      ma_cache_enable_c,
	      EN_ma_cache_enable,
	      RDY_ma_cache_enable,

	      EN_get_read_mem_req_get,
	      get_read_mem_req_get,
	      RDY_get_read_mem_req_get,

	      put_read_mem_resp_put,
	      EN_put_read_mem_resp_put,
	      RDY_put_read_mem_resp_put,

	      mv_cacheable_store,
	      RDY_mv_cacheable_store,

	      mv_cache_available,
	      RDY_mv_cache_available,

	      mv_commit_store_ready,
	      RDY_mv_commit_store_ready,

	      ma_curr_priv_c,

	      EN_get_ptw_resp_get,
	      get_ptw_resp_get,
	      RDY_get_ptw_resp_get,

	      EN_get_req_to_ptw_get,
	      get_req_to_ptw_get,
	      RDY_get_req_to_ptw_get,

	      put_resp_from_ptw_put,
	      EN_put_resp_from_ptw_put,
	      RDY_put_resp_from_ptw_put,

	      ma_satp_from_csr_s,
	      EN_ma_satp_from_csr,
	      RDY_ma_satp_from_csr,

	      ma_mstatus_from_csr_m,
	      EN_ma_mstatus_from_csr,
	      RDY_ma_mstatus_from_csr,

	      EN_get_hold_req_get,
	      get_hold_req_get,
	      RDY_get_hold_req_get,

	      mv_dcache_perf_counters,
	      RDY_mv_dcache_perf_counters,

	      mv_dtlb_perf_counters,
	      RDY_mv_dtlb_perf_counters);
  parameter [31 : 0] id = 32'b0;
  input  [7 : 0] pmp_cfg_0;
  input  [7 : 0] pmp_cfg_1;
  input  [7 : 0] pmp_cfg_2;
  input  [7 : 0] pmp_cfg_3;
  input  [28 : 0] pmp_addr_0;
  input  [28 : 0] pmp_addr_1;
  input  [28 : 0] pmp_addr_2;
  input  [28 : 0] pmp_addr_3;
  input  CLK;
  input  RST_N;

  // action method put_core_req_put
  input  [142 : 0] put_core_req_put;
  input  EN_put_core_req_put;
  output RDY_put_core_req_put;

  // actionvalue method get_core_resp_get
  input  EN_get_core_resp_get;
  output [71 : 0] get_core_resp_get;
  output RDY_get_core_resp_get;

  // value method mv_storebuffer_empty
  output mv_storebuffer_empty;
  output RDY_mv_storebuffer_empty;

  // action method ma_perform_store
  input  ma_perform_store_currepoch;
  input  EN_ma_perform_store;
  output RDY_ma_perform_store;

  // value method mv_write_mem_req_rd
  output [555 : 0] mv_write_mem_req_rd;
  output RDY_mv_write_mem_req_rd;

  // action method put_write_mem_resp_put
  input  put_write_mem_resp_put;
  input  EN_put_write_mem_resp_put;
  output RDY_put_write_mem_resp_put;

  // action method ma_write_mem_req_deq
  input  EN_ma_write_mem_req_deq;
  output RDY_ma_write_mem_req_deq;

  // action method ma_cache_enable
  input  ma_cache_enable_c;
  input  EN_ma_cache_enable;
  output RDY_ma_cache_enable;

  // actionvalue method get_read_mem_req_get
  input  EN_get_read_mem_req_get;
  output [43 : 0] get_read_mem_req_get;
  output RDY_get_read_mem_req_get;

  // action method put_read_mem_resp_put
  input  [65 : 0] put_read_mem_resp_put;
  input  EN_put_read_mem_resp_put;
  output RDY_put_read_mem_resp_put;

  // value method mv_cacheable_store
  output mv_cacheable_store;
  output RDY_mv_cacheable_store;

  // value method mv_cache_available
  output mv_cache_available;
  output RDY_mv_cache_available;

  // value method mv_commit_store_ready
  output mv_commit_store_ready;
  output RDY_mv_commit_store_ready;

  // action method ma_curr_priv
  input  [1 : 0] ma_curr_priv_c;

  // actionvalue method get_ptw_resp_get
  input  EN_get_ptw_resp_get;
  output [71 : 0] get_ptw_resp_get;
  output RDY_get_ptw_resp_get;

  // actionvalue method get_req_to_ptw_get
  input  EN_get_req_to_ptw_get;
  output [65 : 0] get_req_to_ptw_get;
  output RDY_get_req_to_ptw_get;

  // action method put_resp_from_ptw_put
  input  [62 : 0] put_resp_from_ptw_put;
  input  EN_put_resp_from_ptw_put;
  output RDY_put_resp_from_ptw_put;

  // action method ma_satp_from_csr
  input  [63 : 0] ma_satp_from_csr_s;
  input  EN_ma_satp_from_csr;
  output RDY_ma_satp_from_csr;

  // action method ma_mstatus_from_csr
  input  [63 : 0] ma_mstatus_from_csr_m;
  input  EN_ma_mstatus_from_csr;
  output RDY_ma_mstatus_from_csr;

  // actionvalue method get_hold_req_get
  input  EN_get_hold_req_get;
  output [140 : 0] get_hold_req_get;
  output RDY_get_hold_req_get;

  // value method mv_dcache_perf_counters
  output [12 : 0] mv_dcache_perf_counters;
  output RDY_mv_dcache_perf_counters;

  // value method mv_dtlb_perf_counters
  output mv_dtlb_perf_counters;
  output RDY_mv_dtlb_perf_counters;

  // signals for module outputs
  wire [555 : 0] mv_write_mem_req_rd;
  wire [140 : 0] get_hold_req_get;
  wire [71 : 0] get_core_resp_get, get_ptw_resp_get;
  wire [65 : 0] get_req_to_ptw_get;
  wire [43 : 0] get_read_mem_req_get;
  wire [12 : 0] mv_dcache_perf_counters;
  wire RDY_get_core_resp_get,
       RDY_get_hold_req_get,
       RDY_get_ptw_resp_get,
       RDY_get_read_mem_req_get,
       RDY_get_req_to_ptw_get,
       RDY_ma_cache_enable,
       RDY_ma_mstatus_from_csr,
       RDY_ma_perform_store,
       RDY_ma_satp_from_csr,
       RDY_ma_write_mem_req_deq,
       RDY_mv_cache_available,
       RDY_mv_cacheable_store,
       RDY_mv_commit_store_ready,
       RDY_mv_dcache_perf_counters,
       RDY_mv_dtlb_perf_counters,
       RDY_mv_storebuffer_empty,
       RDY_mv_write_mem_req_rd,
       RDY_put_core_req_put,
       RDY_put_read_mem_resp_put,
       RDY_put_resp_from_ptw_put,
       RDY_put_write_mem_resp_put,
       mv_cache_available,
       mv_cacheable_store,
       mv_commit_store_ready,
       mv_dtlb_perf_counters,
       mv_storebuffer_empty;

  // ports of submodule dcache
  wire [555 : 0] dcache_mv_write_mem_req;
  wire [140 : 0] dcache_get_hold_req_get, dcache_put_core_req_put;
  wire [71 : 0] dcache_get_core_resp_get, dcache_get_ptw_resp_get;
  wire [65 : 0] dcache_put_read_mem_resp_put;
  wire [43 : 0] dcache_get_read_mem_req_get;
  wire [39 : 0] dcache_put_pa_from_tlb_put;
  wire [12 : 0] dcache_mv_perf_counters;
  wire [1 : 0] dcache_ma_curr_priv_c;
  wire dcache_EN_get_core_resp_get,
       dcache_EN_get_hold_req_get,
       dcache_EN_get_ptw_resp_get,
       dcache_EN_get_read_mem_req_get,
       dcache_EN_ma_cache_enable,
       dcache_EN_ma_curr_priv,
       dcache_EN_ma_perform_store,
       dcache_EN_ma_write_mem_req_deq,
       dcache_EN_put_core_req_put,
       dcache_EN_put_pa_from_tlb_put,
       dcache_EN_put_read_mem_resp_put,
       dcache_EN_put_write_mem_resp_put,
       dcache_RDY_get_core_resp_get,
       dcache_RDY_get_hold_req_get,
       dcache_RDY_get_ptw_resp_get,
       dcache_RDY_get_read_mem_req_get,
       dcache_RDY_ma_perform_store,
       dcache_RDY_ma_write_mem_req_deq,
       dcache_RDY_mv_write_mem_req,
       dcache_RDY_put_core_req_put,
       dcache_RDY_put_pa_from_tlb_put,
       dcache_RDY_put_read_mem_resp_put,
       dcache_RDY_put_write_mem_resp_put,
       dcache_ma_cache_enable_c,
       dcache_ma_perform_store_currepoch,
       dcache_mv_cache_available,
       dcache_mv_cacheable_store,
       dcache_mv_commit_store_ready,
       dcache_mv_storebuffer_empty,
       dcache_put_write_mem_resp_put;

  // ports of submodule dtlb
  wire [74 : 0] dtlb_put_core_request_put;
  wire [65 : 0] dtlb_get_request_to_ptw_get;
  wire [63 : 0] dtlb_ma_mstatus_from_csr_m, dtlb_ma_satp_from_csr_s;
  wire [62 : 0] dtlb_put_response_frm_ptw_put;
  wire [39 : 0] dtlb_get_core_response_get;
  wire [1 : 0] dtlb_ma_curr_priv_c;
  wire dtlb_EN_get_core_response_get,
       dtlb_EN_get_request_to_ptw_get,
       dtlb_EN_ma_curr_priv,
       dtlb_EN_ma_mstatus_from_csr,
       dtlb_EN_ma_satp_from_csr,
       dtlb_EN_put_core_request_put,
       dtlb_EN_put_response_frm_ptw_put,
       dtlb_RDY_get_core_response_get,
       dtlb_RDY_get_request_to_ptw_get,
       dtlb_RDY_put_core_request_put,
       dtlb_RDY_put_response_frm_ptw_put,
       dtlb_mv_perf_counters,
       dtlb_mv_tlb_available;

  // rule scheduling signals
  wire CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_get_core_resp_get,
       CAN_FIRE_get_hold_req_get,
       CAN_FIRE_get_ptw_resp_get,
       CAN_FIRE_get_read_mem_req_get,
       CAN_FIRE_get_req_to_ptw_get,
       CAN_FIRE_ma_cache_enable,
       CAN_FIRE_ma_curr_priv,
       CAN_FIRE_ma_mstatus_from_csr,
       CAN_FIRE_ma_perform_store,
       CAN_FIRE_ma_satp_from_csr,
       CAN_FIRE_ma_write_mem_req_deq,
       CAN_FIRE_put_core_req_put,
       CAN_FIRE_put_read_mem_resp_put,
       CAN_FIRE_put_resp_from_ptw_put,
       CAN_FIRE_put_write_mem_resp_put,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_get_core_resp_get,
       WILL_FIRE_get_hold_req_get,
       WILL_FIRE_get_ptw_resp_get,
       WILL_FIRE_get_read_mem_req_get,
       WILL_FIRE_get_req_to_ptw_get,
       WILL_FIRE_ma_cache_enable,
       WILL_FIRE_ma_curr_priv,
       WILL_FIRE_ma_mstatus_from_csr,
       WILL_FIRE_ma_perform_store,
       WILL_FIRE_ma_satp_from_csr,
       WILL_FIRE_ma_write_mem_req_deq,
       WILL_FIRE_put_core_req_put,
       WILL_FIRE_put_read_mem_resp_put,
       WILL_FIRE_put_resp_from_ptw_put,
       WILL_FIRE_put_write_mem_resp_put;

  // action method put_core_req_put
  assign RDY_put_core_req_put =
	     dcache_RDY_put_core_req_put && dtlb_RDY_put_core_request_put ;
  assign CAN_FIRE_put_core_req_put =
	     dcache_RDY_put_core_req_put && dtlb_RDY_put_core_request_put ;
  assign WILL_FIRE_put_core_req_put = EN_put_core_req_put ;

  // actionvalue method get_core_resp_get
  assign get_core_resp_get = dcache_get_core_resp_get ;
  assign RDY_get_core_resp_get = dcache_RDY_get_core_resp_get ;
  assign CAN_FIRE_get_core_resp_get = dcache_RDY_get_core_resp_get ;
  assign WILL_FIRE_get_core_resp_get = EN_get_core_resp_get ;

  // value method mv_storebuffer_empty
  assign mv_storebuffer_empty = dcache_mv_storebuffer_empty ;
  assign RDY_mv_storebuffer_empty = 1'd1 ;

  // action method ma_perform_store
  assign RDY_ma_perform_store = dcache_RDY_ma_perform_store ;
  assign CAN_FIRE_ma_perform_store = dcache_RDY_ma_perform_store ;
  assign WILL_FIRE_ma_perform_store = EN_ma_perform_store ;

  // value method mv_write_mem_req_rd
  assign mv_write_mem_req_rd = dcache_mv_write_mem_req ;
  assign RDY_mv_write_mem_req_rd = dcache_RDY_mv_write_mem_req ;

  // action method put_write_mem_resp_put
  assign RDY_put_write_mem_resp_put = dcache_RDY_put_write_mem_resp_put ;
  assign CAN_FIRE_put_write_mem_resp_put = dcache_RDY_put_write_mem_resp_put ;
  assign WILL_FIRE_put_write_mem_resp_put = EN_put_write_mem_resp_put ;

  // action method ma_write_mem_req_deq
  assign RDY_ma_write_mem_req_deq = dcache_RDY_ma_write_mem_req_deq ;
  assign CAN_FIRE_ma_write_mem_req_deq = dcache_RDY_ma_write_mem_req_deq ;
  assign WILL_FIRE_ma_write_mem_req_deq = EN_ma_write_mem_req_deq ;

  // action method ma_cache_enable
  assign RDY_ma_cache_enable = 1'd1 ;
  assign CAN_FIRE_ma_cache_enable = 1'd1 ;
  assign WILL_FIRE_ma_cache_enable = EN_ma_cache_enable ;

  // actionvalue method get_read_mem_req_get
  assign get_read_mem_req_get = dcache_get_read_mem_req_get ;
  assign RDY_get_read_mem_req_get = dcache_RDY_get_read_mem_req_get ;
  assign CAN_FIRE_get_read_mem_req_get = dcache_RDY_get_read_mem_req_get ;
  assign WILL_FIRE_get_read_mem_req_get = EN_get_read_mem_req_get ;

  // action method put_read_mem_resp_put
  assign RDY_put_read_mem_resp_put = dcache_RDY_put_read_mem_resp_put ;
  assign CAN_FIRE_put_read_mem_resp_put = dcache_RDY_put_read_mem_resp_put ;
  assign WILL_FIRE_put_read_mem_resp_put = EN_put_read_mem_resp_put ;

  // value method mv_cacheable_store
  assign mv_cacheable_store = dcache_mv_cacheable_store ;
  assign RDY_mv_cacheable_store = 1'd1 ;

  // value method mv_cache_available
  assign mv_cache_available =
	     dcache_mv_cache_available && dtlb_mv_tlb_available ;
  assign RDY_mv_cache_available = 1'd1 ;

  // value method mv_commit_store_ready
  assign mv_commit_store_ready = dcache_mv_commit_store_ready ;
  assign RDY_mv_commit_store_ready = 1'd1 ;

  // action method ma_curr_priv
  assign CAN_FIRE_ma_curr_priv = 1'd1 ;
  assign WILL_FIRE_ma_curr_priv = 1'd1 ;

  // actionvalue method get_ptw_resp_get
  assign get_ptw_resp_get = dcache_get_ptw_resp_get ;
  assign RDY_get_ptw_resp_get = dcache_RDY_get_ptw_resp_get ;
  assign CAN_FIRE_get_ptw_resp_get = dcache_RDY_get_ptw_resp_get ;
  assign WILL_FIRE_get_ptw_resp_get = EN_get_ptw_resp_get ;

  // actionvalue method get_req_to_ptw_get
  assign get_req_to_ptw_get = dtlb_get_request_to_ptw_get ;
  assign RDY_get_req_to_ptw_get = dtlb_RDY_get_request_to_ptw_get ;
  assign CAN_FIRE_get_req_to_ptw_get = dtlb_RDY_get_request_to_ptw_get ;
  assign WILL_FIRE_get_req_to_ptw_get = EN_get_req_to_ptw_get ;

  // action method put_resp_from_ptw_put
  assign RDY_put_resp_from_ptw_put = dtlb_RDY_put_response_frm_ptw_put ;
  assign CAN_FIRE_put_resp_from_ptw_put = dtlb_RDY_put_response_frm_ptw_put ;
  assign WILL_FIRE_put_resp_from_ptw_put = EN_put_resp_from_ptw_put ;

  // action method ma_satp_from_csr
  assign RDY_ma_satp_from_csr = 1'd1 ;
  assign CAN_FIRE_ma_satp_from_csr = 1'd1 ;
  assign WILL_FIRE_ma_satp_from_csr = EN_ma_satp_from_csr ;

  // action method ma_mstatus_from_csr
  assign RDY_ma_mstatus_from_csr = 1'd1 ;
  assign CAN_FIRE_ma_mstatus_from_csr = 1'd1 ;
  assign WILL_FIRE_ma_mstatus_from_csr = EN_ma_mstatus_from_csr ;

  // actionvalue method get_hold_req_get
  assign get_hold_req_get = dcache_get_hold_req_get ;
  assign RDY_get_hold_req_get = dcache_RDY_get_hold_req_get ;
  assign CAN_FIRE_get_hold_req_get = dcache_RDY_get_hold_req_get ;
  assign WILL_FIRE_get_hold_req_get = EN_get_hold_req_get ;

  // value method mv_dcache_perf_counters
  assign mv_dcache_perf_counters = dcache_mv_perf_counters ;
  assign RDY_mv_dcache_perf_counters = 1'd1 ;

  // value method mv_dtlb_perf_counters
  assign mv_dtlb_perf_counters = dtlb_mv_perf_counters ;
  assign RDY_mv_dtlb_perf_counters = 1'd1 ;

  // submodule dcache
  mkdcache #(.id(id)) dcache(.pmp_cfg_0(pmp_cfg_0),
			     .pmp_cfg_1(pmp_cfg_1),
			     .pmp_cfg_2(pmp_cfg_2),
			     .pmp_cfg_3(pmp_cfg_3),
			     .pmp_addr_0(pmp_addr_0),
			     .pmp_addr_1(pmp_addr_1),
			     .pmp_addr_2(pmp_addr_2),
			     .pmp_addr_3(pmp_addr_3),
			     .CLK(CLK),
			     .RST_N(RST_N),
			     .ma_cache_enable_c(dcache_ma_cache_enable_c),
			     .ma_curr_priv_c(dcache_ma_curr_priv_c),
			     .ma_perform_store_currepoch(dcache_ma_perform_store_currepoch),
			     .put_core_req_put(dcache_put_core_req_put),
			     .put_pa_from_tlb_put(dcache_put_pa_from_tlb_put),
			     .put_read_mem_resp_put(dcache_put_read_mem_resp_put),
			     .put_write_mem_resp_put(dcache_put_write_mem_resp_put),
			     .EN_put_core_req_put(dcache_EN_put_core_req_put),
			     .EN_get_core_resp_get(dcache_EN_get_core_resp_get),
			     .EN_get_read_mem_req_get(dcache_EN_get_read_mem_req_get),
			     .EN_put_read_mem_resp_put(dcache_EN_put_read_mem_resp_put),
			     .EN_ma_write_mem_req_deq(dcache_EN_ma_write_mem_req_deq),
			     .EN_put_write_mem_resp_put(dcache_EN_put_write_mem_resp_put),
			     .EN_ma_curr_priv(dcache_EN_ma_curr_priv),
			     .EN_get_ptw_resp_get(dcache_EN_get_ptw_resp_get),
			     .EN_put_pa_from_tlb_put(dcache_EN_put_pa_from_tlb_put),
			     .EN_get_hold_req_get(dcache_EN_get_hold_req_get),
			     .EN_ma_cache_enable(dcache_EN_ma_cache_enable),
			     .EN_ma_perform_store(dcache_EN_ma_perform_store),
			     .RDY_put_core_req_put(dcache_RDY_put_core_req_put),
			     .get_core_resp_get(dcache_get_core_resp_get),
			     .RDY_get_core_resp_get(dcache_RDY_get_core_resp_get),
			     .get_read_mem_req_get(dcache_get_read_mem_req_get),
			     .RDY_get_read_mem_req_get(dcache_RDY_get_read_mem_req_get),
			     .RDY_put_read_mem_resp_put(dcache_RDY_put_read_mem_resp_put),
			     .mv_write_mem_req(dcache_mv_write_mem_req),
			     .RDY_mv_write_mem_req(dcache_RDY_mv_write_mem_req),
			     .RDY_ma_write_mem_req_deq(dcache_RDY_ma_write_mem_req_deq),
			     .RDY_put_write_mem_resp_put(dcache_RDY_put_write_mem_resp_put),
			     .RDY_ma_curr_priv(),
			     .get_ptw_resp_get(dcache_get_ptw_resp_get),
			     .RDY_get_ptw_resp_get(dcache_RDY_get_ptw_resp_get),
			     .RDY_put_pa_from_tlb_put(dcache_RDY_put_pa_from_tlb_put),
			     .get_hold_req_get(dcache_get_hold_req_get),
			     .RDY_get_hold_req_get(dcache_RDY_get_hold_req_get),
			     .mv_perf_counters(dcache_mv_perf_counters),
			     .RDY_mv_perf_counters(),
			     .RDY_ma_cache_enable(),
			     .mv_storebuffer_empty(dcache_mv_storebuffer_empty),
			     .RDY_mv_storebuffer_empty(),
			     .RDY_ma_perform_store(dcache_RDY_ma_perform_store),
			     .mv_cacheable_store(dcache_mv_cacheable_store),
			     .RDY_mv_cacheable_store(),
			     .mv_cache_available(dcache_mv_cache_available),
			     .RDY_mv_cache_available(),
			     .mv_commit_store_ready(dcache_mv_commit_store_ready),
			     .RDY_mv_commit_store_ready());

  // submodule dtlb
  mkfa_dtlb #(.hartid(id)) dtlb(.CLK(CLK),
				.RST_N(RST_N),
				.ma_curr_priv_c(dtlb_ma_curr_priv_c),
				.ma_mstatus_from_csr_m(dtlb_ma_mstatus_from_csr_m),
				.ma_satp_from_csr_s(dtlb_ma_satp_from_csr_s),
				.put_core_request_put(dtlb_put_core_request_put),
				.put_response_frm_ptw_put(dtlb_put_response_frm_ptw_put),
				.EN_put_core_request_put(dtlb_EN_put_core_request_put),
				.EN_get_core_response_get(dtlb_EN_get_core_response_get),
				.EN_get_request_to_ptw_get(dtlb_EN_get_request_to_ptw_get),
				.EN_put_response_frm_ptw_put(dtlb_EN_put_response_frm_ptw_put),
				.EN_ma_satp_from_csr(dtlb_EN_ma_satp_from_csr),
				.EN_ma_curr_priv(dtlb_EN_ma_curr_priv),
				.EN_ma_mstatus_from_csr(dtlb_EN_ma_mstatus_from_csr),
				.RDY_put_core_request_put(dtlb_RDY_put_core_request_put),
				.get_core_response_get(dtlb_get_core_response_get),
				.RDY_get_core_response_get(dtlb_RDY_get_core_response_get),
				.get_request_to_ptw_get(dtlb_get_request_to_ptw_get),
				.RDY_get_request_to_ptw_get(dtlb_RDY_get_request_to_ptw_get),
				.RDY_put_response_frm_ptw_put(dtlb_RDY_put_response_frm_ptw_put),
				.RDY_ma_satp_from_csr(),
				.RDY_ma_curr_priv(),
				.RDY_ma_mstatus_from_csr(),
				.mv_tlb_available(dtlb_mv_tlb_available),
				.RDY_mv_tlb_available(),
				.mv_perf_counters(dtlb_mv_perf_counters),
				.RDY_mv_perf_counters());

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     dcache_RDY_put_pa_from_tlb_put &&
	     dtlb_RDY_get_core_response_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // submodule dcache
  assign dcache_ma_cache_enable_c = ma_cache_enable_c ;
  assign dcache_ma_curr_priv_c = ma_curr_priv_c ;
  assign dcache_ma_perform_store_currepoch = ma_perform_store_currepoch ;
  assign dcache_put_core_req_put =
	     { put_core_req_put[142:79],
	       put_core_req_put[74],
	       put_core_req_put[78],
	       put_core_req_put[73:72],
	       put_core_req_put[77:75],
	       put_core_req_put[71:3],
	       put_core_req_put[1] } ;
  assign dcache_put_pa_from_tlb_put = dtlb_get_core_response_get ;
  assign dcache_put_read_mem_resp_put = put_read_mem_resp_put ;
  assign dcache_put_write_mem_resp_put = put_write_mem_resp_put ;
  assign dcache_EN_put_core_req_put =
	     EN_put_core_req_put &&
	     (put_core_req_put[1] || !put_core_req_put[2]) ;
  assign dcache_EN_get_core_resp_get = EN_get_core_resp_get ;
  assign dcache_EN_get_read_mem_req_get = EN_get_read_mem_req_get ;
  assign dcache_EN_put_read_mem_resp_put = EN_put_read_mem_resp_put ;
  assign dcache_EN_ma_write_mem_req_deq = EN_ma_write_mem_req_deq ;
  assign dcache_EN_put_write_mem_resp_put = EN_put_write_mem_resp_put ;
  assign dcache_EN_ma_curr_priv = 1'd1 ;
  assign dcache_EN_get_ptw_resp_get = EN_get_ptw_resp_get ;
  assign dcache_EN_put_pa_from_tlb_put = CAN_FIRE_RL_mkConnectionGetPut ;
  assign dcache_EN_get_hold_req_get = EN_get_hold_req_get ;
  assign dcache_EN_ma_cache_enable = EN_ma_cache_enable ;
  assign dcache_EN_ma_perform_store = EN_ma_perform_store ;

  // submodule dtlb
  assign dtlb_ma_curr_priv_c = ma_curr_priv_c ;
  assign dtlb_ma_mstatus_from_csr_m = ma_mstatus_from_csr_m ;
  assign dtlb_ma_satp_from_csr_s = ma_satp_from_csr_s ;
  assign dtlb_put_core_request_put =
	     { put_core_req_put[142:79],
	       put_core_req_put[73:72],
	       put_core_req_put[13:8],
	       put_core_req_put[0],
	       put_core_req_put[1],
	       put_core_req_put[2] } ;
  assign dtlb_put_response_frm_ptw_put = put_resp_from_ptw_put ;
  assign dtlb_EN_put_core_request_put =
	     EN_put_core_req_put && !put_core_req_put[74] ;
  assign dtlb_EN_get_core_response_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign dtlb_EN_get_request_to_ptw_get = EN_get_req_to_ptw_get ;
  assign dtlb_EN_put_response_frm_ptw_put = EN_put_resp_from_ptw_put ;
  assign dtlb_EN_ma_satp_from_csr = EN_ma_satp_from_csr ;
  assign dtlb_EN_ma_curr_priv = 1'd1 ;
  assign dtlb_EN_ma_mstatus_from_csr = EN_ma_mstatus_from_csr ;
endmodule  // mkdmem

