//
// Generated by Bluespec Compiler, version 2022.01-5-ge3edf4b1 (build e3edf4b1)
//
// On Fri Apr 15 12:46:00 EDT 2022
//
//
// Ports:
// Name                         I/O  size props
// rx_from_stage1_deq_ena         O     1
// tx_meta_to_stage3_enq_ena      O     1
// tx_meta_to_stage3_enq_data     O   100
// tx_mtval_to_stage3_enq_ena     O     1
// tx_mtval_to_stage3_enq_data    O    64
// mv_op1                         O    71
// mv_op2                         O    72
// mv_op3                         O    70
// rx_inst_deq_ena                O     1
// tx_inst_enq_ena                O     1
// tx_inst_enq_data               O    32
// RDY_commit_rd                  O     1
// RDY_clear_stall                O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// rx_from_stage1_notEmpty_b      I     1
// rx_from_stage1_first_deq_rdy_b  I     1
// rx_from_stage1_first_x         I   119
// tx_meta_to_stage3_notFull_b    I     1 unused
// tx_meta_to_stage3_enq_rdy_b    I     1
// tx_mtval_to_stage3_notFull_b   I     1
// tx_mtval_to_stage3_enq_rdy_b   I     1
// rx_inst_notEmpty_b             I     1 unused
// rx_inst_first_deq_rdy_b        I     1
// rx_inst_first_x                I    32
// tx_inst_notFull_b              I     1 unused
// tx_inst_enq_rdy_b              I     1
// commit_rd_commit               I    70
// csrs_csr                       I   145
// clear_stall_upd                I     1
// ma_resume_wfi_w                I     1
// EN_commit_rd                   I     1
// EN_csrs                        I     1
// EN_clear_stall                 I     1
// EN_update_eEpoch               I     1
// EN_update_wEpoch               I     1
// EN_ma_resume_wfi               I     1
//
// Combinational paths from inputs to outputs:
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    EN_csrs) -> rx_from_stage1_deq_ena
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_meta_to_stage3_enq_ena
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_meta_to_stage3_enq_data
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_mtval_to_stage3_enq_ena
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_mtval_to_stage3_enq_data
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    EN_csrs) -> rx_inst_deq_ena
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_inst_enq_ena
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    rx_inst_first_x,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_inst_enq_data
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkstage2(CLK,
		RST_N,

		rx_from_stage1_notEmpty_b,

		rx_from_stage1_first_deq_rdy_b,

		rx_from_stage1_first_x,

		rx_from_stage1_deq_ena,

		tx_meta_to_stage3_notFull_b,

		tx_meta_to_stage3_enq_rdy_b,

		tx_meta_to_stage3_enq_ena,

		tx_meta_to_stage3_enq_data,

		tx_mtval_to_stage3_notFull_b,

		tx_mtval_to_stage3_enq_rdy_b,

		tx_mtval_to_stage3_enq_ena,

		tx_mtval_to_stage3_enq_data,

		mv_op1,

		mv_op2,

		mv_op3,

		rx_inst_notEmpty_b,

		rx_inst_first_deq_rdy_b,

		rx_inst_first_x,

		rx_inst_deq_ena,

		tx_inst_notFull_b,

		tx_inst_enq_rdy_b,

		tx_inst_enq_ena,

		tx_inst_enq_data,

		commit_rd_commit,
		EN_commit_rd,
		RDY_commit_rd,

		csrs_csr,
		EN_csrs,

		clear_stall_upd,
		EN_clear_stall,
		RDY_clear_stall,

		EN_update_eEpoch,

		EN_update_wEpoch,

		ma_resume_wfi_w,
		EN_ma_resume_wfi);
  parameter [63 : 0] hartid = 64'b0;
  input  CLK;
  input  RST_N;

  // action method rx_from_stage1_notEmpty
  input  rx_from_stage1_notEmpty_b;

  // action method rx_from_stage1_first_deq_rdy
  input  rx_from_stage1_first_deq_rdy_b;

  // action method rx_from_stage1_first
  input  [118 : 0] rx_from_stage1_first_x;

  // value method rx_from_stage1_deq_ena
  output rx_from_stage1_deq_ena;

  // action method tx_meta_to_stage3_notFull
  input  tx_meta_to_stage3_notFull_b;

  // action method tx_meta_to_stage3_enq_rdy
  input  tx_meta_to_stage3_enq_rdy_b;

  // value method tx_meta_to_stage3_enq_ena
  output tx_meta_to_stage3_enq_ena;

  // value method tx_meta_to_stage3_enq_data
  output [99 : 0] tx_meta_to_stage3_enq_data;

  // action method tx_mtval_to_stage3_notFull
  input  tx_mtval_to_stage3_notFull_b;

  // action method tx_mtval_to_stage3_enq_rdy
  input  tx_mtval_to_stage3_enq_rdy_b;

  // value method tx_mtval_to_stage3_enq_ena
  output tx_mtval_to_stage3_enq_ena;

  // value method tx_mtval_to_stage3_enq_data
  output [63 : 0] tx_mtval_to_stage3_enq_data;

  // value method mv_op1
  output [70 : 0] mv_op1;

  // value method mv_op2
  output [71 : 0] mv_op2;

  // value method mv_op3
  output [69 : 0] mv_op3;

  // action method rx_inst_notEmpty
  input  rx_inst_notEmpty_b;

  // action method rx_inst_first_deq_rdy
  input  rx_inst_first_deq_rdy_b;

  // action method rx_inst_first
  input  [31 : 0] rx_inst_first_x;

  // value method rx_inst_deq_ena
  output rx_inst_deq_ena;

  // action method tx_inst_notFull
  input  tx_inst_notFull_b;

  // action method tx_inst_enq_rdy
  input  tx_inst_enq_rdy_b;

  // value method tx_inst_enq_ena
  output tx_inst_enq_ena;

  // value method tx_inst_enq_data
  output [31 : 0] tx_inst_enq_data;

  // action method commit_rd
  input  [69 : 0] commit_rd_commit;
  input  EN_commit_rd;
  output RDY_commit_rd;

  // action method csrs
  input  [144 : 0] csrs_csr;
  input  EN_csrs;

  // action method clear_stall
  input  clear_stall_upd;
  input  EN_clear_stall;
  output RDY_clear_stall;

  // action method update_eEpoch
  input  EN_update_eEpoch;

  // action method update_wEpoch
  input  EN_update_wEpoch;

  // action method ma_resume_wfi
  input  ma_resume_wfi_w;
  input  EN_ma_resume_wfi;

  // signals for module outputs
  wire [99 : 0] tx_meta_to_stage3_enq_data;
  wire [71 : 0] mv_op2;
  wire [70 : 0] mv_op1;
  wire [69 : 0] mv_op3;
  wire [63 : 0] tx_mtval_to_stage3_enq_data;
  wire [31 : 0] tx_inst_enq_data;
  wire RDY_clear_stall,
       RDY_commit_rd,
       rx_from_stage1_deq_ena,
       rx_inst_deq_ena,
       tx_inst_enq_ena,
       tx_meta_to_stage3_enq_ena,
       tx_mtval_to_stage3_enq_ena;

  // inlined wires
  wire [71 : 0] rg_op2_port0__write_1,
		rg_op2_port1__read,
		rg_op2_port1__write_1,
		rg_op2_port2__read;
  wire [70 : 0] rg_op1_port0__write_1,
		rg_op1_port1__read,
		rg_op1_port1__write_1,
		rg_op1_port2__read;
  wire [69 : 0] rg_op3_port0__write_1,
		rg_op3_port1__read,
		rg_op3_port1__write_1,
		rg_op3_port2__read;
  wire rg_op1_EN_port1__write, rg_op2_EN_port1__write, rg_op3_EN_port1__write;

  // register eEpoch
  reg eEpoch;
  wire eEpoch_D_IN, eEpoch_EN;

  // register rg_fencei_rerun
  reg rg_fencei_rerun;
  wire rg_fencei_rerun_D_IN, rg_fencei_rerun_EN;

  // register rg_op1
  reg [70 : 0] rg_op1;
  wire [70 : 0] rg_op1_D_IN;
  wire rg_op1_EN;

  // register rg_op2
  reg [71 : 0] rg_op2;
  wire [71 : 0] rg_op2_D_IN;
  wire rg_op2_EN;

  // register rg_op3
  reg [69 : 0] rg_op3;
  wire [69 : 0] rg_op3_D_IN;
  wire rg_op3_EN;

  // register rg_rerun
  reg rg_rerun;
  wire rg_rerun_D_IN, rg_rerun_EN;

  // register rg_sfence_rerun
  reg rg_sfence_rerun;
  wire rg_sfence_rerun_D_IN, rg_sfence_rerun_EN;

  // register rg_stall
  reg rg_stall;
  wire rg_stall_D_IN, rg_stall_EN;

  // register rg_wfi
  reg rg_wfi;
  wire rg_wfi_D_IN, rg_wfi_EN;

  // register wEpoch
  reg wEpoch;
  wire wEpoch_D_IN, wEpoch_EN;

  // ports of submodule registerfile
  wire [69 : 0] registerfile_commit_rd_c;
  wire [63 : 0] registerfile_read_rs1,
		registerfile_read_rs2,
		registerfile_read_rs3;
  wire [4 : 0] registerfile_read_rs1_addr,
	       registerfile_read_rs2_addr,
	       registerfile_read_rs3_addr;
  wire registerfile_EN_commit_rd,
       registerfile_EN_read_rs1,
       registerfile_EN_read_rs2,
       registerfile_EN_read_rs3,
       registerfile_RDY_commit_rd,
       registerfile_RDY_read_rs1,
       registerfile_RDY_read_rs2,
       registerfile_RDY_read_rs3,
       registerfile_read_rs1_rs1type,
       registerfile_read_rs2_rs2type;

  // rule scheduling signals
  wire CAN_FIRE_RL_decode_and_opfetch,
       CAN_FIRE_RL_rl_wait_for_interrupt,
       CAN_FIRE_clear_stall,
       CAN_FIRE_commit_rd,
       CAN_FIRE_csrs,
       CAN_FIRE_ma_resume_wfi,
       CAN_FIRE_rx_from_stage1_first,
       CAN_FIRE_rx_from_stage1_first_deq_rdy,
       CAN_FIRE_rx_from_stage1_notEmpty,
       CAN_FIRE_rx_inst_first,
       CAN_FIRE_rx_inst_first_deq_rdy,
       CAN_FIRE_rx_inst_notEmpty,
       CAN_FIRE_tx_inst_enq_rdy,
       CAN_FIRE_tx_inst_notFull,
       CAN_FIRE_tx_meta_to_stage3_enq_rdy,
       CAN_FIRE_tx_meta_to_stage3_notFull,
       CAN_FIRE_tx_mtval_to_stage3_enq_rdy,
       CAN_FIRE_tx_mtval_to_stage3_notFull,
       CAN_FIRE_update_eEpoch,
       CAN_FIRE_update_wEpoch,
       WILL_FIRE_RL_decode_and_opfetch,
       WILL_FIRE_RL_rl_wait_for_interrupt,
       WILL_FIRE_clear_stall,
       WILL_FIRE_commit_rd,
       WILL_FIRE_csrs,
       WILL_FIRE_ma_resume_wfi,
       WILL_FIRE_rx_from_stage1_first,
       WILL_FIRE_rx_from_stage1_first_deq_rdy,
       WILL_FIRE_rx_from_stage1_notEmpty,
       WILL_FIRE_rx_inst_first,
       WILL_FIRE_rx_inst_first_deq_rdy,
       WILL_FIRE_rx_inst_notEmpty,
       WILL_FIRE_tx_inst_enq_rdy,
       WILL_FIRE_tx_inst_notFull,
       WILL_FIRE_tx_meta_to_stage3_enq_rdy,
       WILL_FIRE_tx_meta_to_stage3_notFull,
       WILL_FIRE_tx_mtval_to_stage3_enq_rdy,
       WILL_FIRE_tx_mtval_to_stage3_notFull,
       WILL_FIRE_update_eEpoch,
       WILL_FIRE_update_wEpoch;

  // inputs to muxes for submodule ports
  wire MUX_rg_rerun_write_1__SEL_1,
       MUX_rg_rerun_write_1__SEL_2,
       MUX_rg_rerun_write_1__VAL_2,
       MUX_rg_stall_write_1__VAL_2,
       MUX_rg_wfi_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d28;
  reg TASK_testplusargs___d29;
  reg TASK_testplusargs___d30;
  reg [63 : 0] v__h2526;
  reg TASK_testplusargs___d50;
  reg TASK_testplusargs___d51;
  reg TASK_testplusargs___d52;
  reg [63 : 0] v__h2781;
  reg TASK_testplusargs___d62;
  reg TASK_testplusargs___d63;
  reg TASK_testplusargs___d64;
  reg [63 : 0] v__h3066;
  reg TASK_testplusargs___d87;
  reg TASK_testplusargs___d88;
  reg TASK_testplusargs___d89;
  reg [63 : 0] v__h3447;
  reg TASK_testplusargs___d145;
  reg TASK_testplusargs___d146;
  reg TASK_testplusargs___d147;
  reg [63 : 0] v__h3729;
  reg TASK_testplusargs___d182;
  reg TASK_testplusargs___d183;
  reg TASK_testplusargs___d184;
  reg [63 : 0] v__h4176;
  reg TASK_testplusargs___d196;
  reg TASK_testplusargs___d197;
  reg TASK_testplusargs___d198;
  reg [63 : 0] v__h4350;
  reg TASK_testplusargs___d252;
  reg TASK_testplusargs___d253;
  reg TASK_testplusargs___d254;
  reg [63 : 0] v__h5404;
  reg TASK_testplusargs___d379;
  reg TASK_testplusargs___d380;
  reg TASK_testplusargs___d381;
  reg [63 : 0] v__h3963;
  reg TASK_testplusargs___d407;
  reg TASK_testplusargs___d408;
  reg TASK_testplusargs___d409;
  reg [63 : 0] v__h6641;
  reg TASK_testplusargs___d419;
  reg TASK_testplusargs___d420;
  reg TASK_testplusargs___d421;
  reg [63 : 0] v__h6800;
  reg TASK_testplusargs___d437;
  reg TASK_testplusargs___d438;
  reg TASK_testplusargs___d439;
  reg [63 : 0] v__h6984;
  reg NOT_wr_flush_from_exe_whas__69_70_OR_NOT_wr_fl_ETC___d187;
  reg wr_flush_from_exe_whas__69_AND_wr_flush_from_e_ETC___d201;
  reg NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d261;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d265;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d269;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d272;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d276;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d288;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d292;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d294;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d297;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d300;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d303;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d306;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d308;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d311;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d328;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d331;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d334;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d337;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d341;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d346;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d351;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d359;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d363;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d369;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d373;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d37;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d39;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d43;
  reg TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d112;
  reg TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d114;
  reg TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d118;
  reg TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d122;
  reg TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d124;
  reg TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d126;
  reg TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d128;
  reg TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d136;
  reg TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d138;
  reg TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d140;
  reg TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d142;
  reg TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d144;
  reg NOT_eEpoch_read__62_CONCAT_wEpoch_read__63_64__ETC___d384;
  reg TASK_testplusargs_07_OR_TASK_testplusargs_08_A_ETC___d416;
  reg TASK_testplusargs_07_OR_TASK_testplusargs_08_A_ETC___d418;
  reg TASK_testplusargs_19_OR_TASK_testplusargs_20_A_ETC___d430;
  reg TASK_testplusargs_19_OR_TASK_testplusargs_20_A_ETC___d432;
  reg TASK_testplusargs_19_OR_TASK_testplusargs_20_A_ETC___d436;
  reg TASK_testplusargs_37_OR_TASK_testplusargs_38_A_ETC___d448;
  reg TASK_testplusargs_37_OR_TASK_testplusargs_38_A_ETC___d450;
  reg TASK_testplusargs_37_OR_TASK_testplusargs_38_A_ETC___d452;
  reg TASK_testplusargs_37_OR_TASK_testplusargs_38_A_ETC___d454;
  reg TASK_testplusargs_37_OR_TASK_testplusargs_38_A_ETC___d462;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] op2__h4605;
  reg [1 : 0] CASE_func_cause689_1_1_12_1_0__q1;
  wire [74 : 0] decoder_func_32___d77;
  wire [63 : 0] IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d160,
		SEXT_decoder_func_32_7_BITS_40_TO_9_38___d239,
		_theResult_____1__h3662,
		mtval___1__h3820,
		mtval___1__h3839,
		op1__h4604,
		op4__h4606;
  wire [31 : 0] decoder_func_32_7_BITS_40_TO_9__q2, x_wget_instruction__h2858;
  wire [18 : 0] value__h2627, value__h2631;
  wire [6 : 0] _theResult___fst__h3186,
	       _theResult___fst__h3217,
	       chk_interrupt___d69,
	       func_cause___1__h3160,
	       func_cause___1__h3188,
	       func_cause___1__h3220,
	       func_cause__h2689;
  wire [4 : 0] value__h3129, x1_avValue_op_addr_rs2addr__h3132;
  wire [3 : 0] IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79;
  wire [2 : 0] IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d120;
  wire [1 : 0] IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d110;
  wire IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d180,
       IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d194,
       decode_word32___d223,
       eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167,
       wr_csrs_whas_AND_registerfile_RDY_read_rs1_AND_ETC___d15,
       wr_resume_wfi_whas__86_AND_wr_resume_wfi_wget__ETC___d390;

  // action method rx_from_stage1_notEmpty
  assign CAN_FIRE_rx_from_stage1_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_from_stage1_notEmpty = 1'd1 ;

  // action method rx_from_stage1_first_deq_rdy
  assign CAN_FIRE_rx_from_stage1_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_from_stage1_first_deq_rdy = 1'd1 ;

  // action method rx_from_stage1_first
  assign CAN_FIRE_rx_from_stage1_first = 1'd1 ;
  assign WILL_FIRE_rx_from_stage1_first = 1'd1 ;

  // value method rx_from_stage1_deq_ena
  assign rx_from_stage1_deq_ena = CAN_FIRE_RL_decode_and_opfetch ;

  // action method tx_meta_to_stage3_notFull
  assign CAN_FIRE_tx_meta_to_stage3_notFull = 1'd1 ;
  assign WILL_FIRE_tx_meta_to_stage3_notFull = 1'd1 ;

  // action method tx_meta_to_stage3_enq_rdy
  assign CAN_FIRE_tx_meta_to_stage3_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_meta_to_stage3_enq_rdy = 1'd1 ;

  // value method tx_meta_to_stage3_enq_ena
  assign tx_meta_to_stage3_enq_ena = MUX_rg_rerun_write_1__SEL_2 ;

  // value method tx_meta_to_stage3_enq_data
  assign tx_meta_to_stage3_enq_data =
	     { rx_from_stage1_first_x[118:55],
	       func_cause__h2689,
	       decoder_func_32___d77[43:41],
	       IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79,
	       rx_from_stage1_first_x[22:21],
	       decoder_func_32___d77[64:60],
	       decoder_func_32___d77[48],
	       decode_word32___d223,
	       rx_from_stage1_first_x[12:0] } ;

  // action method tx_mtval_to_stage3_notFull
  assign CAN_FIRE_tx_mtval_to_stage3_notFull = 1'd1 ;
  assign WILL_FIRE_tx_mtval_to_stage3_notFull = 1'd1 ;

  // action method tx_mtval_to_stage3_enq_rdy
  assign CAN_FIRE_tx_mtval_to_stage3_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_mtval_to_stage3_enq_rdy = 1'd1 ;

  // value method tx_mtval_to_stage3_enq_ena
  assign tx_mtval_to_stage3_enq_ena = MUX_rg_rerun_write_1__SEL_2 ;

  // value method tx_mtval_to_stage3_enq_data
  assign tx_mtval_to_stage3_enq_data =
	     (IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 ==
	      4'd6 &&
	      func_cause__h2689 == 7'd12 &&
	      rx_from_stage1_first_x[13]) ?
	       mtval___1__h3820 :
	       IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d160 ;

  // value method mv_op1
  assign mv_op1 = rg_op1 ;

  // value method mv_op2
  assign mv_op2 = rg_op2 ;

  // value method mv_op3
  assign mv_op3 = rg_op3 ;

  // action method rx_inst_notEmpty
  assign CAN_FIRE_rx_inst_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_inst_notEmpty = 1'd1 ;

  // action method rx_inst_first_deq_rdy
  assign CAN_FIRE_rx_inst_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_inst_first_deq_rdy = 1'd1 ;

  // action method rx_inst_first
  assign CAN_FIRE_rx_inst_first = 1'd1 ;
  assign WILL_FIRE_rx_inst_first = 1'd1 ;

  // value method rx_inst_deq_ena
  assign rx_inst_deq_ena = CAN_FIRE_RL_decode_and_opfetch ;

  // action method tx_inst_notFull
  assign CAN_FIRE_tx_inst_notFull = 1'd1 ;
  assign WILL_FIRE_tx_inst_notFull = 1'd1 ;

  // action method tx_inst_enq_rdy
  assign CAN_FIRE_tx_inst_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_inst_enq_rdy = 1'd1 ;

  // value method tx_inst_enq_ena
  assign tx_inst_enq_ena = MUX_rg_rerun_write_1__SEL_2 ;

  // value method tx_inst_enq_data
  assign tx_inst_enq_data = rx_inst_first_x ;

  // action method commit_rd
  assign RDY_commit_rd = registerfile_RDY_commit_rd ;
  assign CAN_FIRE_commit_rd = registerfile_RDY_commit_rd ;
  assign WILL_FIRE_commit_rd = EN_commit_rd ;

  // action method csrs
  assign CAN_FIRE_csrs = 1'd1 ;
  assign WILL_FIRE_csrs = EN_csrs ;

  // action method clear_stall
  assign RDY_clear_stall = rg_stall ;
  assign CAN_FIRE_clear_stall = rg_stall ;
  assign WILL_FIRE_clear_stall = EN_clear_stall ;

  // action method update_eEpoch
  assign CAN_FIRE_update_eEpoch = 1'd1 ;
  assign WILL_FIRE_update_eEpoch = EN_update_eEpoch ;

  // action method update_wEpoch
  assign CAN_FIRE_update_wEpoch = 1'd1 ;
  assign WILL_FIRE_update_wEpoch = EN_update_wEpoch ;

  // action method ma_resume_wfi
  assign CAN_FIRE_ma_resume_wfi = 1'd1 ;
  assign WILL_FIRE_ma_resume_wfi = EN_ma_resume_wfi ;

  // submodule registerfile
  mkregisterfile #(.hartid(hartid)) registerfile(.CLK(CLK),
						 .RST_N(RST_N),
						 .commit_rd_c(registerfile_commit_rd_c),
						 .read_rs1_addr(registerfile_read_rs1_addr),
						 .read_rs1_rs1type(registerfile_read_rs1_rs1type),
						 .read_rs2_addr(registerfile_read_rs2_addr),
						 .read_rs2_rs2type(registerfile_read_rs2_rs2type),
						 .read_rs3_addr(registerfile_read_rs3_addr),
						 .EN_read_rs1(registerfile_EN_read_rs1),
						 .EN_read_rs2(registerfile_EN_read_rs2),
						 .EN_read_rs3(registerfile_EN_read_rs3),
						 .EN_commit_rd(registerfile_EN_commit_rd),
						 .read_rs1(registerfile_read_rs1),
						 .RDY_read_rs1(registerfile_RDY_read_rs1),
						 .read_rs2(registerfile_read_rs2),
						 .RDY_read_rs2(registerfile_RDY_read_rs2),
						 .read_rs3(registerfile_read_rs3),
						 .RDY_read_rs3(registerfile_RDY_read_rs3),
						 .RDY_commit_rd(registerfile_RDY_commit_rd));

  // rule RL_decode_and_opfetch
  assign CAN_FIRE_RL_decode_and_opfetch =
	     rx_from_stage1_first_deq_rdy_b && rx_inst_first_deq_rdy_b &&
	     wr_csrs_whas_AND_registerfile_RDY_read_rs1_AND_ETC___d15 &&
	     !rg_stall &&
	     rx_from_stage1_notEmpty_b &&
	     tx_mtval_to_stage3_notFull_b &&
	     !rg_wfi ;
  assign WILL_FIRE_RL_decode_and_opfetch = CAN_FIRE_RL_decode_and_opfetch ;

  // rule RL_rl_wait_for_interrupt
  assign CAN_FIRE_RL_rl_wait_for_interrupt = rg_wfi ;
  assign WILL_FIRE_RL_rl_wait_for_interrupt = rg_wfi ;

  // inputs to muxes for submodule ports
  assign MUX_rg_rerun_write_1__SEL_1 = EN_clear_stall && clear_stall_upd ;
  assign MUX_rg_rerun_write_1__SEL_2 =
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	     IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 !=
	     4'd7 ;
  assign MUX_rg_wfi_write_1__SEL_1 =
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	     IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d180 ;
  assign MUX_rg_rerun_write_1__VAL_2 =
	     !rg_rerun && decoder_func_32___d77[1] && !EN_update_eEpoch &&
	     !EN_update_wEpoch ;
  assign MUX_rg_stall_write_1__VAL_2 =
	     !EN_update_eEpoch && !EN_update_wEpoch ;

  // inlined wires
  assign rg_op1_port0__write_1 =
	     { value__h3129,
	       op1__h4604,
	       IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d110 } ;
  assign rg_op1_port1__read =
	     MUX_rg_rerun_write_1__SEL_2 ? rg_op1_port0__write_1 : rg_op1 ;
  assign rg_op1_EN_port1__write =
	     EN_commit_rd &&
	     commit_rd_commit[69:65] == rg_op1_port1__read[70:66] &&
	     (commit_rd_commit[0] && rg_op1_port1__read[1:0] == 2'd2 ||
	      !commit_rd_commit[0] && rg_op1_port1__read[70:66] != 5'd0 &&
	      rg_op1_port1__read[1:0] != 2'd2) ;
  assign rg_op1_port1__write_1 =
	     { rg_op1_port1__read[70:66],
	       commit_rd_commit[64:1],
	       rg_op1_port1__read[1:0] } ;
  assign rg_op1_port2__read =
	     rg_op1_EN_port1__write ?
	       rg_op1_port1__write_1 :
	       rg_op1_port1__read ;
  assign rg_op2_port0__write_1 =
	     { x1_avValue_op_addr_rs2addr__h3132,
	       op2__h4605,
	       IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d120 } ;
  assign rg_op2_port1__read =
	     MUX_rg_rerun_write_1__SEL_2 ? rg_op2_port0__write_1 : rg_op2 ;
  assign rg_op2_EN_port1__write =
	     EN_commit_rd &&
	     commit_rd_commit[69:65] == rg_op2_port1__read[71:67] &&
	     (commit_rd_commit[0] && rg_op2_port1__read[2:0] == 3'd4 ||
	      !commit_rd_commit[0] && rg_op2_port1__read[71:67] != 5'd0 &&
	      rg_op2_port1__read[2:0] != 3'd4) ;
  assign rg_op2_port1__write_1 =
	     { rg_op2_port1__read[71:67],
	       commit_rd_commit[64:1],
	       rg_op2_port1__read[2:0] } ;
  assign rg_op2_port2__read =
	     rg_op2_EN_port1__write ?
	       rg_op2_port1__write_1 :
	       rg_op2_port1__read ;
  assign rg_op3_port0__write_1 =
	     { op4__h4606,
	       decoder_func_32___d77[59:55],
	       decoder_func_32___d77[49] } ;
  assign rg_op3_port1__read =
	     MUX_rg_rerun_write_1__SEL_2 ? rg_op3_port0__write_1 : rg_op3 ;
  assign rg_op3_EN_port1__write =
	     EN_commit_rd &&
	     rg_op3_port1__read[5:1] == commit_rd_commit[69:65] &&
	     rg_op3_port1__read[0] &&
	     commit_rd_commit[0] ;
  assign rg_op3_port1__write_1 =
	     { commit_rd_commit[64:1], rg_op3_port1__read[5:0] } ;
  assign rg_op3_port2__read =
	     rg_op3_EN_port1__write ?
	       rg_op3_port1__write_1 :
	       rg_op3_port1__read ;

  // register eEpoch
  assign eEpoch_D_IN = ~eEpoch ;
  assign eEpoch_EN = EN_update_eEpoch ;

  // register rg_fencei_rerun
  assign rg_fencei_rerun_D_IN =
	     IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 ==
	     4'd1 &&
	     decoder_func_32___d77[43:41] == 3'd4 ;
  assign rg_fencei_rerun_EN = MUX_rg_rerun_write_1__SEL_2 ;

  // register rg_op1
  assign rg_op1_D_IN = rg_op1_port2__read ;
  assign rg_op1_EN = 1'b1 ;

  // register rg_op2
  assign rg_op2_D_IN = rg_op2_port2__read ;
  assign rg_op2_EN = 1'b1 ;

  // register rg_op3
  assign rg_op3_D_IN = rg_op3_port2__read ;
  assign rg_op3_EN = 1'b1 ;

  // register rg_rerun
  assign rg_rerun_D_IN =
	     !MUX_rg_rerun_write_1__SEL_1 && MUX_rg_rerun_write_1__VAL_2 ;
  assign rg_rerun_EN =
	     EN_clear_stall && clear_stall_upd ||
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	     IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 !=
	     4'd7 ;

  // register rg_sfence_rerun
  assign rg_sfence_rerun_D_IN =
	     IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 ==
	     4'd1 &&
	     decoder_func_32___d77[43:41] == 3'd5 ;
  assign rg_sfence_rerun_EN = MUX_rg_rerun_write_1__SEL_2 ;

  // register rg_stall
  assign rg_stall_D_IN =
	     !MUX_rg_rerun_write_1__SEL_1 && MUX_rg_stall_write_1__VAL_2 ;
  assign rg_stall_EN =
	     EN_clear_stall && clear_stall_upd ||
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	     IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 ==
	     4'd6 ;

  // register rg_wfi
  assign rg_wfi_D_IN = MUX_rg_wfi_write_1__SEL_1 ;
  assign rg_wfi_EN =
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	     IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d180 ||
	     rg_wfi &&
	     wr_resume_wfi_whas__86_AND_wr_resume_wfi_wget__ETC___d390 ;

  // register wEpoch
  assign wEpoch_D_IN = ~wEpoch ;
  assign wEpoch_EN = EN_update_wEpoch ;

  // submodule registerfile
  assign registerfile_commit_rd_c = commit_rd_commit ;
  assign registerfile_read_rs1_addr = x_wget_instruction__h2858[19:15] ;
  assign registerfile_read_rs1_rs1type =
	     IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d110 ==
	     2'd2 ;
  assign registerfile_read_rs2_addr = x_wget_instruction__h2858[24:20] ;
  assign registerfile_read_rs2_rs2type =
	     IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d120 ==
	     3'd4 ;
  assign registerfile_read_rs3_addr = x_wget_instruction__h2858[31:27] ;
  assign registerfile_EN_read_rs1 = MUX_rg_rerun_write_1__SEL_2 ;
  assign registerfile_EN_read_rs2 = MUX_rg_rerun_write_1__SEL_2 ;
  assign registerfile_EN_read_rs3 = MUX_rg_rerun_write_1__SEL_2 ;
  assign registerfile_EN_commit_rd = EN_commit_rd ;

  // remaining internal signals
  module_chk_interrupt instance_chk_interrupt_1(.chk_interrupt_prv(csrs_csr[144:143]),
						.chk_interrupt_mstatus(csrs_csr[75:12]),
						.chk_interrupt_mip(value__h2627),
						.chk_interrupt_mie(value__h2631),
						.chk_interrupt_mideleg(csrs_csr[11:0]),
						.chk_interrupt(chk_interrupt___d69));
  module_decoder_func_32 instance_decoder_func_32_2(.decoder_func_32_inst(x_wget_instruction__h2858),
						    .decoder_func_32_csrs(csrs_csr),
						    .decoder_func_32_compressed(rx_from_stage1_first_x[12]),
						    .decoder_func_32(decoder_func_32___d77));
  module_decode_word32 instance_decode_word32_0(.decode_word32_inst(x_wget_instruction__h2858),
						.decode_word32_misa_c(csrs_csr[81]),
						.decode_word32(decode_word32___d223));
  assign IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d110 =
	     (IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 ==
	      4'd6) ?
	       CASE_func_cause689_1_1_12_1_0__q1 :
	       decoder_func_32___d77[54:53] ;
  assign IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d120 =
	     (IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 ==
	      4'd6) ?
	       3'd0 :
	       decoder_func_32___d77[52:50] ;
  assign IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d160 =
	     (IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 ==
	      4'd6 &&
	      func_cause__h2689 == 7'd12) ?
	       rx_from_stage1_first_x[118:55] :
	       ((IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 ==
		 4'd6 &&
		 func_cause__h2689 == 7'd2) ?
		  mtval___1__h3839 :
		  64'd0) ;
  assign IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d180 =
	     IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 ==
	     4'd7 &&
	     !EN_update_eEpoch &&
	     !EN_update_wEpoch ;
  assign IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d194 =
	     IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 ==
	     4'd7 &&
	     (EN_update_eEpoch || EN_update_wEpoch) ;
  assign IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 =
	     (rg_rerun || chk_interrupt___d69[0] ||
	      rx_from_stage1_first_x[20]) ?
	       4'd6 :
	       decoder_func_32___d77[47:44] ;
  assign SEXT_decoder_func_32_7_BITS_40_TO_9_38___d239 =
	     { {32{decoder_func_32_7_BITS_40_TO_9__q2[31]}},
	       decoder_func_32_7_BITS_40_TO_9__q2 } ;
  assign _theResult_____1__h3662 = tx_mtval_to_stage3_enq_data ;
  assign _theResult___fst__h3186 =
	     chk_interrupt___d69[0] ?
	       func_cause___1__h3188 :
	       _theResult___fst__h3217 ;
  assign _theResult___fst__h3217 =
	     rx_from_stage1_first_x[20] ?
	       func_cause___1__h3220 :
	       decoder_func_32___d77[8:2] ;
  assign decoder_func_32_7_BITS_40_TO_9__q2 = decoder_func_32___d77[40:9] ;
  assign eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 =
	     { eEpoch, wEpoch } == rx_from_stage1_first_x[22:21] ;
  assign func_cause___1__h3160 =
	     rg_fencei_rerun ? 7'd24 : (rg_sfence_rerun ? 7'd25 : 7'd23) ;
  assign func_cause___1__h3188 = { 1'd0, chk_interrupt___d69[6:1] } ;
  assign func_cause___1__h3220 = { 1'd0, rx_from_stage1_first_x[19:14] } ;
  assign func_cause__h2689 =
	     rg_rerun ? func_cause___1__h3160 : _theResult___fst__h3186 ;
  assign mtval___1__h3820 = rx_from_stage1_first_x[118:55] + 64'd2 ;
  assign mtval___1__h3839 = { 32'd0, rx_from_stage1_first_x[54:23] } ;
  assign op1__h4604 =
	     (IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d110 ==
	      2'd0 &&
	      value__h3129 == 5'd0) ?
	       64'd0 :
	       registerfile_read_rs1 ;
  assign op4__h4606 =
	     decoder_func_32___d77[49] ?
	       registerfile_read_rs3 :
	       SEXT_decoder_func_32_7_BITS_40_TO_9_38___d239 ;
  assign value__h2627 = csrs_csr[142:124] ;
  assign value__h2631 = csrs_csr[123:105] ;
  assign value__h3129 =
	     (IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 ==
	      4'd6) ?
	       5'd0 :
	       decoder_func_32___d77[74:70] ;
  assign wr_csrs_whas_AND_registerfile_RDY_read_rs1_AND_ETC___d15 =
	     EN_csrs && registerfile_RDY_read_rs1 &&
	     registerfile_RDY_read_rs2 &&
	     registerfile_RDY_read_rs3 &&
	     tx_meta_to_stage3_enq_rdy_b &&
	     tx_mtval_to_stage3_enq_rdy_b &&
	     tx_inst_enq_rdy_b ;
  assign wr_resume_wfi_whas__86_AND_wr_resume_wfi_wget__ETC___d390 =
	     EN_ma_resume_wfi && ma_resume_wfi_w || EN_update_wEpoch ||
	     EN_update_eEpoch ;
  assign x1_avValue_op_addr_rs2addr__h3132 =
	     (IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 ==
	      4'd6) ?
	       5'd0 :
	       decoder_func_32___d77[69:65] ;
  assign x_wget_instruction__h2858 = rx_from_stage1_first_x[54:23] ;
  always@(func_cause__h2689)
  begin
    case (func_cause__h2689)
      7'd1, 7'd12: CASE_func_cause689_1_1_12_1_0__q1 = 2'd1;
      default: CASE_func_cause689_1_1_12_1_0__q1 = 2'd0;
    endcase
  end
  always@(IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d120 or
	  x1_avValue_op_addr_rs2addr__h3132 or
	  registerfile_read_rs2 or
	  SEXT_decoder_func_32_7_BITS_40_TO_9_38___d239)
  begin
    case (IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d120)
      3'd1: op2__h4605 = SEXT_decoder_func_32_7_BITS_40_TO_9_38___d239;
      3'd2: op2__h4605 = 64'd4;
      3'd3: op2__h4605 = 64'd2;
      default: op2__h4605 =
		   (x1_avValue_op_addr_rs2addr__h3132 == 5'd0 &&
		    IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d120 ==
		    3'd0) ?
		     64'd0 :
		     registerfile_read_rs2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        eEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fencei_rerun <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_op1 <= `BSV_ASSIGNMENT_DELAY 71'd0;
	rg_op2 <= `BSV_ASSIGNMENT_DELAY 72'd0;
	rg_op3 <= `BSV_ASSIGNMENT_DELAY 70'd0;
	rg_rerun <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_sfence_rerun <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_stall <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_wfi <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (eEpoch_EN) eEpoch <= `BSV_ASSIGNMENT_DELAY eEpoch_D_IN;
	if (rg_fencei_rerun_EN)
	  rg_fencei_rerun <= `BSV_ASSIGNMENT_DELAY rg_fencei_rerun_D_IN;
	if (rg_op1_EN) rg_op1 <= `BSV_ASSIGNMENT_DELAY rg_op1_D_IN;
	if (rg_op2_EN) rg_op2 <= `BSV_ASSIGNMENT_DELAY rg_op2_D_IN;
	if (rg_op3_EN) rg_op3 <= `BSV_ASSIGNMENT_DELAY rg_op3_D_IN;
	if (rg_rerun_EN) rg_rerun <= `BSV_ASSIGNMENT_DELAY rg_rerun_D_IN;
	if (rg_sfence_rerun_EN)
	  rg_sfence_rerun <= `BSV_ASSIGNMENT_DELAY rg_sfence_rerun_D_IN;
	if (rg_stall_EN) rg_stall <= `BSV_ASSIGNMENT_DELAY rg_stall_D_IN;
	if (rg_wfi_EN) rg_wfi <= `BSV_ASSIGNMENT_DELAY rg_wfi_D_IN;
	if (wEpoch_EN) wEpoch <= `BSV_ASSIGNMENT_DELAY wEpoch_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    eEpoch = 1'h0;
    rg_fencei_rerun = 1'h0;
    rg_op1 = 71'h2AAAAAAAAAAAAAAAAA;
    rg_op2 = 72'hAAAAAAAAAAAAAAAAAA;
    rg_op3 = 70'h2AAAAAAAAAAAAAAAAA;
    rg_rerun = 1'h0;
    rg_sfence_rerun = 1'h0;
    rg_stall = 1'h0;
    rg_wfi = 1'h0;
    wEpoch = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d28 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d29 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d30 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d37 =
	(TASK_testplusargs___d28 ||
	 TASK_testplusargs___d29 && TASK_testplusargs___d30) &&
	csrs_csr[144:143] == 2'd3;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d39 =
	(TASK_testplusargs___d28 ||
	 TASK_testplusargs___d29 && TASK_testplusargs___d30) &&
	csrs_csr[144:143] == 2'd1;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d43 =
	(TASK_testplusargs___d28 ||
	 TASK_testplusargs___d29 && TASK_testplusargs___d30) &&
	csrs_csr[144:143] != 2'd3 &&
	csrs_csr[144:143] != 2'd1;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  v__h2526 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("[%10d", v__h2526, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("[%2d]STAGE2: csrs:", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("CSRtoDecode { ", "prv: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d37)
	$write("Machine");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d39)
	$write("Supervisor");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d43)
	$write("User");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(", ", "csr_mip: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("'h%h", csrs_csr[142:124]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(", ", "csr_mie: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("'h%h", csrs_csr[123:105]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(", ", "csr_misa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("'h%h", csrs_csr[104:79]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(", ", "frm: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("'h%h", csrs_csr[78:76]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(", ", "csr_mstatus: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("'h%h", csrs_csr[75:12]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(", ", "csr_mideleg: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("'h%h", csrs_csr[11:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d50 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d51 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d52 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  v__h2781 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d50 ||
	   TASK_testplusargs___d51 && TASK_testplusargs___d52))
	$write("[%10d", v__h2781, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d50 ||
	   TASK_testplusargs___d51 && TASK_testplusargs___d52))
	$write("[%2d]STAGE2 : PC:%h Instruction:%h",
	       hartid,
	       rx_from_stage1_first_x[118:55],
	       rx_from_stage1_first_x[54:23]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d50 ||
	   TASK_testplusargs___d51 && TASK_testplusargs___d52))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d62 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d63 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d64 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  v__h3066 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("[%10d", v__h3066, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("[%2d]STAGE2 : OpAddr: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("OpAddr { ", "rs1addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("'h%h", value__h3129);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write(", ", "rs2addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("'h%h", x1_avValue_op_addr_rs2addr__h3132);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write(", ", "rd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("'h%h", decoder_func_32___d77[64:60]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write(", ", "rs3addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("'h%h", decoder_func_32___d77[59:55], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d87 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d88 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d89 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d112 =
	(TASK_testplusargs___d87 ||
	 TASK_testplusargs___d88 && TASK_testplusargs___d89) &&
	IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d110 == 2'd2;
    TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d114 =
	(TASK_testplusargs___d87 ||
	 TASK_testplusargs___d88 && TASK_testplusargs___d89) &&
	IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d110 == 2'd0;
    TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d118 =
	(TASK_testplusargs___d87 ||
	 TASK_testplusargs___d88 && TASK_testplusargs___d89) &&
	IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d110 != 2'd2 &&
	IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d110 != 2'd0;
    TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d122 =
	(TASK_testplusargs___d87 ||
	 TASK_testplusargs___d88 && TASK_testplusargs___d89) &&
	IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d120 == 3'd4;
    TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d124 =
	(TASK_testplusargs___d87 ||
	 TASK_testplusargs___d88 && TASK_testplusargs___d89) &&
	IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d120 == 3'd0;
    TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d126 =
	(TASK_testplusargs___d87 ||
	 TASK_testplusargs___d88 && TASK_testplusargs___d89) &&
	IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d120 == 3'd1;
    TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d128 =
	(TASK_testplusargs___d87 ||
	 TASK_testplusargs___d88 && TASK_testplusargs___d89) &&
	IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d120 == 3'd2;
    TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d136 =
	(TASK_testplusargs___d87 ||
	 TASK_testplusargs___d88 && TASK_testplusargs___d89) &&
	IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d120 != 3'd4 &&
	IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d120 != 3'd0 &&
	IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d120 != 3'd1 &&
	IF_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_ETC___d120 != 3'd2;
    TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d138 =
	(TASK_testplusargs___d87 ||
	 TASK_testplusargs___d88 && TASK_testplusargs___d89) &&
	decoder_func_32___d77[49];
    TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d140 =
	(TASK_testplusargs___d87 ||
	 TASK_testplusargs___d88 && TASK_testplusargs___d89) &&
	!decoder_func_32___d77[49];
    TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d142 =
	(TASK_testplusargs___d87 ||
	 TASK_testplusargs___d88 && TASK_testplusargs___d89) &&
	decoder_func_32___d77[48];
    TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d144 =
	(TASK_testplusargs___d87 ||
	 TASK_testplusargs___d88 && TASK_testplusargs___d89) &&
	!decoder_func_32___d77[48];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  v__h3447 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d87 ||
	   TASK_testplusargs___d88 && TASK_testplusargs___d89))
	$write("[%10d", v__h3447, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d87 ||
	   TASK_testplusargs___d88 && TASK_testplusargs___d89))
	$write("[%2d]STAGE2 : OpType: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d87 ||
	   TASK_testplusargs___d88 && TASK_testplusargs___d89))
	$write("OpType { ", "rs1type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d112)
	$write("FloatingRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d114)
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d118)
	$write("PC");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d87 ||
	   TASK_testplusargs___d88 && TASK_testplusargs___d89))
	$write(", ", "rs2type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d122)
	$write("FloatingRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d124)
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d126)
	$write("Immediate");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d128)
	$write("Constant4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d136)
	$write("Constant2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d87 ||
	   TASK_testplusargs___d88 && TASK_testplusargs___d89))
	$write(", ", "rs3type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d138)
	$write("FRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d140)
	$write("IRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d87 ||
	   TASK_testplusargs___d88 && TASK_testplusargs___d89))
	$write(", ", "rdtype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d142)
	$write("FRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_7_OR_TASK_testplusargs_8_AND_ETC___d144)
	$write("IRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d87 ||
	   TASK_testplusargs___d88 && TASK_testplusargs___d89))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d87 ||
	   TASK_testplusargs___d88 && TASK_testplusargs___d89))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d145 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d146 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d147 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  v__h3729 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d145 ||
	   TASK_testplusargs___d146 && TASK_testplusargs___d147))
	$write("[%10d", v__h3729, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d145 ||
	   TASK_testplusargs___d146 && TASK_testplusargs___d147))
	$write("[%2d]STAGE2: BadAddress(MTVAL): %h",
	       hartid,
	       _theResult_____1__h3662);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d145 ||
	   TASK_testplusargs___d146 && TASK_testplusargs___d147))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d180)
	begin
	  TASK_testplusargs___d182 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d180)
	begin
	  TASK_testplusargs___d183 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d180)
	begin
	  TASK_testplusargs___d184 = $test$plusargs("l0");
	  #0;
	end
    NOT_wr_flush_from_exe_whas__69_70_OR_NOT_wr_fl_ETC___d187 =
	!EN_update_eEpoch && !EN_update_wEpoch &&
	(TASK_testplusargs___d182 ||
	 TASK_testplusargs___d183 && TASK_testplusargs___d184);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d180)
	begin
	  v__h4176 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 == 4'd7 &&
	  NOT_wr_flush_from_exe_whas__69_70_OR_NOT_wr_fl_ETC___d187)
	$write("[%10d", v__h4176, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 == 4'd7 &&
	  NOT_wr_flush_from_exe_whas__69_70_OR_NOT_wr_fl_ETC___d187)
	$write("[%2d]STAGE2 : Encountered WFI", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 == 4'd7 &&
	  NOT_wr_flush_from_exe_whas__69_70_OR_NOT_wr_fl_ETC___d187)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d194)
	begin
	  TASK_testplusargs___d196 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d194)
	begin
	  TASK_testplusargs___d197 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d194)
	begin
	  TASK_testplusargs___d198 = $test$plusargs("l0");
	  #0;
	end
    wr_flush_from_exe_whas__69_AND_wr_flush_from_e_ETC___d201 =
	(EN_update_eEpoch || EN_update_wEpoch) &&
	(TASK_testplusargs___d196 ||
	 TASK_testplusargs___d197 && TASK_testplusargs___d198);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d194)
	begin
	  v__h4350 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 == 4'd7 &&
	  wr_flush_from_exe_whas__69_AND_wr_flush_from_e_ETC___d201)
	$write("[%10d", v__h4350, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 == 4'd7 &&
	  wr_flush_from_exe_whas__69_AND_wr_flush_from_e_ETC___d201)
	$write("[%2d]STAGE2 : Dropping WFI", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 == 4'd7 &&
	  wr_flush_from_exe_whas__69_AND_wr_flush_from_e_ETC___d201)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7)
	begin
	  TASK_testplusargs___d252 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7)
	begin
	  TASK_testplusargs___d253 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7)
	begin
	  TASK_testplusargs___d254 = $test$plusargs("l1");
	  #0;
	end
    NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257 =
	IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254);
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d261 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	decoder_func_32___d77[43:41] == 3'd0;
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d265 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	decoder_func_32___d77[43:41] == 3'd1;
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d269 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	decoder_func_32___d77[43:41] == 3'd3;
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d272 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	decoder_func_32___d77[43:41] == 3'd4;
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d276 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	decoder_func_32___d77[43:41] == 3'd2;
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d288 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	decoder_func_32___d77[43:41] != 3'd0 &&
	decoder_func_32___d77[43:41] != 3'd1 &&
	decoder_func_32___d77[43:41] != 3'd3 &&
	decoder_func_32___d77[43:41] != 3'd4 &&
	decoder_func_32___d77[43:41] != 3'd2;
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d292 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 == 4'd0;
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d294 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 == 4'd1;
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d297 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 == 4'd2;
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d300 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 == 4'd3;
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d303 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 == 4'd4;
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d306 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 == 4'd5;
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d308 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 == 4'd6;
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d311 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 == 4'd8;
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d331 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	decoder_func_32___d77[48];
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d328 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd0 &&
	IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd1 &&
	IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd2 &&
	IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd3 &&
	IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd4 &&
	IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd5 &&
	IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd6 &&
	IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd8;
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d334 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	!decoder_func_32___d77[48];
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d337 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	decode_word32___d223;
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d341 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	!decode_word32___d223;
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d346 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	!rx_from_stage1_first_x[12];
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d351 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	rx_from_stage1_first_x[12];
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d359 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	!rx_from_stage1_first_x[9];
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d363 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	rx_from_stage1_first_x[9];
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d369 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	!rx_from_stage1_first_x[8];
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d373 =
	(TASK_testplusargs___d252 ||
	 TASK_testplusargs___d253 && TASK_testplusargs___d254) &&
	rx_from_stage1_first_x[8];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7)
	begin
	  v__h5404 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write("[%10d", v__h5404, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write("[%2d]STAGE2: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write("Stage3Meta { ", "pc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write("'h%h", rx_from_stage1_first_x[118:55]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write(", ", "funct: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write("'h%h", func_cause__h2689);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write(", ", "memaccess: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d261)
	$write("Load");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d265)
	$write("Store");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d269)
	$write("Fence");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d272)
	$write("FenceI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d276)
	$write("Atomic");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d288)
	$write("SFence");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write(", ", "inst_type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d292)
	$write("ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d294)
	$write("MEMORY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d297)
	$write("BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d300)
	$write("JAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d303)
	$write("JALR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d306)
	$write("SYSTEM_INSTR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d308)
	$write("TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d311)
	$write("FLOAT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d328)
	$write("MULDIV");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write("'h%h", rx_from_stage1_first_x[22:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write(", ", "rd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write("'h%h", decoder_func_32___d77[64:60]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write(", ", "rdtype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d331)
	$write("FRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d334)
	$write("IRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write(", ", "word32: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d337)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d341)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write(", ", "compressed: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d346)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d351)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write(", ", "btbresponse: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write("BTBResponse { ", "prediction: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write("'h%h", rx_from_stage1_first_x[11:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write(", ", "btbhit: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d359)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d363)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write(", ", "hi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d369)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_OR_IF_ETC___d79 != 4'd7 &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d373)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write(", ", "history: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write("'h%h", rx_from_stage1_first_x[7:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_9_BIT_0_0_O_ETC___d257)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  !eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167)
	begin
	  TASK_testplusargs___d379 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  !eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167)
	begin
	  TASK_testplusargs___d380 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  !eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167)
	begin
	  TASK_testplusargs___d381 = $test$plusargs("l0");
	  #0;
	end
    NOT_eEpoch_read__62_CONCAT_wEpoch_read__63_64__ETC___d384 =
	!eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167 &&
	(TASK_testplusargs___d379 ||
	 TASK_testplusargs___d380 && TASK_testplusargs___d381);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  !eEpoch_read__62_CONCAT_wEpoch_read__63_64_EQ_I_ETC___d167)
	begin
	  v__h3963 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  NOT_eEpoch_read__62_CONCAT_wEpoch_read__63_64__ETC___d384)
	$write("[%10d", v__h3963, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  NOT_eEpoch_read__62_CONCAT_wEpoch_read__63_64__ETC___d384)
	$write("[%2d]STAGE2 : Dropping Instruction due to epoch mis - match",
	       hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  NOT_eEpoch_read__62_CONCAT_wEpoch_read__63_64__ETC___d384)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d407 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d408 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d409 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_07_OR_TASK_testplusargs_08_A_ETC___d416 =
	(TASK_testplusargs___d407 ||
	 TASK_testplusargs___d408 && TASK_testplusargs___d409) &&
	commit_rd_commit[0];
    TASK_testplusargs_07_OR_TASK_testplusargs_08_A_ETC___d418 =
	(TASK_testplusargs___d407 ||
	 TASK_testplusargs___d408 && TASK_testplusargs___d409) &&
	!commit_rd_commit[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  v__h6641 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d407 ||
	   TASK_testplusargs___d408 && TASK_testplusargs___d409))
	$write("[%10d", v__h6641, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d407 ||
	   TASK_testplusargs___d408 && TASK_testplusargs___d409))
	$write("[%2d]STAGE2: Commit: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d407 ||
	   TASK_testplusargs___d408 && TASK_testplusargs___d409))
	$write("CommitData { ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d407 ||
	   TASK_testplusargs___d408 && TASK_testplusargs___d409))
	$write("'h%h", commit_rd_commit[69:65]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d407 ||
	   TASK_testplusargs___d408 && TASK_testplusargs___d409))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d407 ||
	   TASK_testplusargs___d408 && TASK_testplusargs___d409))
	$write("'h%h", commit_rd_commit[64:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d407 ||
	   TASK_testplusargs___d408 && TASK_testplusargs___d409))
	$write(", ", "rdtype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_07_OR_TASK_testplusargs_08_A_ETC___d416)
	$write("FRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_07_OR_TASK_testplusargs_08_A_ETC___d418)
	$write("IRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d407 ||
	   TASK_testplusargs___d408 && TASK_testplusargs___d409))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d407 ||
	   TASK_testplusargs___d408 && TASK_testplusargs___d409))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d419 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d420 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d421 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_19_OR_TASK_testplusargs_20_A_ETC___d430 =
	(TASK_testplusargs___d419 ||
	 TASK_testplusargs___d420 && TASK_testplusargs___d421) &&
	rg_op1_port1__read[1:0] == 2'd2;
    TASK_testplusargs_19_OR_TASK_testplusargs_20_A_ETC___d432 =
	(TASK_testplusargs___d419 ||
	 TASK_testplusargs___d420 && TASK_testplusargs___d421) &&
	rg_op1_port1__read[1:0] == 2'd0;
    TASK_testplusargs_19_OR_TASK_testplusargs_20_A_ETC___d436 =
	(TASK_testplusargs___d419 ||
	 TASK_testplusargs___d420 && TASK_testplusargs___d421) &&
	rg_op1_port1__read[1:0] != 2'd2 &&
	rg_op1_port1__read[1:0] != 2'd0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  v__h6800 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d419 ||
	   TASK_testplusargs___d420 && TASK_testplusargs___d421))
	$write("[%10d", v__h6800, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d419 ||
	   TASK_testplusargs___d420 && TASK_testplusargs___d421))
	$write("[%2d]STAGE2: RgOp1: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d419 ||
	   TASK_testplusargs___d420 && TASK_testplusargs___d421))
	$write("RFOp1 { ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d419 ||
	   TASK_testplusargs___d420 && TASK_testplusargs___d421))
	$write("'h%h", rg_op1_port1__read[70:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d419 ||
	   TASK_testplusargs___d420 && TASK_testplusargs___d421))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d419 ||
	   TASK_testplusargs___d420 && TASK_testplusargs___d421))
	$write("'h%h", rg_op1_port1__read[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d419 ||
	   TASK_testplusargs___d420 && TASK_testplusargs___d421))
	$write(", ", "optype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_19_OR_TASK_testplusargs_20_A_ETC___d430)
	$write("FloatingRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_19_OR_TASK_testplusargs_20_A_ETC___d432)
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_19_OR_TASK_testplusargs_20_A_ETC___d436)
	$write("PC");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d419 ||
	   TASK_testplusargs___d420 && TASK_testplusargs___d421))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d419 ||
	   TASK_testplusargs___d420 && TASK_testplusargs___d421))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d437 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d438 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d439 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_37_OR_TASK_testplusargs_38_A_ETC___d448 =
	(TASK_testplusargs___d437 ||
	 TASK_testplusargs___d438 && TASK_testplusargs___d439) &&
	rg_op2_port1__read[2:0] == 3'd4;
    TASK_testplusargs_37_OR_TASK_testplusargs_38_A_ETC___d450 =
	(TASK_testplusargs___d437 ||
	 TASK_testplusargs___d438 && TASK_testplusargs___d439) &&
	rg_op2_port1__read[2:0] == 3'd0;
    TASK_testplusargs_37_OR_TASK_testplusargs_38_A_ETC___d452 =
	(TASK_testplusargs___d437 ||
	 TASK_testplusargs___d438 && TASK_testplusargs___d439) &&
	rg_op2_port1__read[2:0] == 3'd1;
    TASK_testplusargs_37_OR_TASK_testplusargs_38_A_ETC___d454 =
	(TASK_testplusargs___d437 ||
	 TASK_testplusargs___d438 && TASK_testplusargs___d439) &&
	rg_op2_port1__read[2:0] == 3'd2;
    TASK_testplusargs_37_OR_TASK_testplusargs_38_A_ETC___d462 =
	(TASK_testplusargs___d437 ||
	 TASK_testplusargs___d438 && TASK_testplusargs___d439) &&
	rg_op2_port1__read[2:0] != 3'd4 &&
	rg_op2_port1__read[2:0] != 3'd0 &&
	rg_op2_port1__read[2:0] != 3'd1 &&
	rg_op2_port1__read[2:0] != 3'd2;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  v__h6984 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d437 ||
	   TASK_testplusargs___d438 && TASK_testplusargs___d439))
	$write("[%10d", v__h6984, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d437 ||
	   TASK_testplusargs___d438 && TASK_testplusargs___d439))
	$write("[%2d]STAGE2: RgOp2: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d437 ||
	   TASK_testplusargs___d438 && TASK_testplusargs___d439))
	$write("RFOp2 { ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d437 ||
	   TASK_testplusargs___d438 && TASK_testplusargs___d439))
	$write("'h%h", rg_op2_port1__read[71:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d437 ||
	   TASK_testplusargs___d438 && TASK_testplusargs___d439))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d437 ||
	   TASK_testplusargs___d438 && TASK_testplusargs___d439))
	$write("'h%h", rg_op2_port1__read[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d437 ||
	   TASK_testplusargs___d438 && TASK_testplusargs___d439))
	$write(", ", "optype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_37_OR_TASK_testplusargs_38_A_ETC___d448)
	$write("FloatingRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_37_OR_TASK_testplusargs_38_A_ETC___d450)
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_37_OR_TASK_testplusargs_38_A_ETC___d452)
	$write("Immediate");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_37_OR_TASK_testplusargs_38_A_ETC___d454)
	$write("Constant4");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_37_OR_TASK_testplusargs_38_A_ETC___d462)
	$write("Constant2");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d437 ||
	   TASK_testplusargs___d438 && TASK_testplusargs___d439))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d437 ||
	   TASK_testplusargs___d438 && TASK_testplusargs___d439))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkstage2

