//
// Generated by Bluespec Compiler, version 2022.01-5-ge3edf4b1 (build e3edf4b1)
//
// On Fri Apr 15 12:47:25 EDT 2022
//
//
// Ports:
// Name                         I/O  size props
// mav_check_sb_hit               O   128
// RDY_mav_check_sb_hit           O     1 const
// RDY_ma_allocate_entry          O     1
// mav_store_to_commit            O   168
// RDY_mav_store_to_commit        O     1
// mv_sb_full                     O     1
// RDY_mv_sb_full                 O     1 const
// mv_sb_empty                    O     1
// RDY_mv_sb_empty                O     1 const
// mv_cacheable_store             O     1
// RDY_mv_cacheable_store         O     1 const
// mv_sb_busy                     O     1 reg
// RDY_mv_sb_busy                 O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// mav_check_sb_hit_phyaddr       I    32
// ma_allocate_entry_address      I    32
// ma_allocate_entry_data         I    64
// ma_allocate_entry_epochs       I     1
// ma_allocate_entry_fbindex      I     3
// ma_allocate_entry_size         I     2
// ma_allocate_entry_io           I     1
// ma_allocate_entry_atomic       I     1
// ma_allocate_entry_read_data    I    64 reg
// ma_allocate_entry_atomic_op    I     5 reg
// EN_ma_allocate_entry           I     1
// EN_mav_check_sb_hit            I     1 unused
// EN_mav_store_to_commit         I     1
//
// Combinational paths from inputs to outputs:
//   mav_check_sb_hit_phyaddr -> mav_check_sb_hit
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkstorebuffer(CLK,
		     RST_N,

		     mav_check_sb_hit_phyaddr,
		     EN_mav_check_sb_hit,
		     mav_check_sb_hit,
		     RDY_mav_check_sb_hit,

		     ma_allocate_entry_address,
		     ma_allocate_entry_data,
		     ma_allocate_entry_epochs,
		     ma_allocate_entry_fbindex,
		     ma_allocate_entry_size,
		     ma_allocate_entry_io,
		     ma_allocate_entry_atomic,
		     ma_allocate_entry_read_data,
		     ma_allocate_entry_atomic_op,
		     EN_ma_allocate_entry,
		     RDY_ma_allocate_entry,

		     EN_mav_store_to_commit,
		     mav_store_to_commit,
		     RDY_mav_store_to_commit,

		     mv_sb_full,
		     RDY_mv_sb_full,

		     mv_sb_empty,
		     RDY_mv_sb_empty,

		     mv_cacheable_store,
		     RDY_mv_cacheable_store,

		     mv_sb_busy,
		     RDY_mv_sb_busy);
  parameter [31 : 0] id = 32'b0;
  input  CLK;
  input  RST_N;

  // actionvalue method mav_check_sb_hit
  input  [31 : 0] mav_check_sb_hit_phyaddr;
  input  EN_mav_check_sb_hit;
  output [127 : 0] mav_check_sb_hit;
  output RDY_mav_check_sb_hit;

  // action method ma_allocate_entry
  input  [31 : 0] ma_allocate_entry_address;
  input  [63 : 0] ma_allocate_entry_data;
  input  ma_allocate_entry_epochs;
  input  [2 : 0] ma_allocate_entry_fbindex;
  input  [1 : 0] ma_allocate_entry_size;
  input  ma_allocate_entry_io;
  input  ma_allocate_entry_atomic;
  input  [63 : 0] ma_allocate_entry_read_data;
  input  [4 : 0] ma_allocate_entry_atomic_op;
  input  EN_ma_allocate_entry;
  output RDY_ma_allocate_entry;

  // actionvalue method mav_store_to_commit
  input  EN_mav_store_to_commit;
  output [167 : 0] mav_store_to_commit;
  output RDY_mav_store_to_commit;

  // value method mv_sb_full
  output mv_sb_full;
  output RDY_mv_sb_full;

  // value method mv_sb_empty
  output mv_sb_empty;
  output RDY_mv_sb_empty;

  // value method mv_cacheable_store
  output mv_cacheable_store;
  output RDY_mv_cacheable_store;

  // value method mv_sb_busy
  output mv_sb_busy;
  output RDY_mv_sb_busy;

  // signals for module outputs
  reg mv_cacheable_store;
  wire [167 : 0] mav_store_to_commit;
  wire [127 : 0] mav_check_sb_hit;
  wire RDY_ma_allocate_entry,
       RDY_mav_check_sb_hit,
       RDY_mav_store_to_commit,
       RDY_mv_cacheable_store,
       RDY_mv_sb_busy,
       RDY_mv_sb_empty,
       RDY_mv_sb_full,
       mv_sb_busy,
       mv_sb_empty,
       mv_sb_full;

  // register rg_atomic_op
  reg [4 : 0] rg_atomic_op;
  wire [4 : 0] rg_atomic_op_D_IN;
  wire rg_atomic_op_EN;

  // register rg_atomic_readword
  reg [63 : 0] rg_atomic_readword;
  wire [63 : 0] rg_atomic_readword_D_IN;
  wire rg_atomic_readword_EN;

  // register rg_atomic_tail
  reg rg_atomic_tail;
  wire rg_atomic_tail_D_IN, rg_atomic_tail_EN;

  // register rg_head
  reg rg_head;
  wire rg_head_D_IN, rg_head_EN;

  // register rg_sb_busy
  reg rg_sb_busy;
  wire rg_sb_busy_D_IN, rg_sb_busy_EN;

  // register rg_tail
  reg rg_tail;
  wire rg_tail_D_IN, rg_tail_EN;

  // register v_sb_meta_0
  reg [166 : 0] v_sb_meta_0;
  wire [166 : 0] v_sb_meta_0_D_IN;
  wire v_sb_meta_0_EN;

  // register v_sb_meta_1
  reg [166 : 0] v_sb_meta_1;
  wire [166 : 0] v_sb_meta_1_D_IN;
  wire v_sb_meta_1_EN;

  // register v_sb_valid_0
  reg v_sb_valid_0;
  wire v_sb_valid_0_D_IN, v_sb_valid_0_EN;

  // register v_sb_valid_1
  reg v_sb_valid_1;
  wire v_sb_valid_1_D_IN, v_sb_valid_1_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_perform_atomic,
       CAN_FIRE_RL_rl_print_stats,
       CAN_FIRE_ma_allocate_entry,
       CAN_FIRE_mav_check_sb_hit,
       CAN_FIRE_mav_store_to_commit,
       WILL_FIRE_RL_rl_perform_atomic,
       WILL_FIRE_RL_rl_print_stats,
       WILL_FIRE_ma_allocate_entry,
       WILL_FIRE_mav_check_sb_hit,
       WILL_FIRE_mav_store_to_commit;

  // inputs to muxes for submodule ports
  wire [166 : 0] MUX_v_sb_meta_0_write_1__VAL_1,
		 MUX_v_sb_meta_0_write_1__VAL_2;
  wire MUX_v_sb_meta_0_write_1__SEL_1,
       MUX_v_sb_meta_0_write_1__SEL_2,
       MUX_v_sb_meta_1_write_1__SEL_1,
       MUX_v_sb_meta_1_write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d99;
  reg TASK_testplusargs___d100;
  reg TASK_testplusargs___d101;
  reg [63 : 0] v__h2288;
  reg TASK_testplusargs___d108;
  reg TASK_testplusargs___d109;
  reg TASK_testplusargs___d110;
  reg [63 : 0] v__h2477;
  reg TASK_testplusargs___d1;
  reg TASK_testplusargs___d2;
  reg TASK_testplusargs___d3;
  reg [63 : 0] v__h591;
  reg TASK_testplusargs___d246;
  reg TASK_testplusargs___d247;
  reg TASK_testplusargs___d248;
  reg [63 : 0] v__h21249;
  reg TASK_testplusargs___d232;
  reg TASK_testplusargs___d233;
  reg TASK_testplusargs___d234;
  reg [63 : 0] v__h20870;
  reg TASK_testplusargs___d93;
  reg TASK_testplusargs___d94;
  reg TASK_testplusargs___d95;
  reg [63 : 0] v__h2115;
  reg TASK_testplusargs_9_OR_TASK_testplusargs_00_AN_ETC___d105;
  reg TASK_testplusargs_9_OR_TASK_testplusargs_00_AN_ETC___d107;
  reg TASK_testplusargs_08_OR_TASK_testplusargs_09_A_ETC___d114;
  reg TASK_testplusargs_08_OR_TASK_testplusargs_09_A_ETC___d116;
  reg TASK_testplusargs_32_OR_TASK_testplusargs_33_A_ETC___d238;
  reg TASK_testplusargs_32_OR_TASK_testplusargs_33_A_ETC___d240;
  reg TASK_testplusargs_46_OR_TASK_testplusargs_47_A_ETC___d254;
  reg TASK_testplusargs_46_OR_TASK_testplusargs_47_A_ETC___d262;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] IF_rg_atomic_op_4_BITS_3_TO_0_6_EQ_0b11_7_THEN_ETC___d65,
	       rs2__h1582,
	       temp__h18600,
	       x__h1997,
	       x__h20760,
	       x__h21391,
	       x__h21394,
	       x__h2774,
	       y__h2773;
  reg [31 : 0] SEL_ARR_v_sb_meta_0_8_BITS_166_TO_135_9_v_sb_m_ETC___d255,
	       _s_addr__h1232;
  reg [2 : 0] SEL_ARR_v_sb_meta_0_8_BITS_69_TO_67_3_v_sb_met_ETC___d258,
	      _s_fbindex__h1234;
  reg [1 : 0] SEL_ARR_v_sb_meta_0_8_BITS_1_TO_0_5_v_sb_meta__ETC___d260,
	      _s_size__h1237;
  reg CASE_rg_atomic_tail_0_v_sb_meta_0_BIT_2_1_v_sb_ETC__q3,
      CASE_rg_head_0_v_sb_meta_0_BIT_2_1_v_sb_meta_1_ETC__q4,
      CASE_rg_head_0_v_sb_valid_0_1_v_sb_valid_1_DON_ETC__q5,
      SEL_ARR_NOT_v_sb_meta_0_8_BIT_2_1_06_NOT_v_sb__ETC___d253,
      SEL_ARR_v_sb_meta_0_8_BIT_70_9_v_sb_meta_1_0_B_ETC___d257,
      _s_epoch__h1233;
  wire [69 : 0] SEL_ARR_v_sb_meta_0_8_BITS_69_TO_67_3_v_sb_met_ETC___d267;
  wire [66 : 0] SEL_ARR_v_sb_meta_0_8_BITS_66_TO_3_7_v_sb_meta_ETC___d89;
  wire [63 : 0] _theResult____h1094,
		n__h2624,
		op1___1__h1644,
		op1__h1585,
		op2___1__h1645,
		op2__h1586,
		v_sb_meta_0_8_BITS_66_TO_3_7_AND_v_sb_meta_0_8_ETC___d152,
		v_sb_meta_1_0_BITS_66_TO_3_8_AND_v_sb_meta_1_0_ETC___d187,
		x__h18222,
		x__h18286,
		x__h18287,
		x__h18481,
		x__h20686,
		x__h2182,
		x__h2615,
		x__h2772,
		y__h18223,
		y__h18482;
  wire [31 : 0] rg_atomic_readword_BITS_31_TO_0__q1, rs2582_BITS_31_TO_0__q2;
  wire [5 : 0] shiftamt__h18599, shiftamt__h2192;
  wire IF_rg_atomic_op_4_BIT_4_5_THEN_rg_atomic_readw_ETC___d48,
       IF_rg_atomic_op_4_BIT_4_5_THEN_rg_atomic_readw_ETC___d53,
       v_sb_meta_0_8_BITS_166_TO_138_17_EQ_mav_check__ETC___d119,
       v_sb_meta_1_0_BITS_166_TO_138_53_EQ_mav_check__ETC___d154,
       x__h2776;

  // actionvalue method mav_check_sb_hit
  assign mav_check_sb_hit = { x__h2182, x__h18286 } ;
  assign RDY_mav_check_sb_hit = 1'd1 ;
  assign CAN_FIRE_mav_check_sb_hit = 1'd1 ;
  assign WILL_FIRE_mav_check_sb_hit = EN_mav_check_sb_hit ;

  // action method ma_allocate_entry
  assign RDY_ma_allocate_entry =
	     (!v_sb_valid_0 || !v_sb_valid_1) && !rg_sb_busy ;
  assign CAN_FIRE_ma_allocate_entry =
	     (!v_sb_valid_0 || !v_sb_valid_1) && !rg_sb_busy ;
  assign WILL_FIRE_ma_allocate_entry = EN_ma_allocate_entry ;

  // actionvalue method mav_store_to_commit
  assign mav_store_to_commit =
	     { CASE_rg_head_0_v_sb_valid_0_1_v_sb_valid_1_DON_ETC__q5,
	       SEL_ARR_v_sb_meta_0_8_BITS_166_TO_135_9_v_sb_m_ETC___d255,
	       x__h21391,
	       SEL_ARR_v_sb_meta_0_8_BIT_70_9_v_sb_meta_1_0_B_ETC___d257,
	       SEL_ARR_v_sb_meta_0_8_BITS_69_TO_67_3_v_sb_met_ETC___d267 } ;
  assign RDY_mav_store_to_commit = v_sb_valid_0 || v_sb_valid_1 ;
  assign CAN_FIRE_mav_store_to_commit = v_sb_valid_0 || v_sb_valid_1 ;
  assign WILL_FIRE_mav_store_to_commit = EN_mav_store_to_commit ;

  // value method mv_sb_full
  assign mv_sb_full = v_sb_valid_0 && v_sb_valid_1 ;
  assign RDY_mv_sb_full = 1'd1 ;

  // value method mv_sb_empty
  assign mv_sb_empty = !v_sb_valid_0 && !v_sb_valid_1 ;
  assign RDY_mv_sb_empty = 1'd1 ;

  // value method mv_cacheable_store
  always@(rg_head or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_head)
      1'd0: mv_cacheable_store = !v_sb_meta_0[2];
      1'd1: mv_cacheable_store = !v_sb_meta_1[2];
    endcase
  end
  assign RDY_mv_cacheable_store = 1'd1 ;

  // value method mv_sb_busy
  assign mv_sb_busy = rg_sb_busy ;
  assign RDY_mv_sb_busy = 1'd1 ;

  // rule RL_rl_print_stats
  assign CAN_FIRE_RL_rl_print_stats = 1'd1 ;
  assign WILL_FIRE_RL_rl_print_stats = 1'd1 ;

  // rule RL_rl_perform_atomic
  assign CAN_FIRE_RL_rl_perform_atomic = rg_sb_busy ;
  assign WILL_FIRE_RL_rl_perform_atomic = rg_sb_busy ;

  // inputs to muxes for submodule ports
  assign MUX_v_sb_meta_0_write_1__SEL_1 =
	     rg_sb_busy && rg_atomic_tail == 1'd0 ;
  assign MUX_v_sb_meta_0_write_1__SEL_2 =
	     EN_ma_allocate_entry && rg_tail == 1'd0 ;
  assign MUX_v_sb_meta_1_write_1__SEL_1 =
	     rg_sb_busy && rg_atomic_tail == 1'd1 ;
  assign MUX_v_sb_meta_1_write_1__SEL_2 =
	     EN_ma_allocate_entry && rg_tail == 1'd1 ;
  assign MUX_v_sb_meta_0_write_1__VAL_1 =
	     { _s_addr__h1232,
	       _theResult____h1094,
	       _s_epoch__h1233,
	       _s_fbindex__h1234,
	       SEL_ARR_v_sb_meta_0_8_BITS_66_TO_3_7_v_sb_meta_ETC___d89 } ;
  assign MUX_v_sb_meta_0_write_1__VAL_2 =
	     { ma_allocate_entry_address,
	       x__h20760,
	       ma_allocate_entry_epochs,
	       ma_allocate_entry_fbindex,
	       x__h20686,
	       ma_allocate_entry_io,
	       ma_allocate_entry_size } ;

  // register rg_atomic_op
  assign rg_atomic_op_D_IN = ma_allocate_entry_atomic_op ;
  assign rg_atomic_op_EN = EN_ma_allocate_entry ;

  // register rg_atomic_readword
  assign rg_atomic_readword_D_IN = ma_allocate_entry_read_data ;
  assign rg_atomic_readword_EN = EN_ma_allocate_entry ;

  // register rg_atomic_tail
  assign rg_atomic_tail_D_IN = rg_tail ;
  assign rg_atomic_tail_EN = EN_ma_allocate_entry ;

  // register rg_head
  assign rg_head_D_IN = rg_head + 1'd1 ;
  assign rg_head_EN = EN_mav_store_to_commit ;

  // register rg_sb_busy
  assign rg_sb_busy_D_IN = EN_ma_allocate_entry && ma_allocate_entry_atomic ;
  assign rg_sb_busy_EN = EN_ma_allocate_entry || rg_sb_busy ;

  // register rg_tail
  assign rg_tail_D_IN = rg_tail + 1'd1 ;
  assign rg_tail_EN = EN_ma_allocate_entry ;

  // register v_sb_meta_0
  assign v_sb_meta_0_D_IN =
	     MUX_v_sb_meta_0_write_1__SEL_1 ?
	       MUX_v_sb_meta_0_write_1__VAL_1 :
	       MUX_v_sb_meta_0_write_1__VAL_2 ;
  assign v_sb_meta_0_EN =
	     rg_sb_busy && rg_atomic_tail == 1'd0 ||
	     EN_ma_allocate_entry && rg_tail == 1'd0 ;

  // register v_sb_meta_1
  assign v_sb_meta_1_D_IN =
	     MUX_v_sb_meta_1_write_1__SEL_1 ?
	       MUX_v_sb_meta_0_write_1__VAL_1 :
	       MUX_v_sb_meta_0_write_1__VAL_2 ;
  assign v_sb_meta_1_EN =
	     rg_sb_busy && rg_atomic_tail == 1'd1 ||
	     EN_ma_allocate_entry && rg_tail == 1'd1 ;

  // register v_sb_valid_0
  assign v_sb_valid_0_D_IN = MUX_v_sb_meta_0_write_1__SEL_2 ;
  assign v_sb_valid_0_EN =
	     EN_ma_allocate_entry && rg_tail == 1'd0 ||
	     EN_mav_store_to_commit && rg_head == 1'd0 ;

  // register v_sb_valid_1
  assign v_sb_valid_1_D_IN = MUX_v_sb_meta_1_write_1__SEL_2 ;
  assign v_sb_valid_1_EN =
	     EN_ma_allocate_entry && rg_tail == 1'd1 ||
	     EN_mav_store_to_commit && rg_head == 1'd1 ;

  // remaining internal signals
  assign IF_rg_atomic_op_4_BIT_4_5_THEN_rg_atomic_readw_ETC___d48 =
	     op1__h1585 <= op2__h1586 ;
  assign IF_rg_atomic_op_4_BIT_4_5_THEN_rg_atomic_readw_ETC___d53 =
	     (op1__h1585 ^ 64'h8000000000000000) <=
	     (op2__h1586 ^ 64'h8000000000000000) ;
  assign SEL_ARR_v_sb_meta_0_8_BITS_66_TO_3_7_v_sb_meta_ETC___d89 =
	     { x__h1997,
	       CASE_rg_atomic_tail_0_v_sb_meta_0_BIT_2_1_v_sb_ETC__q3,
	       _s_size__h1237 } ;
  assign SEL_ARR_v_sb_meta_0_8_BITS_69_TO_67_3_v_sb_met_ETC___d267 =
	     { SEL_ARR_v_sb_meta_0_8_BITS_69_TO_67_3_v_sb_met_ETC___d258,
	       x__h21394,
	       CASE_rg_head_0_v_sb_meta_0_BIT_2_1_v_sb_meta_1_ETC__q4,
	       SEL_ARR_v_sb_meta_0_8_BITS_1_TO_0_5_v_sb_meta__ETC___d260 } ;
  assign _theResult____h1094 =
	     rg_atomic_op[4] ?
	       IF_rg_atomic_op_4_BITS_3_TO_0_6_EQ_0b11_7_THEN_ETC___d65 :
	       {2{IF_rg_atomic_op_4_BITS_3_TO_0_6_EQ_0b11_7_THEN_ETC___d65[31:0]}} ;
  assign n__h2624 = x__h2772 & y__h2773 ;
  assign op1___1__h1644 =
	     { {32{rg_atomic_readword_BITS_31_TO_0__q1[31]}},
	       rg_atomic_readword_BITS_31_TO_0__q1 } ;
  assign op1__h1585 = rg_atomic_op[4] ? rg_atomic_readword : op1___1__h1644 ;
  assign op2___1__h1645 =
	     { {32{rs2582_BITS_31_TO_0__q2[31]}}, rs2582_BITS_31_TO_0__q2 } ;
  assign op2__h1586 = rg_atomic_op[4] ? rs2__h1582 : op2___1__h1645 ;
  assign rg_atomic_readword_BITS_31_TO_0__q1 = rg_atomic_readword[31:0] ;
  assign rs2582_BITS_31_TO_0__q2 = rs2__h1582[31:0] ;
  assign shiftamt__h18599 = { ma_allocate_entry_address[2:0], 3'd0 } ;
  assign shiftamt__h2192 = { mav_check_sb_hit_phyaddr[2:0], 3'd0 } ;
  assign v_sb_meta_0_8_BITS_166_TO_138_17_EQ_mav_check__ETC___d119 =
	     v_sb_meta_0[166:138] == mav_check_sb_hit_phyaddr[31:3] ;
  assign v_sb_meta_0_8_BITS_66_TO_3_7_AND_v_sb_meta_0_8_ETC___d152 =
	     v_sb_meta_0[66:3] &
	     {64{v_sb_meta_0_8_BITS_166_TO_138_17_EQ_mav_check__ETC___d119}} ;
  assign v_sb_meta_1_0_BITS_166_TO_138_53_EQ_mav_check__ETC___d154 =
	     v_sb_meta_1[166:138] == mav_check_sb_hit_phyaddr[31:3] ;
  assign v_sb_meta_1_0_BITS_66_TO_3_8_AND_v_sb_meta_1_0_ETC___d187 =
	     v_sb_meta_1[66:3] &
	     {64{v_sb_meta_1_0_BITS_166_TO_138_53_EQ_mav_check__ETC___d154}} ;
  assign x__h18222 =
	     rg_tail ?
	       v_sb_meta_0_8_BITS_66_TO_3_7_AND_v_sb_meta_0_8_ETC___d152 :
	       n__h2624 ;
  assign x__h18286 = x__h18287 >> shiftamt__h2192 ;
  assign x__h18287 = x__h18481 | y__h18482 ;
  assign x__h18481 = x__h18222 & v_sb_meta_0[134:71] ;
  assign x__h20686 = temp__h18600 << shiftamt__h18599 ;
  assign x__h2182 = x__h2615 >> shiftamt__h2192 ;
  assign x__h2615 = x__h18222 | y__h18223 ;
  assign x__h2772 = ~x__h2774 ;
  assign x__h2776 = rg_tail - 1'd1 ;
  assign y__h18223 =
	     rg_tail ?
	       n__h2624 :
	       v_sb_meta_1_0_BITS_66_TO_3_8_AND_v_sb_meta_1_0_ETC___d187 ;
  assign y__h18482 = y__h18223 & v_sb_meta_1[134:71] ;
  always@(ma_allocate_entry_size or ma_allocate_entry_data)
  begin
    case (ma_allocate_entry_size)
      2'd0: x__h20760 = {8{ma_allocate_entry_data[7:0]}};
      2'd1: x__h20760 = {4{ma_allocate_entry_data[15:0]}};
      2'd2: x__h20760 = {2{ma_allocate_entry_data[31:0]}};
      2'd3: x__h20760 = ma_allocate_entry_data;
    endcase
  end
  always@(rg_head or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_head)
      1'd0: x__h21391 = v_sb_meta_0[134:71];
      1'd1: x__h21391 = v_sb_meta_1[134:71];
    endcase
  end
  always@(rg_head or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_head)
      1'd0: x__h21394 = v_sb_meta_0[66:3];
      1'd1: x__h21394 = v_sb_meta_1[66:3];
    endcase
  end
  always@(rg_atomic_tail or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_atomic_tail)
      1'd0: _s_addr__h1232 = v_sb_meta_0[166:135];
      1'd1: _s_addr__h1232 = v_sb_meta_1[166:135];
    endcase
  end
  always@(rg_atomic_tail or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_atomic_tail)
      1'd0: _s_epoch__h1233 = v_sb_meta_0[70];
      1'd1: _s_epoch__h1233 = v_sb_meta_1[70];
    endcase
  end
  always@(rg_atomic_tail or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_atomic_tail)
      1'd0: _s_fbindex__h1234 = v_sb_meta_0[69:67];
      1'd1: _s_fbindex__h1234 = v_sb_meta_1[69:67];
    endcase
  end
  always@(rg_atomic_tail or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_atomic_tail)
      1'd0: x__h1997 = v_sb_meta_0[66:3];
      1'd1: x__h1997 = v_sb_meta_1[66:3];
    endcase
  end
  always@(rg_atomic_tail or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_atomic_tail)
      1'd0: _s_size__h1237 = v_sb_meta_0[1:0];
      1'd1: _s_size__h1237 = v_sb_meta_1[1:0];
    endcase
  end
  always@(ma_allocate_entry_size)
  begin
    case (ma_allocate_entry_size)
      2'd0: temp__h18600 = 64'h00000000000000FF;
      2'd1: temp__h18600 = 64'h000000000000FFFF;
      2'd2: temp__h18600 = 64'h00000000FFFFFFFF;
      2'd3: temp__h18600 = 64'hFFFFFFFFFFFFFFFF;
    endcase
  end
  always@(rg_atomic_tail or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_atomic_tail)
      1'd0: rs2__h1582 = v_sb_meta_0[134:71];
      1'd1: rs2__h1582 = v_sb_meta_1[134:71];
    endcase
  end
  always@(rg_atomic_op or
	  op1__h1585 or
	  op2__h1586 or
	  IF_rg_atomic_op_4_BIT_4_5_THEN_rg_atomic_readw_ETC___d53 or
	  IF_rg_atomic_op_4_BIT_4_5_THEN_rg_atomic_readw_ETC___d48)
  begin
    case (rg_atomic_op[3:0])
      4'b0:
	  IF_rg_atomic_op_4_BITS_3_TO_0_6_EQ_0b11_7_THEN_ETC___d65 =
	      op1__h1585 + op2__h1586;
      4'b0010:
	  IF_rg_atomic_op_4_BITS_3_TO_0_6_EQ_0b11_7_THEN_ETC___d65 =
	      op1__h1585 ^ op2__h1586;
      4'b0011:
	  IF_rg_atomic_op_4_BITS_3_TO_0_6_EQ_0b11_7_THEN_ETC___d65 =
	      op2__h1586;
      4'b0100:
	  IF_rg_atomic_op_4_BITS_3_TO_0_6_EQ_0b11_7_THEN_ETC___d65 =
	      op1__h1585 | op2__h1586;
      4'b0110:
	  IF_rg_atomic_op_4_BITS_3_TO_0_6_EQ_0b11_7_THEN_ETC___d65 =
	      op1__h1585 & op2__h1586;
      4'b1000:
	  IF_rg_atomic_op_4_BITS_3_TO_0_6_EQ_0b11_7_THEN_ETC___d65 =
	      IF_rg_atomic_op_4_BIT_4_5_THEN_rg_atomic_readw_ETC___d53 ?
		op1__h1585 :
		op2__h1586;
      4'b1010:
	  IF_rg_atomic_op_4_BITS_3_TO_0_6_EQ_0b11_7_THEN_ETC___d65 =
	      IF_rg_atomic_op_4_BIT_4_5_THEN_rg_atomic_readw_ETC___d53 ?
		op2__h1586 :
		op1__h1585;
      4'b1100:
	  IF_rg_atomic_op_4_BITS_3_TO_0_6_EQ_0b11_7_THEN_ETC___d65 =
	      IF_rg_atomic_op_4_BIT_4_5_THEN_rg_atomic_readw_ETC___d48 ?
		op1__h1585 :
		op2__h1586;
      4'b1110:
	  IF_rg_atomic_op_4_BITS_3_TO_0_6_EQ_0b11_7_THEN_ETC___d65 =
	      IF_rg_atomic_op_4_BIT_4_5_THEN_rg_atomic_readw_ETC___d48 ?
		op2__h1586 :
		op1__h1585;
      default: IF_rg_atomic_op_4_BITS_3_TO_0_6_EQ_0b11_7_THEN_ETC___d65 =
		   op1__h1585;
    endcase
  end
  always@(rg_tail or
	  v_sb_meta_0_8_BITS_66_TO_3_7_AND_v_sb_meta_0_8_ETC___d152 or
	  v_sb_meta_1_0_BITS_66_TO_3_8_AND_v_sb_meta_1_0_ETC___d187)
  begin
    case (rg_tail)
      1'd0:
	  y__h2773 =
	      v_sb_meta_0_8_BITS_66_TO_3_7_AND_v_sb_meta_0_8_ETC___d152;
      1'd1:
	  y__h2773 =
	      v_sb_meta_1_0_BITS_66_TO_3_8_AND_v_sb_meta_1_0_ETC___d187;
    endcase
  end
  always@(x__h2776 or
	  v_sb_meta_0_8_BITS_66_TO_3_7_AND_v_sb_meta_0_8_ETC___d152 or
	  v_sb_meta_1_0_BITS_66_TO_3_8_AND_v_sb_meta_1_0_ETC___d187)
  begin
    case (x__h2776)
      1'd0:
	  x__h2774 =
	      v_sb_meta_0_8_BITS_66_TO_3_7_AND_v_sb_meta_0_8_ETC___d152;
      1'd1:
	  x__h2774 =
	      v_sb_meta_1_0_BITS_66_TO_3_8_AND_v_sb_meta_1_0_ETC___d187;
    endcase
  end
  always@(rg_head or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_head)
      1'd0:
	  SEL_ARR_NOT_v_sb_meta_0_8_BIT_2_1_06_NOT_v_sb__ETC___d253 =
	      !v_sb_meta_0[2];
      1'd1:
	  SEL_ARR_NOT_v_sb_meta_0_8_BIT_2_1_06_NOT_v_sb__ETC___d253 =
	      !v_sb_meta_1[2];
    endcase
  end
  always@(rg_head or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_head)
      1'd0:
	  SEL_ARR_v_sb_meta_0_8_BITS_166_TO_135_9_v_sb_m_ETC___d255 =
	      v_sb_meta_0[166:135];
      1'd1:
	  SEL_ARR_v_sb_meta_0_8_BITS_166_TO_135_9_v_sb_m_ETC___d255 =
	      v_sb_meta_1[166:135];
    endcase
  end
  always@(rg_head or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_head)
      1'd0:
	  SEL_ARR_v_sb_meta_0_8_BIT_70_9_v_sb_meta_1_0_B_ETC___d257 =
	      v_sb_meta_0[70];
      1'd1:
	  SEL_ARR_v_sb_meta_0_8_BIT_70_9_v_sb_meta_1_0_B_ETC___d257 =
	      v_sb_meta_1[70];
    endcase
  end
  always@(rg_head or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_head)
      1'd0:
	  SEL_ARR_v_sb_meta_0_8_BITS_69_TO_67_3_v_sb_met_ETC___d258 =
	      v_sb_meta_0[69:67];
      1'd1:
	  SEL_ARR_v_sb_meta_0_8_BITS_69_TO_67_3_v_sb_met_ETC___d258 =
	      v_sb_meta_1[69:67];
    endcase
  end
  always@(rg_head or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_head)
      1'd0:
	  SEL_ARR_v_sb_meta_0_8_BITS_1_TO_0_5_v_sb_meta__ETC___d260 =
	      v_sb_meta_0[1:0];
      1'd1:
	  SEL_ARR_v_sb_meta_0_8_BITS_1_TO_0_5_v_sb_meta__ETC___d260 =
	      v_sb_meta_1[1:0];
    endcase
  end
  always@(rg_atomic_tail or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_atomic_tail)
      1'd0:
	  CASE_rg_atomic_tail_0_v_sb_meta_0_BIT_2_1_v_sb_ETC__q3 =
	      v_sb_meta_0[2];
      1'd1:
	  CASE_rg_atomic_tail_0_v_sb_meta_0_BIT_2_1_v_sb_ETC__q3 =
	      v_sb_meta_1[2];
    endcase
  end
  always@(rg_head or v_sb_meta_0 or v_sb_meta_1)
  begin
    case (rg_head)
      1'd0:
	  CASE_rg_head_0_v_sb_meta_0_BIT_2_1_v_sb_meta_1_ETC__q4 =
	      v_sb_meta_0[2];
      1'd1:
	  CASE_rg_head_0_v_sb_meta_0_BIT_2_1_v_sb_meta_1_ETC__q4 =
	      v_sb_meta_1[2];
    endcase
  end
  always@(rg_head or v_sb_valid_0 or v_sb_valid_1)
  begin
    case (rg_head)
      1'd0:
	  CASE_rg_head_0_v_sb_valid_0_1_v_sb_valid_1_DON_ETC__q5 =
	      v_sb_valid_0;
      1'd1:
	  CASE_rg_head_0_v_sb_valid_0_1_v_sb_valid_1_DON_ETC__q5 =
	      v_sb_valid_1;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_atomic_op <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_atomic_readword <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_atomic_tail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_head <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_sb_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_tail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_sb_meta_0 <= `BSV_ASSIGNMENT_DELAY 167'd0;
	v_sb_meta_1 <= `BSV_ASSIGNMENT_DELAY 167'd0;
	v_sb_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_sb_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_atomic_op_EN)
	  rg_atomic_op <= `BSV_ASSIGNMENT_DELAY rg_atomic_op_D_IN;
	if (rg_atomic_readword_EN)
	  rg_atomic_readword <= `BSV_ASSIGNMENT_DELAY rg_atomic_readword_D_IN;
	if (rg_atomic_tail_EN)
	  rg_atomic_tail <= `BSV_ASSIGNMENT_DELAY rg_atomic_tail_D_IN;
	if (rg_head_EN) rg_head <= `BSV_ASSIGNMENT_DELAY rg_head_D_IN;
	if (rg_sb_busy_EN)
	  rg_sb_busy <= `BSV_ASSIGNMENT_DELAY rg_sb_busy_D_IN;
	if (rg_tail_EN) rg_tail <= `BSV_ASSIGNMENT_DELAY rg_tail_D_IN;
	if (v_sb_meta_0_EN)
	  v_sb_meta_0 <= `BSV_ASSIGNMENT_DELAY v_sb_meta_0_D_IN;
	if (v_sb_meta_1_EN)
	  v_sb_meta_1 <= `BSV_ASSIGNMENT_DELAY v_sb_meta_1_D_IN;
	if (v_sb_valid_0_EN)
	  v_sb_valid_0 <= `BSV_ASSIGNMENT_DELAY v_sb_valid_0_D_IN;
	if (v_sb_valid_1_EN)
	  v_sb_valid_1 <= `BSV_ASSIGNMENT_DELAY v_sb_valid_1_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_atomic_op = 5'h0A;
    rg_atomic_readword = 64'hAAAAAAAAAAAAAAAA;
    rg_atomic_tail = 1'h0;
    rg_head = 1'h0;
    rg_sb_busy = 1'h0;
    rg_tail = 1'h0;
    v_sb_meta_0 = 167'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    v_sb_meta_1 = 167'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    v_sb_valid_0 = 1'h0;
    v_sb_valid_1 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit)
	begin
	  TASK_testplusargs___d99 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit)
	begin
	  TASK_testplusargs___d100 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit)
	begin
	  TASK_testplusargs___d101 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_9_OR_TASK_testplusargs_00_AN_ETC___d105 =
	(TASK_testplusargs___d99 ||
	 TASK_testplusargs___d100 && TASK_testplusargs___d101) &&
	v_sb_meta_0[2];
    TASK_testplusargs_9_OR_TASK_testplusargs_00_AN_ETC___d107 =
	(TASK_testplusargs___d99 ||
	 TASK_testplusargs___d100 && TASK_testplusargs___d101) &&
	!v_sb_meta_0[2];
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit)
	begin
	  v__h2288 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("[%10d", v__h2288, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("[%2d]SB: Lookup:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("Storebuffer { ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("'h%h", v_sb_meta_0[166:135]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("'h%h", v_sb_meta_0[134:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write(", ", "epoch: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("'h%h", v_sb_meta_0[70]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write(", ", "fbindex: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("'h%h", v_sb_meta_0[69:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write(", ", "mask: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("'h%h", v_sb_meta_0[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write(", ", "io: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  TASK_testplusargs_9_OR_TASK_testplusargs_00_AN_ETC___d105)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  TASK_testplusargs_9_OR_TASK_testplusargs_00_AN_ETC___d107)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("'h%h", v_sb_meta_0[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit)
	begin
	  TASK_testplusargs___d108 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit)
	begin
	  TASK_testplusargs___d109 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit)
	begin
	  TASK_testplusargs___d110 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_08_OR_TASK_testplusargs_09_A_ETC___d114 =
	(TASK_testplusargs___d108 ||
	 TASK_testplusargs___d109 && TASK_testplusargs___d110) &&
	v_sb_meta_1[2];
    TASK_testplusargs_08_OR_TASK_testplusargs_09_A_ETC___d116 =
	(TASK_testplusargs___d108 ||
	 TASK_testplusargs___d109 && TASK_testplusargs___d110) &&
	!v_sb_meta_1[2];
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit)
	begin
	  v__h2477 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d108 ||
	   TASK_testplusargs___d109 && TASK_testplusargs___d110))
	$write("[%10d", v__h2477, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d108 ||
	   TASK_testplusargs___d109 && TASK_testplusargs___d110))
	$write("[%2d]SB: Lookup:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d108 ||
	   TASK_testplusargs___d109 && TASK_testplusargs___d110))
	$write("Storebuffer { ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d108 ||
	   TASK_testplusargs___d109 && TASK_testplusargs___d110))
	$write("'h%h", v_sb_meta_1[166:135]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d108 ||
	   TASK_testplusargs___d109 && TASK_testplusargs___d110))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d108 ||
	   TASK_testplusargs___d109 && TASK_testplusargs___d110))
	$write("'h%h", v_sb_meta_1[134:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d108 ||
	   TASK_testplusargs___d109 && TASK_testplusargs___d110))
	$write(", ", "epoch: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d108 ||
	   TASK_testplusargs___d109 && TASK_testplusargs___d110))
	$write("'h%h", v_sb_meta_1[70]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d108 ||
	   TASK_testplusargs___d109 && TASK_testplusargs___d110))
	$write(", ", "fbindex: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d108 ||
	   TASK_testplusargs___d109 && TASK_testplusargs___d110))
	$write("'h%h", v_sb_meta_1[69:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d108 ||
	   TASK_testplusargs___d109 && TASK_testplusargs___d110))
	$write(", ", "mask: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d108 ||
	   TASK_testplusargs___d109 && TASK_testplusargs___d110))
	$write("'h%h", v_sb_meta_1[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d108 ||
	   TASK_testplusargs___d109 && TASK_testplusargs___d110))
	$write(", ", "io: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  TASK_testplusargs_08_OR_TASK_testplusargs_09_A_ETC___d114)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  TASK_testplusargs_08_OR_TASK_testplusargs_09_A_ETC___d116)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d108 ||
	   TASK_testplusargs___d109 && TASK_testplusargs___d110))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d108 ||
	   TASK_testplusargs___d109 && TASK_testplusargs___d110))
	$write("'h%h", v_sb_meta_1[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_check_sb_hit &&
	  (TASK_testplusargs___d108 ||
	   TASK_testplusargs___d109 && TASK_testplusargs___d110))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d1 = $test$plusargs("fullverbose");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d2 = $test$plusargs("mdcache");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d3 = $test$plusargs("l3");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        v__h591 = $time;
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("[%10d", v__h591, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("[%2d]DCACHE: sb_full:%b sb_empty:%b sbhead:%d sbtail:%d",
	       id,
	       v_sb_valid_0 && v_sb_valid_1,
	       !v_sb_valid_0 && !v_sb_valid_1,
	       rg_head,
	       rg_tail);
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_store_to_commit)
	begin
	  TASK_testplusargs___d246 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_store_to_commit)
	begin
	  TASK_testplusargs___d247 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_store_to_commit)
	begin
	  TASK_testplusargs___d248 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_46_OR_TASK_testplusargs_47_A_ETC___d254 =
	(TASK_testplusargs___d246 ||
	 TASK_testplusargs___d247 && TASK_testplusargs___d248) &&
	SEL_ARR_NOT_v_sb_meta_0_8_BIT_2_1_06_NOT_v_sb__ETC___d253;
    TASK_testplusargs_46_OR_TASK_testplusargs_47_A_ETC___d262 =
	(TASK_testplusargs___d246 ||
	 TASK_testplusargs___d247 && TASK_testplusargs___d248) &&
	!SEL_ARR_NOT_v_sb_meta_0_8_BIT_2_1_06_NOT_v_sb__ETC___d253;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_store_to_commit)
	begin
	  v__h21249 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_store_to_commit &&
	  (TASK_testplusargs___d246 ||
	   TASK_testplusargs___d247 && TASK_testplusargs___d248))
	$write("[%10d", v__h21249, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_store_to_commit &&
	  TASK_testplusargs_46_OR_TASK_testplusargs_47_A_ETC___d254)
	$write("[%2d]SB: Committing store sbindex:%d with ",
	       id,
	       rg_head,
	       "Storebuffer { ",
	       "addr: ",
	       "'h%h",
	       SEL_ARR_v_sb_meta_0_8_BITS_166_TO_135_9_v_sb_m_ETC___d255,
	       ", ",
	       "data: ",
	       "'h%h",
	       x__h21391,
	       ", ",
	       "epoch: ",
	       "'h%h",
	       SEL_ARR_v_sb_meta_0_8_BIT_70_9_v_sb_meta_1_0_B_ETC___d257,
	       ", ",
	       "fbindex: ",
	       "'h%h",
	       SEL_ARR_v_sb_meta_0_8_BITS_69_TO_67_3_v_sb_met_ETC___d258,
	       ", ",
	       "mask: ",
	       "'h%h",
	       x__h21394,
	       ", ",
	       "io: ",
	       "False",
	       ", ",
	       "size: ",
	       "'h%h",
	       SEL_ARR_v_sb_meta_0_8_BITS_1_TO_0_5_v_sb_meta__ETC___d260,
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_store_to_commit &&
	  TASK_testplusargs_46_OR_TASK_testplusargs_47_A_ETC___d262)
	$write("[%2d]SB: Committing store sbindex:%d with ",
	       id,
	       rg_head,
	       "Storebuffer { ",
	       "addr: ",
	       "'h%h",
	       SEL_ARR_v_sb_meta_0_8_BITS_166_TO_135_9_v_sb_m_ETC___d255,
	       ", ",
	       "data: ",
	       "'h%h",
	       x__h21391,
	       ", ",
	       "epoch: ",
	       "'h%h",
	       SEL_ARR_v_sb_meta_0_8_BIT_70_9_v_sb_meta_1_0_B_ETC___d257,
	       ", ",
	       "fbindex: ",
	       "'h%h",
	       SEL_ARR_v_sb_meta_0_8_BITS_69_TO_67_3_v_sb_met_ETC___d258,
	       ", ",
	       "mask: ",
	       "'h%h",
	       x__h21394,
	       ", ",
	       "io: ",
	       "True",
	       ", ",
	       "size: ",
	       "'h%h",
	       SEL_ARR_v_sb_meta_0_8_BITS_1_TO_0_5_v_sb_meta__ETC___d260,
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_store_to_commit &&
	  (TASK_testplusargs___d246 ||
	   TASK_testplusargs___d247 && TASK_testplusargs___d248))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_entry)
	begin
	  TASK_testplusargs___d232 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_entry)
	begin
	  TASK_testplusargs___d233 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_entry)
	begin
	  TASK_testplusargs___d234 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_32_OR_TASK_testplusargs_33_A_ETC___d238 =
	(TASK_testplusargs___d232 ||
	 TASK_testplusargs___d233 && TASK_testplusargs___d234) &&
	ma_allocate_entry_io;
    TASK_testplusargs_32_OR_TASK_testplusargs_33_A_ETC___d240 =
	(TASK_testplusargs___d232 ||
	 TASK_testplusargs___d233 && TASK_testplusargs___d234) &&
	!ma_allocate_entry_io;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_entry)
	begin
	  v__h20870 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_entry &&
	  (TASK_testplusargs___d232 ||
	   TASK_testplusargs___d233 && TASK_testplusargs___d234))
	$write("[%10d", v__h20870, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_entry &&
	  TASK_testplusargs_32_OR_TASK_testplusargs_33_A_ETC___d238)
	$write("[%2d]SB: Allocating sbindex:%d with ",
	       id,
	       rg_tail,
	       "Storebuffer { ",
	       "addr: ",
	       "'h%h",
	       ma_allocate_entry_address,
	       ", ",
	       "data: ",
	       "'h%h",
	       x__h20760,
	       ", ",
	       "epoch: ",
	       "'h%h",
	       ma_allocate_entry_epochs,
	       ", ",
	       "fbindex: ",
	       "'h%h",
	       ma_allocate_entry_fbindex,
	       ", ",
	       "mask: ",
	       "'h%h",
	       x__h20686,
	       ", ",
	       "io: ",
	       "True",
	       ", ",
	       "size: ",
	       "'h%h",
	       ma_allocate_entry_size,
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_entry &&
	  TASK_testplusargs_32_OR_TASK_testplusargs_33_A_ETC___d240)
	$write("[%2d]SB: Allocating sbindex:%d with ",
	       id,
	       rg_tail,
	       "Storebuffer { ",
	       "addr: ",
	       "'h%h",
	       ma_allocate_entry_address,
	       ", ",
	       "data: ",
	       "'h%h",
	       x__h20760,
	       ", ",
	       "epoch: ",
	       "'h%h",
	       ma_allocate_entry_epochs,
	       ", ",
	       "fbindex: ",
	       "'h%h",
	       ma_allocate_entry_fbindex,
	       ", ",
	       "mask: ",
	       "'h%h",
	       x__h20686,
	       ", ",
	       "io: ",
	       "False",
	       ", ",
	       "size: ",
	       "'h%h",
	       ma_allocate_entry_size,
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_allocate_entry &&
	  (TASK_testplusargs___d232 ||
	   TASK_testplusargs___d233 && TASK_testplusargs___d234))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_sb_busy)
	begin
	  TASK_testplusargs___d93 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_sb_busy)
	begin
	  TASK_testplusargs___d94 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_sb_busy)
	begin
	  TASK_testplusargs___d95 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_sb_busy)
	begin
	  v__h2115 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_sb_busy &&
	  (TASK_testplusargs___d93 ||
	   TASK_testplusargs___d94 && TASK_testplusargs___d95))
	$write("[%10d", v__h2115, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_sb_busy &&
	  (TASK_testplusargs___d93 ||
	   TASK_testplusargs___d94 && TASK_testplusargs___d95))
	$write("[%2d]SB: Performing Atomic: Op:%b Wdata:%h Rdata:%h Result:%h",
	       id,
	       rg_atomic_op,
	       _theResult____h1094,
	       rg_atomic_readword,
	       _theResult____h1094);
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_sb_busy &&
	  (TASK_testplusargs___d93 ||
	   TASK_testplusargs___d94 && TASK_testplusargs___d95))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkstorebuffer

