//
// Generated by Bluespec Compiler, version 2022.01-5-ge3edf4b1 (build e3edf4b1)
//
// On Fri Apr 15 12:47:46 EDT 2022
//
//
// Ports:
// Name                         I/O  size props
// master_d_AWVALID               O     1 reg
// master_d_AWADDR                O    32 reg
// master_d_AWPROT                O     3 reg
// master_d_AWLEN                 O     8 reg
// master_d_AWSIZE                O     3 reg
// master_d_AWBURST               O     2 reg
// master_d_AWID                  O     4 reg
// master_d_WVALID                O     1 reg
// master_d_WDATA                 O    64 reg
// master_d_WSTRB                 O     8 reg
// master_d_WLAST                 O     1 reg
// master_d_WID                   O     4 reg
// master_d_BREADY                O     1 reg
// master_d_ARVALID               O     1 reg
// master_d_ARADDR                O    32 reg
// master_d_ARPROT                O     3 reg
// master_d_ARLEN                 O     8 reg
// master_d_ARSIZE                O     3 reg
// master_d_ARBURST               O     2 reg
// master_d_ARID                  O     4 reg
// master_d_RREADY                O     1 reg
// master_i_AWVALID               O     1 reg
// master_i_AWADDR                O    32 reg
// master_i_AWPROT                O     3 reg
// master_i_AWLEN                 O     8 reg
// master_i_AWSIZE                O     3 reg
// master_i_AWBURST               O     2 reg
// master_i_AWID                  O     4 reg
// master_i_WVALID                O     1 reg
// master_i_WDATA                 O    64 reg
// master_i_WSTRB                 O     8 reg
// master_i_WLAST                 O     1 reg
// master_i_WID                   O     4 reg
// master_i_BREADY                O     1 reg
// master_i_ARVALID               O     1 reg
// master_i_ARADDR                O    32 reg
// master_i_ARPROT                O     3 reg
// master_i_ARLEN                 O     8 reg
// master_i_ARSIZE                O     3 reg
// master_i_ARBURST               O     2 reg
// master_i_ARID                  O     4 reg
// master_i_RREADY                O     1 reg
// RDY_sb_clint_msip_put          O     1 const
// RDY_sb_clint_mtip_put          O     1 const
// RDY_sb_clint_mtime_put         O     1 const
// RDY_sb_externalinterrupt_put   O     1 const
// io_dump_get                    O   168 reg
// RDY_io_dump_get                O     1 reg
// resetpc                        I    64
// CLK                            I     1 clock
// RST_N                          I     1 reset
// master_d_AWREADY               I     1
// master_d_WREADY                I     1
// master_d_BVALID                I     1
// master_d_BRESP                 I     2 reg
// master_d_BID                   I     4 reg
// master_d_ARREADY               I     1
// master_d_RVALID                I     1
// master_d_RRESP                 I     2 reg
// master_d_RDATA                 I    64 reg
// master_d_RLAST                 I     1 reg
// master_d_RID                   I     4 reg
// master_i_AWREADY               I     1
// master_i_WREADY                I     1
// master_i_BVALID                I     1
// master_i_BRESP                 I     2 reg
// master_i_BID                   I     4 reg
// master_i_ARREADY               I     1
// master_i_RVALID                I     1
// master_i_RRESP                 I     2 reg
// master_i_RDATA                 I    64 reg
// master_i_RLAST                 I     1 reg
// master_i_RID                   I     4 reg
// sb_clint_msip_put              I     1 reg
// sb_clint_mtip_put              I     1 reg
// sb_clint_mtime_put             I    64 reg
// sb_externalinterrupt_put       I     1 reg
// EN_sb_clint_msip_put           I     1
// EN_sb_clint_mtip_put           I     1
// EN_sb_clint_mtime_put          I     1
// EN_sb_externalinterrupt_put    I     1
// EN_io_dump_get                 I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkccore_axi4(resetpc,
		    CLK,
		    RST_N,

		    master_d_AWVALID,

		    master_d_AWADDR,

		    master_d_AWPROT,

		    master_d_AWLEN,

		    master_d_AWSIZE,

		    master_d_AWBURST,

		    master_d_AWID,

		    master_d_AWREADY,

		    master_d_WVALID,

		    master_d_WDATA,

		    master_d_WSTRB,

		    master_d_WLAST,

		    master_d_WID,

		    master_d_WREADY,

		    master_d_BVALID,
		    master_d_BRESP,
		    master_d_BID,

		    master_d_BREADY,

		    master_d_ARVALID,

		    master_d_ARADDR,

		    master_d_ARPROT,

		    master_d_ARLEN,

		    master_d_ARSIZE,

		    master_d_ARBURST,

		    master_d_ARID,

		    master_d_ARREADY,

		    master_d_RVALID,
		    master_d_RRESP,
		    master_d_RDATA,
		    master_d_RLAST,
		    master_d_RID,

		    master_d_RREADY,

		    master_i_AWVALID,

		    master_i_AWADDR,

		    master_i_AWPROT,

		    master_i_AWLEN,

		    master_i_AWSIZE,

		    master_i_AWBURST,

		    master_i_AWID,

		    master_i_AWREADY,

		    master_i_WVALID,

		    master_i_WDATA,

		    master_i_WSTRB,

		    master_i_WLAST,

		    master_i_WID,

		    master_i_WREADY,

		    master_i_BVALID,
		    master_i_BRESP,
		    master_i_BID,

		    master_i_BREADY,

		    master_i_ARVALID,

		    master_i_ARADDR,

		    master_i_ARPROT,

		    master_i_ARLEN,

		    master_i_ARSIZE,

		    master_i_ARBURST,

		    master_i_ARID,

		    master_i_ARREADY,

		    master_i_RVALID,
		    master_i_RRESP,
		    master_i_RDATA,
		    master_i_RLAST,
		    master_i_RID,

		    master_i_RREADY,

		    sb_clint_msip_put,
		    EN_sb_clint_msip_put,
		    RDY_sb_clint_msip_put,

		    sb_clint_mtip_put,
		    EN_sb_clint_mtip_put,
		    RDY_sb_clint_mtip_put,

		    sb_clint_mtime_put,
		    EN_sb_clint_mtime_put,
		    RDY_sb_clint_mtime_put,

		    sb_externalinterrupt_put,
		    EN_sb_externalinterrupt_put,
		    RDY_sb_externalinterrupt_put,

		    EN_io_dump_get,
		    io_dump_get,
		    RDY_io_dump_get);
  parameter [63 : 0] hartid = 64'b0;
  input  [63 : 0] resetpc;
  input  CLK;
  input  RST_N;

  // value method master_d_m_awvalid
  output master_d_AWVALID;

  // value method master_d_m_awaddr
  output [31 : 0] master_d_AWADDR;

  // value method master_d_m_awuser

  // value method master_d_m_awprot
  output [2 : 0] master_d_AWPROT;

  // value method master_d_m_awlen
  output [7 : 0] master_d_AWLEN;

  // value method master_d_m_awsize
  output [2 : 0] master_d_AWSIZE;

  // value method master_d_m_awburst
  output [1 : 0] master_d_AWBURST;

  // value method master_d_m_awid
  output [3 : 0] master_d_AWID;

  // action method master_d_m_awready
  input  master_d_AWREADY;

  // value method master_d_m_wvalid
  output master_d_WVALID;

  // value method master_d_m_wdata
  output [63 : 0] master_d_WDATA;

  // value method master_d_m_wstrb
  output [7 : 0] master_d_WSTRB;

  // value method master_d_m_wlast
  output master_d_WLAST;

  // value method master_d_m_wid
  output [3 : 0] master_d_WID;

  // action method master_d_m_wready
  input  master_d_WREADY;

  // action method master_d_m_bvalid
  input  master_d_BVALID;
  input  [1 : 0] master_d_BRESP;
  input  [3 : 0] master_d_BID;

  // value method master_d_m_bready
  output master_d_BREADY;

  // value method master_d_m_arvalid
  output master_d_ARVALID;

  // value method master_d_m_araddr
  output [31 : 0] master_d_ARADDR;

  // value method master_d_m_aruser

  // value method master_d_m_arprot
  output [2 : 0] master_d_ARPROT;

  // value method master_d_m_arlen
  output [7 : 0] master_d_ARLEN;

  // value method master_d_m_arsize
  output [2 : 0] master_d_ARSIZE;

  // value method master_d_m_arburst
  output [1 : 0] master_d_ARBURST;

  // value method master_d_m_arid
  output [3 : 0] master_d_ARID;

  // action method master_d_m_arready
  input  master_d_ARREADY;

  // action method master_d_m_rvalid
  input  master_d_RVALID;
  input  [1 : 0] master_d_RRESP;
  input  [63 : 0] master_d_RDATA;
  input  master_d_RLAST;
  input  [3 : 0] master_d_RID;

  // value method master_d_m_rready
  output master_d_RREADY;

  // value method master_i_m_awvalid
  output master_i_AWVALID;

  // value method master_i_m_awaddr
  output [31 : 0] master_i_AWADDR;

  // value method master_i_m_awuser

  // value method master_i_m_awprot
  output [2 : 0] master_i_AWPROT;

  // value method master_i_m_awlen
  output [7 : 0] master_i_AWLEN;

  // value method master_i_m_awsize
  output [2 : 0] master_i_AWSIZE;

  // value method master_i_m_awburst
  output [1 : 0] master_i_AWBURST;

  // value method master_i_m_awid
  output [3 : 0] master_i_AWID;

  // action method master_i_m_awready
  input  master_i_AWREADY;

  // value method master_i_m_wvalid
  output master_i_WVALID;

  // value method master_i_m_wdata
  output [63 : 0] master_i_WDATA;

  // value method master_i_m_wstrb
  output [7 : 0] master_i_WSTRB;

  // value method master_i_m_wlast
  output master_i_WLAST;

  // value method master_i_m_wid
  output [3 : 0] master_i_WID;

  // action method master_i_m_wready
  input  master_i_WREADY;

  // action method master_i_m_bvalid
  input  master_i_BVALID;
  input  [1 : 0] master_i_BRESP;
  input  [3 : 0] master_i_BID;

  // value method master_i_m_bready
  output master_i_BREADY;

  // value method master_i_m_arvalid
  output master_i_ARVALID;

  // value method master_i_m_araddr
  output [31 : 0] master_i_ARADDR;

  // value method master_i_m_aruser

  // value method master_i_m_arprot
  output [2 : 0] master_i_ARPROT;

  // value method master_i_m_arlen
  output [7 : 0] master_i_ARLEN;

  // value method master_i_m_arsize
  output [2 : 0] master_i_ARSIZE;

  // value method master_i_m_arburst
  output [1 : 0] master_i_ARBURST;

  // value method master_i_m_arid
  output [3 : 0] master_i_ARID;

  // action method master_i_m_arready
  input  master_i_ARREADY;

  // action method master_i_m_rvalid
  input  master_i_RVALID;
  input  [1 : 0] master_i_RRESP;
  input  [63 : 0] master_i_RDATA;
  input  master_i_RLAST;
  input  [3 : 0] master_i_RID;

  // value method master_i_m_rready
  output master_i_RREADY;

  // action method sb_clint_msip_put
  input  sb_clint_msip_put;
  input  EN_sb_clint_msip_put;
  output RDY_sb_clint_msip_put;

  // action method sb_clint_mtip_put
  input  sb_clint_mtip_put;
  input  EN_sb_clint_mtip_put;
  output RDY_sb_clint_mtip_put;

  // action method sb_clint_mtime_put
  input  [63 : 0] sb_clint_mtime_put;
  input  EN_sb_clint_mtime_put;
  output RDY_sb_clint_mtime_put;

  // action method sb_externalinterrupt_put
  input  sb_externalinterrupt_put;
  input  EN_sb_externalinterrupt_put;
  output RDY_sb_externalinterrupt_put;

  // actionvalue method io_dump_get
  input  EN_io_dump_get;
  output [167 : 0] io_dump_get;
  output RDY_io_dump_get;

  // signals for module outputs
  wire [167 : 0] io_dump_get;
  wire [63 : 0] master_d_WDATA, master_i_WDATA;
  wire [31 : 0] master_d_ARADDR,
		master_d_AWADDR,
		master_i_ARADDR,
		master_i_AWADDR;
  wire [7 : 0] master_d_ARLEN,
	       master_d_AWLEN,
	       master_d_WSTRB,
	       master_i_ARLEN,
	       master_i_AWLEN,
	       master_i_WSTRB;
  wire [3 : 0] master_d_ARID,
	       master_d_AWID,
	       master_d_WID,
	       master_i_ARID,
	       master_i_AWID,
	       master_i_WID;
  wire [2 : 0] master_d_ARPROT,
	       master_d_ARSIZE,
	       master_d_AWPROT,
	       master_d_AWSIZE,
	       master_i_ARPROT,
	       master_i_ARSIZE,
	       master_i_AWPROT,
	       master_i_AWSIZE;
  wire [1 : 0] master_d_ARBURST,
	       master_d_AWBURST,
	       master_i_ARBURST,
	       master_i_AWBURST;
  wire RDY_io_dump_get,
       RDY_sb_clint_msip_put,
       RDY_sb_clint_mtime_put,
       RDY_sb_clint_mtip_put,
       RDY_sb_externalinterrupt_put,
       master_d_ARVALID,
       master_d_AWVALID,
       master_d_BREADY,
       master_d_RREADY,
       master_d_WLAST,
       master_d_WVALID,
       master_i_ARVALID,
       master_i_AWVALID,
       master_i_BREADY,
       master_i_RREADY,
       master_i_WLAST,
       master_i_WVALID;

  // inlined wires
  wire ptwalk_wr_deq_holding_ff_whas;

  // register ptwalk_rg_a
  reg [55 : 0] ptwalk_rg_a;
  wire [55 : 0] ptwalk_rg_a_D_IN;
  wire ptwalk_rg_a_EN;

  // register ptwalk_rg_hold_epoch
  reg ptwalk_rg_hold_epoch;
  wire ptwalk_rg_hold_epoch_D_IN, ptwalk_rg_hold_epoch_EN;

  // register ptwalk_rg_levels
  reg [1 : 0] ptwalk_rg_levels;
  wire [1 : 0] ptwalk_rg_levels_D_IN;
  wire ptwalk_rg_levels_EN;

  // register ptwalk_rg_state
  reg [1 : 0] ptwalk_rg_state;
  reg [1 : 0] ptwalk_rg_state_D_IN;
  wire ptwalk_rg_state_EN;

  // register rg_burst_count
  reg [7 : 0] rg_burst_count;
  wire [7 : 0] rg_burst_count_D_IN;
  wire rg_burst_count_EN;

  // register rg_ptw_state
  reg [1 : 0] rg_ptw_state;
  reg [1 : 0] rg_ptw_state_D_IN;
  wire rg_ptw_state_EN;

  // register rg_read_line_req
  reg [52 : 0] rg_read_line_req;
  wire [52 : 0] rg_read_line_req_D_IN;
  wire rg_read_line_req_EN;

  // register rg_shift_amount
  reg [8 : 0] rg_shift_amount;
  wire [8 : 0] rg_shift_amount_D_IN;
  wire rg_shift_amount_EN;

  // register wr_write_req
  reg [32 : 0] wr_write_req;
  wire [32 : 0] wr_write_req_D_IN;
  wire wr_write_req_EN;

  // ports of submodule dmem
  wire [555 : 0] dmem_mv_write_mem_req_rd;
  wire [142 : 0] dmem_put_core_req_put;
  wire [140 : 0] dmem_get_hold_req_get;
  wire [71 : 0] dmem_get_core_resp_get, dmem_get_ptw_resp_get;
  wire [65 : 0] dmem_get_req_to_ptw_get, dmem_put_read_mem_resp_put;
  wire [63 : 0] dmem_ma_mstatus_from_csr_m, dmem_ma_satp_from_csr_s;
  wire [62 : 0] dmem_put_resp_from_ptw_put;
  wire [43 : 0] dmem_get_read_mem_req_get;
  wire [12 : 0] dmem_mv_dcache_perf_counters;
  wire [1 : 0] dmem_ma_curr_priv_c;
  wire dmem_EN_get_core_resp_get,
       dmem_EN_get_hold_req_get,
       dmem_EN_get_ptw_resp_get,
       dmem_EN_get_read_mem_req_get,
       dmem_EN_get_req_to_ptw_get,
       dmem_EN_ma_cache_enable,
       dmem_EN_ma_mstatus_from_csr,
       dmem_EN_ma_perform_store,
       dmem_EN_ma_satp_from_csr,
       dmem_EN_ma_write_mem_req_deq,
       dmem_EN_put_core_req_put,
       dmem_EN_put_read_mem_resp_put,
       dmem_EN_put_resp_from_ptw_put,
       dmem_EN_put_write_mem_resp_put,
       dmem_RDY_get_core_resp_get,
       dmem_RDY_get_hold_req_get,
       dmem_RDY_get_ptw_resp_get,
       dmem_RDY_get_read_mem_req_get,
       dmem_RDY_get_req_to_ptw_get,
       dmem_RDY_ma_perform_store,
       dmem_RDY_ma_write_mem_req_deq,
       dmem_RDY_mv_write_mem_req_rd,
       dmem_RDY_put_core_req_put,
       dmem_RDY_put_read_mem_resp_put,
       dmem_RDY_put_resp_from_ptw_put,
       dmem_RDY_put_write_mem_resp_put,
       dmem_ma_cache_enable_c,
       dmem_ma_perform_store_currepoch,
       dmem_mv_cache_available,
       dmem_mv_cacheable_store,
       dmem_mv_commit_store_ready,
       dmem_mv_dtlb_perf_counters,
       dmem_mv_storebuffer_empty,
       dmem_put_write_mem_resp_put;

  // ports of submodule fetch_xactor_f_rd_addr
  wire [51 : 0] fetch_xactor_f_rd_addr_D_IN, fetch_xactor_f_rd_addr_D_OUT;
  wire fetch_xactor_f_rd_addr_CLR,
       fetch_xactor_f_rd_addr_DEQ,
       fetch_xactor_f_rd_addr_EMPTY_N,
       fetch_xactor_f_rd_addr_ENQ,
       fetch_xactor_f_rd_addr_FULL_N;

  // ports of submodule fetch_xactor_f_rd_data
  wire [70 : 0] fetch_xactor_f_rd_data_D_IN, fetch_xactor_f_rd_data_D_OUT;
  wire fetch_xactor_f_rd_data_CLR,
       fetch_xactor_f_rd_data_DEQ,
       fetch_xactor_f_rd_data_EMPTY_N,
       fetch_xactor_f_rd_data_ENQ,
       fetch_xactor_f_rd_data_FULL_N;

  // ports of submodule fetch_xactor_f_wr_addr
  wire [51 : 0] fetch_xactor_f_wr_addr_D_IN, fetch_xactor_f_wr_addr_D_OUT;
  wire fetch_xactor_f_wr_addr_CLR,
       fetch_xactor_f_wr_addr_DEQ,
       fetch_xactor_f_wr_addr_EMPTY_N,
       fetch_xactor_f_wr_addr_ENQ;

  // ports of submodule fetch_xactor_f_wr_data
  wire [76 : 0] fetch_xactor_f_wr_data_D_IN, fetch_xactor_f_wr_data_D_OUT;
  wire fetch_xactor_f_wr_data_CLR,
       fetch_xactor_f_wr_data_DEQ,
       fetch_xactor_f_wr_data_EMPTY_N,
       fetch_xactor_f_wr_data_ENQ;

  // ports of submodule fetch_xactor_f_wr_resp
  wire [5 : 0] fetch_xactor_f_wr_resp_D_IN;
  wire fetch_xactor_f_wr_resp_CLR,
       fetch_xactor_f_wr_resp_DEQ,
       fetch_xactor_f_wr_resp_ENQ,
       fetch_xactor_f_wr_resp_FULL_N;

  // ports of submodule imem
  wire [67 : 0] imem_put_core_req_put;
  wire [65 : 0] imem_get_request_to_ptw_get, imem_put_read_mem_resp_put;
  wire [63 : 0] imem_ma_satp_from_csr_s;
  wire [62 : 0] imem_put_response_frm_ptw_put;
  wire [43 : 0] imem_get_read_mem_req_get;
  wire [40 : 0] imem_get_core_resp_get;
  wire [4 : 0] imem_mv_icache_perf_counters;
  wire [1 : 0] imem_ma_curr_priv_c;
  wire imem_EN_get_core_resp_get,
       imem_EN_get_read_mem_req_get,
       imem_EN_get_request_to_ptw_get,
       imem_EN_ma_cache_enable,
       imem_EN_ma_curr_priv,
       imem_EN_ma_satp_from_csr,
       imem_EN_put_core_req_put,
       imem_EN_put_read_mem_resp_put,
       imem_EN_put_response_frm_ptw_put,
       imem_RDY_get_core_resp_get,
       imem_RDY_get_read_mem_req_get,
       imem_RDY_get_request_to_ptw_get,
       imem_RDY_put_core_req_put,
       imem_RDY_put_read_mem_resp_put,
       imem_RDY_put_response_frm_ptw_put,
       imem_ma_cache_enable_c,
       imem_mv_itlb_perf_counters;

  // ports of submodule memory_xactor_f_rd_addr
  wire [51 : 0] memory_xactor_f_rd_addr_D_IN, memory_xactor_f_rd_addr_D_OUT;
  wire memory_xactor_f_rd_addr_CLR,
       memory_xactor_f_rd_addr_DEQ,
       memory_xactor_f_rd_addr_EMPTY_N,
       memory_xactor_f_rd_addr_ENQ,
       memory_xactor_f_rd_addr_FULL_N;

  // ports of submodule memory_xactor_f_rd_data
  wire [70 : 0] memory_xactor_f_rd_data_D_IN, memory_xactor_f_rd_data_D_OUT;
  wire memory_xactor_f_rd_data_CLR,
       memory_xactor_f_rd_data_DEQ,
       memory_xactor_f_rd_data_EMPTY_N,
       memory_xactor_f_rd_data_ENQ,
       memory_xactor_f_rd_data_FULL_N;

  // ports of submodule memory_xactor_f_wr_addr
  wire [51 : 0] memory_xactor_f_wr_addr_D_IN, memory_xactor_f_wr_addr_D_OUT;
  wire memory_xactor_f_wr_addr_CLR,
       memory_xactor_f_wr_addr_DEQ,
       memory_xactor_f_wr_addr_EMPTY_N,
       memory_xactor_f_wr_addr_ENQ,
       memory_xactor_f_wr_addr_FULL_N;

  // ports of submodule memory_xactor_f_wr_data
  wire [76 : 0] memory_xactor_f_wr_data_D_IN, memory_xactor_f_wr_data_D_OUT;
  wire memory_xactor_f_wr_data_CLR,
       memory_xactor_f_wr_data_DEQ,
       memory_xactor_f_wr_data_EMPTY_N,
       memory_xactor_f_wr_data_ENQ,
       memory_xactor_f_wr_data_FULL_N;

  // ports of submodule memory_xactor_f_wr_resp
  wire [5 : 0] memory_xactor_f_wr_resp_D_IN, memory_xactor_f_wr_resp_D_OUT;
  wire memory_xactor_f_wr_resp_CLR,
       memory_xactor_f_wr_resp_DEQ,
       memory_xactor_f_wr_resp_EMPTY_N,
       memory_xactor_f_wr_resp_ENQ,
       memory_xactor_f_wr_resp_FULL_N;

  // ports of submodule ptwalk_ff_hold_req
  wire [140 : 0] ptwalk_ff_hold_req_D_IN, ptwalk_ff_hold_req_D_OUT;
  wire ptwalk_ff_hold_req_CLR,
       ptwalk_ff_hold_req_DEQ,
       ptwalk_ff_hold_req_EMPTY_N,
       ptwalk_ff_hold_req_ENQ,
       ptwalk_ff_hold_req_FULL_N;

  // ports of submodule ptwalk_ff_memory_req
  reg [142 : 0] ptwalk_ff_memory_req_D_IN;
  wire [142 : 0] ptwalk_ff_memory_req_D_OUT;
  wire ptwalk_ff_memory_req_CLR,
       ptwalk_ff_memory_req_DEQ,
       ptwalk_ff_memory_req_EMPTY_N,
       ptwalk_ff_memory_req_ENQ,
       ptwalk_ff_memory_req_FULL_N;

  // ports of submodule ptwalk_ff_memory_response
  wire [71 : 0] ptwalk_ff_memory_response_D_IN,
		ptwalk_ff_memory_response_D_OUT;
  wire ptwalk_ff_memory_response_CLR,
       ptwalk_ff_memory_response_DEQ,
       ptwalk_ff_memory_response_EMPTY_N,
       ptwalk_ff_memory_response_ENQ,
       ptwalk_ff_memory_response_FULL_N;

  // ports of submodule ptwalk_ff_req_queue
  wire [65 : 0] ptwalk_ff_req_queue_D_IN, ptwalk_ff_req_queue_D_OUT;
  wire ptwalk_ff_req_queue_CLR,
       ptwalk_ff_req_queue_DEQ,
       ptwalk_ff_req_queue_EMPTY_N,
       ptwalk_ff_req_queue_ENQ,
       ptwalk_ff_req_queue_FULL_N;

  // ports of submodule ptwalk_ff_response
  wire [62 : 0] ptwalk_ff_response_D_IN, ptwalk_ff_response_D_OUT;
  wire ptwalk_ff_response_CLR,
       ptwalk_ff_response_DEQ,
       ptwalk_ff_response_EMPTY_N,
       ptwalk_ff_response_ENQ,
       ptwalk_ff_response_FULL_N;

  // ports of submodule riscv
  wire [167 : 0] riscv_dump_get;
  wire [142 : 0] riscv_memory_request_get;
  wire [115 : 0] riscv_mv_pmp_addr;
  wire [71 : 0] riscv_memory_response_put;
  wire [67 : 0] riscv_instr_req_get;
  wire [65 : 0] riscv_write_resp_r;
  wire [63 : 0] riscv_ma_clint_mtime_c_mtime,
		riscv_mv_csr_mstatus,
		riscv_mv_csr_satp;
  wire [40 : 0] riscv_inst_response_put;
  wire [31 : 0] riscv_mv_pmp_cfg;
  wire [12 : 0] riscv_ma_dcache_counters_i;
  wire [4 : 0] riscv_ma_icache_counters_i;
  wire [2 : 0] riscv_mv_cacheenable;
  wire [1 : 0] riscv_mv_curr_priv;
  wire riscv_EN_dump_get,
       riscv_EN_inst_response_put,
       riscv_EN_instr_req_get,
       riscv_EN_ma_cache_ready,
       riscv_EN_ma_clint_msip,
       riscv_EN_ma_clint_mtime,
       riscv_EN_ma_clint_mtip,
       riscv_EN_ma_dcache_counters,
       riscv_EN_ma_dtlb_counters,
       riscv_EN_ma_icache_counters,
       riscv_EN_ma_itlb_counters,
       riscv_EN_ma_set_meip,
       riscv_EN_ma_set_seip,
       riscv_EN_memory_request_get,
       riscv_EN_memory_response_put,
       riscv_EN_write_resp,
       riscv_RDY_dump_get,
       riscv_RDY_inst_response_put,
       riscv_RDY_instr_req_get,
       riscv_RDY_memory_request_get,
       riscv_RDY_memory_response_put,
       riscv_cache_is_available_avail,
       riscv_initiate_store_fst,
       riscv_initiate_store_snd,
       riscv_ma_cache_ready_r,
       riscv_ma_clint_msip_intrpt,
       riscv_ma_clint_mtip_intrpt,
       riscv_ma_dtlb_counters_i,
       riscv_ma_itlb_counters_i,
       riscv_ma_set_meip_ex_i,
       riscv_ma_set_seip_ex_i,
       riscv_store_is_cached_c,
       riscv_storebuffer_empty_e;

  // rule scheduling signals
  wire CAN_FIRE_RL_core_req_mkConnectionGetPut,
       CAN_FIRE_RL_dtlb_req_to_ptwalk,
       CAN_FIRE_RL_handle_dmem_line_write_resp,
       CAN_FIRE_RL_itlb_req_to_ptwalk,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionGetPut_2,
       CAN_FIRE_RL_mkConnectionGetPut_3,
       CAN_FIRE_RL_mkConnectionGetPut_4,
       CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_mkConnectionVtoAf_1,
       CAN_FIRE_RL_mkConnectionVtoAf_10,
       CAN_FIRE_RL_mkConnectionVtoAf_11,
       CAN_FIRE_RL_mkConnectionVtoAf_12,
       CAN_FIRE_RL_mkConnectionVtoAf_13,
       CAN_FIRE_RL_mkConnectionVtoAf_14,
       CAN_FIRE_RL_mkConnectionVtoAf_15,
       CAN_FIRE_RL_mkConnectionVtoAf_2,
       CAN_FIRE_RL_mkConnectionVtoAf_3,
       CAN_FIRE_RL_mkConnectionVtoAf_4,
       CAN_FIRE_RL_mkConnectionVtoAf_5,
       CAN_FIRE_RL_mkConnectionVtoAf_6,
       CAN_FIRE_RL_mkConnectionVtoAf_7,
       CAN_FIRE_RL_mkConnectionVtoAf_8,
       CAN_FIRE_RL_mkConnectionVtoAf_9,
       CAN_FIRE_RL_ptwalk_check_pte,
       CAN_FIRE_RL_ptwalk_deq_holding_fifo,
       CAN_FIRE_RL_ptwalk_generate_pte,
       CAN_FIRE_RL_ptwalk_req_mkConnectionGetPut,
       CAN_FIRE_RL_ptwalk_resend_core_req_to_cache,
       CAN_FIRE_RL_ptwalk_resp_to_dtlb,
       CAN_FIRE_RL_ptwalk_resp_to_itlb,
       CAN_FIRE_RL_rl_dmem_burst_write_data,
       CAN_FIRE_RL_rl_handle_delayed_read,
       CAN_FIRE_RL_rl_handle_dmem_line_read_request,
       CAN_FIRE_RL_rl_handle_dmem_line_resp,
       CAN_FIRE_RL_rl_handle_dmem_write_request,
       CAN_FIRE_RL_rl_handle_imem_line_request,
       CAN_FIRE_RL_rl_handle_imem_line_resp,
       CAN_FIRE_RL_rl_initiate_store,
       CAN_FIRE_RL_rl_map_dmem_enable,
       CAN_FIRE_RL_rl_map_imem_enable,
       CAN_FIRE_RL_rl_pulldown_seip,
       CAN_FIRE_io_dump_get,
       CAN_FIRE_master_d_m_arready,
       CAN_FIRE_master_d_m_awready,
       CAN_FIRE_master_d_m_bvalid,
       CAN_FIRE_master_d_m_rvalid,
       CAN_FIRE_master_d_m_wready,
       CAN_FIRE_master_i_m_arready,
       CAN_FIRE_master_i_m_awready,
       CAN_FIRE_master_i_m_bvalid,
       CAN_FIRE_master_i_m_rvalid,
       CAN_FIRE_master_i_m_wready,
       CAN_FIRE_sb_clint_msip_put,
       CAN_FIRE_sb_clint_mtime_put,
       CAN_FIRE_sb_clint_mtip_put,
       CAN_FIRE_sb_externalinterrupt_put,
       WILL_FIRE_RL_core_req_mkConnectionGetPut,
       WILL_FIRE_RL_dtlb_req_to_ptwalk,
       WILL_FIRE_RL_handle_dmem_line_write_resp,
       WILL_FIRE_RL_itlb_req_to_ptwalk,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_mkConnectionGetPut_3,
       WILL_FIRE_RL_mkConnectionGetPut_4,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_mkConnectionVtoAf_1,
       WILL_FIRE_RL_mkConnectionVtoAf_10,
       WILL_FIRE_RL_mkConnectionVtoAf_11,
       WILL_FIRE_RL_mkConnectionVtoAf_12,
       WILL_FIRE_RL_mkConnectionVtoAf_13,
       WILL_FIRE_RL_mkConnectionVtoAf_14,
       WILL_FIRE_RL_mkConnectionVtoAf_15,
       WILL_FIRE_RL_mkConnectionVtoAf_2,
       WILL_FIRE_RL_mkConnectionVtoAf_3,
       WILL_FIRE_RL_mkConnectionVtoAf_4,
       WILL_FIRE_RL_mkConnectionVtoAf_5,
       WILL_FIRE_RL_mkConnectionVtoAf_6,
       WILL_FIRE_RL_mkConnectionVtoAf_7,
       WILL_FIRE_RL_mkConnectionVtoAf_8,
       WILL_FIRE_RL_mkConnectionVtoAf_9,
       WILL_FIRE_RL_ptwalk_check_pte,
       WILL_FIRE_RL_ptwalk_deq_holding_fifo,
       WILL_FIRE_RL_ptwalk_generate_pte,
       WILL_FIRE_RL_ptwalk_req_mkConnectionGetPut,
       WILL_FIRE_RL_ptwalk_resend_core_req_to_cache,
       WILL_FIRE_RL_ptwalk_resp_to_dtlb,
       WILL_FIRE_RL_ptwalk_resp_to_itlb,
       WILL_FIRE_RL_rl_dmem_burst_write_data,
       WILL_FIRE_RL_rl_handle_delayed_read,
       WILL_FIRE_RL_rl_handle_dmem_line_read_request,
       WILL_FIRE_RL_rl_handle_dmem_line_resp,
       WILL_FIRE_RL_rl_handle_dmem_write_request,
       WILL_FIRE_RL_rl_handle_imem_line_request,
       WILL_FIRE_RL_rl_handle_imem_line_resp,
       WILL_FIRE_RL_rl_initiate_store,
       WILL_FIRE_RL_rl_map_dmem_enable,
       WILL_FIRE_RL_rl_map_imem_enable,
       WILL_FIRE_RL_rl_pulldown_seip,
       WILL_FIRE_io_dump_get,
       WILL_FIRE_master_d_m_arready,
       WILL_FIRE_master_d_m_awready,
       WILL_FIRE_master_d_m_bvalid,
       WILL_FIRE_master_d_m_rvalid,
       WILL_FIRE_master_d_m_wready,
       WILL_FIRE_master_i_m_arready,
       WILL_FIRE_master_i_m_awready,
       WILL_FIRE_master_i_m_bvalid,
       WILL_FIRE_master_i_m_rvalid,
       WILL_FIRE_master_i_m_wready,
       WILL_FIRE_sb_clint_msip_put,
       WILL_FIRE_sb_clint_mtime_put,
       WILL_FIRE_sb_clint_mtip_put,
       WILL_FIRE_sb_externalinterrupt_put;

  // inputs to muxes for submodule ports
  wire [142 : 0] MUX_ptwalk_ff_memory_req_enq_1__VAL_1,
		 MUX_ptwalk_ff_memory_req_enq_1__VAL_2,
		 MUX_ptwalk_ff_memory_req_enq_1__VAL_3;
  wire [76 : 0] MUX_memory_xactor_f_wr_data_enq_1__VAL_1,
		MUX_memory_xactor_f_wr_data_enq_1__VAL_2;
  wire [52 : 0] MUX_rg_read_line_req_write_1__VAL_1,
		MUX_rg_read_line_req_write_1__VAL_2;
  wire [51 : 0] MUX_memory_xactor_f_rd_addr_enq_1__VAL_1;
  wire [32 : 0] MUX_wr_write_req_write_1__VAL_1,
		MUX_wr_write_req_write_1__VAL_2;
  wire [7 : 0] MUX_rg_burst_count_write_1__VAL_2;
  wire [1 : 0] MUX_ptwalk_rg_state_write_1__VAL_1;
  wire MUX_memory_xactor_f_rd_addr_enq_1__SEL_1,
       MUX_ptwalk_ff_memory_req_enq_1__SEL_1,
       MUX_rg_burst_count_write_1__SEL_1,
       MUX_rg_ptw_state_write_1__SEL_1,
       MUX_rg_read_line_req_write_1__SEL_1,
       MUX_wr_write_req_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d398;
  reg TASK_testplusargs___d399;
  reg TASK_testplusargs___d400;
  reg [63 : 0] v__h7246;
  reg TASK_testplusargs___d414;
  reg TASK_testplusargs___d415;
  reg TASK_testplusargs___d416;
  reg [63 : 0] v__h7462;
  reg TASK_testplusargs___d467;
  reg TASK_testplusargs___d468;
  reg TASK_testplusargs___d469;
  reg [63 : 0] v__h8062;
  reg TASK_testplusargs___d485;
  reg TASK_testplusargs___d486;
  reg TASK_testplusargs___d487;
  reg [63 : 0] v__h8286;
  reg TASK_testplusargs___d496;
  reg TASK_testplusargs___d497;
  reg TASK_testplusargs___d498;
  reg [63 : 0] v__h8455;
  reg TASK_testplusargs___d518;
  reg TASK_testplusargs___d519;
  reg TASK_testplusargs___d520;
  reg [63 : 0] v__h8725;
  reg TASK_testplusargs___d566;
  reg TASK_testplusargs___d567;
  reg TASK_testplusargs___d568;
  reg [63 : 0] v__h9150;
  reg TASK_testplusargs___d587;
  reg TASK_testplusargs___d588;
  reg TASK_testplusargs___d589;
  reg [63 : 0] v__h9642;
  reg TASK_testplusargs___d604;
  reg TASK_testplusargs___d605;
  reg TASK_testplusargs___d606;
  reg [63 : 0] v__h9891;
  reg TASK_testplusargs___d9;
  reg TASK_testplusargs___d10;
  reg TASK_testplusargs___d11;
  reg [63 : 0] v__h1351;
  reg TASK_testplusargs___d44;
  reg TASK_testplusargs___d45;
  reg TASK_testplusargs___d46;
  reg [63 : 0] v__h1711;
  reg TASK_testplusargs___d53;
  reg TASK_testplusargs___d54;
  reg TASK_testplusargs___d55;
  reg [63 : 0] v__h1873;
  reg TASK_testplusargs___d96;
  reg TASK_testplusargs___d97;
  reg TASK_testplusargs___d98;
  reg [63 : 0] v__h2257;
  reg TASK_testplusargs___d110;
  reg TASK_testplusargs___d111;
  reg TASK_testplusargs___d112;
  reg [63 : 0] v__h2441;
  reg TASK_testplusargs___d116;
  reg TASK_testplusargs___d117;
  reg TASK_testplusargs___d118;
  reg [63 : 0] v__h2619;
  reg TASK_testplusargs___d272;
  reg TASK_testplusargs___d273;
  reg TASK_testplusargs___d274;
  reg [63 : 0] v__h3439;
  reg TASK_testplusargs___d326;
  reg TASK_testplusargs___d327;
  reg TASK_testplusargs___d328;
  reg [63 : 0] v__h3981;
  reg TASK_testplusargs___d357;
  reg TASK_testplusargs___d358;
  reg TASK_testplusargs___d359;
  reg [63 : 0] v__h4103;
  reg NOT_ptwalk_ff_memory_response_first__02_BIT_9__ETC___d331;
  reg ptwalk_ff_memory_response_first__02_BIT_9_26_O_ETC___d362;
  reg IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d472;
  reg TASK_testplusargs_67_OR_TASK_testplusargs_68_A_ETC___d475;
  reg TASK_testplusargs_67_OR_TASK_testplusargs_68_A_ETC___d479;
  reg TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d18;
  reg TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d20;
  reg TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d27;
  reg TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d29;
  reg TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d105;
  reg TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d107;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d123;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d125;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d127;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d129;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d131;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d133;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d135;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d137;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d139;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d141;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d143;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d145;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d147;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d149;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d151;
  reg TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d153;
  reg NOT_ptwalk_ff_memory_response_first__02_BIT_8__ETC___d277;
  reg ptwalk_ff_memory_response_first__02_BIT_8_22_A_ETC___d363;
  reg TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d420;
  reg TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d422;
  reg TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d424;
  reg TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d429;
  reg TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d432;
  reg TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d434;
  reg NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490;
  reg TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d524;
  reg TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d526;
  reg TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d528;
  reg TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d533;
  reg TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d536;
  reg TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d538;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d610;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d612;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d614;
  reg TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d619;
  // synopsys translate_on

  // remaining internal signals
  reg [8 : 0] CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1;
  reg [5 : 0] cause___1__h3501, cause___1__h3522;
  wire [511 : 0] x__h9545;
  wire [63 : 0] x_address__h2140, x_writedata__h2145, x_writedata__h3667;
  wire [55 : 0] a__h1805, pte_address__h1806, x__h3847;
  wire [31 : 0] wr_write_req_BITS_31_TO_0__q2;
  wire [11 : 0] x__h1988;
  wire [8 : 0] x__h9453;
  wire [7 : 0] x__h9490;
  wire [6 : 0] IF_NOT_ptwalk_ff_memory_response_first__02_BIT_ETC___d252;
  wire [5 : 0] IF_NOT_ptwalk_ff_memory_response_first__02_BIT_ETC___d249,
	       _theResult_____1__h3353;
  wire [3 : 0] aw_awid__h8968,
	       dmem_request_arid__h7939,
	       imem_request_arid__h7126;
  wire [2 : 0] value__h7281, value__h9214, x__h8998;
  wire [1 : 0] max_levels__h1804, priv__h2552, x__h3564;
  wire IF_IF_ptwalk_wr_mstatus_whas__5_THEN_ptwalk_wr_ETC___d197,
       IF_IF_ptwalk_wr_mstatus_whas__5_THEN_ptwalk_wr_ETC___d257,
       IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457,
       NOT_ptwalk_ff_memory_response_first__02_BIT_8__ETC___d204,
       NOT_ptwalk_ff_memory_response_first__02_BIT_8__ETC___d279,
       NOT_ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_ETC___d238,
       NOT_ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_ETC___d345,
       NOT_ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_ETC___d347,
       NOT_ptwalk_rg_levels_9_EQ_0_55_86_OR_ptwalk_ff_ETC___d353,
       NOT_ptwalk_rg_levels_9_EQ_1_56_89_OR_ptwalk_ff_ETC___d318,
       NOT_ptwalk_rg_levels_9_EQ_1_56_89_OR_ptwalk_ff_ETC___d351,
       _dand1ptwalk_ff_req_queue_EN_deq,
       ptwalk_ff_memory_response_first__02_BIT_8_22_A_ETC___d321,
       ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d199,
       ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d234,
       ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d236,
       ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d259,
       ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d307,
       ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d315,
       ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d349,
       ptwalk_rg_levels_9_EQ_0_55_AND_NOT_ptwalk_ff_m_ETC___d242,
       ptwalk_rg_levels_9_EQ_0_55_AND_NOT_ptwalk_ff_m_ETC___d262,
       ptwalk_rg_levels_9_EQ_1_56_AND_NOT_ptwalk_ff_m_ETC___d240;

  // value method master_d_m_awvalid
  assign master_d_AWVALID = memory_xactor_f_wr_addr_EMPTY_N ;

  // value method master_d_m_awaddr
  assign master_d_AWADDR = memory_xactor_f_wr_addr_D_OUT[51:20] ;

  // value method master_d_m_awprot
  assign master_d_AWPROT = memory_xactor_f_wr_addr_D_OUT[19:17] ;

  // value method master_d_m_awlen
  assign master_d_AWLEN = memory_xactor_f_wr_addr_D_OUT[16:9] ;

  // value method master_d_m_awsize
  assign master_d_AWSIZE = memory_xactor_f_wr_addr_D_OUT[8:6] ;

  // value method master_d_m_awburst
  assign master_d_AWBURST = memory_xactor_f_wr_addr_D_OUT[5:4] ;

  // value method master_d_m_awid
  assign master_d_AWID = memory_xactor_f_wr_addr_D_OUT[3:0] ;

  // action method master_d_m_awready
  assign CAN_FIRE_master_d_m_awready = 1'd1 ;
  assign WILL_FIRE_master_d_m_awready = 1'd1 ;

  // value method master_d_m_wvalid
  assign master_d_WVALID = memory_xactor_f_wr_data_EMPTY_N ;

  // value method master_d_m_wdata
  assign master_d_WDATA = memory_xactor_f_wr_data_D_OUT[76:13] ;

  // value method master_d_m_wstrb
  assign master_d_WSTRB = memory_xactor_f_wr_data_D_OUT[12:5] ;

  // value method master_d_m_wlast
  assign master_d_WLAST = memory_xactor_f_wr_data_D_OUT[0] ;

  // value method master_d_m_wid
  assign master_d_WID = memory_xactor_f_wr_data_D_OUT[4:1] ;

  // action method master_d_m_wready
  assign CAN_FIRE_master_d_m_wready = 1'd1 ;
  assign WILL_FIRE_master_d_m_wready = 1'd1 ;

  // action method master_d_m_bvalid
  assign CAN_FIRE_master_d_m_bvalid = 1'd1 ;
  assign WILL_FIRE_master_d_m_bvalid = 1'd1 ;

  // value method master_d_m_bready
  assign master_d_BREADY = memory_xactor_f_wr_resp_FULL_N ;

  // value method master_d_m_arvalid
  assign master_d_ARVALID = memory_xactor_f_rd_addr_EMPTY_N ;

  // value method master_d_m_araddr
  assign master_d_ARADDR = memory_xactor_f_rd_addr_D_OUT[51:20] ;

  // value method master_d_m_arprot
  assign master_d_ARPROT = memory_xactor_f_rd_addr_D_OUT[19:17] ;

  // value method master_d_m_arlen
  assign master_d_ARLEN = memory_xactor_f_rd_addr_D_OUT[13:6] ;

  // value method master_d_m_arsize
  assign master_d_ARSIZE = memory_xactor_f_rd_addr_D_OUT[16:14] ;

  // value method master_d_m_arburst
  assign master_d_ARBURST = memory_xactor_f_rd_addr_D_OUT[5:4] ;

  // value method master_d_m_arid
  assign master_d_ARID = memory_xactor_f_rd_addr_D_OUT[3:0] ;

  // action method master_d_m_arready
  assign CAN_FIRE_master_d_m_arready = 1'd1 ;
  assign WILL_FIRE_master_d_m_arready = 1'd1 ;

  // action method master_d_m_rvalid
  assign CAN_FIRE_master_d_m_rvalid = 1'd1 ;
  assign WILL_FIRE_master_d_m_rvalid = 1'd1 ;

  // value method master_d_m_rready
  assign master_d_RREADY = memory_xactor_f_rd_data_FULL_N ;

  // value method master_i_m_awvalid
  assign master_i_AWVALID = fetch_xactor_f_wr_addr_EMPTY_N ;

  // value method master_i_m_awaddr
  assign master_i_AWADDR = fetch_xactor_f_wr_addr_D_OUT[51:20] ;

  // value method master_i_m_awprot
  assign master_i_AWPROT = fetch_xactor_f_wr_addr_D_OUT[19:17] ;

  // value method master_i_m_awlen
  assign master_i_AWLEN = fetch_xactor_f_wr_addr_D_OUT[16:9] ;

  // value method master_i_m_awsize
  assign master_i_AWSIZE = fetch_xactor_f_wr_addr_D_OUT[8:6] ;

  // value method master_i_m_awburst
  assign master_i_AWBURST = fetch_xactor_f_wr_addr_D_OUT[5:4] ;

  // value method master_i_m_awid
  assign master_i_AWID = fetch_xactor_f_wr_addr_D_OUT[3:0] ;

  // action method master_i_m_awready
  assign CAN_FIRE_master_i_m_awready = 1'd1 ;
  assign WILL_FIRE_master_i_m_awready = 1'd1 ;

  // value method master_i_m_wvalid
  assign master_i_WVALID = fetch_xactor_f_wr_data_EMPTY_N ;

  // value method master_i_m_wdata
  assign master_i_WDATA = fetch_xactor_f_wr_data_D_OUT[76:13] ;

  // value method master_i_m_wstrb
  assign master_i_WSTRB = fetch_xactor_f_wr_data_D_OUT[12:5] ;

  // value method master_i_m_wlast
  assign master_i_WLAST = fetch_xactor_f_wr_data_D_OUT[0] ;

  // value method master_i_m_wid
  assign master_i_WID = fetch_xactor_f_wr_data_D_OUT[4:1] ;

  // action method master_i_m_wready
  assign CAN_FIRE_master_i_m_wready = 1'd1 ;
  assign WILL_FIRE_master_i_m_wready = 1'd1 ;

  // action method master_i_m_bvalid
  assign CAN_FIRE_master_i_m_bvalid = 1'd1 ;
  assign WILL_FIRE_master_i_m_bvalid = 1'd1 ;

  // value method master_i_m_bready
  assign master_i_BREADY = fetch_xactor_f_wr_resp_FULL_N ;

  // value method master_i_m_arvalid
  assign master_i_ARVALID = fetch_xactor_f_rd_addr_EMPTY_N ;

  // value method master_i_m_araddr
  assign master_i_ARADDR = fetch_xactor_f_rd_addr_D_OUT[51:20] ;

  // value method master_i_m_arprot
  assign master_i_ARPROT = fetch_xactor_f_rd_addr_D_OUT[19:17] ;

  // value method master_i_m_arlen
  assign master_i_ARLEN = fetch_xactor_f_rd_addr_D_OUT[13:6] ;

  // value method master_i_m_arsize
  assign master_i_ARSIZE = fetch_xactor_f_rd_addr_D_OUT[16:14] ;

  // value method master_i_m_arburst
  assign master_i_ARBURST = fetch_xactor_f_rd_addr_D_OUT[5:4] ;

  // value method master_i_m_arid
  assign master_i_ARID = fetch_xactor_f_rd_addr_D_OUT[3:0] ;

  // action method master_i_m_arready
  assign CAN_FIRE_master_i_m_arready = 1'd1 ;
  assign WILL_FIRE_master_i_m_arready = 1'd1 ;

  // action method master_i_m_rvalid
  assign CAN_FIRE_master_i_m_rvalid = 1'd1 ;
  assign WILL_FIRE_master_i_m_rvalid = 1'd1 ;

  // value method master_i_m_rready
  assign master_i_RREADY = fetch_xactor_f_rd_data_FULL_N ;

  // action method sb_clint_msip_put
  assign RDY_sb_clint_msip_put = 1'd1 ;
  assign CAN_FIRE_sb_clint_msip_put = 1'd1 ;
  assign WILL_FIRE_sb_clint_msip_put = EN_sb_clint_msip_put ;

  // action method sb_clint_mtip_put
  assign RDY_sb_clint_mtip_put = 1'd1 ;
  assign CAN_FIRE_sb_clint_mtip_put = 1'd1 ;
  assign WILL_FIRE_sb_clint_mtip_put = EN_sb_clint_mtip_put ;

  // action method sb_clint_mtime_put
  assign RDY_sb_clint_mtime_put = 1'd1 ;
  assign CAN_FIRE_sb_clint_mtime_put = 1'd1 ;
  assign WILL_FIRE_sb_clint_mtime_put = EN_sb_clint_mtime_put ;

  // action method sb_externalinterrupt_put
  assign RDY_sb_externalinterrupt_put = 1'd1 ;
  assign CAN_FIRE_sb_externalinterrupt_put = 1'd1 ;
  assign WILL_FIRE_sb_externalinterrupt_put = EN_sb_externalinterrupt_put ;

  // actionvalue method io_dump_get
  assign io_dump_get = riscv_dump_get ;
  assign RDY_io_dump_get = riscv_RDY_dump_get ;
  assign CAN_FIRE_io_dump_get = riscv_RDY_dump_get ;
  assign WILL_FIRE_io_dump_get = EN_io_dump_get ;

  // submodule dmem
  mkdmem #(.id(hartid[31:0])) dmem(.pmp_cfg_0(riscv_mv_pmp_cfg[7:0]),
				   .pmp_cfg_1(riscv_mv_pmp_cfg[15:8]),
				   .pmp_cfg_2(riscv_mv_pmp_cfg[23:16]),
				   .pmp_cfg_3(riscv_mv_pmp_cfg[31:24]),
				   .pmp_addr_0(riscv_mv_pmp_addr[28:0]),
				   .pmp_addr_1(riscv_mv_pmp_addr[57:29]),
				   .pmp_addr_2(riscv_mv_pmp_addr[86:58]),
				   .pmp_addr_3(riscv_mv_pmp_addr[115:87]),
				   .CLK(CLK),
				   .RST_N(RST_N),
				   .ma_cache_enable_c(dmem_ma_cache_enable_c),
				   .ma_curr_priv_c(dmem_ma_curr_priv_c),
				   .ma_mstatus_from_csr_m(dmem_ma_mstatus_from_csr_m),
				   .ma_perform_store_currepoch(dmem_ma_perform_store_currepoch),
				   .ma_satp_from_csr_s(dmem_ma_satp_from_csr_s),
				   .put_core_req_put(dmem_put_core_req_put),
				   .put_read_mem_resp_put(dmem_put_read_mem_resp_put),
				   .put_resp_from_ptw_put(dmem_put_resp_from_ptw_put),
				   .put_write_mem_resp_put(dmem_put_write_mem_resp_put),
				   .EN_put_core_req_put(dmem_EN_put_core_req_put),
				   .EN_get_core_resp_get(dmem_EN_get_core_resp_get),
				   .EN_ma_perform_store(dmem_EN_ma_perform_store),
				   .EN_put_write_mem_resp_put(dmem_EN_put_write_mem_resp_put),
				   .EN_ma_write_mem_req_deq(dmem_EN_ma_write_mem_req_deq),
				   .EN_ma_cache_enable(dmem_EN_ma_cache_enable),
				   .EN_get_read_mem_req_get(dmem_EN_get_read_mem_req_get),
				   .EN_put_read_mem_resp_put(dmem_EN_put_read_mem_resp_put),
				   .EN_get_ptw_resp_get(dmem_EN_get_ptw_resp_get),
				   .EN_get_req_to_ptw_get(dmem_EN_get_req_to_ptw_get),
				   .EN_put_resp_from_ptw_put(dmem_EN_put_resp_from_ptw_put),
				   .EN_ma_satp_from_csr(dmem_EN_ma_satp_from_csr),
				   .EN_ma_mstatus_from_csr(dmem_EN_ma_mstatus_from_csr),
				   .EN_get_hold_req_get(dmem_EN_get_hold_req_get),
				   .RDY_put_core_req_put(dmem_RDY_put_core_req_put),
				   .get_core_resp_get(dmem_get_core_resp_get),
				   .RDY_get_core_resp_get(dmem_RDY_get_core_resp_get),
				   .mv_storebuffer_empty(dmem_mv_storebuffer_empty),
				   .RDY_mv_storebuffer_empty(),
				   .RDY_ma_perform_store(dmem_RDY_ma_perform_store),
				   .mv_write_mem_req_rd(dmem_mv_write_mem_req_rd),
				   .RDY_mv_write_mem_req_rd(dmem_RDY_mv_write_mem_req_rd),
				   .RDY_put_write_mem_resp_put(dmem_RDY_put_write_mem_resp_put),
				   .RDY_ma_write_mem_req_deq(dmem_RDY_ma_write_mem_req_deq),
				   .RDY_ma_cache_enable(),
				   .get_read_mem_req_get(dmem_get_read_mem_req_get),
				   .RDY_get_read_mem_req_get(dmem_RDY_get_read_mem_req_get),
				   .RDY_put_read_mem_resp_put(dmem_RDY_put_read_mem_resp_put),
				   .mv_cacheable_store(dmem_mv_cacheable_store),
				   .RDY_mv_cacheable_store(),
				   .mv_cache_available(dmem_mv_cache_available),
				   .RDY_mv_cache_available(),
				   .mv_commit_store_ready(dmem_mv_commit_store_ready),
				   .RDY_mv_commit_store_ready(),
				   .get_ptw_resp_get(dmem_get_ptw_resp_get),
				   .RDY_get_ptw_resp_get(dmem_RDY_get_ptw_resp_get),
				   .get_req_to_ptw_get(dmem_get_req_to_ptw_get),
				   .RDY_get_req_to_ptw_get(dmem_RDY_get_req_to_ptw_get),
				   .RDY_put_resp_from_ptw_put(dmem_RDY_put_resp_from_ptw_put),
				   .RDY_ma_satp_from_csr(),
				   .RDY_ma_mstatus_from_csr(),
				   .get_hold_req_get(dmem_get_hold_req_get),
				   .RDY_get_hold_req_get(dmem_RDY_get_hold_req_get),
				   .mv_dcache_perf_counters(dmem_mv_dcache_perf_counters),
				   .RDY_mv_dcache_perf_counters(),
				   .mv_dtlb_perf_counters(dmem_mv_dtlb_perf_counters),
				   .RDY_mv_dtlb_perf_counters());

  // submodule fetch_xactor_f_rd_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) fetch_xactor_f_rd_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_rd_addr_D_IN),
								 .ENQ(fetch_xactor_f_rd_addr_ENQ),
								 .DEQ(fetch_xactor_f_rd_addr_DEQ),
								 .CLR(fetch_xactor_f_rd_addr_CLR),
								 .D_OUT(fetch_xactor_f_rd_addr_D_OUT),
								 .FULL_N(fetch_xactor_f_rd_addr_FULL_N),
								 .EMPTY_N(fetch_xactor_f_rd_addr_EMPTY_N));

  // submodule fetch_xactor_f_rd_data
  FIFO2 #(.width(32'd71), .guarded(1'd1)) fetch_xactor_f_rd_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_rd_data_D_IN),
								 .ENQ(fetch_xactor_f_rd_data_ENQ),
								 .DEQ(fetch_xactor_f_rd_data_DEQ),
								 .CLR(fetch_xactor_f_rd_data_CLR),
								 .D_OUT(fetch_xactor_f_rd_data_D_OUT),
								 .FULL_N(fetch_xactor_f_rd_data_FULL_N),
								 .EMPTY_N(fetch_xactor_f_rd_data_EMPTY_N));

  // submodule fetch_xactor_f_wr_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) fetch_xactor_f_wr_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_wr_addr_D_IN),
								 .ENQ(fetch_xactor_f_wr_addr_ENQ),
								 .DEQ(fetch_xactor_f_wr_addr_DEQ),
								 .CLR(fetch_xactor_f_wr_addr_CLR),
								 .D_OUT(fetch_xactor_f_wr_addr_D_OUT),
								 .FULL_N(),
								 .EMPTY_N(fetch_xactor_f_wr_addr_EMPTY_N));

  // submodule fetch_xactor_f_wr_data
  FIFO2 #(.width(32'd77), .guarded(1'd1)) fetch_xactor_f_wr_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fetch_xactor_f_wr_data_D_IN),
								 .ENQ(fetch_xactor_f_wr_data_ENQ),
								 .DEQ(fetch_xactor_f_wr_data_DEQ),
								 .CLR(fetch_xactor_f_wr_data_CLR),
								 .D_OUT(fetch_xactor_f_wr_data_D_OUT),
								 .FULL_N(),
								 .EMPTY_N(fetch_xactor_f_wr_data_EMPTY_N));

  // submodule fetch_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(1'd1)) fetch_xactor_f_wr_resp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(fetch_xactor_f_wr_resp_D_IN),
								.ENQ(fetch_xactor_f_wr_resp_ENQ),
								.DEQ(fetch_xactor_f_wr_resp_DEQ),
								.CLR(fetch_xactor_f_wr_resp_CLR),
								.D_OUT(),
								.FULL_N(fetch_xactor_f_wr_resp_FULL_N),
								.EMPTY_N());

  // submodule imem
  mkimem #(.id(hartid[31:0])) imem(.pmp_cfg_0(riscv_mv_pmp_cfg[7:0]),
				   .pmp_cfg_1(riscv_mv_pmp_cfg[15:8]),
				   .pmp_cfg_2(riscv_mv_pmp_cfg[23:16]),
				   .pmp_cfg_3(riscv_mv_pmp_cfg[31:24]),
				   .pmp_addr_0(riscv_mv_pmp_addr[28:0]),
				   .pmp_addr_1(riscv_mv_pmp_addr[57:29]),
				   .pmp_addr_2(riscv_mv_pmp_addr[86:58]),
				   .pmp_addr_3(riscv_mv_pmp_addr[115:87]),
				   .CLK(CLK),
				   .RST_N(RST_N),
				   .ma_cache_enable_c(imem_ma_cache_enable_c),
				   .ma_curr_priv_c(imem_ma_curr_priv_c),
				   .ma_satp_from_csr_s(imem_ma_satp_from_csr_s),
				   .put_core_req_put(imem_put_core_req_put),
				   .put_read_mem_resp_put(imem_put_read_mem_resp_put),
				   .put_response_frm_ptw_put(imem_put_response_frm_ptw_put),
				   .EN_put_core_req_put(imem_EN_put_core_req_put),
				   .EN_get_core_resp_get(imem_EN_get_core_resp_get),
				   .EN_ma_cache_enable(imem_EN_ma_cache_enable),
				   .EN_get_read_mem_req_get(imem_EN_get_read_mem_req_get),
				   .EN_put_read_mem_resp_put(imem_EN_put_read_mem_resp_put),
				   .EN_ma_curr_priv(imem_EN_ma_curr_priv),
				   .EN_get_request_to_ptw_get(imem_EN_get_request_to_ptw_get),
				   .EN_put_response_frm_ptw_put(imem_EN_put_response_frm_ptw_put),
				   .EN_ma_satp_from_csr(imem_EN_ma_satp_from_csr),
				   .RDY_put_core_req_put(imem_RDY_put_core_req_put),
				   .get_core_resp_get(imem_get_core_resp_get),
				   .RDY_get_core_resp_get(imem_RDY_get_core_resp_get),
				   .RDY_ma_cache_enable(),
				   .get_read_mem_req_get(imem_get_read_mem_req_get),
				   .RDY_get_read_mem_req_get(imem_RDY_get_read_mem_req_get),
				   .RDY_put_read_mem_resp_put(imem_RDY_put_read_mem_resp_put),
				   .mv_cache_available(),
				   .RDY_mv_cache_available(),
				   .RDY_ma_curr_priv(),
				   .get_request_to_ptw_get(imem_get_request_to_ptw_get),
				   .RDY_get_request_to_ptw_get(imem_RDY_get_request_to_ptw_get),
				   .RDY_put_response_frm_ptw_put(imem_RDY_put_response_frm_ptw_put),
				   .RDY_ma_satp_from_csr(),
				   .mv_icache_perf_counters(imem_mv_icache_perf_counters),
				   .RDY_mv_icache_perf_counters(),
				   .mv_itlb_perf_counters(imem_mv_itlb_perf_counters),
				   .RDY_mv_itlb_perf_counters());

  // submodule memory_xactor_f_rd_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) memory_xactor_f_rd_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_rd_addr_D_IN),
								  .ENQ(memory_xactor_f_rd_addr_ENQ),
								  .DEQ(memory_xactor_f_rd_addr_DEQ),
								  .CLR(memory_xactor_f_rd_addr_CLR),
								  .D_OUT(memory_xactor_f_rd_addr_D_OUT),
								  .FULL_N(memory_xactor_f_rd_addr_FULL_N),
								  .EMPTY_N(memory_xactor_f_rd_addr_EMPTY_N));

  // submodule memory_xactor_f_rd_data
  FIFO2 #(.width(32'd71), .guarded(1'd1)) memory_xactor_f_rd_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_rd_data_D_IN),
								  .ENQ(memory_xactor_f_rd_data_ENQ),
								  .DEQ(memory_xactor_f_rd_data_DEQ),
								  .CLR(memory_xactor_f_rd_data_CLR),
								  .D_OUT(memory_xactor_f_rd_data_D_OUT),
								  .FULL_N(memory_xactor_f_rd_data_FULL_N),
								  .EMPTY_N(memory_xactor_f_rd_data_EMPTY_N));

  // submodule memory_xactor_f_wr_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) memory_xactor_f_wr_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_wr_addr_D_IN),
								  .ENQ(memory_xactor_f_wr_addr_ENQ),
								  .DEQ(memory_xactor_f_wr_addr_DEQ),
								  .CLR(memory_xactor_f_wr_addr_CLR),
								  .D_OUT(memory_xactor_f_wr_addr_D_OUT),
								  .FULL_N(memory_xactor_f_wr_addr_FULL_N),
								  .EMPTY_N(memory_xactor_f_wr_addr_EMPTY_N));

  // submodule memory_xactor_f_wr_data
  FIFO2 #(.width(32'd77), .guarded(1'd1)) memory_xactor_f_wr_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_wr_data_D_IN),
								  .ENQ(memory_xactor_f_wr_data_ENQ),
								  .DEQ(memory_xactor_f_wr_data_DEQ),
								  .CLR(memory_xactor_f_wr_data_CLR),
								  .D_OUT(memory_xactor_f_wr_data_D_OUT),
								  .FULL_N(memory_xactor_f_wr_data_FULL_N),
								  .EMPTY_N(memory_xactor_f_wr_data_EMPTY_N));

  // submodule memory_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(1'd1)) memory_xactor_f_wr_resp(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(memory_xactor_f_wr_resp_D_IN),
								 .ENQ(memory_xactor_f_wr_resp_ENQ),
								 .DEQ(memory_xactor_f_wr_resp_DEQ),
								 .CLR(memory_xactor_f_wr_resp_CLR),
								 .D_OUT(memory_xactor_f_wr_resp_D_OUT),
								 .FULL_N(memory_xactor_f_wr_resp_FULL_N),
								 .EMPTY_N(memory_xactor_f_wr_resp_EMPTY_N));

  // submodule ptwalk_ff_hold_req
  FIFO1 #(.width(32'd141), .guarded(1'd1)) ptwalk_ff_hold_req(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ptwalk_ff_hold_req_D_IN),
							      .ENQ(ptwalk_ff_hold_req_ENQ),
							      .DEQ(ptwalk_ff_hold_req_DEQ),
							      .CLR(ptwalk_ff_hold_req_CLR),
							      .D_OUT(ptwalk_ff_hold_req_D_OUT),
							      .FULL_N(ptwalk_ff_hold_req_FULL_N),
							      .EMPTY_N(ptwalk_ff_hold_req_EMPTY_N));

  // submodule ptwalk_ff_memory_req
  FIFO2 #(.width(32'd143), .guarded(1'd1)) ptwalk_ff_memory_req(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ptwalk_ff_memory_req_D_IN),
								.ENQ(ptwalk_ff_memory_req_ENQ),
								.DEQ(ptwalk_ff_memory_req_DEQ),
								.CLR(ptwalk_ff_memory_req_CLR),
								.D_OUT(ptwalk_ff_memory_req_D_OUT),
								.FULL_N(ptwalk_ff_memory_req_FULL_N),
								.EMPTY_N(ptwalk_ff_memory_req_EMPTY_N));

  // submodule ptwalk_ff_memory_response
  FIFO2 #(.width(32'd72),
	  .guarded(1'd1)) ptwalk_ff_memory_response(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ptwalk_ff_memory_response_D_IN),
						    .ENQ(ptwalk_ff_memory_response_ENQ),
						    .DEQ(ptwalk_ff_memory_response_DEQ),
						    .CLR(ptwalk_ff_memory_response_CLR),
						    .D_OUT(ptwalk_ff_memory_response_D_OUT),
						    .FULL_N(ptwalk_ff_memory_response_FULL_N),
						    .EMPTY_N(ptwalk_ff_memory_response_EMPTY_N));

  // submodule ptwalk_ff_req_queue
  FIFO2 #(.width(32'd66), .guarded(1'd1)) ptwalk_ff_req_queue(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ptwalk_ff_req_queue_D_IN),
							      .ENQ(ptwalk_ff_req_queue_ENQ),
							      .DEQ(ptwalk_ff_req_queue_DEQ),
							      .CLR(ptwalk_ff_req_queue_CLR),
							      .D_OUT(ptwalk_ff_req_queue_D_OUT),
							      .FULL_N(ptwalk_ff_req_queue_FULL_N),
							      .EMPTY_N(ptwalk_ff_req_queue_EMPTY_N));

  // submodule ptwalk_ff_response
  FIFO2 #(.width(32'd63), .guarded(1'd1)) ptwalk_ff_response(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ptwalk_ff_response_D_IN),
							     .ENQ(ptwalk_ff_response_ENQ),
							     .DEQ(ptwalk_ff_response_DEQ),
							     .CLR(ptwalk_ff_response_CLR),
							     .D_OUT(ptwalk_ff_response_D_OUT),
							     .FULL_N(ptwalk_ff_response_FULL_N),
							     .EMPTY_N(ptwalk_ff_response_EMPTY_N));

  // submodule riscv
  mkriscv #(.hartid(hartid)) riscv(.resetpc(resetpc),
				   .CLK(CLK),
				   .RST_N(RST_N),
				   .cache_is_available_avail(riscv_cache_is_available_avail),
				   .inst_response_put(riscv_inst_response_put),
				   .ma_cache_ready_r(riscv_ma_cache_ready_r),
				   .ma_clint_msip_intrpt(riscv_ma_clint_msip_intrpt),
				   .ma_clint_mtime_c_mtime(riscv_ma_clint_mtime_c_mtime),
				   .ma_clint_mtip_intrpt(riscv_ma_clint_mtip_intrpt),
				   .ma_dcache_counters_i(riscv_ma_dcache_counters_i),
				   .ma_dtlb_counters_i(riscv_ma_dtlb_counters_i),
				   .ma_icache_counters_i(riscv_ma_icache_counters_i),
				   .ma_itlb_counters_i(riscv_ma_itlb_counters_i),
				   .ma_set_meip_ex_i(riscv_ma_set_meip_ex_i),
				   .ma_set_seip_ex_i(riscv_ma_set_seip_ex_i),
				   .memory_response_put(riscv_memory_response_put),
				   .store_is_cached_c(riscv_store_is_cached_c),
				   .storebuffer_empty_e(riscv_storebuffer_empty_e),
				   .write_resp_r(riscv_write_resp_r),
				   .EN_instr_req_get(riscv_EN_instr_req_get),
				   .EN_inst_response_put(riscv_EN_inst_response_put),
				   .EN_memory_request_get(riscv_EN_memory_request_get),
				   .EN_memory_response_put(riscv_EN_memory_response_put),
				   .EN_write_resp(riscv_EN_write_resp),
				   .EN_ma_cache_ready(riscv_EN_ma_cache_ready),
				   .EN_ma_clint_msip(riscv_EN_ma_clint_msip),
				   .EN_ma_clint_mtip(riscv_EN_ma_clint_mtip),
				   .EN_ma_clint_mtime(riscv_EN_ma_clint_mtime),
				   .EN_ma_set_meip(riscv_EN_ma_set_meip),
				   .EN_ma_set_seip(riscv_EN_ma_set_seip),
				   .EN_dump_get(riscv_EN_dump_get),
				   .EN_ma_icache_counters(riscv_EN_ma_icache_counters),
				   .EN_ma_dcache_counters(riscv_EN_ma_dcache_counters),
				   .EN_ma_dtlb_counters(riscv_EN_ma_dtlb_counters),
				   .EN_ma_itlb_counters(riscv_EN_ma_itlb_counters),
				   .instr_req_get(riscv_instr_req_get),
				   .RDY_instr_req_get(riscv_RDY_instr_req_get),
				   .RDY_inst_response_put(riscv_RDY_inst_response_put),
				   .memory_request_get(riscv_memory_request_get),
				   .RDY_memory_request_get(riscv_RDY_memory_request_get),
				   .RDY_memory_response_put(riscv_RDY_memory_response_put),
				   .initiate_store_fst(riscv_initiate_store_fst),
				   .RDY_initiate_store_fst(),
				   .initiate_store_snd(riscv_initiate_store_snd),
				   .RDY_initiate_store_snd(),
				   .RDY_write_resp(),
				   .RDY_ma_cache_ready(),
				   .RDY_ma_clint_msip(),
				   .RDY_ma_clint_mtip(),
				   .RDY_ma_clint_mtime(),
				   .RDY_ma_set_meip(),
				   .RDY_ma_set_seip(),
				   .dump_get(riscv_dump_get),
				   .RDY_dump_get(riscv_RDY_dump_get),
				   .mv_csr_mstatus(riscv_mv_csr_mstatus),
				   .RDY_mv_csr_mstatus(),
				   .mv_cacheenable(riscv_mv_cacheenable),
				   .RDY_mv_cacheenable(),
				   .mv_curr_priv(riscv_mv_curr_priv),
				   .RDY_mv_curr_priv(),
				   .mv_csr_satp(riscv_mv_csr_satp),
				   .RDY_mv_csr_satp(),
				   .mv_pmp_cfg(riscv_mv_pmp_cfg),
				   .RDY_mv_pmp_cfg(),
				   .mv_pmp_addr(riscv_mv_pmp_addr),
				   .RDY_mv_pmp_addr(),
				   .RDY_ma_icache_counters(),
				   .RDY_ma_dcache_counters(),
				   .RDY_ma_dtlb_counters(),
				   .RDY_ma_itlb_counters());

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf = 1'd1 ;

  // rule RL_mkConnectionVtoAf_1
  assign CAN_FIRE_RL_mkConnectionVtoAf_1 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_1 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_2
  assign CAN_FIRE_RL_mkConnectionVtoAf_2 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_2 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_3
  assign CAN_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;

  // rule RL_rl_handle_imem_line_request
  assign CAN_FIRE_RL_rl_handle_imem_line_request =
	     imem_RDY_get_read_mem_req_get && fetch_xactor_f_rd_addr_FULL_N ;
  assign WILL_FIRE_RL_rl_handle_imem_line_request =
	     CAN_FIRE_RL_rl_handle_imem_line_request ;

  // rule RL_rl_handle_imem_line_resp
  assign CAN_FIRE_RL_rl_handle_imem_line_resp =
	     imem_RDY_put_read_mem_resp_put &&
	     fetch_xactor_f_rd_data_EMPTY_N ;
  assign WILL_FIRE_RL_rl_handle_imem_line_resp =
	     CAN_FIRE_RL_rl_handle_imem_line_resp ;

  // rule RL_rl_map_imem_enable
  assign CAN_FIRE_RL_rl_map_imem_enable = 1'd1 ;
  assign WILL_FIRE_RL_rl_map_imem_enable = 1'd1 ;

  // rule RL_rl_map_dmem_enable
  assign CAN_FIRE_RL_rl_map_dmem_enable = 1'd1 ;
  assign WILL_FIRE_RL_rl_map_dmem_enable = 1'd1 ;

  // rule RL_rl_handle_dmem_line_read_request
  assign CAN_FIRE_RL_rl_handle_dmem_line_read_request =
	     dmem_RDY_get_read_mem_req_get &&
	     memory_xactor_f_rd_addr_FULL_N &&
	     !rg_read_line_req[52] ;
  assign WILL_FIRE_RL_rl_handle_dmem_line_read_request =
	     CAN_FIRE_RL_rl_handle_dmem_line_read_request ;

  // rule RL_rl_handle_delayed_read
  assign CAN_FIRE_RL_rl_handle_delayed_read =
	     memory_xactor_f_rd_addr_FULL_N && rg_read_line_req[52] &&
	     !wr_write_req[32] ;
  assign WILL_FIRE_RL_rl_handle_delayed_read =
	     CAN_FIRE_RL_rl_handle_delayed_read ;

  // rule RL_rl_handle_dmem_line_resp
  assign CAN_FIRE_RL_rl_handle_dmem_line_resp =
	     dmem_RDY_put_read_mem_resp_put &&
	     memory_xactor_f_rd_data_EMPTY_N ;
  assign WILL_FIRE_RL_rl_handle_dmem_line_resp =
	     CAN_FIRE_RL_rl_handle_dmem_line_resp ;

  // rule RL_rl_handle_dmem_write_request
  assign CAN_FIRE_RL_rl_handle_dmem_write_request =
	     dmem_RDY_mv_write_mem_req_rd && memory_xactor_f_wr_addr_FULL_N &&
	     memory_xactor_f_wr_data_FULL_N &&
	     dmem_RDY_ma_write_mem_req_deq &&
	     rg_burst_count == 8'd0 ;
  assign WILL_FIRE_RL_rl_handle_dmem_write_request =
	     CAN_FIRE_RL_rl_handle_dmem_write_request ;

  // rule RL_rl_dmem_burst_write_data
  assign CAN_FIRE_RL_rl_dmem_burst_write_data =
	     dmem_RDY_mv_write_mem_req_rd && memory_xactor_f_wr_data_FULL_N &&
	     dmem_RDY_ma_write_mem_req_deq &&
	     rg_burst_count != 8'd0 ;
  assign WILL_FIRE_RL_rl_dmem_burst_write_data =
	     CAN_FIRE_RL_rl_dmem_burst_write_data ;

  // rule RL_handle_dmem_line_write_resp
  assign CAN_FIRE_RL_handle_dmem_line_write_resp =
	     memory_xactor_f_wr_resp_EMPTY_N &&
	     dmem_RDY_put_write_mem_resp_put ;
  assign WILL_FIRE_RL_handle_dmem_line_write_resp =
	     CAN_FIRE_RL_handle_dmem_line_write_resp ;

  // rule RL_mkConnectionVtoAf_4
  assign CAN_FIRE_RL_mkConnectionVtoAf_4 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_4 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_5
  assign CAN_FIRE_RL_mkConnectionVtoAf_5 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_5 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_6
  assign CAN_FIRE_RL_mkConnectionVtoAf_6 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_6 = 1'd1 ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     riscv_RDY_instr_req_get && imem_RDY_put_core_req_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     riscv_RDY_inst_response_put && imem_RDY_get_core_resp_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_mkConnectionVtoAf_7
  assign CAN_FIRE_RL_mkConnectionVtoAf_7 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_7 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_8
  assign CAN_FIRE_RL_mkConnectionVtoAf_8 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_8 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_9
  assign CAN_FIRE_RL_mkConnectionVtoAf_9 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_9 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_10
  assign CAN_FIRE_RL_mkConnectionVtoAf_10 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_10 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_11
  assign CAN_FIRE_RL_mkConnectionVtoAf_11 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_11 = 1'd1 ;

  // rule RL_rl_initiate_store
  assign CAN_FIRE_RL_rl_initiate_store =
	     dmem_RDY_ma_perform_store && riscv_initiate_store_snd ;
  assign WILL_FIRE_RL_rl_initiate_store = CAN_FIRE_RL_rl_initiate_store ;

  // rule RL_ptwalk_resp_to_itlb
  assign CAN_FIRE_RL_ptwalk_resp_to_itlb =
	     imem_RDY_put_response_frm_ptw_put &&
	     ptwalk_ff_response_EMPTY_N &&
	     rg_ptw_state == 2'd1 ;
  assign WILL_FIRE_RL_ptwalk_resp_to_itlb = CAN_FIRE_RL_ptwalk_resp_to_itlb ;

  // rule RL_itlb_req_to_ptwalk
  assign CAN_FIRE_RL_itlb_req_to_ptwalk =
	     imem_RDY_get_request_to_ptw_get && ptwalk_ff_req_queue_FULL_N &&
	     rg_ptw_state == 2'd0 ;
  assign WILL_FIRE_RL_itlb_req_to_ptwalk =
	     CAN_FIRE_RL_itlb_req_to_ptwalk &&
	     !WILL_FIRE_RL_dtlb_req_to_ptwalk ;

  // rule RL_dtlb_req_to_ptwalk
  assign CAN_FIRE_RL_dtlb_req_to_ptwalk =
	     dmem_RDY_get_req_to_ptw_get && ptwalk_ff_req_queue_FULL_N &&
	     rg_ptw_state == 2'd0 ;
  assign WILL_FIRE_RL_dtlb_req_to_ptwalk = CAN_FIRE_RL_dtlb_req_to_ptwalk ;

  // rule RL_ptwalk_resp_to_dtlb
  assign CAN_FIRE_RL_ptwalk_resp_to_dtlb =
	     dmem_RDY_put_resp_from_ptw_put && ptwalk_ff_response_EMPTY_N &&
	     rg_ptw_state == 2'd2 ;
  assign WILL_FIRE_RL_ptwalk_resp_to_dtlb = CAN_FIRE_RL_ptwalk_resp_to_dtlb ;

  // rule RL_mkConnectionVtoAf_12
  assign CAN_FIRE_RL_mkConnectionVtoAf_12 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_12 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_14
  assign CAN_FIRE_RL_mkConnectionVtoAf_14 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_14 = 1'd1 ;

  // rule RL_rl_pulldown_seip
  assign CAN_FIRE_RL_rl_pulldown_seip = 1'd1 ;
  assign WILL_FIRE_RL_rl_pulldown_seip = 1'd1 ;

  // rule RL_ptwalk_resend_core_req_to_cache
  assign CAN_FIRE_RL_ptwalk_resend_core_req_to_cache =
	     ptwalk_ff_hold_req_EMPTY_N && ptwalk_ff_memory_req_FULL_N &&
	     ptwalk_ff_req_queue_EMPTY_N &&
	     ptwalk_rg_state == 2'd0 ;
  assign WILL_FIRE_RL_ptwalk_resend_core_req_to_cache =
	     CAN_FIRE_RL_ptwalk_resend_core_req_to_cache ;

  // rule RL_ptwalk_generate_pte
  assign CAN_FIRE_RL_ptwalk_generate_pte =
	     ptwalk_ff_memory_req_FULL_N && ptwalk_ff_req_queue_EMPTY_N &&
	     ptwalk_rg_state == 2'd2 ;
  assign WILL_FIRE_RL_ptwalk_generate_pte = CAN_FIRE_RL_ptwalk_generate_pte ;

  // rule RL_ptwalk_check_pte
  assign CAN_FIRE_RL_ptwalk_check_pte =
	     ptwalk_ff_memory_response_EMPTY_N &&
	     ptwalk_ff_req_queue_EMPTY_N &&
	     ptwalk_ff_response_FULL_N &&
	     ptwalk_ff_memory_req_FULL_N &&
	     ptwalk_rg_state == 2'd1 ;
  assign WILL_FIRE_RL_ptwalk_check_pte = CAN_FIRE_RL_ptwalk_check_pte ;

  // rule RL_ptwalk_deq_holding_fifo
  assign CAN_FIRE_RL_ptwalk_deq_holding_fifo =
	     ptwalk_ff_hold_req_EMPTY_N && ptwalk_wr_deq_holding_ff_whas ;
  assign WILL_FIRE_RL_ptwalk_deq_holding_fifo =
	     CAN_FIRE_RL_ptwalk_deq_holding_fifo ;

  // rule RL_core_req_mkConnectionGetPut
  assign CAN_FIRE_RL_core_req_mkConnectionGetPut =
	     riscv_RDY_memory_request_get && dmem_RDY_put_core_req_put ;
  assign WILL_FIRE_RL_core_req_mkConnectionGetPut =
	     CAN_FIRE_RL_core_req_mkConnectionGetPut ;

  // rule RL_ptwalk_req_mkConnectionGetPut
  assign CAN_FIRE_RL_ptwalk_req_mkConnectionGetPut =
	     dmem_RDY_put_core_req_put && ptwalk_ff_memory_req_EMPTY_N ;
  assign WILL_FIRE_RL_ptwalk_req_mkConnectionGetPut =
	     CAN_FIRE_RL_ptwalk_req_mkConnectionGetPut &&
	     !WILL_FIRE_RL_core_req_mkConnectionGetPut ;

  // rule RL_mkConnectionGetPut_2
  assign CAN_FIRE_RL_mkConnectionGetPut_2 =
	     riscv_RDY_memory_response_put && dmem_RDY_get_core_resp_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // rule RL_mkConnectionGetPut_3
  assign CAN_FIRE_RL_mkConnectionGetPut_3 =
	     dmem_RDY_get_ptw_resp_get && ptwalk_ff_memory_response_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_3 =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // rule RL_mkConnectionGetPut_4
  assign CAN_FIRE_RL_mkConnectionGetPut_4 =
	     dmem_RDY_get_hold_req_get && ptwalk_ff_hold_req_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_4 =
	     CAN_FIRE_RL_mkConnectionGetPut_4 ;

  // rule RL_mkConnectionVtoAf_13
  assign CAN_FIRE_RL_mkConnectionVtoAf_13 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_13 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_15
  assign CAN_FIRE_RL_mkConnectionVtoAf_15 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_15 = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_memory_xactor_f_rd_addr_enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     (!wr_write_req[32] ||
	      !IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457) ;
  assign MUX_ptwalk_ff_memory_req_enq_1__SEL_1 =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     NOT_ptwalk_ff_memory_response_first__02_BIT_8__ETC___d279 ;
  assign MUX_rg_burst_count_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_handle_dmem_write_request &&
	     dmem_mv_write_mem_req_rd[11:4] != 8'd0 ;
  assign MUX_rg_ptw_state_write_1__SEL_1 =
	     WILL_FIRE_RL_ptwalk_resp_to_dtlb ||
	     WILL_FIRE_RL_ptwalk_resp_to_itlb ;
  assign MUX_rg_read_line_req_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     wr_write_req[32] &&
	     IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457 ;
  assign MUX_wr_write_req_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_dmem_burst_write_data && rg_burst_count == 8'd7 ;
  assign MUX_memory_xactor_f_rd_addr_enq_1__VAL_1 =
	     { dmem_get_read_mem_req_get[43:12],
	       value__h9214,
	       dmem_get_read_mem_req_get[3:1],
	       dmem_get_read_mem_req_get[11:4],
	       5'd16,
	       dmem_get_read_mem_req_get[0] } ;
  assign MUX_memory_xactor_f_wr_data_enq_1__VAL_1 =
	     { dmem_mv_write_mem_req_rd[75:12],
	       8'd255,
	       aw_awid__h8968,
	       dmem_mv_write_mem_req_rd[11:4] == 8'd0 } ;
  assign MUX_memory_xactor_f_wr_data_enq_1__VAL_2 =
	     { x__h9545[63:0],
	       8'd255,
	       aw_awid__h8968,
	       rg_burst_count == 8'd7 } ;
  assign MUX_ptwalk_ff_memory_req_enq_1__VAL_1 =
	     { ptwalk_ff_req_queue_D_OUT[65:2],
	       ptwalk_rg_hold_epoch,
	       6'd24,
	       x_writedata__h3667,
	       5'bxxxxx /* unspecified value */ ,
	       3'd1 } ;
  assign MUX_ptwalk_ff_memory_req_enq_1__VAL_2 =
	     { ptwalk_ff_hold_req_D_OUT[140:77],
	       ptwalk_ff_hold_req_D_OUT[75],
	       ptwalk_ff_hold_req_D_OUT[72:70],
	       1'd0,
	       ptwalk_ff_hold_req_D_OUT[74:73],
	       ptwalk_ff_hold_req_D_OUT[69:1],
	       3'd0 } ;
  assign MUX_ptwalk_ff_memory_req_enq_1__VAL_3 =
	     { x_address__h2140,
	       ptwalk_rg_hold_epoch,
	       6'd24,
	       x_writedata__h2145,
	       5'bxxxxx /* unspecified value */ ,
	       3'd2 } ;
  assign MUX_ptwalk_rg_state_write_1__VAL_1 =
	     (!ptwalk_ff_memory_response_D_OUT[8] ||
	      !ptwalk_ff_memory_response_D_OUT[9] &&
	      ptwalk_ff_memory_response_D_OUT[10] ||
	      ptwalk_rg_levels_9_EQ_0_55_AND_NOT_ptwalk_ff_m_ETC___d262 ||
	      ptwalk_ff_memory_response_D_OUT[7] ||
	      !ptwalk_ff_memory_response_D_OUT[9] &&
	      !ptwalk_ff_memory_response_D_OUT[11] ||
	      ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3) ?
	       2'd2 :
	       2'd0 ;
  assign MUX_rg_burst_count_write_1__VAL_2 =
	     (rg_burst_count == 8'd7) ? 8'd0 : x__h9490 ;
  assign MUX_rg_read_line_req_write_1__VAL_1 =
	     { 1'd1,
	       dmem_get_read_mem_req_get[43:12],
	       value__h9214,
	       dmem_get_read_mem_req_get[3:1],
	       dmem_get_read_mem_req_get[11:4],
	       5'd16,
	       dmem_get_read_mem_req_get[0] } ;
  assign MUX_rg_read_line_req_write_1__VAL_2 =
	     { 1'd0,
	       52'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_wr_write_req_write_1__VAL_1 =
	     { 1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_wr_write_req_write_1__VAL_2 =
	     { 1'd1, dmem_mv_write_mem_req_rd[555:524] } ;

  // inlined wires
  assign ptwalk_wr_deq_holding_ff_whas =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     NOT_ptwalk_ff_memory_response_first__02_BIT_8__ETC___d279 ||
	     WILL_FIRE_RL_ptwalk_resend_core_req_to_cache ;

  // register ptwalk_rg_a
  assign ptwalk_rg_a_D_IN = x__h3847 ;
  assign ptwalk_rg_a_EN =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     ptwalk_ff_memory_response_first__02_BIT_8_22_A_ETC___d321 &&
	     !ptwalk_ff_memory_response_D_OUT[7] &&
	     !ptwalk_ff_memory_response_D_OUT[9] &&
	     !ptwalk_ff_memory_response_D_OUT[11] ;

  // register ptwalk_rg_hold_epoch
  assign ptwalk_rg_hold_epoch_D_IN = dmem_get_hold_req_get[75] ;
  assign ptwalk_rg_hold_epoch_EN = CAN_FIRE_RL_mkConnectionGetPut_4 ;

  // register ptwalk_rg_levels
  assign ptwalk_rg_levels_D_IN =
	     (!ptwalk_ff_memory_response_D_OUT[8] ||
	      !ptwalk_ff_memory_response_D_OUT[9] &&
	      ptwalk_ff_memory_response_D_OUT[10] ||
	      ptwalk_rg_levels_9_EQ_0_55_AND_NOT_ptwalk_ff_m_ETC___d242 ||
	      ptwalk_ff_memory_response_D_OUT[7]) ?
	       max_levels__h1804 :
	       ((!ptwalk_ff_memory_response_D_OUT[9] &&
		 !ptwalk_ff_memory_response_D_OUT[11]) ?
		  x__h3564 :
		  max_levels__h1804) ;
  assign ptwalk_rg_levels_EN = CAN_FIRE_RL_ptwalk_check_pte ;

  // register ptwalk_rg_state
  always@(WILL_FIRE_RL_ptwalk_check_pte or
	  MUX_ptwalk_rg_state_write_1__VAL_1 or
	  WILL_FIRE_RL_ptwalk_generate_pte or
	  WILL_FIRE_RL_ptwalk_resend_core_req_to_cache)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ptwalk_check_pte:
	  ptwalk_rg_state_D_IN = MUX_ptwalk_rg_state_write_1__VAL_1;
      WILL_FIRE_RL_ptwalk_generate_pte: ptwalk_rg_state_D_IN = 2'd1;
      WILL_FIRE_RL_ptwalk_resend_core_req_to_cache:
	  ptwalk_rg_state_D_IN = 2'd2;
      default: ptwalk_rg_state_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign ptwalk_rg_state_EN =
	     WILL_FIRE_RL_ptwalk_check_pte ||
	     WILL_FIRE_RL_ptwalk_generate_pte ||
	     WILL_FIRE_RL_ptwalk_resend_core_req_to_cache ;

  // register rg_burst_count
  assign rg_burst_count_D_IN =
	     MUX_rg_burst_count_write_1__SEL_1 ?
	       x__h9490 :
	       MUX_rg_burst_count_write_1__VAL_2 ;
  assign rg_burst_count_EN =
	     WILL_FIRE_RL_rl_handle_dmem_write_request &&
	     dmem_mv_write_mem_req_rd[11:4] != 8'd0 ||
	     WILL_FIRE_RL_rl_dmem_burst_write_data ;

  // register rg_ptw_state
  always@(MUX_rg_ptw_state_write_1__SEL_1 or
	  WILL_FIRE_RL_itlb_req_to_ptwalk or WILL_FIRE_RL_dtlb_req_to_ptwalk)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_ptw_state_write_1__SEL_1: rg_ptw_state_D_IN = 2'd0;
      WILL_FIRE_RL_itlb_req_to_ptwalk: rg_ptw_state_D_IN = 2'd1;
      WILL_FIRE_RL_dtlb_req_to_ptwalk: rg_ptw_state_D_IN = 2'd2;
      default: rg_ptw_state_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign rg_ptw_state_EN =
	     WILL_FIRE_RL_ptwalk_resp_to_dtlb ||
	     WILL_FIRE_RL_ptwalk_resp_to_itlb ||
	     WILL_FIRE_RL_itlb_req_to_ptwalk ||
	     WILL_FIRE_RL_dtlb_req_to_ptwalk ;

  // register rg_read_line_req
  assign rg_read_line_req_D_IN =
	     MUX_rg_read_line_req_write_1__SEL_1 ?
	       MUX_rg_read_line_req_write_1__VAL_1 :
	       MUX_rg_read_line_req_write_1__VAL_2 ;
  assign rg_read_line_req_EN =
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     wr_write_req[32] &&
	     IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457 ||
	     WILL_FIRE_RL_rl_handle_delayed_read ;

  // register rg_shift_amount
  assign rg_shift_amount_D_IN = (rg_burst_count == 8'd7) ? 9'd64 : x__h9453 ;
  assign rg_shift_amount_EN = CAN_FIRE_RL_rl_dmem_burst_write_data ;

  // register wr_write_req
  assign wr_write_req_D_IN =
	     MUX_wr_write_req_write_1__SEL_1 ?
	       MUX_wr_write_req_write_1__VAL_1 :
	       MUX_wr_write_req_write_1__VAL_2 ;
  assign wr_write_req_EN =
	     WILL_FIRE_RL_rl_dmem_burst_write_data &&
	     rg_burst_count == 8'd7 ||
	     WILL_FIRE_RL_rl_handle_dmem_write_request &&
	     dmem_mv_write_mem_req_rd[11:4] != 8'd0 ;

  // submodule dmem
  assign dmem_ma_cache_enable_c = riscv_mv_cacheenable[1] ;
  assign dmem_ma_curr_priv_c = riscv_mv_curr_priv ;
  assign dmem_ma_mstatus_from_csr_m = riscv_mv_csr_mstatus ;
  assign dmem_ma_perform_store_currepoch = riscv_initiate_store_fst ;
  assign dmem_ma_satp_from_csr_s = riscv_mv_csr_satp ;
  assign dmem_put_core_req_put =
	     WILL_FIRE_RL_core_req_mkConnectionGetPut ?
	       riscv_memory_request_get :
	       ptwalk_ff_memory_req_D_OUT ;
  assign dmem_put_read_mem_resp_put =
	     { memory_xactor_f_rd_data_D_OUT[68:4],
	       memory_xactor_f_rd_data_D_OUT[70:69] != 2'd0 } ;
  assign dmem_put_resp_from_ptw_put = ptwalk_ff_response_D_OUT ;
  assign dmem_put_write_mem_resp_put =
	     memory_xactor_f_wr_resp_D_OUT[5:4] != 2'd0 ;
  assign dmem_EN_put_core_req_put =
	     WILL_FIRE_RL_core_req_mkConnectionGetPut ||
	     WILL_FIRE_RL_ptwalk_req_mkConnectionGetPut ;
  assign dmem_EN_get_core_resp_get = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign dmem_EN_ma_perform_store = CAN_FIRE_RL_rl_initiate_store ;
  assign dmem_EN_put_write_mem_resp_put =
	     WILL_FIRE_RL_handle_dmem_line_write_resp &&
	     memory_xactor_f_wr_resp_D_OUT[3:0] == 4'd0 ;
  assign dmem_EN_ma_write_mem_req_deq =
	     WILL_FIRE_RL_rl_handle_dmem_write_request &&
	     dmem_mv_write_mem_req_rd[11:4] == 8'd0 ||
	     WILL_FIRE_RL_rl_dmem_burst_write_data && rg_burst_count == 8'd7 ;
  assign dmem_EN_ma_cache_enable = 1'd1 ;
  assign dmem_EN_get_read_mem_req_get =
	     CAN_FIRE_RL_rl_handle_dmem_line_read_request ;
  assign dmem_EN_put_read_mem_resp_put =
	     CAN_FIRE_RL_rl_handle_dmem_line_resp ;
  assign dmem_EN_get_ptw_resp_get = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign dmem_EN_get_req_to_ptw_get = CAN_FIRE_RL_dtlb_req_to_ptwalk ;
  assign dmem_EN_put_resp_from_ptw_put = CAN_FIRE_RL_ptwalk_resp_to_dtlb ;
  assign dmem_EN_ma_satp_from_csr = 1'd1 ;
  assign dmem_EN_ma_mstatus_from_csr = 1'd1 ;
  assign dmem_EN_get_hold_req_get = CAN_FIRE_RL_mkConnectionGetPut_4 ;

  // submodule fetch_xactor_f_rd_addr
  assign fetch_xactor_f_rd_addr_D_IN =
	     { imem_get_read_mem_req_get[43:12],
	       value__h7281,
	       imem_get_read_mem_req_get[3:1],
	       imem_get_read_mem_req_get[11:4],
	       5'd16,
	       imem_get_read_mem_req_get[0] } ;
  assign fetch_xactor_f_rd_addr_ENQ =
	     CAN_FIRE_RL_rl_handle_imem_line_request ;
  assign fetch_xactor_f_rd_addr_DEQ =
	     fetch_xactor_f_rd_addr_EMPTY_N && master_i_ARREADY ;
  assign fetch_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule fetch_xactor_f_rd_data
  assign fetch_xactor_f_rd_data_D_IN =
	     { master_i_RRESP,
	       master_i_RDATA,
	       master_i_RLAST,
	       master_i_RID } ;
  assign fetch_xactor_f_rd_data_ENQ =
	     master_i_RVALID && fetch_xactor_f_rd_data_FULL_N ;
  assign fetch_xactor_f_rd_data_DEQ = CAN_FIRE_RL_rl_handle_imem_line_resp ;
  assign fetch_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule fetch_xactor_f_wr_addr
  assign fetch_xactor_f_wr_addr_D_IN = 52'h0 ;
  assign fetch_xactor_f_wr_addr_ENQ = 1'b0 ;
  assign fetch_xactor_f_wr_addr_DEQ =
	     fetch_xactor_f_wr_addr_EMPTY_N && master_i_AWREADY ;
  assign fetch_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule fetch_xactor_f_wr_data
  assign fetch_xactor_f_wr_data_D_IN = 77'h0 ;
  assign fetch_xactor_f_wr_data_ENQ = 1'b0 ;
  assign fetch_xactor_f_wr_data_DEQ =
	     fetch_xactor_f_wr_data_EMPTY_N && master_i_WREADY ;
  assign fetch_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule fetch_xactor_f_wr_resp
  assign fetch_xactor_f_wr_resp_D_IN = { master_i_BRESP, master_i_BID } ;
  assign fetch_xactor_f_wr_resp_ENQ =
	     master_i_BVALID && fetch_xactor_f_wr_resp_FULL_N ;
  assign fetch_xactor_f_wr_resp_DEQ = 1'b0 ;
  assign fetch_xactor_f_wr_resp_CLR = 1'b0 ;

  // submodule imem
  assign imem_ma_cache_enable_c = riscv_mv_cacheenable[0] ;
  assign imem_ma_curr_priv_c = riscv_mv_curr_priv ;
  assign imem_ma_satp_from_csr_s = riscv_mv_csr_satp ;
  assign imem_put_core_req_put = riscv_instr_req_get ;
  assign imem_put_read_mem_resp_put =
	     { fetch_xactor_f_rd_data_D_OUT[68:4],
	       fetch_xactor_f_rd_data_D_OUT[70:69] != 2'd0 } ;
  assign imem_put_response_frm_ptw_put = ptwalk_ff_response_D_OUT ;
  assign imem_EN_put_core_req_put = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign imem_EN_get_core_resp_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign imem_EN_ma_cache_enable = 1'd1 ;
  assign imem_EN_get_read_mem_req_get =
	     CAN_FIRE_RL_rl_handle_imem_line_request ;
  assign imem_EN_put_read_mem_resp_put =
	     CAN_FIRE_RL_rl_handle_imem_line_resp ;
  assign imem_EN_ma_curr_priv = 1'd1 ;
  assign imem_EN_get_request_to_ptw_get = WILL_FIRE_RL_itlb_req_to_ptwalk ;
  assign imem_EN_put_response_frm_ptw_put = CAN_FIRE_RL_ptwalk_resp_to_itlb ;
  assign imem_EN_ma_satp_from_csr = 1'd1 ;

  // submodule memory_xactor_f_rd_addr
  assign memory_xactor_f_rd_addr_D_IN =
	     MUX_memory_xactor_f_rd_addr_enq_1__SEL_1 ?
	       MUX_memory_xactor_f_rd_addr_enq_1__VAL_1 :
	       rg_read_line_req[51:0] ;
  assign memory_xactor_f_rd_addr_ENQ =
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     (!wr_write_req[32] ||
	      !IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457) ||
	     WILL_FIRE_RL_rl_handle_delayed_read ;
  assign memory_xactor_f_rd_addr_DEQ =
	     memory_xactor_f_rd_addr_EMPTY_N && master_d_ARREADY ;
  assign memory_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule memory_xactor_f_rd_data
  assign memory_xactor_f_rd_data_D_IN =
	     { master_d_RRESP,
	       master_d_RDATA,
	       master_d_RLAST,
	       master_d_RID } ;
  assign memory_xactor_f_rd_data_ENQ =
	     master_d_RVALID && memory_xactor_f_rd_data_FULL_N ;
  assign memory_xactor_f_rd_data_DEQ = CAN_FIRE_RL_rl_handle_dmem_line_resp ;
  assign memory_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_addr
  assign memory_xactor_f_wr_addr_D_IN =
	     { dmem_mv_write_mem_req_rd[555:524],
	       value__h9214,
	       dmem_mv_write_mem_req_rd[11:4],
	       x__h8998,
	       5'd8,
	       dmem_mv_write_mem_req_rd[0] } ;
  assign memory_xactor_f_wr_addr_ENQ =
	     CAN_FIRE_RL_rl_handle_dmem_write_request ;
  assign memory_xactor_f_wr_addr_DEQ =
	     memory_xactor_f_wr_addr_EMPTY_N && master_d_AWREADY ;
  assign memory_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_data
  assign memory_xactor_f_wr_data_D_IN =
	     WILL_FIRE_RL_rl_handle_dmem_write_request ?
	       MUX_memory_xactor_f_wr_data_enq_1__VAL_1 :
	       MUX_memory_xactor_f_wr_data_enq_1__VAL_2 ;
  assign memory_xactor_f_wr_data_ENQ =
	     WILL_FIRE_RL_rl_handle_dmem_write_request ||
	     WILL_FIRE_RL_rl_dmem_burst_write_data ;
  assign memory_xactor_f_wr_data_DEQ =
	     memory_xactor_f_wr_data_EMPTY_N && master_d_WREADY ;
  assign memory_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_resp
  assign memory_xactor_f_wr_resp_D_IN = { master_d_BRESP, master_d_BID } ;
  assign memory_xactor_f_wr_resp_ENQ =
	     master_d_BVALID && memory_xactor_f_wr_resp_FULL_N ;
  assign memory_xactor_f_wr_resp_DEQ =
	     CAN_FIRE_RL_handle_dmem_line_write_resp ;
  assign memory_xactor_f_wr_resp_CLR = 1'b0 ;

  // submodule ptwalk_ff_hold_req
  assign ptwalk_ff_hold_req_D_IN = dmem_get_hold_req_get ;
  assign ptwalk_ff_hold_req_ENQ = CAN_FIRE_RL_mkConnectionGetPut_4 ;
  assign ptwalk_ff_hold_req_DEQ = CAN_FIRE_RL_ptwalk_deq_holding_fifo ;
  assign ptwalk_ff_hold_req_CLR = 1'b0 ;

  // submodule ptwalk_ff_memory_req
  always@(MUX_ptwalk_ff_memory_req_enq_1__SEL_1 or
	  MUX_ptwalk_ff_memory_req_enq_1__VAL_1 or
	  WILL_FIRE_RL_ptwalk_resend_core_req_to_cache or
	  MUX_ptwalk_ff_memory_req_enq_1__VAL_2 or
	  WILL_FIRE_RL_ptwalk_generate_pte or
	  MUX_ptwalk_ff_memory_req_enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ptwalk_ff_memory_req_enq_1__SEL_1:
	  ptwalk_ff_memory_req_D_IN = MUX_ptwalk_ff_memory_req_enq_1__VAL_1;
      WILL_FIRE_RL_ptwalk_resend_core_req_to_cache:
	  ptwalk_ff_memory_req_D_IN = MUX_ptwalk_ff_memory_req_enq_1__VAL_2;
      WILL_FIRE_RL_ptwalk_generate_pte:
	  ptwalk_ff_memory_req_D_IN = MUX_ptwalk_ff_memory_req_enq_1__VAL_3;
      default: ptwalk_ff_memory_req_D_IN =
		   143'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign ptwalk_ff_memory_req_ENQ =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     NOT_ptwalk_ff_memory_response_first__02_BIT_8__ETC___d279 ||
	     WILL_FIRE_RL_ptwalk_resend_core_req_to_cache ||
	     WILL_FIRE_RL_ptwalk_generate_pte ;
  assign ptwalk_ff_memory_req_DEQ =
	     WILL_FIRE_RL_ptwalk_req_mkConnectionGetPut ;
  assign ptwalk_ff_memory_req_CLR = 1'b0 ;

  // submodule ptwalk_ff_memory_response
  assign ptwalk_ff_memory_response_D_IN = dmem_get_ptw_resp_get ;
  assign ptwalk_ff_memory_response_ENQ = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign ptwalk_ff_memory_response_DEQ = CAN_FIRE_RL_ptwalk_check_pte ;
  assign ptwalk_ff_memory_response_CLR = 1'b0 ;

  // submodule ptwalk_ff_req_queue
  assign ptwalk_ff_req_queue_D_IN =
	     WILL_FIRE_RL_itlb_req_to_ptwalk ?
	       imem_get_request_to_ptw_get :
	       dmem_get_req_to_ptw_get ;
  assign ptwalk_ff_req_queue_ENQ =
	     WILL_FIRE_RL_itlb_req_to_ptwalk ||
	     WILL_FIRE_RL_dtlb_req_to_ptwalk ;
  assign ptwalk_ff_req_queue_DEQ =
	     _dand1ptwalk_ff_req_queue_EN_deq ||
	     WILL_FIRE_RL_ptwalk_resend_core_req_to_cache ;
  assign ptwalk_ff_req_queue_CLR = 1'b0 ;

  // submodule ptwalk_ff_response
  assign ptwalk_ff_response_D_IN =
	     { ptwalk_ff_memory_response_D_OUT[61:8],
	       ptwalk_rg_levels,
	       IF_NOT_ptwalk_ff_memory_response_first__02_BIT_ETC___d252 } ;
  assign ptwalk_ff_response_ENQ =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     (NOT_ptwalk_ff_memory_response_first__02_BIT_8__ETC___d204 ||
	      ptwalk_ff_memory_response_D_OUT[9] ||
	      ptwalk_ff_memory_response_D_OUT[11]) ;
  assign ptwalk_ff_response_DEQ = MUX_rg_ptw_state_write_1__SEL_1 ;
  assign ptwalk_ff_response_CLR = 1'b0 ;

  // submodule riscv
  assign riscv_cache_is_available_avail = dmem_mv_cache_available ;
  assign riscv_inst_response_put = imem_get_core_resp_get ;
  assign riscv_ma_cache_ready_r = dmem_mv_commit_store_ready ;
  assign riscv_ma_clint_msip_intrpt = sb_clint_msip_put ;
  assign riscv_ma_clint_mtime_c_mtime = sb_clint_mtime_put ;
  assign riscv_ma_clint_mtip_intrpt = sb_clint_mtip_put ;
  assign riscv_ma_dcache_counters_i = dmem_mv_dcache_perf_counters ;
  assign riscv_ma_dtlb_counters_i = dmem_mv_dtlb_perf_counters ;
  assign riscv_ma_icache_counters_i = imem_mv_icache_perf_counters ;
  assign riscv_ma_itlb_counters_i = imem_mv_itlb_perf_counters ;
  assign riscv_ma_set_meip_ex_i = sb_externalinterrupt_put ;
  assign riscv_ma_set_seip_ex_i = 1'd0 ;
  assign riscv_memory_response_put = dmem_get_core_resp_get ;
  assign riscv_store_is_cached_c = dmem_mv_cacheable_store ;
  assign riscv_storebuffer_empty_e = dmem_mv_storebuffer_empty ;
  assign riscv_write_resp_r =
	     { 1'd1,
	       memory_xactor_f_wr_resp_D_OUT[5:4] != 2'd0,
	       64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign riscv_EN_instr_req_get = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign riscv_EN_inst_response_put = CAN_FIRE_RL_mkConnectionGetPut ;
  assign riscv_EN_memory_request_get =
	     CAN_FIRE_RL_core_req_mkConnectionGetPut ;
  assign riscv_EN_memory_response_put = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign riscv_EN_write_resp =
	     WILL_FIRE_RL_handle_dmem_line_write_resp &&
	     memory_xactor_f_wr_resp_D_OUT[3:0] != 4'd0 ;
  assign riscv_EN_ma_cache_ready = 1'd1 ;
  assign riscv_EN_ma_clint_msip = EN_sb_clint_msip_put ;
  assign riscv_EN_ma_clint_mtip = EN_sb_clint_mtip_put ;
  assign riscv_EN_ma_clint_mtime = EN_sb_clint_mtime_put ;
  assign riscv_EN_ma_set_meip = EN_sb_externalinterrupt_put ;
  assign riscv_EN_ma_set_seip = 1'd1 ;
  assign riscv_EN_dump_get = EN_io_dump_get ;
  assign riscv_EN_ma_icache_counters = 1'd1 ;
  assign riscv_EN_ma_dcache_counters = 1'd1 ;
  assign riscv_EN_ma_dtlb_counters = 1'd1 ;
  assign riscv_EN_ma_itlb_counters = 1'd1 ;

  // remaining internal signals
  assign IF_IF_ptwalk_wr_mstatus_whas__5_THEN_ptwalk_wr_ETC___d197 =
	     priv__h2552 == 2'd1 && ptwalk_ff_memory_response_D_OUT[12] &&
	     !riscv_mv_csr_mstatus[18] ||
	     ptwalk_ff_req_queue_D_OUT[1:0] == 2'd0 ||
	     ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3 ||
	     !ptwalk_ff_memory_response_D_OUT[14] ||
	     !ptwalk_ff_memory_response_D_OUT[15] &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[1:0] == 2'd1) ;
  assign IF_IF_ptwalk_wr_mstatus_whas__5_THEN_ptwalk_wr_ETC___d257 =
	     priv__h2552 == 2'd1 && ptwalk_ff_memory_response_D_OUT[12] &&
	     !riscv_mv_csr_mstatus[18] ||
	     ptwalk_ff_req_queue_D_OUT[1:0] == 2'd0 &&
	     !ptwalk_ff_memory_response_D_OUT[9] &&
	     (!ptwalk_ff_memory_response_D_OUT[11] ||
	      !riscv_mv_csr_mstatus[19]) ||
	     !ptwalk_ff_memory_response_D_OUT[14] ||
	     !ptwalk_ff_memory_response_D_OUT[15] &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[1:0] == 2'd1) ;
  assign IF_NOT_ptwalk_ff_memory_response_first__02_BIT_ETC___d249 =
	     (!ptwalk_ff_memory_response_D_OUT[8] ||
	      !ptwalk_ff_memory_response_D_OUT[9] &&
	      ptwalk_ff_memory_response_D_OUT[10] ||
	      ptwalk_rg_levels_9_EQ_0_55_AND_NOT_ptwalk_ff_m_ETC___d242) ?
	       cause___1__h3522 :
	       6'd0 ;
  assign IF_NOT_ptwalk_ff_memory_response_first__02_BIT_ETC___d252 =
	     (!ptwalk_ff_memory_response_D_OUT[8] ||
	      !ptwalk_ff_memory_response_D_OUT[9] &&
	      ptwalk_ff_memory_response_D_OUT[10] ||
	      ptwalk_rg_levels_9_EQ_0_55_AND_NOT_ptwalk_ff_m_ETC___d242 ||
	      ptwalk_ff_memory_response_D_OUT[7]) ?
	       { 1'd1, _theResult_____1__h3353 } :
	       7'd0 ;
  assign IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457 =
	     wr_write_req_BITS_31_TO_0__q2[31:16] ==
	     dmem_get_read_mem_req_get[43:28] ;
  assign NOT_ptwalk_ff_memory_response_first__02_BIT_8__ETC___d204 =
	     !ptwalk_ff_memory_response_D_OUT[8] ||
	     ptwalk_ff_memory_response_D_OUT[10] ||
	     ptwalk_rg_levels == 2'd0 ||
	     ptwalk_ff_memory_response_D_OUT[10] &&
	     (ptwalk_rg_levels == 2'd1 &&
	      ptwalk_ff_memory_response_D_OUT[26:18] != 9'd0 ||
	      ptwalk_rg_levels == 2'd2 &&
	      ptwalk_ff_memory_response_D_OUT[35:18] != 18'd0 ||
	      ptwalk_rg_levels == 2'd3 &&
	      ptwalk_ff_memory_response_D_OUT[44:18] != 27'd0 ||
	      ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d199) ||
	     ptwalk_ff_memory_response_D_OUT[7] ;
  assign NOT_ptwalk_ff_memory_response_first__02_BIT_8__ETC___d279 =
	     (!ptwalk_ff_memory_response_D_OUT[8] ||
	      !ptwalk_ff_memory_response_D_OUT[9] &&
	      ptwalk_ff_memory_response_D_OUT[10] ||
	      ptwalk_rg_levels_9_EQ_0_55_AND_NOT_ptwalk_ff_m_ETC___d262 ||
	      ptwalk_ff_memory_response_D_OUT[7]) &&
	     ptwalk_ff_req_queue_D_OUT[1:0] != 2'd3 ;
  assign NOT_ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_ETC___d238 =
	     ptwalk_ff_req_queue_D_OUT[1:0] != 2'd3 &&
	     !ptwalk_ff_memory_response_D_OUT[12] &&
	     priv__h2552 == 2'd0 ||
	     ptwalk_ff_req_queue_D_OUT[1:0] != 2'd3 && priv__h2552 == 2'd1 &&
	     ptwalk_ff_memory_response_D_OUT[12] &&
	     !riscv_mv_csr_mstatus[18] ||
	     ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d236 ;
  assign NOT_ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_ETC___d345 =
	     (ptwalk_ff_req_queue_D_OUT[1:0] != 2'd3 ||
	      !ptwalk_ff_memory_response_D_OUT[11] ||
	      !ptwalk_ff_memory_response_D_OUT[12] ||
	      riscv_mv_curr_priv != 2'd1) &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] != 2'd3 ||
	      ptwalk_ff_memory_response_D_OUT[11]) &&
	     ptwalk_ff_memory_response_D_OUT[14] &&
	     (ptwalk_ff_memory_response_D_OUT[15] ||
	      ptwalk_ff_req_queue_D_OUT[1:0] != 2'd2 &&
	      ptwalk_ff_req_queue_D_OUT[1:0] != 2'd1) ;
  assign NOT_ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_ETC___d347 =
	     (ptwalk_ff_req_queue_D_OUT[1:0] != 2'd0 ||
	      ptwalk_ff_memory_response_D_OUT[9] ||
	      ptwalk_ff_memory_response_D_OUT[11] &&
	      riscv_mv_csr_mstatus[19]) &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] != 2'd3 ||
	      !ptwalk_ff_memory_response_D_OUT[11] ||
	      ptwalk_ff_memory_response_D_OUT[12] ||
	      riscv_mv_curr_priv != 2'd0) &&
	     NOT_ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_ETC___d345 ;
  assign NOT_ptwalk_rg_levels_9_EQ_0_55_86_OR_ptwalk_ff_ETC___d353 =
	     (ptwalk_rg_levels != 2'd0 ||
	      ptwalk_ff_memory_response_D_OUT[9] ||
	      ptwalk_ff_memory_response_D_OUT[11]) &&
	     (!ptwalk_ff_memory_response_D_OUT[11] &&
	      !ptwalk_ff_memory_response_D_OUT[9] &&
	      !ptwalk_ff_memory_response_D_OUT[10] ||
	      NOT_ptwalk_rg_levels_9_EQ_1_56_89_OR_ptwalk_ff_ETC___d351) ;
  assign NOT_ptwalk_rg_levels_9_EQ_1_56_89_OR_ptwalk_ff_ETC___d318 =
	     (ptwalk_rg_levels != 2'd1 ||
	      ptwalk_ff_memory_response_D_OUT[26:18] == 9'd0) &&
	     (ptwalk_rg_levels != 2'd2 ||
	      ptwalk_ff_memory_response_D_OUT[35:18] == 18'd0) &&
	     (ptwalk_rg_levels != 2'd3 ||
	      ptwalk_ff_memory_response_D_OUT[44:18] == 27'd0) &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] != 2'd2 &&
	      ptwalk_ff_req_queue_D_OUT[1:0] != 2'd1 ||
	      ptwalk_ff_memory_response_D_OUT[10]) &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3 ||
	      ptwalk_ff_memory_response_D_OUT[12] ||
	      priv__h2552 != 2'd0) &&
	     ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d315 ;
  assign NOT_ptwalk_rg_levels_9_EQ_1_56_89_OR_ptwalk_ff_ETC___d351 =
	     (ptwalk_rg_levels != 2'd1 ||
	      ptwalk_ff_memory_response_D_OUT[26:18] == 9'd0) &&
	     (ptwalk_rg_levels != 2'd2 ||
	      ptwalk_ff_memory_response_D_OUT[35:18] == 18'd0) &&
	     (ptwalk_rg_levels != 2'd3 ||
	      ptwalk_ff_memory_response_D_OUT[44:18] == 27'd0) &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] != 2'd2 &&
	      ptwalk_ff_req_queue_D_OUT[1:0] != 2'd1 ||
	      ptwalk_ff_memory_response_D_OUT[10]) &&
	     ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d349 ;
  assign _dand1ptwalk_ff_req_queue_EN_deq =
	     WILL_FIRE_RL_ptwalk_check_pte &&
	     (!ptwalk_ff_memory_response_D_OUT[8] ||
	      !ptwalk_ff_memory_response_D_OUT[9] &&
	      ptwalk_ff_memory_response_D_OUT[10] ||
	      ptwalk_rg_levels_9_EQ_0_55_AND_NOT_ptwalk_ff_m_ETC___d242 ||
	      ptwalk_ff_memory_response_D_OUT[7] ||
	      (ptwalk_ff_memory_response_D_OUT[9] ||
	       ptwalk_ff_memory_response_D_OUT[11]) &&
	      ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3) ;
  assign _theResult_____1__h3353 =
	     ptwalk_ff_memory_response_D_OUT[7] ?
	       cause___1__h3501 :
	       IF_NOT_ptwalk_ff_memory_response_first__02_BIT_ETC___d249 ;
  assign a__h1805 =
	     (ptwalk_rg_levels == max_levels__h1804) ?
	       { riscv_mv_csr_satp[43:0], 12'b0 } :
	       ptwalk_rg_a ;
  assign aw_awid__h8968 = { 3'd0, dmem_mv_write_mem_req_rd[0] } ;
  assign dmem_request_arid__h7939 = { 3'd0, dmem_get_read_mem_req_get[0] } ;
  assign imem_request_arid__h7126 = { 3'd0, imem_get_read_mem_req_get[0] } ;
  assign max_levels__h1804 =
	     (riscv_mv_csr_satp[63:60] == 4'd8) ? 2'd2 : 2'd3 ;
  assign priv__h2552 =
	     riscv_mv_csr_mstatus[17] ?
	       riscv_mv_csr_mstatus[12:11] :
	       riscv_mv_curr_priv ;
  assign pte_address__h1806 = a__h1805 + { 44'd0, x__h1988 } ;
  assign ptwalk_ff_memory_response_first__02_BIT_8_22_A_ETC___d321 =
	     ptwalk_ff_memory_response_D_OUT[8] &&
	     (ptwalk_ff_memory_response_D_OUT[9] ||
	      !ptwalk_ff_memory_response_D_OUT[10]) &&
	     (ptwalk_rg_levels != 2'd0 ||
	      ptwalk_ff_memory_response_D_OUT[9] ||
	      ptwalk_ff_memory_response_D_OUT[11]) &&
	     (!ptwalk_ff_memory_response_D_OUT[10] ||
	      NOT_ptwalk_rg_levels_9_EQ_1_56_89_OR_ptwalk_ff_ETC___d318) ;
  assign ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d199 =
	     (ptwalk_ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[1:0] == 2'd1) &&
	     !ptwalk_ff_memory_response_D_OUT[10] ||
	     !ptwalk_ff_memory_response_D_OUT[12] && priv__h2552 == 2'd0 ||
	     IF_IF_ptwalk_wr_mstatus_whas__5_THEN_ptwalk_wr_ETC___d197 ;
  assign ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d234 =
	     ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3 &&
	     ptwalk_ff_memory_response_D_OUT[11] &&
	     ptwalk_ff_memory_response_D_OUT[12] &&
	     riscv_mv_curr_priv == 2'd1 ||
	     ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3 &&
	     !ptwalk_ff_memory_response_D_OUT[11] ||
	     !ptwalk_ff_memory_response_D_OUT[14] ||
	     !ptwalk_ff_memory_response_D_OUT[15] &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[1:0] == 2'd1) ;
  assign ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d236 =
	     ptwalk_ff_req_queue_D_OUT[1:0] == 2'd0 &&
	     !ptwalk_ff_memory_response_D_OUT[9] &&
	     (!ptwalk_ff_memory_response_D_OUT[11] ||
	      !riscv_mv_csr_mstatus[19]) ||
	     ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3 &&
	     ptwalk_ff_memory_response_D_OUT[11] &&
	     !ptwalk_ff_memory_response_D_OUT[12] &&
	     riscv_mv_curr_priv == 2'd0 ||
	     ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d234 ;
  assign ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d259 =
	     (ptwalk_ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[1:0] == 2'd1) &&
	     !ptwalk_ff_memory_response_D_OUT[10] ||
	     !ptwalk_ff_memory_response_D_OUT[12] && priv__h2552 == 2'd0 ||
	     IF_IF_ptwalk_wr_mstatus_whas__5_THEN_ptwalk_wr_ETC___d257 ;
  assign ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d307 =
	     ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3 || priv__h2552 != 2'd1 ||
	     !ptwalk_ff_memory_response_D_OUT[12] ||
	     riscv_mv_csr_mstatus[18] ;
  assign ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d315 =
	     ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d307 &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] != 2'd0 ||
	      ptwalk_ff_memory_response_D_OUT[9]) &&
	     (ptwalk_ff_req_queue_D_OUT[1:0] != 2'd3 ||
	      ptwalk_ff_memory_response_D_OUT[11]) &&
	     ptwalk_ff_memory_response_D_OUT[14] &&
	     (ptwalk_ff_memory_response_D_OUT[15] ||
	      ptwalk_ff_req_queue_D_OUT[1:0] != 2'd2 &&
	      ptwalk_ff_req_queue_D_OUT[1:0] != 2'd1) ;
  assign ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d349 =
	     (ptwalk_ff_req_queue_D_OUT[1:0] == 2'd3 ||
	      ptwalk_ff_memory_response_D_OUT[12] ||
	      priv__h2552 != 2'd0) &&
	     ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d307 &&
	     NOT_ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_ETC___d347 ;
  assign ptwalk_rg_levels_9_EQ_0_55_AND_NOT_ptwalk_ff_m_ETC___d242 =
	     ptwalk_rg_levels == 2'd0 &&
	     !ptwalk_ff_memory_response_D_OUT[9] &&
	     !ptwalk_ff_memory_response_D_OUT[11] ||
	     (ptwalk_ff_memory_response_D_OUT[11] ||
	      ptwalk_ff_memory_response_D_OUT[9] ||
	      ptwalk_ff_memory_response_D_OUT[10]) &&
	     ptwalk_rg_levels_9_EQ_1_56_AND_NOT_ptwalk_ff_m_ETC___d240 ;
  assign ptwalk_rg_levels_9_EQ_0_55_AND_NOT_ptwalk_ff_m_ETC___d262 =
	     ptwalk_rg_levels == 2'd0 &&
	     !ptwalk_ff_memory_response_D_OUT[9] &&
	     !ptwalk_ff_memory_response_D_OUT[11] ||
	     (ptwalk_ff_memory_response_D_OUT[11] ||
	      ptwalk_ff_memory_response_D_OUT[9] ||
	      ptwalk_ff_memory_response_D_OUT[10]) &&
	     (ptwalk_rg_levels == 2'd1 &&
	      ptwalk_ff_memory_response_D_OUT[26:18] != 9'd0 ||
	      ptwalk_rg_levels == 2'd2 &&
	      ptwalk_ff_memory_response_D_OUT[35:18] != 18'd0 ||
	      ptwalk_rg_levels == 2'd3 &&
	      ptwalk_ff_memory_response_D_OUT[44:18] != 27'd0 ||
	      ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_EQ__ETC___d259) ;
  assign ptwalk_rg_levels_9_EQ_1_56_AND_NOT_ptwalk_ff_m_ETC___d240 =
	     ptwalk_rg_levels == 2'd1 &&
	     ptwalk_ff_memory_response_D_OUT[26:18] != 9'd0 ||
	     ptwalk_rg_levels == 2'd2 &&
	     ptwalk_ff_memory_response_D_OUT[35:18] != 18'd0 ||
	     ptwalk_rg_levels == 2'd3 &&
	     ptwalk_ff_memory_response_D_OUT[44:18] != 27'd0 ||
	     (ptwalk_ff_req_queue_D_OUT[1:0] == 2'd2 ||
	      ptwalk_ff_req_queue_D_OUT[1:0] == 2'd1) &&
	     !ptwalk_ff_memory_response_D_OUT[10] ||
	     NOT_ptwalk_ff_req_queue_first__0_BITS_1_TO_0_2_ETC___d238 ;
  assign value__h7281 = { 2'd2, riscv_mv_curr_priv[1] } ;
  assign value__h9214 = { 2'd0, riscv_mv_curr_priv[1] } ;
  assign wr_write_req_BITS_31_TO_0__q2 = wr_write_req[31:0] ;
  assign x__h1988 =
	     { CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1, 3'b0 } ;
  assign x__h3564 = ptwalk_rg_levels - 2'd1 ;
  assign x__h3847 = { ptwalk_ff_memory_response_D_OUT[61:18], 12'b0 } ;
  assign x__h8998 = { 1'd0, dmem_mv_write_mem_req_rd[2:1] } ;
  assign x__h9453 = rg_shift_amount + 9'd64 ;
  assign x__h9490 = rg_burst_count + 8'd1 ;
  assign x__h9545 = dmem_mv_write_mem_req_rd[523:12] >> rg_shift_amount ;
  assign x_address__h2140 =
	     { {8{pte_address__h1806[55]}}, pte_address__h1806 } ;
  assign x_writedata__h2145 = { 58'd0, 6'bxxxxxx /* unspecified value */  } ;
  assign x_writedata__h3667 = { 58'd0, _theResult_____1__h3353 } ;
  always@(ptwalk_ff_req_queue_D_OUT)
  begin
    case (ptwalk_ff_req_queue_D_OUT[1:0])
      2'd0: cause___1__h3522 = 6'd13;
      2'd3: cause___1__h3522 = 6'd12;
      default: cause___1__h3522 = 6'd15;
    endcase
  end
  always@(ptwalk_ff_req_queue_D_OUT)
  begin
    case (ptwalk_ff_req_queue_D_OUT[1:0])
      2'd0: cause___1__h3501 = 6'd5;
      2'd3: cause___1__h3501 = 6'd1;
      default: cause___1__h3501 = 6'd7;
    endcase
  end
  always@(ptwalk_rg_levels or ptwalk_ff_req_queue_D_OUT)
  begin
    case (ptwalk_rg_levels)
      2'd0:
	  CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1 =
	      ptwalk_ff_req_queue_D_OUT[22:14];
      2'd1:
	  CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1 =
	      ptwalk_ff_req_queue_D_OUT[31:23];
      2'd2:
	  CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1 =
	      ptwalk_ff_req_queue_D_OUT[40:32];
      2'd3:
	  CASE_ptwalk_rg_levels_0_ptwalk_ff_req_queueD__ETC__q1 =
	      9'bxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ptwalk_rg_a <= `BSV_ASSIGNMENT_DELAY 56'd0;
	ptwalk_rg_hold_epoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ptwalk_rg_levels <= `BSV_ASSIGNMENT_DELAY 2'd2;
	ptwalk_rg_state <= `BSV_ASSIGNMENT_DELAY 2'd2;
	rg_burst_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_ptw_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_read_line_req <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      52'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	rg_shift_amount <= `BSV_ASSIGNMENT_DELAY 9'd64;
	wr_write_req <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
      end
    else
      begin
        if (ptwalk_rg_a_EN)
	  ptwalk_rg_a <= `BSV_ASSIGNMENT_DELAY ptwalk_rg_a_D_IN;
	if (ptwalk_rg_hold_epoch_EN)
	  ptwalk_rg_hold_epoch <= `BSV_ASSIGNMENT_DELAY
	      ptwalk_rg_hold_epoch_D_IN;
	if (ptwalk_rg_levels_EN)
	  ptwalk_rg_levels <= `BSV_ASSIGNMENT_DELAY ptwalk_rg_levels_D_IN;
	if (ptwalk_rg_state_EN)
	  ptwalk_rg_state <= `BSV_ASSIGNMENT_DELAY ptwalk_rg_state_D_IN;
	if (rg_burst_count_EN)
	  rg_burst_count <= `BSV_ASSIGNMENT_DELAY rg_burst_count_D_IN;
	if (rg_ptw_state_EN)
	  rg_ptw_state <= `BSV_ASSIGNMENT_DELAY rg_ptw_state_D_IN;
	if (rg_read_line_req_EN)
	  rg_read_line_req <= `BSV_ASSIGNMENT_DELAY rg_read_line_req_D_IN;
	if (rg_shift_amount_EN)
	  rg_shift_amount <= `BSV_ASSIGNMENT_DELAY rg_shift_amount_D_IN;
	if (wr_write_req_EN)
	  wr_write_req <= `BSV_ASSIGNMENT_DELAY wr_write_req_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ptwalk_rg_a = 56'hAAAAAAAAAAAAAA;
    ptwalk_rg_hold_epoch = 1'h0;
    ptwalk_rg_levels = 2'h2;
    ptwalk_rg_state = 2'h2;
    rg_burst_count = 8'hAA;
    rg_ptw_state = 2'h2;
    rg_read_line_req = 53'h0AAAAAAAAAAAAA;
    rg_shift_amount = 9'h0AA;
    wr_write_req = 33'h0AAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request)
	begin
	  TASK_testplusargs___d398 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request)
	begin
	  TASK_testplusargs___d399 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request)
	begin
	  TASK_testplusargs___d400 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request)
	begin
	  v__h7246 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d398 ||
	   TASK_testplusargs___d399 && TASK_testplusargs___d400))
	$write("[%10d", v__h7246, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d398 ||
	   TASK_testplusargs___d399 && TASK_testplusargs___d400))
	$write("[%2d]CORE : IMEM Line Requesting ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d398 ||
	   TASK_testplusargs___d399 && TASK_testplusargs___d400))
	$write("AXI4_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d398 ||
	   TASK_testplusargs___d399 && TASK_testplusargs___d400))
	$write("'h%h", imem_get_read_mem_req_get[43:12]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d398 ||
	   TASK_testplusargs___d399 && TASK_testplusargs___d400))
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d398 ||
	   TASK_testplusargs___d399 && TASK_testplusargs___d400))
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d398 ||
	   TASK_testplusargs___d399 && TASK_testplusargs___d400))
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d398 ||
	   TASK_testplusargs___d399 && TASK_testplusargs___d400))
	$write("'h%h", value__h7281);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d398 ||
	   TASK_testplusargs___d399 && TASK_testplusargs___d400))
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d398 ||
	   TASK_testplusargs___d399 && TASK_testplusargs___d400))
	$write("'h%h", imem_get_read_mem_req_get[3:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d398 ||
	   TASK_testplusargs___d399 && TASK_testplusargs___d400))
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d398 ||
	   TASK_testplusargs___d399 && TASK_testplusargs___d400))
	$write("'h%h", imem_get_read_mem_req_get[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d398 ||
	   TASK_testplusargs___d399 && TASK_testplusargs___d400))
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d398 ||
	   TASK_testplusargs___d399 && TASK_testplusargs___d400))
	$write("'h%h", 2'b10);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d398 ||
	   TASK_testplusargs___d399 && TASK_testplusargs___d400))
	$write(", ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d398 ||
	   TASK_testplusargs___d399 && TASK_testplusargs___d400))
	$write("'h%h", imem_request_arid__h7126, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d398 ||
	   TASK_testplusargs___d399 && TASK_testplusargs___d400))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp)
	begin
	  TASK_testplusargs___d414 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp)
	begin
	  TASK_testplusargs___d415 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp)
	begin
	  TASK_testplusargs___d416 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d420 =
	(TASK_testplusargs___d414 ||
	 TASK_testplusargs___d415 && TASK_testplusargs___d416) &&
	fetch_xactor_f_rd_data_D_OUT[70:69] == 2'd0;
    TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d422 =
	(TASK_testplusargs___d414 ||
	 TASK_testplusargs___d415 && TASK_testplusargs___d416) &&
	fetch_xactor_f_rd_data_D_OUT[70:69] == 2'd1;
    TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d424 =
	(TASK_testplusargs___d414 ||
	 TASK_testplusargs___d415 && TASK_testplusargs___d416) &&
	fetch_xactor_f_rd_data_D_OUT[70:69] == 2'd2;
    TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d429 =
	(TASK_testplusargs___d414 ||
	 TASK_testplusargs___d415 && TASK_testplusargs___d416) &&
	fetch_xactor_f_rd_data_D_OUT[70:69] != 2'd0 &&
	fetch_xactor_f_rd_data_D_OUT[70:69] != 2'd1 &&
	fetch_xactor_f_rd_data_D_OUT[70:69] != 2'd2;
    TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d432 =
	(TASK_testplusargs___d414 ||
	 TASK_testplusargs___d415 && TASK_testplusargs___d416) &&
	fetch_xactor_f_rd_data_D_OUT[4];
    TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d434 =
	(TASK_testplusargs___d414 ||
	 TASK_testplusargs___d415 && TASK_testplusargs___d416) &&
	!fetch_xactor_f_rd_data_D_OUT[4];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp)
	begin
	  v__h7462 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d414 ||
	   TASK_testplusargs___d415 && TASK_testplusargs___d416))
	$write("[%10d", v__h7462, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d414 ||
	   TASK_testplusargs___d415 && TASK_testplusargs___d416))
	$write("[%2d]CORE : IMEM Line Response ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d414 ||
	   TASK_testplusargs___d415 && TASK_testplusargs___d416))
	$write("AXI4_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d420)
	$write("AXI4_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d422)
	$write("AXI4_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d424)
	$write("AXI4_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d429)
	$write("AXI4_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d414 ||
	   TASK_testplusargs___d415 && TASK_testplusargs___d416))
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d414 ||
	   TASK_testplusargs___d415 && TASK_testplusargs___d416))
	$write("'h%h", fetch_xactor_f_rd_data_D_OUT[68:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d414 ||
	   TASK_testplusargs___d415 && TASK_testplusargs___d416))
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d432)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  TASK_testplusargs_14_OR_TASK_testplusargs_15_A_ETC___d434)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d414 ||
	   TASK_testplusargs___d415 && TASK_testplusargs___d416))
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d414 ||
	   TASK_testplusargs___d415 && TASK_testplusargs___d416))
	$write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d414 ||
	   TASK_testplusargs___d415 && TASK_testplusargs___d416))
	$write(", ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d414 ||
	   TASK_testplusargs___d415 && TASK_testplusargs___d416))
	$write("'h%h", fetch_xactor_f_rd_data_D_OUT[3:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d414 ||
	   TASK_testplusargs___d415 && TASK_testplusargs___d416))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457)
	begin
	  TASK_testplusargs___d467 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457)
	begin
	  TASK_testplusargs___d468 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457)
	begin
	  TASK_testplusargs___d469 = $test$plusargs("l1");
	  #0;
	end
    IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d472 =
	IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457 &&
	(TASK_testplusargs___d467 ||
	 TASK_testplusargs___d468 && TASK_testplusargs___d469);
    TASK_testplusargs_67_OR_TASK_testplusargs_68_A_ETC___d475 =
	(TASK_testplusargs___d467 ||
	 TASK_testplusargs___d468 && TASK_testplusargs___d469) &&
	dmem_get_read_mem_req_get[0];
    TASK_testplusargs_67_OR_TASK_testplusargs_68_A_ETC___d479 =
	(TASK_testplusargs___d467 ||
	 TASK_testplusargs___d468 && TASK_testplusargs___d469) &&
	!dmem_get_read_mem_req_get[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457)
	begin
	  v__h8062 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d472)
	$write("[%10d", v__h8062, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d472)
	$write("[%2d]CORE: Delaying Request: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d472)
	$write("DCache_mem_readreq { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d472)
	$write("'h%h", dmem_get_read_mem_req_get[43:12]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d472)
	$write(", ", "burst_len: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d472)
	$write("'h%h", dmem_get_read_mem_req_get[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d472)
	$write(", ", "burst_size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d472)
	$write("'h%h", dmem_get_read_mem_req_get[3:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d472)
	$write(", ", "io: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457 &&
	  TASK_testplusargs_67_OR_TASK_testplusargs_68_A_ETC___d475)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457 &&
	  TASK_testplusargs_67_OR_TASK_testplusargs_68_A_ETC___d479)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d472)
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d472)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  (!wr_write_req[32] ||
	   !IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457))
	begin
	  TASK_testplusargs___d485 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  (!wr_write_req[32] ||
	   !IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457))
	begin
	  TASK_testplusargs___d486 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  (!wr_write_req[32] ||
	   !IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457))
	begin
	  TASK_testplusargs___d487 = $test$plusargs("l1");
	  #0;
	end
    NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490 =
	(!wr_write_req[32] ||
	 !IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457) &&
	(TASK_testplusargs___d485 ||
	 TASK_testplusargs___d486 && TASK_testplusargs___d487);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  (!wr_write_req[32] ||
	   !IF_wr_write_req_50_BIT_32_51_THEN_wr_write_req_ETC___d457))
	begin
	  v__h8286 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490)
	$write("[%10d", v__h8286, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490)
	$write("[%2d]CORE : DMEM Line Requesting ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490)
	$write("AXI4_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490)
	$write("'h%h", dmem_get_read_mem_req_get[43:12]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490)
	$write("'h%h", value__h9214);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490)
	$write("'h%h", dmem_get_read_mem_req_get[3:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490)
	$write("'h%h", dmem_get_read_mem_req_get[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490)
	$write("'h%h", 2'b10);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490)
	$write(", ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490)
	$write("'h%h", dmem_request_arid__h7939, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_50_BIT_32_51_82_OR_NOT_IF_wr__ETC___d490)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read)
	begin
	  TASK_testplusargs___d496 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read)
	begin
	  TASK_testplusargs___d497 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read)
	begin
	  TASK_testplusargs___d498 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read)
	begin
	  v__h8455 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d496 ||
	   TASK_testplusargs___d497 && TASK_testplusargs___d498))
	$write("[%10d", v__h8455, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d496 ||
	   TASK_testplusargs___d497 && TASK_testplusargs___d498))
	$write("[%2d]CORE : DMEM Delayed Line Requesting ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d496 ||
	   TASK_testplusargs___d497 && TASK_testplusargs___d498))
	$write("AXI4_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d496 ||
	   TASK_testplusargs___d497 && TASK_testplusargs___d498))
	$write("'h%h", rg_read_line_req[51:20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d496 ||
	   TASK_testplusargs___d497 && TASK_testplusargs___d498))
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d496 ||
	   TASK_testplusargs___d497 && TASK_testplusargs___d498))
	$write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d496 ||
	   TASK_testplusargs___d497 && TASK_testplusargs___d498))
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d496 ||
	   TASK_testplusargs___d497 && TASK_testplusargs___d498))
	$write("'h%h", rg_read_line_req[19:17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d496 ||
	   TASK_testplusargs___d497 && TASK_testplusargs___d498))
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d496 ||
	   TASK_testplusargs___d497 && TASK_testplusargs___d498))
	$write("'h%h", rg_read_line_req[16:14]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d496 ||
	   TASK_testplusargs___d497 && TASK_testplusargs___d498))
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d496 ||
	   TASK_testplusargs___d497 && TASK_testplusargs___d498))
	$write("'h%h", rg_read_line_req[13:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d496 ||
	   TASK_testplusargs___d497 && TASK_testplusargs___d498))
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d496 ||
	   TASK_testplusargs___d497 && TASK_testplusargs___d498))
	$write("'h%h", rg_read_line_req[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d496 ||
	   TASK_testplusargs___d497 && TASK_testplusargs___d498))
	$write(", ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d496 ||
	   TASK_testplusargs___d497 && TASK_testplusargs___d498))
	$write("'h%h", rg_read_line_req[3:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d496 ||
	   TASK_testplusargs___d497 && TASK_testplusargs___d498))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp)
	begin
	  TASK_testplusargs___d518 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp)
	begin
	  TASK_testplusargs___d519 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp)
	begin
	  TASK_testplusargs___d520 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d524 =
	(TASK_testplusargs___d518 ||
	 TASK_testplusargs___d519 && TASK_testplusargs___d520) &&
	memory_xactor_f_rd_data_D_OUT[70:69] == 2'd0;
    TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d526 =
	(TASK_testplusargs___d518 ||
	 TASK_testplusargs___d519 && TASK_testplusargs___d520) &&
	memory_xactor_f_rd_data_D_OUT[70:69] == 2'd1;
    TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d528 =
	(TASK_testplusargs___d518 ||
	 TASK_testplusargs___d519 && TASK_testplusargs___d520) &&
	memory_xactor_f_rd_data_D_OUT[70:69] == 2'd2;
    TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d533 =
	(TASK_testplusargs___d518 ||
	 TASK_testplusargs___d519 && TASK_testplusargs___d520) &&
	memory_xactor_f_rd_data_D_OUT[70:69] != 2'd0 &&
	memory_xactor_f_rd_data_D_OUT[70:69] != 2'd1 &&
	memory_xactor_f_rd_data_D_OUT[70:69] != 2'd2;
    TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d536 =
	(TASK_testplusargs___d518 ||
	 TASK_testplusargs___d519 && TASK_testplusargs___d520) &&
	memory_xactor_f_rd_data_D_OUT[4];
    TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d538 =
	(TASK_testplusargs___d518 ||
	 TASK_testplusargs___d519 && TASK_testplusargs___d520) &&
	!memory_xactor_f_rd_data_D_OUT[4];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp)
	begin
	  v__h8725 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d518 ||
	   TASK_testplusargs___d519 && TASK_testplusargs___d520))
	$write("[%10d", v__h8725, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d518 ||
	   TASK_testplusargs___d519 && TASK_testplusargs___d520))
	$write("[%2d]CORE : DMEM Line Response ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d518 ||
	   TASK_testplusargs___d519 && TASK_testplusargs___d520))
	$write("AXI4_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d524)
	$write("AXI4_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d526)
	$write("AXI4_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d528)
	$write("AXI4_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d533)
	$write("AXI4_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d518 ||
	   TASK_testplusargs___d519 && TASK_testplusargs___d520))
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d518 ||
	   TASK_testplusargs___d519 && TASK_testplusargs___d520))
	$write("'h%h", memory_xactor_f_rd_data_D_OUT[68:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d518 ||
	   TASK_testplusargs___d519 && TASK_testplusargs___d520))
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d536)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  TASK_testplusargs_18_OR_TASK_testplusargs_19_A_ETC___d538)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d518 ||
	   TASK_testplusargs___d519 && TASK_testplusargs___d520))
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d518 ||
	   TASK_testplusargs___d519 && TASK_testplusargs___d520))
	$write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d518 ||
	   TASK_testplusargs___d519 && TASK_testplusargs___d520))
	$write(", ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d518 ||
	   TASK_testplusargs___d519 && TASK_testplusargs___d520))
	$write("'h%h", memory_xactor_f_rd_data_D_OUT[3:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d518 ||
	   TASK_testplusargs___d519 && TASK_testplusargs___d520))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  TASK_testplusargs___d566 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  TASK_testplusargs___d567 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  TASK_testplusargs___d568 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  v__h9150 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d566 ||
	   TASK_testplusargs___d567 && TASK_testplusargs___d568))
	$write("[%10d", v__h9150, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d566 ||
	   TASK_testplusargs___d567 && TASK_testplusargs___d568))
	$write("[%2d]CORE : DMEM Line Write Addr : Request ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d566 ||
	   TASK_testplusargs___d567 && TASK_testplusargs___d568))
	$write("AXI4_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d566 ||
	   TASK_testplusargs___d567 && TASK_testplusargs___d568))
	$write("'h%h", dmem_mv_write_mem_req_rd[555:524]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d566 ||
	   TASK_testplusargs___d567 && TASK_testplusargs___d568))
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d566 ||
	   TASK_testplusargs___d567 && TASK_testplusargs___d568))
	$write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d566 ||
	   TASK_testplusargs___d567 && TASK_testplusargs___d568))
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d566 ||
	   TASK_testplusargs___d567 && TASK_testplusargs___d568))
	$write("'h%h", value__h9214);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d566 ||
	   TASK_testplusargs___d567 && TASK_testplusargs___d568))
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d566 ||
	   TASK_testplusargs___d567 && TASK_testplusargs___d568))
	$write("'h%h", dmem_mv_write_mem_req_rd[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d566 ||
	   TASK_testplusargs___d567 && TASK_testplusargs___d568))
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d566 ||
	   TASK_testplusargs___d567 && TASK_testplusargs___d568))
	$write("'h%h", x__h8998);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d566 ||
	   TASK_testplusargs___d567 && TASK_testplusargs___d568))
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d566 ||
	   TASK_testplusargs___d567 && TASK_testplusargs___d568))
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d566 ||
	   TASK_testplusargs___d567 && TASK_testplusargs___d568))
	$write(", ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d566 ||
	   TASK_testplusargs___d567 && TASK_testplusargs___d568))
	$write("'h%h", aw_awid__h8968, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d566 ||
	   TASK_testplusargs___d567 && TASK_testplusargs___d568))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data)
	begin
	  TASK_testplusargs___d587 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data)
	begin
	  TASK_testplusargs___d588 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data)
	begin
	  TASK_testplusargs___d589 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data)
	begin
	  v__h9642 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data &&
	  (TASK_testplusargs___d587 ||
	   TASK_testplusargs___d588 && TASK_testplusargs___d589))
	$write("[%10d", v__h9642, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data &&
	  (TASK_testplusargs___d587 ||
	   TASK_testplusargs___d588 && TASK_testplusargs___d589))
	$write("[%2d]CORE : DMEM Write Data: %h rg_burst_count: %d last: %b rg_shift_amount:%d",
	       hartid,
	       x__h9545,
	       rg_burst_count,
	       rg_burst_count == 8'd7,
	       rg_shift_amount);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data &&
	  (TASK_testplusargs___d587 ||
	   TASK_testplusargs___d588 && TASK_testplusargs___d589))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp)
	begin
	  TASK_testplusargs___d604 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp)
	begin
	  TASK_testplusargs___d605 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp)
	begin
	  TASK_testplusargs___d606 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d610 =
	(TASK_testplusargs___d604 ||
	 TASK_testplusargs___d605 && TASK_testplusargs___d606) &&
	memory_xactor_f_wr_resp_D_OUT[5:4] == 2'd0;
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d612 =
	(TASK_testplusargs___d604 ||
	 TASK_testplusargs___d605 && TASK_testplusargs___d606) &&
	memory_xactor_f_wr_resp_D_OUT[5:4] == 2'd1;
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d614 =
	(TASK_testplusargs___d604 ||
	 TASK_testplusargs___d605 && TASK_testplusargs___d606) &&
	memory_xactor_f_wr_resp_D_OUT[5:4] == 2'd2;
    TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d619 =
	(TASK_testplusargs___d604 ||
	 TASK_testplusargs___d605 && TASK_testplusargs___d606) &&
	memory_xactor_f_wr_resp_D_OUT[5:4] != 2'd0 &&
	memory_xactor_f_wr_resp_D_OUT[5:4] != 2'd1 &&
	memory_xactor_f_wr_resp_D_OUT[5:4] != 2'd2;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp)
	begin
	  v__h9891 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d604 ||
	   TASK_testplusargs___d605 && TASK_testplusargs___d606))
	$write("[%10d", v__h9891, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d604 ||
	   TASK_testplusargs___d605 && TASK_testplusargs___d606))
	$write("[%2d]CORE : DMEM Write Line Response ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d604 ||
	   TASK_testplusargs___d605 && TASK_testplusargs___d606))
	$write("AXI4_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d610)
	$write("AXI4_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d612)
	$write("AXI4_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d614)
	$write("AXI4_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  TASK_testplusargs_04_OR_TASK_testplusargs_05_A_ETC___d619)
	$write("AXI4_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d604 ||
	   TASK_testplusargs___d605 && TASK_testplusargs___d606))
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d604 ||
	   TASK_testplusargs___d605 && TASK_testplusargs___d606))
	$write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d604 ||
	   TASK_testplusargs___d605 && TASK_testplusargs___d606))
	$write(", ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d604 ||
	   TASK_testplusargs___d605 && TASK_testplusargs___d606))
	$write("'h%h", memory_xactor_f_wr_resp_D_OUT[3:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d604 ||
	   TASK_testplusargs___d605 && TASK_testplusargs___d606))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache)
	begin
	  TASK_testplusargs___d9 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache)
	begin
	  TASK_testplusargs___d10 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache)
	begin
	  TASK_testplusargs___d11 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d18 =
	(TASK_testplusargs___d9 ||
	 TASK_testplusargs___d10 && TASK_testplusargs___d11) &&
	ptwalk_ff_hold_req_D_OUT[76];
    TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d20 =
	(TASK_testplusargs___d9 ||
	 TASK_testplusargs___d10 && TASK_testplusargs___d11) &&
	!ptwalk_ff_hold_req_D_OUT[76];
    TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d27 =
	(TASK_testplusargs___d9 ||
	 TASK_testplusargs___d10 && TASK_testplusargs___d11) &&
	ptwalk_ff_hold_req_D_OUT[0];
    TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d29 =
	(TASK_testplusargs___d9 ||
	 TASK_testplusargs___d10 && TASK_testplusargs___d11) &&
	!ptwalk_ff_hold_req_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache)
	begin
	  v__h1351 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("[%10d", v__h1351, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("PTW : Resending Core request back to DCache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("DCache_core_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("'h%h", ptwalk_ff_hold_req_D_OUT[140:77]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write(", ", "fence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d18)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d20)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("'h%h", ptwalk_ff_hold_req_D_OUT[75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("'h%h", ptwalk_ff_hold_req_D_OUT[74:73]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("'h%h", ptwalk_ff_hold_req_D_OUT[72:70]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("'h%h", ptwalk_ff_hold_req_D_OUT[69:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write(", ", "atomic_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("'h%h", ptwalk_ff_hold_req_D_OUT[5:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write(", ", "ptwalk_req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d27)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  TASK_testplusargs_OR_TASK_testplusargs_0_AND_T_ETC___d29)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_resend_core_req_to_cache &&
	  (TASK_testplusargs___d9 ||
	   TASK_testplusargs___d10 && TASK_testplusargs___d11))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte)
	begin
	  TASK_testplusargs___d44 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte)
	begin
	  TASK_testplusargs___d45 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte)
	begin
	  TASK_testplusargs___d46 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte)
	begin
	  v__h1711 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d44 ||
	   TASK_testplusargs___d45 && TASK_testplusargs___d46))
	$write("[%10d", v__h1711, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d44 ||
	   TASK_testplusargs___d45 && TASK_testplusargs___d46))
	$write("PTW : Recieved Request: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d44 ||
	   TASK_testplusargs___d45 && TASK_testplusargs___d46))
	$write("PTWalk_tlb_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d44 ||
	   TASK_testplusargs___d45 && TASK_testplusargs___d46))
	$write("'h%h", ptwalk_ff_req_queue_D_OUT[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d44 ||
	   TASK_testplusargs___d45 && TASK_testplusargs___d46))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d44 ||
	   TASK_testplusargs___d45 && TASK_testplusargs___d46))
	$write("'h%h", ptwalk_ff_req_queue_D_OUT[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d44 ||
	   TASK_testplusargs___d45 && TASK_testplusargs___d46))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte)
	begin
	  TASK_testplusargs___d53 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte)
	begin
	  TASK_testplusargs___d54 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte)
	begin
	  TASK_testplusargs___d55 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte)
	begin
	  v__h1873 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write("[%10d", v__h1873, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write("PTW : Sending PTE - Address to DMEM:%h", pte_address__h1806);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_generate_pte &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d96 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d97 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d98 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d105 =
	(TASK_testplusargs___d96 ||
	 TASK_testplusargs___d97 && TASK_testplusargs___d98) &&
	ptwalk_ff_memory_response_D_OUT[7];
    TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d107 =
	(TASK_testplusargs___d96 ||
	 TASK_testplusargs___d97 && TASK_testplusargs___d98) &&
	!ptwalk_ff_memory_response_D_OUT[7];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  v__h2257 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("[%10d", v__h2257, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("PTW : Memory Response: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("DMem_core_response { ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("'h%h", ptwalk_ff_memory_response_D_OUT[71:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write(", ", "trap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d105)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_6_OR_TASK_testplusargs_7_AND_ETC___d107)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write(", ", "cause: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("'h%h", ptwalk_ff_memory_response_D_OUT[6:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("'h%h", ptwalk_ff_memory_response_D_OUT[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d96 ||
	   TASK_testplusargs___d97 && TASK_testplusargs___d98))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d110 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d111 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d112 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  v__h2441 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d110 ||
	   TASK_testplusargs___d111 && TASK_testplusargs___d112))
	$write("[%10d", v__h2441, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d110 ||
	   TASK_testplusargs___d111 && TASK_testplusargs___d112))
	$write("PTW : For Request: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d110 ||
	   TASK_testplusargs___d111 && TASK_testplusargs___d112))
	$write("PTWalk_tlb_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d110 ||
	   TASK_testplusargs___d111 && TASK_testplusargs___d112))
	$write("'h%h", ptwalk_ff_req_queue_D_OUT[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d110 ||
	   TASK_testplusargs___d111 && TASK_testplusargs___d112))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d110 ||
	   TASK_testplusargs___d111 && TASK_testplusargs___d112))
	$write("'h%h", ptwalk_ff_req_queue_D_OUT[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d110 ||
	   TASK_testplusargs___d111 && TASK_testplusargs___d112))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d116 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d117 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  TASK_testplusargs___d118 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d123 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	ptwalk_ff_memory_response_D_OUT[8];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d125 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	!ptwalk_ff_memory_response_D_OUT[8];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d127 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	ptwalk_ff_memory_response_D_OUT[9];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d129 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	!ptwalk_ff_memory_response_D_OUT[9];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d131 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	ptwalk_ff_memory_response_D_OUT[10];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d133 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	!ptwalk_ff_memory_response_D_OUT[10];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d135 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	ptwalk_ff_memory_response_D_OUT[11];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d139 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	ptwalk_ff_memory_response_D_OUT[12];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d137 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	!ptwalk_ff_memory_response_D_OUT[11];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d141 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	!ptwalk_ff_memory_response_D_OUT[12];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d143 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	ptwalk_ff_memory_response_D_OUT[13];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d145 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	!ptwalk_ff_memory_response_D_OUT[13];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d149 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	!ptwalk_ff_memory_response_D_OUT[14];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d147 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	ptwalk_ff_memory_response_D_OUT[14];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d151 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	ptwalk_ff_memory_response_D_OUT[15];
    TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d153 =
	(TASK_testplusargs___d116 ||
	 TASK_testplusargs___d117 && TASK_testplusargs___d118) &&
	!ptwalk_ff_memory_response_D_OUT[15];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte)
	begin
	  v__h2619 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write("[%10d", v__h2619, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write("PTW : Permissions");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write("TLB_permissions { ", "v: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d123)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d125)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write(", ", "r: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d127)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d129)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write(", ", "w: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d131)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d133)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write(", ", "x: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d135)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d137)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write(", ", "u: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d139)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d141)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write(", ", "g: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d143)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d145)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write(", ", "a: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d147)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d149)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write(", ", "d: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d151)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  TASK_testplusargs_16_OR_TASK_testplusargs_17_A_ETC___d153)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (TASK_testplusargs___d116 ||
	   TASK_testplusargs___d117 && TASK_testplusargs___d118))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (!ptwalk_ff_memory_response_D_OUT[8] ||
	   !ptwalk_ff_memory_response_D_OUT[9] &&
	   ptwalk_ff_memory_response_D_OUT[10] ||
	   ptwalk_rg_levels_9_EQ_0_55_AND_NOT_ptwalk_ff_m_ETC___d242 ||
	   ptwalk_ff_memory_response_D_OUT[7]))
	begin
	  TASK_testplusargs___d272 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (!ptwalk_ff_memory_response_D_OUT[8] ||
	   !ptwalk_ff_memory_response_D_OUT[9] &&
	   ptwalk_ff_memory_response_D_OUT[10] ||
	   ptwalk_rg_levels_9_EQ_0_55_AND_NOT_ptwalk_ff_m_ETC___d242 ||
	   ptwalk_ff_memory_response_D_OUT[7]))
	begin
	  TASK_testplusargs___d273 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (!ptwalk_ff_memory_response_D_OUT[8] ||
	   !ptwalk_ff_memory_response_D_OUT[9] &&
	   ptwalk_ff_memory_response_D_OUT[10] ||
	   ptwalk_rg_levels_9_EQ_0_55_AND_NOT_ptwalk_ff_m_ETC___d242 ||
	   ptwalk_ff_memory_response_D_OUT[7]))
	begin
	  TASK_testplusargs___d274 = $test$plusargs("l2");
	  #0;
	end
    NOT_ptwalk_ff_memory_response_first__02_BIT_8__ETC___d277 =
	(!ptwalk_ff_memory_response_D_OUT[8] ||
	 !ptwalk_ff_memory_response_D_OUT[9] &&
	 ptwalk_ff_memory_response_D_OUT[10] ||
	 ptwalk_rg_levels_9_EQ_0_55_AND_NOT_ptwalk_ff_m_ETC___d242 ||
	 ptwalk_ff_memory_response_D_OUT[7]) &&
	(TASK_testplusargs___d272 ||
	 TASK_testplusargs___d273 && TASK_testplusargs___d274);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  (!ptwalk_ff_memory_response_D_OUT[8] ||
	   !ptwalk_ff_memory_response_D_OUT[9] &&
	   ptwalk_ff_memory_response_D_OUT[10] ||
	   ptwalk_rg_levels_9_EQ_0_55_AND_NOT_ptwalk_ff_m_ETC___d242 ||
	   ptwalk_ff_memory_response_D_OUT[7]))
	begin
	  v__h3439 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  NOT_ptwalk_ff_memory_response_first__02_BIT_8__ETC___d277)
	$write("[%10d", v__h3439, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  NOT_ptwalk_ff_memory_response_first__02_BIT_8__ETC___d277)
	$write("PTW : Generated Error. Cause:%d", _theResult_____1__h3353);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  NOT_ptwalk_ff_memory_response_first__02_BIT_8__ETC___d277)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__02_BIT_8_22_A_ETC___d321 &&
	  !ptwalk_ff_memory_response_D_OUT[7] &&
	  !ptwalk_ff_memory_response_D_OUT[9] &&
	  !ptwalk_ff_memory_response_D_OUT[11])
	begin
	  TASK_testplusargs___d326 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__02_BIT_8_22_A_ETC___d321 &&
	  !ptwalk_ff_memory_response_D_OUT[7] &&
	  !ptwalk_ff_memory_response_D_OUT[9] &&
	  !ptwalk_ff_memory_response_D_OUT[11])
	begin
	  TASK_testplusargs___d327 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__02_BIT_8_22_A_ETC___d321 &&
	  !ptwalk_ff_memory_response_D_OUT[7] &&
	  !ptwalk_ff_memory_response_D_OUT[9] &&
	  !ptwalk_ff_memory_response_D_OUT[11])
	begin
	  TASK_testplusargs___d328 = $test$plusargs("l2");
	  #0;
	end
    NOT_ptwalk_ff_memory_response_first__02_BIT_9__ETC___d331 =
	!ptwalk_ff_memory_response_D_OUT[9] &&
	!ptwalk_ff_memory_response_D_OUT[11] &&
	(TASK_testplusargs___d326 ||
	 TASK_testplusargs___d327 && TASK_testplusargs___d328);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__02_BIT_8_22_A_ETC___d321 &&
	  !ptwalk_ff_memory_response_D_OUT[7] &&
	  !ptwalk_ff_memory_response_D_OUT[9] &&
	  !ptwalk_ff_memory_response_D_OUT[11])
	begin
	  v__h3981 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__02_BIT_8_22_A_ETC___d321 &&
	  !ptwalk_ff_memory_response_D_OUT[7] &&
	  NOT_ptwalk_ff_memory_response_first__02_BIT_9__ETC___d331)
	$write("[%10d", v__h3981, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__02_BIT_8_22_A_ETC___d321 &&
	  !ptwalk_ff_memory_response_D_OUT[7] &&
	  NOT_ptwalk_ff_memory_response_first__02_BIT_9__ETC___d331)
	$write("PTW : Pointer to NextLevel:%h Levels:%d",
	       x__h3847,
	       ptwalk_rg_levels);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__02_BIT_8_22_A_ETC___d321 &&
	  !ptwalk_ff_memory_response_D_OUT[7] &&
	  NOT_ptwalk_ff_memory_response_first__02_BIT_9__ETC___d331)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_D_OUT[8] &&
	  (ptwalk_ff_memory_response_D_OUT[9] ||
	   !ptwalk_ff_memory_response_D_OUT[10]) &&
	  NOT_ptwalk_rg_levels_9_EQ_0_55_86_OR_ptwalk_ff_ETC___d353 &&
	  !ptwalk_ff_memory_response_D_OUT[7] &&
	  (ptwalk_ff_memory_response_D_OUT[9] ||
	   ptwalk_ff_memory_response_D_OUT[11]))
	begin
	  TASK_testplusargs___d357 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_D_OUT[8] &&
	  (ptwalk_ff_memory_response_D_OUT[9] ||
	   !ptwalk_ff_memory_response_D_OUT[10]) &&
	  NOT_ptwalk_rg_levels_9_EQ_0_55_86_OR_ptwalk_ff_ETC___d353 &&
	  !ptwalk_ff_memory_response_D_OUT[7] &&
	  (ptwalk_ff_memory_response_D_OUT[9] ||
	   ptwalk_ff_memory_response_D_OUT[11]))
	begin
	  TASK_testplusargs___d358 = $test$plusargs("mptwalk");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_D_OUT[8] &&
	  (ptwalk_ff_memory_response_D_OUT[9] ||
	   !ptwalk_ff_memory_response_D_OUT[10]) &&
	  NOT_ptwalk_rg_levels_9_EQ_0_55_86_OR_ptwalk_ff_ETC___d353 &&
	  !ptwalk_ff_memory_response_D_OUT[7] &&
	  (ptwalk_ff_memory_response_D_OUT[9] ||
	   ptwalk_ff_memory_response_D_OUT[11]))
	begin
	  TASK_testplusargs___d359 = $test$plusargs("l2");
	  #0;
	end
    ptwalk_ff_memory_response_first__02_BIT_9_26_O_ETC___d362 =
	(ptwalk_ff_memory_response_D_OUT[9] ||
	 ptwalk_ff_memory_response_D_OUT[11]) &&
	(TASK_testplusargs___d357 ||
	 TASK_testplusargs___d358 && TASK_testplusargs___d359);
    ptwalk_ff_memory_response_first__02_BIT_8_22_A_ETC___d363 =
	ptwalk_ff_memory_response_D_OUT[8] &&
	(ptwalk_ff_memory_response_D_OUT[9] ||
	 !ptwalk_ff_memory_response_D_OUT[10]) &&
	NOT_ptwalk_rg_levels_9_EQ_0_55_86_OR_ptwalk_ff_ETC___d353 &&
	!ptwalk_ff_memory_response_D_OUT[7] &&
	ptwalk_ff_memory_response_first__02_BIT_9_26_O_ETC___d362;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_D_OUT[8] &&
	  (ptwalk_ff_memory_response_D_OUT[9] ||
	   !ptwalk_ff_memory_response_D_OUT[10]) &&
	  NOT_ptwalk_rg_levels_9_EQ_0_55_86_OR_ptwalk_ff_ETC___d353 &&
	  !ptwalk_ff_memory_response_D_OUT[7] &&
	  (ptwalk_ff_memory_response_D_OUT[9] ||
	   ptwalk_ff_memory_response_D_OUT[11]))
	begin
	  v__h4103 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__02_BIT_8_22_A_ETC___d363)
	$write("[%10d", v__h4103, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__02_BIT_8_22_A_ETC___d363)
	$write("PTW : Found Leaf PTE:%h levels: %d",
	       ptwalk_ff_memory_response_D_OUT[71:8],
	       ptwalk_rg_levels);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ptwalk_check_pte &&
	  ptwalk_ff_memory_response_first__02_BIT_8_22_A_ETC___d363)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkccore_axi4

