//
// Generated by Bluespec Compiler, version 2022.01-5-ge3edf4b1 (build e3edf4b1)
//
// On Fri Apr 15 12:47:31 EDT 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_put_core_req_put           O     1
// get_core_resp_get              O    72
// RDY_get_core_resp_get          O     1
// get_read_mem_req_get           O    44 reg
// RDY_get_read_mem_req_get       O     1 reg
// RDY_put_read_mem_resp_put      O     1
// mv_write_mem_req               O   556 reg
// RDY_mv_write_mem_req           O     1 reg
// RDY_ma_write_mem_req_deq       O     1 reg
// RDY_put_write_mem_resp_put     O     1
// RDY_ma_curr_priv               O     1 const
// get_ptw_resp_get               O    72
// RDY_get_ptw_resp_get           O     1
// RDY_put_pa_from_tlb_put        O     1
// get_hold_req_get               O   141
// RDY_get_hold_req_get           O     1
// mv_perf_counters               O    13
// RDY_mv_perf_counters           O     1 const
// RDY_ma_cache_enable            O     1 const
// mv_storebuffer_empty           O     1
// RDY_mv_storebuffer_empty       O     1 const
// RDY_ma_perform_store           O     1
// mv_cacheable_store             O     1
// RDY_mv_cacheable_store         O     1 const
// mv_cache_available             O     1
// RDY_mv_cache_available         O     1 const
// mv_commit_store_ready          O     1
// RDY_mv_commit_store_ready      O     1 const
// pmp_cfg_0                      I     8
// pmp_cfg_1                      I     8
// pmp_cfg_2                      I     8
// pmp_cfg_3                      I     8
// pmp_addr_0                     I    29
// pmp_addr_1                     I    29
// pmp_addr_2                     I    29
// pmp_addr_3                     I    29
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_core_req_put               I   141
// put_read_mem_resp_put          I    66
// put_write_mem_resp_put         I     1
// ma_curr_priv_c                 I     2
// put_pa_from_tlb_put            I    40
// ma_cache_enable_c              I     1
// ma_perform_store_currepoch     I     1
// EN_put_core_req_put            I     1
// EN_put_read_mem_resp_put       I     1
// EN_ma_write_mem_req_deq        I     1
// EN_put_write_mem_resp_put      I     1
// EN_ma_curr_priv                I     1
// EN_put_pa_from_tlb_put         I     1
// EN_ma_cache_enable             I     1
// EN_ma_perform_store            I     1
// EN_get_core_resp_get           I     1
// EN_get_read_mem_req_get        I     1
// EN_get_ptw_resp_get            I     1
// EN_get_hold_req_get            I     1
//
// Combinational paths from inputs to outputs:
//   (put_core_req_put,
//    put_read_mem_resp_put,
//    ma_curr_priv_c,
//    put_pa_from_tlb_put,
//    ma_cache_enable_c,
//    EN_put_core_req_put,
//    EN_put_read_mem_resp_put,
//    EN_ma_curr_priv,
//    EN_put_pa_from_tlb_put,
//    EN_ma_cache_enable,
//    EN_ma_perform_store,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> mv_perf_counters
//   (put_read_mem_resp_put,
//    ma_curr_priv_c,
//    put_pa_from_tlb_put,
//    ma_cache_enable_c,
//    EN_put_read_mem_resp_put,
//    EN_ma_curr_priv,
//    EN_put_pa_from_tlb_put,
//    EN_ma_cache_enable,
//    EN_ma_perform_store,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_get_core_resp_get
//   (put_read_mem_resp_put,
//    ma_curr_priv_c,
//    put_pa_from_tlb_put,
//    ma_cache_enable_c,
//    EN_put_read_mem_resp_put,
//    EN_ma_curr_priv,
//    EN_put_pa_from_tlb_put,
//    EN_ma_cache_enable,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_get_ptw_resp_get
//   (put_read_mem_resp_put,
//    ma_curr_priv_c,
//    put_pa_from_tlb_put,
//    ma_cache_enable_c,
//    EN_put_read_mem_resp_put,
//    EN_ma_curr_priv,
//    EN_put_pa_from_tlb_put,
//    EN_ma_cache_enable,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_get_hold_req_get
//   (put_read_mem_resp_put,
//    ma_curr_priv_c,
//    put_pa_from_tlb_put,
//    ma_cache_enable_c,
//    EN_put_read_mem_resp_put,
//    EN_ma_curr_priv,
//    EN_put_pa_from_tlb_put,
//    EN_ma_cache_enable,
//    EN_ma_perform_store,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> get_core_resp_get
//   (put_read_mem_resp_put,
//    ma_curr_priv_c,
//    put_pa_from_tlb_put,
//    ma_cache_enable_c,
//    EN_put_read_mem_resp_put,
//    EN_ma_curr_priv,
//    EN_put_pa_from_tlb_put,
//    EN_ma_cache_enable,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> get_ptw_resp_get
//   (put_read_mem_resp_put,
//    ma_curr_priv_c,
//    put_pa_from_tlb_put,
//    ma_cache_enable_c,
//    EN_put_read_mem_resp_put,
//    EN_ma_curr_priv,
//    EN_put_pa_from_tlb_put,
//    EN_ma_cache_enable,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> get_hold_req_get
//   EN_ma_cache_enable -> RDY_put_core_req_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkdcache(pmp_cfg_0,
		pmp_cfg_1,
		pmp_cfg_2,
		pmp_cfg_3,
		pmp_addr_0,
		pmp_addr_1,
		pmp_addr_2,
		pmp_addr_3,
		CLK,
		RST_N,

		put_core_req_put,
		EN_put_core_req_put,
		RDY_put_core_req_put,

		EN_get_core_resp_get,
		get_core_resp_get,
		RDY_get_core_resp_get,

		EN_get_read_mem_req_get,
		get_read_mem_req_get,
		RDY_get_read_mem_req_get,

		put_read_mem_resp_put,
		EN_put_read_mem_resp_put,
		RDY_put_read_mem_resp_put,

		mv_write_mem_req,
		RDY_mv_write_mem_req,

		EN_ma_write_mem_req_deq,
		RDY_ma_write_mem_req_deq,

		put_write_mem_resp_put,
		EN_put_write_mem_resp_put,
		RDY_put_write_mem_resp_put,

		ma_curr_priv_c,
		EN_ma_curr_priv,
		RDY_ma_curr_priv,

		EN_get_ptw_resp_get,
		get_ptw_resp_get,
		RDY_get_ptw_resp_get,

		put_pa_from_tlb_put,
		EN_put_pa_from_tlb_put,
		RDY_put_pa_from_tlb_put,

		EN_get_hold_req_get,
		get_hold_req_get,
		RDY_get_hold_req_get,

		mv_perf_counters,
		RDY_mv_perf_counters,

		ma_cache_enable_c,
		EN_ma_cache_enable,
		RDY_ma_cache_enable,

		mv_storebuffer_empty,
		RDY_mv_storebuffer_empty,

		ma_perform_store_currepoch,
		EN_ma_perform_store,
		RDY_ma_perform_store,

		mv_cacheable_store,
		RDY_mv_cacheable_store,

		mv_cache_available,
		RDY_mv_cache_available,

		mv_commit_store_ready,
		RDY_mv_commit_store_ready);
  parameter [31 : 0] id = 32'b0;
  input  [7 : 0] pmp_cfg_0;
  input  [7 : 0] pmp_cfg_1;
  input  [7 : 0] pmp_cfg_2;
  input  [7 : 0] pmp_cfg_3;
  input  [28 : 0] pmp_addr_0;
  input  [28 : 0] pmp_addr_1;
  input  [28 : 0] pmp_addr_2;
  input  [28 : 0] pmp_addr_3;
  input  CLK;
  input  RST_N;

  // action method put_core_req_put
  input  [140 : 0] put_core_req_put;
  input  EN_put_core_req_put;
  output RDY_put_core_req_put;

  // actionvalue method get_core_resp_get
  input  EN_get_core_resp_get;
  output [71 : 0] get_core_resp_get;
  output RDY_get_core_resp_get;

  // actionvalue method get_read_mem_req_get
  input  EN_get_read_mem_req_get;
  output [43 : 0] get_read_mem_req_get;
  output RDY_get_read_mem_req_get;

  // action method put_read_mem_resp_put
  input  [65 : 0] put_read_mem_resp_put;
  input  EN_put_read_mem_resp_put;
  output RDY_put_read_mem_resp_put;

  // value method mv_write_mem_req
  output [555 : 0] mv_write_mem_req;
  output RDY_mv_write_mem_req;

  // action method ma_write_mem_req_deq
  input  EN_ma_write_mem_req_deq;
  output RDY_ma_write_mem_req_deq;

  // action method put_write_mem_resp_put
  input  put_write_mem_resp_put;
  input  EN_put_write_mem_resp_put;
  output RDY_put_write_mem_resp_put;

  // action method ma_curr_priv
  input  [1 : 0] ma_curr_priv_c;
  input  EN_ma_curr_priv;
  output RDY_ma_curr_priv;

  // actionvalue method get_ptw_resp_get
  input  EN_get_ptw_resp_get;
  output [71 : 0] get_ptw_resp_get;
  output RDY_get_ptw_resp_get;

  // action method put_pa_from_tlb_put
  input  [39 : 0] put_pa_from_tlb_put;
  input  EN_put_pa_from_tlb_put;
  output RDY_put_pa_from_tlb_put;

  // actionvalue method get_hold_req_get
  input  EN_get_hold_req_get;
  output [140 : 0] get_hold_req_get;
  output RDY_get_hold_req_get;

  // value method mv_perf_counters
  output [12 : 0] mv_perf_counters;
  output RDY_mv_perf_counters;

  // action method ma_cache_enable
  input  ma_cache_enable_c;
  input  EN_ma_cache_enable;
  output RDY_ma_cache_enable;

  // value method mv_storebuffer_empty
  output mv_storebuffer_empty;
  output RDY_mv_storebuffer_empty;

  // action method ma_perform_store
  input  ma_perform_store_currepoch;
  input  EN_ma_perform_store;
  output RDY_ma_perform_store;

  // value method mv_cacheable_store
  output mv_cacheable_store;
  output RDY_mv_cacheable_store;

  // value method mv_cache_available
  output mv_cache_available;
  output RDY_mv_cache_available;

  // value method mv_commit_store_ready
  output mv_commit_store_ready;
  output RDY_mv_commit_store_ready;

  // signals for module outputs
  wire [555 : 0] mv_write_mem_req;
  wire [140 : 0] get_hold_req_get;
  wire [71 : 0] get_core_resp_get, get_ptw_resp_get;
  wire [43 : 0] get_read_mem_req_get;
  wire [12 : 0] mv_perf_counters;
  wire RDY_get_core_resp_get,
       RDY_get_hold_req_get,
       RDY_get_ptw_resp_get,
       RDY_get_read_mem_req_get,
       RDY_ma_cache_enable,
       RDY_ma_curr_priv,
       RDY_ma_perform_store,
       RDY_ma_write_mem_req_deq,
       RDY_mv_cache_available,
       RDY_mv_cacheable_store,
       RDY_mv_commit_store_ready,
       RDY_mv_perf_counters,
       RDY_mv_storebuffer_empty,
       RDY_mv_write_mem_req,
       RDY_put_core_req_put,
       RDY_put_pa_from_tlb_put,
       RDY_put_read_mem_resp_put,
       RDY_put_write_mem_resp_put,
       mv_cache_available,
       mv_cacheable_store,
       mv_commit_store_ready,
       mv_storebuffer_empty;

  // inlined wires
  wire [141 : 0] ff_hold_request_rv_port0__write_1,
		 ff_hold_request_rv_port1__read,
		 ff_hold_request_rv_port1__write_1,
		 ff_hold_request_rv_port2__read;
  wire [72 : 0] ff_core_response_rv_port0__write_1,
		ff_core_response_rv_port1__read,
		ff_core_response_rv_port1__write_1,
		ff_core_response_rv_port2__read,
		ff_ptw_response_rv_port1__read,
		ff_ptw_response_rv_port2__read;
  wire [71 : 0] wr_fb_response_wget,
		wr_nc_response_wget,
		wr_ram_response_wget;
  wire [66 : 0] ff_read_mem_response_rv_port0__write_1,
		ff_read_mem_response_rv_port1__read,
		ff_read_mem_response_rv_port1__write_1,
		ff_read_mem_response_rv_port2__read;
  wire [40 : 0] ff_from_tlb_rv_port0__write_1,
		ff_from_tlb_rv_port1__read,
		ff_from_tlb_rv_port1__write_1,
		ff_from_tlb_rv_port2__read;
  wire [1 : 0] ff_write_mem_response_rv_port0__write_1,
	       ff_write_mem_response_rv_port1__read,
	       ff_write_mem_response_rv_port1__write_1,
	       ff_write_mem_response_rv_port2__read,
	       wr_fb_state_wget,
	       wr_ram_state_wget;
  wire _mav_allocate_line_RL_rl_send_memory_request_EN_m_fillbuffer_wget,
       _wset_RL_rl_send_memory_request_EN_wr_total_io_reads_wget,
       ff_core_response_rv_EN_port0__write,
       ff_hold_request_rv_EN_port0__write,
       ff_ptw_response_rv_EN_port0__write,
       ff_read_mem_response_rv_EN_port1__write,
       rg_release_readphase_1_whas,
       wr_fault_whas,
       wr_ram_state_whas,
       wr_total_atomic_access_whas,
       wr_total_atomic_fb_hits_whas,
       wr_total_fb_releases_whas,
       wr_total_io_reads_whas,
       wr_total_read_access_whas,
       wr_total_read_fb_hits_whas,
       wr_total_write_access_whas,
       wr_total_write_fb_hits_whas;

  // register ff_core_response_rv
  reg [72 : 0] ff_core_response_rv;
  wire [72 : 0] ff_core_response_rv_D_IN;
  wire ff_core_response_rv_EN;

  // register ff_from_tlb_rv
  reg [40 : 0] ff_from_tlb_rv;
  wire [40 : 0] ff_from_tlb_rv_D_IN;
  wire ff_from_tlb_rv_EN;

  // register ff_hold_request_rv
  reg [141 : 0] ff_hold_request_rv;
  wire [141 : 0] ff_hold_request_rv_D_IN;
  wire ff_hold_request_rv_EN;

  // register ff_ptw_response_rv
  reg [72 : 0] ff_ptw_response_rv;
  wire [72 : 0] ff_ptw_response_rv_D_IN;
  wire ff_ptw_response_rv_EN;

  // register ff_read_mem_response_rv
  reg [66 : 0] ff_read_mem_response_rv;
  wire [66 : 0] ff_read_mem_response_rv_D_IN;
  wire ff_read_mem_response_rv_EN;

  // register ff_write_mem_response_rv
  reg [1 : 0] ff_write_mem_response_rv;
  wire [1 : 0] ff_write_mem_response_rv_D_IN;
  wire ff_write_mem_response_rv_EN;

  // register replacement_v_count_0
  reg [1 : 0] replacement_v_count_0;
  wire [1 : 0] replacement_v_count_0_D_IN;
  wire replacement_v_count_0_EN;

  // register replacement_v_count_1
  reg [1 : 0] replacement_v_count_1;
  wire [1 : 0] replacement_v_count_1_D_IN;
  wire replacement_v_count_1_EN;

  // register replacement_v_count_10
  reg [1 : 0] replacement_v_count_10;
  wire [1 : 0] replacement_v_count_10_D_IN;
  wire replacement_v_count_10_EN;

  // register replacement_v_count_11
  reg [1 : 0] replacement_v_count_11;
  wire [1 : 0] replacement_v_count_11_D_IN;
  wire replacement_v_count_11_EN;

  // register replacement_v_count_12
  reg [1 : 0] replacement_v_count_12;
  wire [1 : 0] replacement_v_count_12_D_IN;
  wire replacement_v_count_12_EN;

  // register replacement_v_count_13
  reg [1 : 0] replacement_v_count_13;
  wire [1 : 0] replacement_v_count_13_D_IN;
  wire replacement_v_count_13_EN;

  // register replacement_v_count_14
  reg [1 : 0] replacement_v_count_14;
  wire [1 : 0] replacement_v_count_14_D_IN;
  wire replacement_v_count_14_EN;

  // register replacement_v_count_15
  reg [1 : 0] replacement_v_count_15;
  wire [1 : 0] replacement_v_count_15_D_IN;
  wire replacement_v_count_15_EN;

  // register replacement_v_count_16
  reg [1 : 0] replacement_v_count_16;
  wire [1 : 0] replacement_v_count_16_D_IN;
  wire replacement_v_count_16_EN;

  // register replacement_v_count_17
  reg [1 : 0] replacement_v_count_17;
  wire [1 : 0] replacement_v_count_17_D_IN;
  wire replacement_v_count_17_EN;

  // register replacement_v_count_18
  reg [1 : 0] replacement_v_count_18;
  wire [1 : 0] replacement_v_count_18_D_IN;
  wire replacement_v_count_18_EN;

  // register replacement_v_count_19
  reg [1 : 0] replacement_v_count_19;
  wire [1 : 0] replacement_v_count_19_D_IN;
  wire replacement_v_count_19_EN;

  // register replacement_v_count_2
  reg [1 : 0] replacement_v_count_2;
  wire [1 : 0] replacement_v_count_2_D_IN;
  wire replacement_v_count_2_EN;

  // register replacement_v_count_20
  reg [1 : 0] replacement_v_count_20;
  wire [1 : 0] replacement_v_count_20_D_IN;
  wire replacement_v_count_20_EN;

  // register replacement_v_count_21
  reg [1 : 0] replacement_v_count_21;
  wire [1 : 0] replacement_v_count_21_D_IN;
  wire replacement_v_count_21_EN;

  // register replacement_v_count_22
  reg [1 : 0] replacement_v_count_22;
  wire [1 : 0] replacement_v_count_22_D_IN;
  wire replacement_v_count_22_EN;

  // register replacement_v_count_23
  reg [1 : 0] replacement_v_count_23;
  wire [1 : 0] replacement_v_count_23_D_IN;
  wire replacement_v_count_23_EN;

  // register replacement_v_count_24
  reg [1 : 0] replacement_v_count_24;
  wire [1 : 0] replacement_v_count_24_D_IN;
  wire replacement_v_count_24_EN;

  // register replacement_v_count_25
  reg [1 : 0] replacement_v_count_25;
  wire [1 : 0] replacement_v_count_25_D_IN;
  wire replacement_v_count_25_EN;

  // register replacement_v_count_26
  reg [1 : 0] replacement_v_count_26;
  wire [1 : 0] replacement_v_count_26_D_IN;
  wire replacement_v_count_26_EN;

  // register replacement_v_count_27
  reg [1 : 0] replacement_v_count_27;
  wire [1 : 0] replacement_v_count_27_D_IN;
  wire replacement_v_count_27_EN;

  // register replacement_v_count_28
  reg [1 : 0] replacement_v_count_28;
  wire [1 : 0] replacement_v_count_28_D_IN;
  wire replacement_v_count_28_EN;

  // register replacement_v_count_29
  reg [1 : 0] replacement_v_count_29;
  wire [1 : 0] replacement_v_count_29_D_IN;
  wire replacement_v_count_29_EN;

  // register replacement_v_count_3
  reg [1 : 0] replacement_v_count_3;
  wire [1 : 0] replacement_v_count_3_D_IN;
  wire replacement_v_count_3_EN;

  // register replacement_v_count_30
  reg [1 : 0] replacement_v_count_30;
  wire [1 : 0] replacement_v_count_30_D_IN;
  wire replacement_v_count_30_EN;

  // register replacement_v_count_31
  reg [1 : 0] replacement_v_count_31;
  wire [1 : 0] replacement_v_count_31_D_IN;
  wire replacement_v_count_31_EN;

  // register replacement_v_count_32
  reg [1 : 0] replacement_v_count_32;
  wire [1 : 0] replacement_v_count_32_D_IN;
  wire replacement_v_count_32_EN;

  // register replacement_v_count_33
  reg [1 : 0] replacement_v_count_33;
  wire [1 : 0] replacement_v_count_33_D_IN;
  wire replacement_v_count_33_EN;

  // register replacement_v_count_34
  reg [1 : 0] replacement_v_count_34;
  wire [1 : 0] replacement_v_count_34_D_IN;
  wire replacement_v_count_34_EN;

  // register replacement_v_count_35
  reg [1 : 0] replacement_v_count_35;
  wire [1 : 0] replacement_v_count_35_D_IN;
  wire replacement_v_count_35_EN;

  // register replacement_v_count_36
  reg [1 : 0] replacement_v_count_36;
  wire [1 : 0] replacement_v_count_36_D_IN;
  wire replacement_v_count_36_EN;

  // register replacement_v_count_37
  reg [1 : 0] replacement_v_count_37;
  wire [1 : 0] replacement_v_count_37_D_IN;
  wire replacement_v_count_37_EN;

  // register replacement_v_count_38
  reg [1 : 0] replacement_v_count_38;
  wire [1 : 0] replacement_v_count_38_D_IN;
  wire replacement_v_count_38_EN;

  // register replacement_v_count_39
  reg [1 : 0] replacement_v_count_39;
  wire [1 : 0] replacement_v_count_39_D_IN;
  wire replacement_v_count_39_EN;

  // register replacement_v_count_4
  reg [1 : 0] replacement_v_count_4;
  wire [1 : 0] replacement_v_count_4_D_IN;
  wire replacement_v_count_4_EN;

  // register replacement_v_count_40
  reg [1 : 0] replacement_v_count_40;
  wire [1 : 0] replacement_v_count_40_D_IN;
  wire replacement_v_count_40_EN;

  // register replacement_v_count_41
  reg [1 : 0] replacement_v_count_41;
  wire [1 : 0] replacement_v_count_41_D_IN;
  wire replacement_v_count_41_EN;

  // register replacement_v_count_42
  reg [1 : 0] replacement_v_count_42;
  wire [1 : 0] replacement_v_count_42_D_IN;
  wire replacement_v_count_42_EN;

  // register replacement_v_count_43
  reg [1 : 0] replacement_v_count_43;
  wire [1 : 0] replacement_v_count_43_D_IN;
  wire replacement_v_count_43_EN;

  // register replacement_v_count_44
  reg [1 : 0] replacement_v_count_44;
  wire [1 : 0] replacement_v_count_44_D_IN;
  wire replacement_v_count_44_EN;

  // register replacement_v_count_45
  reg [1 : 0] replacement_v_count_45;
  wire [1 : 0] replacement_v_count_45_D_IN;
  wire replacement_v_count_45_EN;

  // register replacement_v_count_46
  reg [1 : 0] replacement_v_count_46;
  wire [1 : 0] replacement_v_count_46_D_IN;
  wire replacement_v_count_46_EN;

  // register replacement_v_count_47
  reg [1 : 0] replacement_v_count_47;
  wire [1 : 0] replacement_v_count_47_D_IN;
  wire replacement_v_count_47_EN;

  // register replacement_v_count_48
  reg [1 : 0] replacement_v_count_48;
  wire [1 : 0] replacement_v_count_48_D_IN;
  wire replacement_v_count_48_EN;

  // register replacement_v_count_49
  reg [1 : 0] replacement_v_count_49;
  wire [1 : 0] replacement_v_count_49_D_IN;
  wire replacement_v_count_49_EN;

  // register replacement_v_count_5
  reg [1 : 0] replacement_v_count_5;
  wire [1 : 0] replacement_v_count_5_D_IN;
  wire replacement_v_count_5_EN;

  // register replacement_v_count_50
  reg [1 : 0] replacement_v_count_50;
  wire [1 : 0] replacement_v_count_50_D_IN;
  wire replacement_v_count_50_EN;

  // register replacement_v_count_51
  reg [1 : 0] replacement_v_count_51;
  wire [1 : 0] replacement_v_count_51_D_IN;
  wire replacement_v_count_51_EN;

  // register replacement_v_count_52
  reg [1 : 0] replacement_v_count_52;
  wire [1 : 0] replacement_v_count_52_D_IN;
  wire replacement_v_count_52_EN;

  // register replacement_v_count_53
  reg [1 : 0] replacement_v_count_53;
  wire [1 : 0] replacement_v_count_53_D_IN;
  wire replacement_v_count_53_EN;

  // register replacement_v_count_54
  reg [1 : 0] replacement_v_count_54;
  wire [1 : 0] replacement_v_count_54_D_IN;
  wire replacement_v_count_54_EN;

  // register replacement_v_count_55
  reg [1 : 0] replacement_v_count_55;
  wire [1 : 0] replacement_v_count_55_D_IN;
  wire replacement_v_count_55_EN;

  // register replacement_v_count_56
  reg [1 : 0] replacement_v_count_56;
  wire [1 : 0] replacement_v_count_56_D_IN;
  wire replacement_v_count_56_EN;

  // register replacement_v_count_57
  reg [1 : 0] replacement_v_count_57;
  wire [1 : 0] replacement_v_count_57_D_IN;
  wire replacement_v_count_57_EN;

  // register replacement_v_count_58
  reg [1 : 0] replacement_v_count_58;
  wire [1 : 0] replacement_v_count_58_D_IN;
  wire replacement_v_count_58_EN;

  // register replacement_v_count_59
  reg [1 : 0] replacement_v_count_59;
  wire [1 : 0] replacement_v_count_59_D_IN;
  wire replacement_v_count_59_EN;

  // register replacement_v_count_6
  reg [1 : 0] replacement_v_count_6;
  wire [1 : 0] replacement_v_count_6_D_IN;
  wire replacement_v_count_6_EN;

  // register replacement_v_count_60
  reg [1 : 0] replacement_v_count_60;
  wire [1 : 0] replacement_v_count_60_D_IN;
  wire replacement_v_count_60_EN;

  // register replacement_v_count_61
  reg [1 : 0] replacement_v_count_61;
  wire [1 : 0] replacement_v_count_61_D_IN;
  wire replacement_v_count_61_EN;

  // register replacement_v_count_62
  reg [1 : 0] replacement_v_count_62;
  wire [1 : 0] replacement_v_count_62_D_IN;
  wire replacement_v_count_62_EN;

  // register replacement_v_count_63
  reg [1 : 0] replacement_v_count_63;
  wire [1 : 0] replacement_v_count_63_D_IN;
  wire replacement_v_count_63_EN;

  // register replacement_v_count_7
  reg [1 : 0] replacement_v_count_7;
  wire [1 : 0] replacement_v_count_7_D_IN;
  wire replacement_v_count_7_EN;

  // register replacement_v_count_8
  reg [1 : 0] replacement_v_count_8;
  wire [1 : 0] replacement_v_count_8_D_IN;
  wire replacement_v_count_8_EN;

  // register replacement_v_count_9
  reg [1 : 0] replacement_v_count_9;
  wire [1 : 0] replacement_v_count_9_D_IN;
  wire replacement_v_count_9_EN;

  // register rg_fence_pending
  reg rg_fence_pending;
  wire rg_fence_pending_D_IN, rg_fence_pending_EN;

  // register rg_fence_set
  reg [5 : 0] rg_fence_set;
  wire [5 : 0] rg_fence_set_D_IN;
  wire rg_fence_set_EN;

  // register rg_fence_stall
  reg rg_fence_stall;
  wire rg_fence_stall_D_IN, rg_fence_stall_EN;

  // register rg_fence_way
  reg [1 : 0] rg_fence_way;
  wire [1 : 0] rg_fence_way_D_IN;
  wire rg_fence_way_EN;

  // register rg_globaldirty
  reg rg_globaldirty;
  wire rg_globaldirty_D_IN, rg_globaldirty_EN;

  // register rg_handling_miss
  reg rg_handling_miss;
  wire rg_handling_miss_D_IN, rg_handling_miss_EN;

  // register rg_performing_replay
  reg rg_performing_replay;
  wire rg_performing_replay_D_IN, rg_performing_replay_EN;

  // register rg_polling_mode
  reg rg_polling_mode;
  wire rg_polling_mode_D_IN, rg_polling_mode_EN;

  // register rg_recent_req
  reg [5 : 0] rg_recent_req;
  wire [5 : 0] rg_recent_req_D_IN;
  wire rg_recent_req_EN;

  // register rg_release_readphase
  reg rg_release_readphase;
  wire rg_release_readphase_D_IN, rg_release_readphase_EN;

  // register rg_wEpoch
  reg rg_wEpoch;
  wire rg_wEpoch_D_IN, rg_wEpoch_EN;

  // register v_reg_dirty_0
  reg [3 : 0] v_reg_dirty_0;
  reg [3 : 0] v_reg_dirty_0_D_IN;
  wire v_reg_dirty_0_EN;

  // register v_reg_dirty_1
  reg [3 : 0] v_reg_dirty_1;
  reg [3 : 0] v_reg_dirty_1_D_IN;
  wire v_reg_dirty_1_EN;

  // register v_reg_dirty_10
  reg [3 : 0] v_reg_dirty_10;
  reg [3 : 0] v_reg_dirty_10_D_IN;
  wire v_reg_dirty_10_EN;

  // register v_reg_dirty_11
  reg [3 : 0] v_reg_dirty_11;
  reg [3 : 0] v_reg_dirty_11_D_IN;
  wire v_reg_dirty_11_EN;

  // register v_reg_dirty_12
  reg [3 : 0] v_reg_dirty_12;
  reg [3 : 0] v_reg_dirty_12_D_IN;
  wire v_reg_dirty_12_EN;

  // register v_reg_dirty_13
  reg [3 : 0] v_reg_dirty_13;
  reg [3 : 0] v_reg_dirty_13_D_IN;
  wire v_reg_dirty_13_EN;

  // register v_reg_dirty_14
  reg [3 : 0] v_reg_dirty_14;
  reg [3 : 0] v_reg_dirty_14_D_IN;
  wire v_reg_dirty_14_EN;

  // register v_reg_dirty_15
  reg [3 : 0] v_reg_dirty_15;
  reg [3 : 0] v_reg_dirty_15_D_IN;
  wire v_reg_dirty_15_EN;

  // register v_reg_dirty_16
  reg [3 : 0] v_reg_dirty_16;
  reg [3 : 0] v_reg_dirty_16_D_IN;
  wire v_reg_dirty_16_EN;

  // register v_reg_dirty_17
  reg [3 : 0] v_reg_dirty_17;
  reg [3 : 0] v_reg_dirty_17_D_IN;
  wire v_reg_dirty_17_EN;

  // register v_reg_dirty_18
  reg [3 : 0] v_reg_dirty_18;
  reg [3 : 0] v_reg_dirty_18_D_IN;
  wire v_reg_dirty_18_EN;

  // register v_reg_dirty_19
  reg [3 : 0] v_reg_dirty_19;
  reg [3 : 0] v_reg_dirty_19_D_IN;
  wire v_reg_dirty_19_EN;

  // register v_reg_dirty_2
  reg [3 : 0] v_reg_dirty_2;
  reg [3 : 0] v_reg_dirty_2_D_IN;
  wire v_reg_dirty_2_EN;

  // register v_reg_dirty_20
  reg [3 : 0] v_reg_dirty_20;
  reg [3 : 0] v_reg_dirty_20_D_IN;
  wire v_reg_dirty_20_EN;

  // register v_reg_dirty_21
  reg [3 : 0] v_reg_dirty_21;
  reg [3 : 0] v_reg_dirty_21_D_IN;
  wire v_reg_dirty_21_EN;

  // register v_reg_dirty_22
  reg [3 : 0] v_reg_dirty_22;
  reg [3 : 0] v_reg_dirty_22_D_IN;
  wire v_reg_dirty_22_EN;

  // register v_reg_dirty_23
  reg [3 : 0] v_reg_dirty_23;
  reg [3 : 0] v_reg_dirty_23_D_IN;
  wire v_reg_dirty_23_EN;

  // register v_reg_dirty_24
  reg [3 : 0] v_reg_dirty_24;
  reg [3 : 0] v_reg_dirty_24_D_IN;
  wire v_reg_dirty_24_EN;

  // register v_reg_dirty_25
  reg [3 : 0] v_reg_dirty_25;
  reg [3 : 0] v_reg_dirty_25_D_IN;
  wire v_reg_dirty_25_EN;

  // register v_reg_dirty_26
  reg [3 : 0] v_reg_dirty_26;
  reg [3 : 0] v_reg_dirty_26_D_IN;
  wire v_reg_dirty_26_EN;

  // register v_reg_dirty_27
  reg [3 : 0] v_reg_dirty_27;
  reg [3 : 0] v_reg_dirty_27_D_IN;
  wire v_reg_dirty_27_EN;

  // register v_reg_dirty_28
  reg [3 : 0] v_reg_dirty_28;
  reg [3 : 0] v_reg_dirty_28_D_IN;
  wire v_reg_dirty_28_EN;

  // register v_reg_dirty_29
  reg [3 : 0] v_reg_dirty_29;
  reg [3 : 0] v_reg_dirty_29_D_IN;
  wire v_reg_dirty_29_EN;

  // register v_reg_dirty_3
  reg [3 : 0] v_reg_dirty_3;
  reg [3 : 0] v_reg_dirty_3_D_IN;
  wire v_reg_dirty_3_EN;

  // register v_reg_dirty_30
  reg [3 : 0] v_reg_dirty_30;
  reg [3 : 0] v_reg_dirty_30_D_IN;
  wire v_reg_dirty_30_EN;

  // register v_reg_dirty_31
  reg [3 : 0] v_reg_dirty_31;
  reg [3 : 0] v_reg_dirty_31_D_IN;
  wire v_reg_dirty_31_EN;

  // register v_reg_dirty_32
  reg [3 : 0] v_reg_dirty_32;
  reg [3 : 0] v_reg_dirty_32_D_IN;
  wire v_reg_dirty_32_EN;

  // register v_reg_dirty_33
  reg [3 : 0] v_reg_dirty_33;
  reg [3 : 0] v_reg_dirty_33_D_IN;
  wire v_reg_dirty_33_EN;

  // register v_reg_dirty_34
  reg [3 : 0] v_reg_dirty_34;
  reg [3 : 0] v_reg_dirty_34_D_IN;
  wire v_reg_dirty_34_EN;

  // register v_reg_dirty_35
  reg [3 : 0] v_reg_dirty_35;
  reg [3 : 0] v_reg_dirty_35_D_IN;
  wire v_reg_dirty_35_EN;

  // register v_reg_dirty_36
  reg [3 : 0] v_reg_dirty_36;
  reg [3 : 0] v_reg_dirty_36_D_IN;
  wire v_reg_dirty_36_EN;

  // register v_reg_dirty_37
  reg [3 : 0] v_reg_dirty_37;
  reg [3 : 0] v_reg_dirty_37_D_IN;
  wire v_reg_dirty_37_EN;

  // register v_reg_dirty_38
  reg [3 : 0] v_reg_dirty_38;
  reg [3 : 0] v_reg_dirty_38_D_IN;
  wire v_reg_dirty_38_EN;

  // register v_reg_dirty_39
  reg [3 : 0] v_reg_dirty_39;
  reg [3 : 0] v_reg_dirty_39_D_IN;
  wire v_reg_dirty_39_EN;

  // register v_reg_dirty_4
  reg [3 : 0] v_reg_dirty_4;
  reg [3 : 0] v_reg_dirty_4_D_IN;
  wire v_reg_dirty_4_EN;

  // register v_reg_dirty_40
  reg [3 : 0] v_reg_dirty_40;
  reg [3 : 0] v_reg_dirty_40_D_IN;
  wire v_reg_dirty_40_EN;

  // register v_reg_dirty_41
  reg [3 : 0] v_reg_dirty_41;
  reg [3 : 0] v_reg_dirty_41_D_IN;
  wire v_reg_dirty_41_EN;

  // register v_reg_dirty_42
  reg [3 : 0] v_reg_dirty_42;
  reg [3 : 0] v_reg_dirty_42_D_IN;
  wire v_reg_dirty_42_EN;

  // register v_reg_dirty_43
  reg [3 : 0] v_reg_dirty_43;
  reg [3 : 0] v_reg_dirty_43_D_IN;
  wire v_reg_dirty_43_EN;

  // register v_reg_dirty_44
  reg [3 : 0] v_reg_dirty_44;
  reg [3 : 0] v_reg_dirty_44_D_IN;
  wire v_reg_dirty_44_EN;

  // register v_reg_dirty_45
  reg [3 : 0] v_reg_dirty_45;
  reg [3 : 0] v_reg_dirty_45_D_IN;
  wire v_reg_dirty_45_EN;

  // register v_reg_dirty_46
  reg [3 : 0] v_reg_dirty_46;
  reg [3 : 0] v_reg_dirty_46_D_IN;
  wire v_reg_dirty_46_EN;

  // register v_reg_dirty_47
  reg [3 : 0] v_reg_dirty_47;
  reg [3 : 0] v_reg_dirty_47_D_IN;
  wire v_reg_dirty_47_EN;

  // register v_reg_dirty_48
  reg [3 : 0] v_reg_dirty_48;
  reg [3 : 0] v_reg_dirty_48_D_IN;
  wire v_reg_dirty_48_EN;

  // register v_reg_dirty_49
  reg [3 : 0] v_reg_dirty_49;
  reg [3 : 0] v_reg_dirty_49_D_IN;
  wire v_reg_dirty_49_EN;

  // register v_reg_dirty_5
  reg [3 : 0] v_reg_dirty_5;
  reg [3 : 0] v_reg_dirty_5_D_IN;
  wire v_reg_dirty_5_EN;

  // register v_reg_dirty_50
  reg [3 : 0] v_reg_dirty_50;
  reg [3 : 0] v_reg_dirty_50_D_IN;
  wire v_reg_dirty_50_EN;

  // register v_reg_dirty_51
  reg [3 : 0] v_reg_dirty_51;
  reg [3 : 0] v_reg_dirty_51_D_IN;
  wire v_reg_dirty_51_EN;

  // register v_reg_dirty_52
  reg [3 : 0] v_reg_dirty_52;
  reg [3 : 0] v_reg_dirty_52_D_IN;
  wire v_reg_dirty_52_EN;

  // register v_reg_dirty_53
  reg [3 : 0] v_reg_dirty_53;
  reg [3 : 0] v_reg_dirty_53_D_IN;
  wire v_reg_dirty_53_EN;

  // register v_reg_dirty_54
  reg [3 : 0] v_reg_dirty_54;
  reg [3 : 0] v_reg_dirty_54_D_IN;
  wire v_reg_dirty_54_EN;

  // register v_reg_dirty_55
  reg [3 : 0] v_reg_dirty_55;
  reg [3 : 0] v_reg_dirty_55_D_IN;
  wire v_reg_dirty_55_EN;

  // register v_reg_dirty_56
  reg [3 : 0] v_reg_dirty_56;
  reg [3 : 0] v_reg_dirty_56_D_IN;
  wire v_reg_dirty_56_EN;

  // register v_reg_dirty_57
  reg [3 : 0] v_reg_dirty_57;
  reg [3 : 0] v_reg_dirty_57_D_IN;
  wire v_reg_dirty_57_EN;

  // register v_reg_dirty_58
  reg [3 : 0] v_reg_dirty_58;
  reg [3 : 0] v_reg_dirty_58_D_IN;
  wire v_reg_dirty_58_EN;

  // register v_reg_dirty_59
  reg [3 : 0] v_reg_dirty_59;
  reg [3 : 0] v_reg_dirty_59_D_IN;
  wire v_reg_dirty_59_EN;

  // register v_reg_dirty_6
  reg [3 : 0] v_reg_dirty_6;
  reg [3 : 0] v_reg_dirty_6_D_IN;
  wire v_reg_dirty_6_EN;

  // register v_reg_dirty_60
  reg [3 : 0] v_reg_dirty_60;
  reg [3 : 0] v_reg_dirty_60_D_IN;
  wire v_reg_dirty_60_EN;

  // register v_reg_dirty_61
  reg [3 : 0] v_reg_dirty_61;
  reg [3 : 0] v_reg_dirty_61_D_IN;
  wire v_reg_dirty_61_EN;

  // register v_reg_dirty_62
  reg [3 : 0] v_reg_dirty_62;
  reg [3 : 0] v_reg_dirty_62_D_IN;
  wire v_reg_dirty_62_EN;

  // register v_reg_dirty_63
  reg [3 : 0] v_reg_dirty_63;
  reg [3 : 0] v_reg_dirty_63_D_IN;
  wire v_reg_dirty_63_EN;

  // register v_reg_dirty_7
  reg [3 : 0] v_reg_dirty_7;
  reg [3 : 0] v_reg_dirty_7_D_IN;
  wire v_reg_dirty_7_EN;

  // register v_reg_dirty_8
  reg [3 : 0] v_reg_dirty_8;
  reg [3 : 0] v_reg_dirty_8_D_IN;
  wire v_reg_dirty_8_EN;

  // register v_reg_dirty_9
  reg [3 : 0] v_reg_dirty_9;
  reg [3 : 0] v_reg_dirty_9_D_IN;
  wire v_reg_dirty_9_EN;

  // register v_reg_valid_0
  reg [3 : 0] v_reg_valid_0;
  reg [3 : 0] v_reg_valid_0_D_IN;
  wire v_reg_valid_0_EN;

  // register v_reg_valid_1
  reg [3 : 0] v_reg_valid_1;
  reg [3 : 0] v_reg_valid_1_D_IN;
  wire v_reg_valid_1_EN;

  // register v_reg_valid_10
  reg [3 : 0] v_reg_valid_10;
  reg [3 : 0] v_reg_valid_10_D_IN;
  wire v_reg_valid_10_EN;

  // register v_reg_valid_11
  reg [3 : 0] v_reg_valid_11;
  reg [3 : 0] v_reg_valid_11_D_IN;
  wire v_reg_valid_11_EN;

  // register v_reg_valid_12
  reg [3 : 0] v_reg_valid_12;
  reg [3 : 0] v_reg_valid_12_D_IN;
  wire v_reg_valid_12_EN;

  // register v_reg_valid_13
  reg [3 : 0] v_reg_valid_13;
  reg [3 : 0] v_reg_valid_13_D_IN;
  wire v_reg_valid_13_EN;

  // register v_reg_valid_14
  reg [3 : 0] v_reg_valid_14;
  reg [3 : 0] v_reg_valid_14_D_IN;
  wire v_reg_valid_14_EN;

  // register v_reg_valid_15
  reg [3 : 0] v_reg_valid_15;
  reg [3 : 0] v_reg_valid_15_D_IN;
  wire v_reg_valid_15_EN;

  // register v_reg_valid_16
  reg [3 : 0] v_reg_valid_16;
  reg [3 : 0] v_reg_valid_16_D_IN;
  wire v_reg_valid_16_EN;

  // register v_reg_valid_17
  reg [3 : 0] v_reg_valid_17;
  reg [3 : 0] v_reg_valid_17_D_IN;
  wire v_reg_valid_17_EN;

  // register v_reg_valid_18
  reg [3 : 0] v_reg_valid_18;
  reg [3 : 0] v_reg_valid_18_D_IN;
  wire v_reg_valid_18_EN;

  // register v_reg_valid_19
  reg [3 : 0] v_reg_valid_19;
  reg [3 : 0] v_reg_valid_19_D_IN;
  wire v_reg_valid_19_EN;

  // register v_reg_valid_2
  reg [3 : 0] v_reg_valid_2;
  reg [3 : 0] v_reg_valid_2_D_IN;
  wire v_reg_valid_2_EN;

  // register v_reg_valid_20
  reg [3 : 0] v_reg_valid_20;
  reg [3 : 0] v_reg_valid_20_D_IN;
  wire v_reg_valid_20_EN;

  // register v_reg_valid_21
  reg [3 : 0] v_reg_valid_21;
  reg [3 : 0] v_reg_valid_21_D_IN;
  wire v_reg_valid_21_EN;

  // register v_reg_valid_22
  reg [3 : 0] v_reg_valid_22;
  reg [3 : 0] v_reg_valid_22_D_IN;
  wire v_reg_valid_22_EN;

  // register v_reg_valid_23
  reg [3 : 0] v_reg_valid_23;
  reg [3 : 0] v_reg_valid_23_D_IN;
  wire v_reg_valid_23_EN;

  // register v_reg_valid_24
  reg [3 : 0] v_reg_valid_24;
  reg [3 : 0] v_reg_valid_24_D_IN;
  wire v_reg_valid_24_EN;

  // register v_reg_valid_25
  reg [3 : 0] v_reg_valid_25;
  reg [3 : 0] v_reg_valid_25_D_IN;
  wire v_reg_valid_25_EN;

  // register v_reg_valid_26
  reg [3 : 0] v_reg_valid_26;
  reg [3 : 0] v_reg_valid_26_D_IN;
  wire v_reg_valid_26_EN;

  // register v_reg_valid_27
  reg [3 : 0] v_reg_valid_27;
  reg [3 : 0] v_reg_valid_27_D_IN;
  wire v_reg_valid_27_EN;

  // register v_reg_valid_28
  reg [3 : 0] v_reg_valid_28;
  reg [3 : 0] v_reg_valid_28_D_IN;
  wire v_reg_valid_28_EN;

  // register v_reg_valid_29
  reg [3 : 0] v_reg_valid_29;
  reg [3 : 0] v_reg_valid_29_D_IN;
  wire v_reg_valid_29_EN;

  // register v_reg_valid_3
  reg [3 : 0] v_reg_valid_3;
  reg [3 : 0] v_reg_valid_3_D_IN;
  wire v_reg_valid_3_EN;

  // register v_reg_valid_30
  reg [3 : 0] v_reg_valid_30;
  reg [3 : 0] v_reg_valid_30_D_IN;
  wire v_reg_valid_30_EN;

  // register v_reg_valid_31
  reg [3 : 0] v_reg_valid_31;
  reg [3 : 0] v_reg_valid_31_D_IN;
  wire v_reg_valid_31_EN;

  // register v_reg_valid_32
  reg [3 : 0] v_reg_valid_32;
  reg [3 : 0] v_reg_valid_32_D_IN;
  wire v_reg_valid_32_EN;

  // register v_reg_valid_33
  reg [3 : 0] v_reg_valid_33;
  reg [3 : 0] v_reg_valid_33_D_IN;
  wire v_reg_valid_33_EN;

  // register v_reg_valid_34
  reg [3 : 0] v_reg_valid_34;
  reg [3 : 0] v_reg_valid_34_D_IN;
  wire v_reg_valid_34_EN;

  // register v_reg_valid_35
  reg [3 : 0] v_reg_valid_35;
  reg [3 : 0] v_reg_valid_35_D_IN;
  wire v_reg_valid_35_EN;

  // register v_reg_valid_36
  reg [3 : 0] v_reg_valid_36;
  reg [3 : 0] v_reg_valid_36_D_IN;
  wire v_reg_valid_36_EN;

  // register v_reg_valid_37
  reg [3 : 0] v_reg_valid_37;
  reg [3 : 0] v_reg_valid_37_D_IN;
  wire v_reg_valid_37_EN;

  // register v_reg_valid_38
  reg [3 : 0] v_reg_valid_38;
  reg [3 : 0] v_reg_valid_38_D_IN;
  wire v_reg_valid_38_EN;

  // register v_reg_valid_39
  reg [3 : 0] v_reg_valid_39;
  reg [3 : 0] v_reg_valid_39_D_IN;
  wire v_reg_valid_39_EN;

  // register v_reg_valid_4
  reg [3 : 0] v_reg_valid_4;
  reg [3 : 0] v_reg_valid_4_D_IN;
  wire v_reg_valid_4_EN;

  // register v_reg_valid_40
  reg [3 : 0] v_reg_valid_40;
  reg [3 : 0] v_reg_valid_40_D_IN;
  wire v_reg_valid_40_EN;

  // register v_reg_valid_41
  reg [3 : 0] v_reg_valid_41;
  reg [3 : 0] v_reg_valid_41_D_IN;
  wire v_reg_valid_41_EN;

  // register v_reg_valid_42
  reg [3 : 0] v_reg_valid_42;
  reg [3 : 0] v_reg_valid_42_D_IN;
  wire v_reg_valid_42_EN;

  // register v_reg_valid_43
  reg [3 : 0] v_reg_valid_43;
  reg [3 : 0] v_reg_valid_43_D_IN;
  wire v_reg_valid_43_EN;

  // register v_reg_valid_44
  reg [3 : 0] v_reg_valid_44;
  reg [3 : 0] v_reg_valid_44_D_IN;
  wire v_reg_valid_44_EN;

  // register v_reg_valid_45
  reg [3 : 0] v_reg_valid_45;
  reg [3 : 0] v_reg_valid_45_D_IN;
  wire v_reg_valid_45_EN;

  // register v_reg_valid_46
  reg [3 : 0] v_reg_valid_46;
  reg [3 : 0] v_reg_valid_46_D_IN;
  wire v_reg_valid_46_EN;

  // register v_reg_valid_47
  reg [3 : 0] v_reg_valid_47;
  reg [3 : 0] v_reg_valid_47_D_IN;
  wire v_reg_valid_47_EN;

  // register v_reg_valid_48
  reg [3 : 0] v_reg_valid_48;
  reg [3 : 0] v_reg_valid_48_D_IN;
  wire v_reg_valid_48_EN;

  // register v_reg_valid_49
  reg [3 : 0] v_reg_valid_49;
  reg [3 : 0] v_reg_valid_49_D_IN;
  wire v_reg_valid_49_EN;

  // register v_reg_valid_5
  reg [3 : 0] v_reg_valid_5;
  reg [3 : 0] v_reg_valid_5_D_IN;
  wire v_reg_valid_5_EN;

  // register v_reg_valid_50
  reg [3 : 0] v_reg_valid_50;
  reg [3 : 0] v_reg_valid_50_D_IN;
  wire v_reg_valid_50_EN;

  // register v_reg_valid_51
  reg [3 : 0] v_reg_valid_51;
  reg [3 : 0] v_reg_valid_51_D_IN;
  wire v_reg_valid_51_EN;

  // register v_reg_valid_52
  reg [3 : 0] v_reg_valid_52;
  reg [3 : 0] v_reg_valid_52_D_IN;
  wire v_reg_valid_52_EN;

  // register v_reg_valid_53
  reg [3 : 0] v_reg_valid_53;
  reg [3 : 0] v_reg_valid_53_D_IN;
  wire v_reg_valid_53_EN;

  // register v_reg_valid_54
  reg [3 : 0] v_reg_valid_54;
  reg [3 : 0] v_reg_valid_54_D_IN;
  wire v_reg_valid_54_EN;

  // register v_reg_valid_55
  reg [3 : 0] v_reg_valid_55;
  reg [3 : 0] v_reg_valid_55_D_IN;
  wire v_reg_valid_55_EN;

  // register v_reg_valid_56
  reg [3 : 0] v_reg_valid_56;
  reg [3 : 0] v_reg_valid_56_D_IN;
  wire v_reg_valid_56_EN;

  // register v_reg_valid_57
  reg [3 : 0] v_reg_valid_57;
  reg [3 : 0] v_reg_valid_57_D_IN;
  wire v_reg_valid_57_EN;

  // register v_reg_valid_58
  reg [3 : 0] v_reg_valid_58;
  reg [3 : 0] v_reg_valid_58_D_IN;
  wire v_reg_valid_58_EN;

  // register v_reg_valid_59
  reg [3 : 0] v_reg_valid_59;
  reg [3 : 0] v_reg_valid_59_D_IN;
  wire v_reg_valid_59_EN;

  // register v_reg_valid_6
  reg [3 : 0] v_reg_valid_6;
  reg [3 : 0] v_reg_valid_6_D_IN;
  wire v_reg_valid_6_EN;

  // register v_reg_valid_60
  reg [3 : 0] v_reg_valid_60;
  reg [3 : 0] v_reg_valid_60_D_IN;
  wire v_reg_valid_60_EN;

  // register v_reg_valid_61
  reg [3 : 0] v_reg_valid_61;
  reg [3 : 0] v_reg_valid_61_D_IN;
  wire v_reg_valid_61_EN;

  // register v_reg_valid_62
  reg [3 : 0] v_reg_valid_62;
  reg [3 : 0] v_reg_valid_62_D_IN;
  wire v_reg_valid_62_EN;

  // register v_reg_valid_63
  reg [3 : 0] v_reg_valid_63;
  reg [3 : 0] v_reg_valid_63_D_IN;
  wire v_reg_valid_63_EN;

  // register v_reg_valid_7
  reg [3 : 0] v_reg_valid_7;
  reg [3 : 0] v_reg_valid_7_D_IN;
  wire v_reg_valid_7_EN;

  // register v_reg_valid_8
  reg [3 : 0] v_reg_valid_8;
  reg [3 : 0] v_reg_valid_8_D_IN;
  wire v_reg_valid_8_EN;

  // register v_reg_valid_9
  reg [3 : 0] v_reg_valid_9;
  reg [3 : 0] v_reg_valid_9_D_IN;
  wire v_reg_valid_9_EN;

  // ports of submodule ff_core_request
  wire [140 : 0] ff_core_request_D_IN, ff_core_request_D_OUT;
  wire ff_core_request_CLR,
       ff_core_request_DEQ,
       ff_core_request_EMPTY_N,
       ff_core_request_ENQ,
       ff_core_request_FULL_N;

  // ports of submodule ff_pending_req
  wire [6 : 0] ff_pending_req_D_IN, ff_pending_req_D_OUT;
  wire ff_pending_req_CLR,
       ff_pending_req_DEQ,
       ff_pending_req_EMPTY_N,
       ff_pending_req_ENQ,
       ff_pending_req_FULL_N;

  // ports of submodule ff_read_mem_request
  wire [43 : 0] ff_read_mem_request_D_IN, ff_read_mem_request_D_OUT;
  wire ff_read_mem_request_CLR,
       ff_read_mem_request_DEQ,
       ff_read_mem_request_EMPTY_N,
       ff_read_mem_request_ENQ,
       ff_read_mem_request_FULL_N;

  // ports of submodule ff_write_mem_request
  reg [555 : 0] ff_write_mem_request_D_IN;
  wire [555 : 0] ff_write_mem_request_D_OUT;
  wire ff_write_mem_request_CLR,
       ff_write_mem_request_DEQ,
       ff_write_mem_request_EMPTY_N,
       ff_write_mem_request_ENQ,
       ff_write_mem_request_FULL_N;

  // ports of submodule m_data
  reg [5 : 0] m_data_ma_request_index;
  reg [3 : 0] m_data_mv_read_response_wayselect;
  reg [2 : 0] m_data_mv_read_response_blocknum;
  reg [1 : 0] m_data_ma_request_way;
  wire [575 : 0] m_data_mv_read_response;
  wire [511 : 0] m_data_ma_request_dataline;
  wire [7 : 0] m_data_ma_request_banks;
  wire m_data_EN_ma_request, m_data_ma_request_read_write;

  // ports of submodule m_fillbuffer
  wire [545 : 0] m_fillbuffer_mv_release_info;
  wire [511 : 0] m_fillbuffer_mav_allocate_line_dataline;
  wire [74 : 0] m_fillbuffer_mav_polling_response;
  wire [65 : 0] m_fillbuffer_ma_fill_from_memory_mem_resp;
  wire [63 : 0] m_fillbuffer_ma_from_storebuffer_dataword,
		m_fillbuffer_ma_from_storebuffer_mask;
  wire [31 : 0] m_fillbuffer_ma_from_storebuffer_address,
		m_fillbuffer_mav_allocate_line_address,
		m_fillbuffer_mav_polling_response_address;
  wire [2 : 0] m_fillbuffer_ma_fill_from_memory_fbindex,
	       m_fillbuffer_ma_fill_from_memory_init_bank,
	       m_fillbuffer_ma_from_storebuffer_fbindex,
	       m_fillbuffer_mav_allocate_line,
	       m_fillbuffer_mav_polling_response_fbindex;
  wire m_fillbuffer_EN_ma_fill_from_memory,
       m_fillbuffer_EN_ma_from_storebuffer,
       m_fillbuffer_EN_ma_perform_release,
       m_fillbuffer_EN_mav_allocate_line,
       m_fillbuffer_EN_mav_polling_response,
       m_fillbuffer_mav_allocate_line_dirty,
       m_fillbuffer_mav_allocate_line_from_ram,
       m_fillbuffer_mav_polling_response_fill,
       m_fillbuffer_mv_fbempty,
       m_fillbuffer_mv_fbfull,
       m_fillbuffer_mv_fbhead_valid;

  // ports of submodule m_storebuffer
  wire [167 : 0] m_storebuffer_mav_store_to_commit;
  wire [127 : 0] m_storebuffer_mav_check_sb_hit;
  wire [63 : 0] m_storebuffer_ma_allocate_entry_data,
		m_storebuffer_ma_allocate_entry_read_data;
  wire [31 : 0] m_storebuffer_ma_allocate_entry_address,
		m_storebuffer_mav_check_sb_hit_phyaddr;
  wire [4 : 0] m_storebuffer_ma_allocate_entry_atomic_op;
  wire [2 : 0] m_storebuffer_ma_allocate_entry_fbindex;
  wire [1 : 0] m_storebuffer_ma_allocate_entry_size;
  wire m_storebuffer_EN_ma_allocate_entry,
       m_storebuffer_EN_mav_check_sb_hit,
       m_storebuffer_EN_mav_store_to_commit,
       m_storebuffer_RDY_ma_allocate_entry,
       m_storebuffer_RDY_mav_store_to_commit,
       m_storebuffer_ma_allocate_entry_atomic,
       m_storebuffer_ma_allocate_entry_epochs,
       m_storebuffer_ma_allocate_entry_io,
       m_storebuffer_mv_cacheable_store,
       m_storebuffer_mv_sb_busy,
       m_storebuffer_mv_sb_empty,
       m_storebuffer_mv_sb_full;

  // ports of submodule m_tag
  reg [31 : 0] m_tag_mv_read_response_address_in;
  reg [5 : 0] m_tag_ma_request_index;
  reg [1 : 0] m_tag_ma_request_way, m_tag_mv_read_response_wayselect;
  wire [35 : 0] m_tag_mv_read_response;
  wire [31 : 0] m_tag_ma_request_address;
  wire m_tag_EN_ma_request, m_tag_ma_request_read_write;

  // rule scheduling signals
  wire CAN_FIRE_RL_rg_release_readphase__dreg_update,
       CAN_FIRE_RL_rl_capture_io_response,
       CAN_FIRE_RL_rl_deq_write_resp,
       CAN_FIRE_RL_rl_deq_write_response,
       CAN_FIRE_RL_rl_fence_operation,
       CAN_FIRE_RL_rl_fill_from_memory,
       CAN_FIRE_RL_rl_fillbuffer_check,
       CAN_FIRE_RL_rl_perform_replay,
       CAN_FIRE_RL_rl_ram_check,
       CAN_FIRE_RL_rl_release_from_fillbuffer,
       CAN_FIRE_RL_rl_response_to_core,
       CAN_FIRE_RL_rl_send_memory_request,
       CAN_FIRE___me_check_4,
       CAN_FIRE_get_core_resp_get,
       CAN_FIRE_get_hold_req_get,
       CAN_FIRE_get_ptw_resp_get,
       CAN_FIRE_get_read_mem_req_get,
       CAN_FIRE_ma_cache_enable,
       CAN_FIRE_ma_curr_priv,
       CAN_FIRE_ma_perform_store,
       CAN_FIRE_ma_write_mem_req_deq,
       CAN_FIRE_put_core_req_put,
       CAN_FIRE_put_pa_from_tlb_put,
       CAN_FIRE_put_read_mem_resp_put,
       CAN_FIRE_put_write_mem_resp_put,
       WILL_FIRE_RL_rg_release_readphase__dreg_update,
       WILL_FIRE_RL_rl_capture_io_response,
       WILL_FIRE_RL_rl_deq_write_resp,
       WILL_FIRE_RL_rl_deq_write_response,
       WILL_FIRE_RL_rl_fence_operation,
       WILL_FIRE_RL_rl_fill_from_memory,
       WILL_FIRE_RL_rl_fillbuffer_check,
       WILL_FIRE_RL_rl_perform_replay,
       WILL_FIRE_RL_rl_ram_check,
       WILL_FIRE_RL_rl_release_from_fillbuffer,
       WILL_FIRE_RL_rl_response_to_core,
       WILL_FIRE_RL_rl_send_memory_request,
       WILL_FIRE___me_check_4,
       WILL_FIRE_get_core_resp_get,
       WILL_FIRE_get_hold_req_get,
       WILL_FIRE_get_ptw_resp_get,
       WILL_FIRE_get_read_mem_req_get,
       WILL_FIRE_ma_cache_enable,
       WILL_FIRE_ma_curr_priv,
       WILL_FIRE_ma_perform_store,
       WILL_FIRE_ma_write_mem_req_deq,
       WILL_FIRE_put_core_req_put,
       WILL_FIRE_put_pa_from_tlb_put,
       WILL_FIRE_put_read_mem_resp_put,
       WILL_FIRE_put_write_mem_resp_put;

  // inputs to muxes for submodule ports
  wire [555 : 0] MUX_ff_write_mem_request_enq_1__VAL_1,
		 MUX_ff_write_mem_request_enq_1__VAL_2,
		 MUX_ff_write_mem_request_enq_1__VAL_3;
  wire [72 : 0] MUX_ff_core_response_rv_port0__write_1__VAL_1,
		MUX_ff_core_response_rv_port0__write_1__VAL_2;
  wire [3 : 0] MUX_m_data_mv_read_response_2__VAL_2,
	       MUX_v_reg_dirty_0_write_1__VAL_1,
	       MUX_v_reg_dirty_0_write_1__VAL_2,
	       MUX_v_reg_valid_0_write_1__VAL_1,
	       MUX_v_reg_valid_0_write_1__VAL_2;
  wire [1 : 0] MUX_replacement_v_count_0_write_1__VAL_2;
  wire MUX_ff_core_response_rv_port0__write_1__SEL_1,
       MUX_ff_write_mem_request_enq_1__SEL_1,
       MUX_ff_write_mem_request_enq_1__SEL_2,
       MUX_ff_write_mem_request_enq_1__SEL_3,
       MUX_m_data_ma_request_1__SEL_1,
       MUX_m_data_ma_request_1__SEL_2,
       MUX_m_data_ma_request_1__VAL_2,
       MUX_m_fillbuffer_mav_allocate_line_1__SEL_1,
       MUX_m_fillbuffer_mav_allocate_line_1__SEL_2,
       MUX_m_fillbuffer_mav_allocate_line_4__VAL_1,
       MUX_rg_globaldirty_write_1__SEL_2,
       MUX_rg_performing_replay_write_1__SEL_1,
       MUX_v_reg_dirty_0_write_1__SEL_1,
       MUX_v_reg_dirty_0_write_1__SEL_2,
       MUX_v_reg_dirty_1_write_1__SEL_1,
       MUX_v_reg_dirty_1_write_1__SEL_2,
       MUX_v_reg_dirty_10_write_1__SEL_1,
       MUX_v_reg_dirty_10_write_1__SEL_2,
       MUX_v_reg_dirty_11_write_1__SEL_1,
       MUX_v_reg_dirty_11_write_1__SEL_2,
       MUX_v_reg_dirty_12_write_1__SEL_1,
       MUX_v_reg_dirty_12_write_1__SEL_2,
       MUX_v_reg_dirty_13_write_1__SEL_1,
       MUX_v_reg_dirty_13_write_1__SEL_2,
       MUX_v_reg_dirty_14_write_1__SEL_1,
       MUX_v_reg_dirty_14_write_1__SEL_2,
       MUX_v_reg_dirty_15_write_1__SEL_1,
       MUX_v_reg_dirty_15_write_1__SEL_2,
       MUX_v_reg_dirty_16_write_1__SEL_1,
       MUX_v_reg_dirty_16_write_1__SEL_2,
       MUX_v_reg_dirty_17_write_1__SEL_1,
       MUX_v_reg_dirty_17_write_1__SEL_2,
       MUX_v_reg_dirty_18_write_1__SEL_1,
       MUX_v_reg_dirty_18_write_1__SEL_2,
       MUX_v_reg_dirty_19_write_1__SEL_1,
       MUX_v_reg_dirty_19_write_1__SEL_2,
       MUX_v_reg_dirty_2_write_1__SEL_1,
       MUX_v_reg_dirty_2_write_1__SEL_2,
       MUX_v_reg_dirty_20_write_1__SEL_1,
       MUX_v_reg_dirty_20_write_1__SEL_2,
       MUX_v_reg_dirty_21_write_1__SEL_1,
       MUX_v_reg_dirty_21_write_1__SEL_2,
       MUX_v_reg_dirty_22_write_1__SEL_1,
       MUX_v_reg_dirty_22_write_1__SEL_2,
       MUX_v_reg_dirty_23_write_1__SEL_1,
       MUX_v_reg_dirty_23_write_1__SEL_2,
       MUX_v_reg_dirty_24_write_1__SEL_1,
       MUX_v_reg_dirty_24_write_1__SEL_2,
       MUX_v_reg_dirty_25_write_1__SEL_1,
       MUX_v_reg_dirty_25_write_1__SEL_2,
       MUX_v_reg_dirty_26_write_1__SEL_1,
       MUX_v_reg_dirty_26_write_1__SEL_2,
       MUX_v_reg_dirty_27_write_1__SEL_1,
       MUX_v_reg_dirty_27_write_1__SEL_2,
       MUX_v_reg_dirty_28_write_1__SEL_1,
       MUX_v_reg_dirty_28_write_1__SEL_2,
       MUX_v_reg_dirty_29_write_1__SEL_1,
       MUX_v_reg_dirty_29_write_1__SEL_2,
       MUX_v_reg_dirty_3_write_1__SEL_1,
       MUX_v_reg_dirty_3_write_1__SEL_2,
       MUX_v_reg_dirty_30_write_1__SEL_1,
       MUX_v_reg_dirty_30_write_1__SEL_2,
       MUX_v_reg_dirty_31_write_1__SEL_1,
       MUX_v_reg_dirty_31_write_1__SEL_2,
       MUX_v_reg_dirty_32_write_1__SEL_1,
       MUX_v_reg_dirty_32_write_1__SEL_2,
       MUX_v_reg_dirty_33_write_1__SEL_1,
       MUX_v_reg_dirty_33_write_1__SEL_2,
       MUX_v_reg_dirty_34_write_1__SEL_1,
       MUX_v_reg_dirty_34_write_1__SEL_2,
       MUX_v_reg_dirty_35_write_1__SEL_1,
       MUX_v_reg_dirty_35_write_1__SEL_2,
       MUX_v_reg_dirty_36_write_1__SEL_1,
       MUX_v_reg_dirty_36_write_1__SEL_2,
       MUX_v_reg_dirty_37_write_1__SEL_1,
       MUX_v_reg_dirty_37_write_1__SEL_2,
       MUX_v_reg_dirty_38_write_1__SEL_1,
       MUX_v_reg_dirty_38_write_1__SEL_2,
       MUX_v_reg_dirty_39_write_1__SEL_1,
       MUX_v_reg_dirty_39_write_1__SEL_2,
       MUX_v_reg_dirty_4_write_1__SEL_1,
       MUX_v_reg_dirty_4_write_1__SEL_2,
       MUX_v_reg_dirty_40_write_1__SEL_1,
       MUX_v_reg_dirty_40_write_1__SEL_2,
       MUX_v_reg_dirty_41_write_1__SEL_1,
       MUX_v_reg_dirty_41_write_1__SEL_2,
       MUX_v_reg_dirty_42_write_1__SEL_1,
       MUX_v_reg_dirty_42_write_1__SEL_2,
       MUX_v_reg_dirty_43_write_1__SEL_1,
       MUX_v_reg_dirty_43_write_1__SEL_2,
       MUX_v_reg_dirty_44_write_1__SEL_1,
       MUX_v_reg_dirty_44_write_1__SEL_2,
       MUX_v_reg_dirty_45_write_1__SEL_1,
       MUX_v_reg_dirty_45_write_1__SEL_2,
       MUX_v_reg_dirty_46_write_1__SEL_1,
       MUX_v_reg_dirty_46_write_1__SEL_2,
       MUX_v_reg_dirty_47_write_1__SEL_1,
       MUX_v_reg_dirty_47_write_1__SEL_2,
       MUX_v_reg_dirty_48_write_1__SEL_1,
       MUX_v_reg_dirty_48_write_1__SEL_2,
       MUX_v_reg_dirty_49_write_1__SEL_1,
       MUX_v_reg_dirty_49_write_1__SEL_2,
       MUX_v_reg_dirty_5_write_1__SEL_1,
       MUX_v_reg_dirty_5_write_1__SEL_2,
       MUX_v_reg_dirty_50_write_1__SEL_1,
       MUX_v_reg_dirty_50_write_1__SEL_2,
       MUX_v_reg_dirty_51_write_1__SEL_1,
       MUX_v_reg_dirty_51_write_1__SEL_2,
       MUX_v_reg_dirty_52_write_1__SEL_1,
       MUX_v_reg_dirty_52_write_1__SEL_2,
       MUX_v_reg_dirty_53_write_1__SEL_1,
       MUX_v_reg_dirty_53_write_1__SEL_2,
       MUX_v_reg_dirty_54_write_1__SEL_1,
       MUX_v_reg_dirty_54_write_1__SEL_2,
       MUX_v_reg_dirty_55_write_1__SEL_1,
       MUX_v_reg_dirty_55_write_1__SEL_2,
       MUX_v_reg_dirty_56_write_1__SEL_1,
       MUX_v_reg_dirty_56_write_1__SEL_2,
       MUX_v_reg_dirty_57_write_1__SEL_1,
       MUX_v_reg_dirty_57_write_1__SEL_2,
       MUX_v_reg_dirty_58_write_1__SEL_1,
       MUX_v_reg_dirty_58_write_1__SEL_2,
       MUX_v_reg_dirty_59_write_1__SEL_1,
       MUX_v_reg_dirty_59_write_1__SEL_2,
       MUX_v_reg_dirty_6_write_1__SEL_1,
       MUX_v_reg_dirty_6_write_1__SEL_2,
       MUX_v_reg_dirty_60_write_1__SEL_1,
       MUX_v_reg_dirty_60_write_1__SEL_2,
       MUX_v_reg_dirty_61_write_1__SEL_1,
       MUX_v_reg_dirty_61_write_1__SEL_2,
       MUX_v_reg_dirty_62_write_1__SEL_1,
       MUX_v_reg_dirty_62_write_1__SEL_2,
       MUX_v_reg_dirty_63_write_1__SEL_1,
       MUX_v_reg_dirty_63_write_1__SEL_2,
       MUX_v_reg_dirty_7_write_1__SEL_1,
       MUX_v_reg_dirty_7_write_1__SEL_2,
       MUX_v_reg_dirty_8_write_1__SEL_1,
       MUX_v_reg_dirty_8_write_1__SEL_2,
       MUX_v_reg_dirty_9_write_1__SEL_1,
       MUX_v_reg_dirty_9_write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d1874;
  reg TASK_testplusargs___d1875;
  reg TASK_testplusargs___d1876;
  reg [63 : 0] v__h122878;
  reg TASK_testplusargs___d1892;
  reg TASK_testplusargs___d1893;
  reg TASK_testplusargs___d1894;
  reg [63 : 0] v__h123053;
  reg TASK_testplusargs___d1963;
  reg TASK_testplusargs___d1964;
  reg TASK_testplusargs___d1965;
  reg [63 : 0] v__h124238;
  reg TASK_testplusargs___d1982;
  reg TASK_testplusargs___d1983;
  reg TASK_testplusargs___d1984;
  reg [63 : 0] v__h124456;
  reg TASK_testplusargs___d1998;
  reg TASK_testplusargs___d1999;
  reg TASK_testplusargs___d2000;
  reg [63 : 0] v__h124594;
  reg TASK_testplusargs___d2007;
  reg TASK_testplusargs___d2008;
  reg TASK_testplusargs___d2009;
  reg [63 : 0] v__h125792;
  reg TASK_testplusargs___d238;
  reg TASK_testplusargs___d239;
  reg TASK_testplusargs___d240;
  reg [63 : 0] v__h33044;
  reg TASK_testplusargs___d254;
  reg TASK_testplusargs___d255;
  reg TASK_testplusargs___d256;
  reg [63 : 0] v__h33295;
  reg TASK_testplusargs___d263;
  reg TASK_testplusargs___d264;
  reg TASK_testplusargs___d265;
  reg [63 : 0] v__h33456;
  reg TASK_testplusargs___d327;
  reg TASK_testplusargs___d328;
  reg TASK_testplusargs___d329;
  reg [63 : 0] v__h35631;
  reg TASK_testplusargs___d341;
  reg TASK_testplusargs___d342;
  reg TASK_testplusargs___d343;
  reg [63 : 0] v__h35811;
  reg TASK_testplusargs___d353;
  reg TASK_testplusargs___d354;
  reg TASK_testplusargs___d355;
  reg [63 : 0] v__h35946;
  reg TASK_testplusargs___d391;
  reg TASK_testplusargs___d392;
  reg TASK_testplusargs___d393;
  reg [63 : 0] v__h37146;
  reg TASK_testplusargs___d404;
  reg TASK_testplusargs___d405;
  reg TASK_testplusargs___d406;
  reg [63 : 0] v__h36996;
  reg TASK_testplusargs___d420;
  reg TASK_testplusargs___d421;
  reg TASK_testplusargs___d422;
  reg [63 : 0] v__h37342;
  reg TASK_testplusargs___d430;
  reg TASK_testplusargs___d431;
  reg TASK_testplusargs___d432;
  reg [63 : 0] v__h37515;
  reg TASK_testplusargs___d441;
  reg TASK_testplusargs___d442;
  reg TASK_testplusargs___d443;
  reg [63 : 0] v__h37639;
  reg TASK_testplusargs___d1454;
  reg TASK_testplusargs___d1455;
  reg TASK_testplusargs___d1456;
  reg [63 : 0] v__h104868;
  reg TASK_testplusargs___d1423;
  reg TASK_testplusargs___d1424;
  reg TASK_testplusargs___d1425;
  reg [63 : 0] v__h104151;
  reg TASK_testplusargs___d1431;
  reg TASK_testplusargs___d1432;
  reg TASK_testplusargs___d1433;
  reg [63 : 0] v__h104362;
  reg TASK_testplusargs___d1438;
  reg TASK_testplusargs___d1439;
  reg TASK_testplusargs___d1440;
  reg [63 : 0] v__h104599;
  reg TASK_testplusargs___d1476;
  reg TASK_testplusargs___d1477;
  reg TASK_testplusargs___d1478;
  reg [63 : 0] v__h105165;
  reg TASK_testplusargs___d26;
  reg TASK_testplusargs___d27;
  reg TASK_testplusargs___d28;
  reg [63 : 0] v__h16573;
  reg TASK_testplusargs___d32;
  reg TASK_testplusargs___d33;
  reg TASK_testplusargs___d34;
  reg [63 : 0] v__h16728;
  reg TASK_testplusargs___d182;
  reg TASK_testplusargs___d183;
  reg TASK_testplusargs___d184;
  reg [63 : 0] v__h21095;
  reg TASK_testplusargs___d482;
  reg TASK_testplusargs___d483;
  reg TASK_testplusargs___d484;
  reg [63 : 0] v__h37833;
  reg TASK_testplusargs___d506;
  reg TASK_testplusargs___d507;
  reg TASK_testplusargs___d508;
  reg [63 : 0] v__h38270;
  reg TASK_testplusargs___d513;
  reg TASK_testplusargs___d514;
  reg TASK_testplusargs___d515;
  reg [63 : 0] v__h38469;
  reg TASK_testplusargs___d528;
  reg TASK_testplusargs___d529;
  reg TASK_testplusargs___d530;
  reg [63 : 0] v__h38823;
  reg TASK_testplusargs___d1361;
  reg TASK_testplusargs___d1362;
  reg TASK_testplusargs___d1363;
  reg [63 : 0] v__h103586;
  reg TASK_testplusargs___d1394;
  reg TASK_testplusargs___d1395;
  reg TASK_testplusargs___d1396;
  reg [63 : 0] v__h103867;
  reg TASK_testplusargs___d1487;
  reg TASK_testplusargs___d1488;
  reg TASK_testplusargs___d1489;
  reg [63 : 0] v__h105374;
  reg TASK_testplusargs___d1520;
  reg TASK_testplusargs___d1521;
  reg TASK_testplusargs___d1522;
  reg [63 : 0] v__h108116;
  reg TASK_testplusargs___d1630;
  reg TASK_testplusargs___d1631;
  reg TASK_testplusargs___d1632;
  reg [63 : 0] v__h109138;
  reg TASK_testplusargs___d1639;
  reg TASK_testplusargs___d1640;
  reg TASK_testplusargs___d1641;
  reg [63 : 0] v__h108817;
  reg TASK_testplusargs___d1789;
  reg TASK_testplusargs___d1790;
  reg TASK_testplusargs___d1791;
  reg [63 : 0] v__h117158;
  reg m_fillbuffer_mav_polling_response_64_BIT_1_86__ETC___d409;
  reg m_fillbuffer_mav_polling_response_64_BIT_0_87__ETC___d425;
  reg NOT_m_fillbuffer_mav_polling_response_64_BIT_0_ETC___d435;
  reg NOT_m_fillbuffer_mav_polling_response_64_BIT_1_ETC___d446;
  reg TASK_testplusargs_361_OR_TASK_testplusargs_362_ETC___d1382;
  reg TASK_testplusargs_361_OR_TASK_testplusargs_362_ETC___d1384;
  reg SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1635;
  reg rg_release_readphase_31_AND_TASK_testplusargs__ETC___d1644;
  reg NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1794;
  reg m_storebuffer_mav_store_to_commit_969_BIT_2_97_ETC___d1987;
  reg NOT_m_storebuffer_mav_store_to_commit_969_BIT__ETC___d2003;
  reg SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187;
  reg TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d246;
  reg TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d248;
  reg TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d251;
  reg TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d253;
  reg TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d338;
  reg TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d340;
  reg TASK_testplusargs_53_OR_TASK_testplusargs_54_A_ETC___d359;
  reg TASK_testplusargs_53_OR_TASK_testplusargs_54_A_ETC___d360;
  reg NOT_wr_cache_enable_wget__15_82_OR_ff_from_tlb_ETC___d396;
  reg wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d410;
  reg wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d427;
  reg wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d437;
  reg wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d447;
  reg IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d511;
  reg IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d518;
  reg IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d533;
  reg NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1366;
  reg NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1399;
  reg wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d1428;
  reg NOT_wr_cache_enable_wget__15_82_OR_ff_from_tlb_ETC___d1436;
  reg wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d1443;
  reg TASK_testplusargs_454_OR_TASK_testplusargs_455_ETC___d1462;
  reg TASK_testplusargs_454_OR_TASK_testplusargs_455_ETC___d1464;
  reg TASK_testplusargs_454_OR_TASK_testplusargs_455_ETC___d1466;
  reg TASK_testplusargs_454_OR_TASK_testplusargs_455_ETC___d1468;
  reg TASK_testplusargs_476_OR_TASK_testplusargs_477_ETC___d1482;
  reg TASK_testplusargs_476_OR_TASK_testplusargs_477_ETC___d1483;
  reg TASK_testplusargs_476_OR_TASK_testplusargs_477_ETC___d1484;
  reg TASK_testplusargs_476_OR_TASK_testplusargs_477_ETC___d1485;
  reg TASK_testplusargs_874_OR_TASK_testplusargs_875_ETC___d1881;
  reg TASK_testplusargs_874_OR_TASK_testplusargs_875_ETC___d1883;
  reg TASK_testplusargs_874_OR_TASK_testplusargs_875_ETC___d1889;
  reg TASK_testplusargs_874_OR_TASK_testplusargs_875_ETC___d1891;
  reg TASK_testplusargs_963_OR_TASK_testplusargs_964_ETC___d1976;
  reg TASK_testplusargs_963_OR_TASK_testplusargs_964_ETC___d1978;
  reg NOT_m_storebuffer_mav_store_to_commit_969_BIT__ETC___d2012;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] x__h87551, y__h87438;
  reg [3 : 0] SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271,
	      bs__h16792,
	      bs__h18818,
	      bs__h95635,
	      dirty__h105475,
	      valid__h105474;
  reg [1 : 0] SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598;
  reg lv_sign__h38914;
  wire [511 : 0] x_data__h124694;
  wire [63 : 0] lv_response_word__h36120,
		lv_response_word__h39250,
		lv_response_word__h39254,
		response_word__h104997,
		response_word__h33658,
		x__h87435,
		x__h87437,
		x__h87450,
		x__h87452,
		y__h87436,
		y__h87451,
		y__h87453,
		y__h87552;
  wire [31 : 0] final_address__h16659,
		lv_evict_address__h108698,
		phyaddr__h103942,
		phyaddr__h32974;
  wire [7 : 0] x_burst_len__h103964;
  wire [6 : 0] _theResult____h21192, fn_pmp_lookup___d289;
  wire [5 : 0] IF_ff_core_request_first__1_BITS_74_TO_73_79_E_ETC___d296,
	       lv_cause__h32976,
	       lv_response_cause__h33674,
	       lv_response_cause__h39252,
	       set_index__h122600,
	       x__h105019,
	       x__h33678;
  wire [3 : 0] lv_hitmask__h33388,
	       wayselect__h108894,
	       x__h36144,
	       x__h97057,
	       y__h114319,
	       y__h97073;
  wire [2 : 0] burst_size__h103938,
	       x__h34761,
	       x__h35344,
	       x__h35356,
	       x__h35368,
	       x_burst_size__h124696,
	       y__h35345,
	       y__h35357,
	       y__h35369;
  wire [1 : 0] IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477,
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467,
	       IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472,
	       i__h95636,
	       pmp_access__h33218,
	       v__h105471,
	       x__h27877,
	       x__h37959,
	       x__h37971,
	       y__h37960,
	       y__h37972;
  wire IF_ff_core_request_first__1_BITS_71_TO_70_103__ETC___d1121,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1002,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1010,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1019,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1027,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1036,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1044,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1053,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1061,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1070,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1078,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1087,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1095,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1160,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1168,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1177,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1185,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1194,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1202,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1211,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d547,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d560,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d568,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d577,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d585,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d594,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d602,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d611,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d619,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d628,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d636,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d645,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d653,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d662,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d670,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d679,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d687,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d696,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d704,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d713,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d721,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d730,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d738,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d747,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d755,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d764,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d772,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d781,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d789,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d798,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d806,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d815,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d823,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d832,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d840,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d849,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d857,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d866,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d874,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d883,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d891,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d900,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d908,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d917,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d925,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d934,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d942,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d951,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d959,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d968,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d976,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d985,
       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d993,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1000,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1008,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1017,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1025,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1034,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1042,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1051,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1059,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1068,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1076,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1085,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1093,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1158,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1166,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1175,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1183,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1192,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1200,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1209,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d542,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d554,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d558,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d566,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d575,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d583,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d592,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d600,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d609,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d617,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d626,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d634,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d643,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d651,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d660,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d668,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d677,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d685,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d694,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d702,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d711,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d719,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d728,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d736,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d745,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d753,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d762,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d770,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d779,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d787,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d796,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d804,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d813,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d821,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d830,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d838,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d847,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d855,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d864,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d872,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d881,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d889,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d898,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d906,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d915,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d923,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d932,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d940,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d949,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d957,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d966,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d974,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d983,
       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d991,
       IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d1413,
       NOT_0_CONCAT_m_tag_mv_read_response_ff_from_tl_ETC___d326,
       NOT_IF_wr_fb_state_whas__75_THEN_wr_fb_state_w_ETC___d1375,
       NOT_IF_wr_nc_state_whas__65_THEN_wr_nc_state_w_ETC___d1371,
       NOT_IF_wr_ram_state_whas__70_THEN_wr_ram_state_ETC___d1379,
       NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800,
       NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1386,
       NOT_ff_core_request_first__1_BIT_76_2_20_AND_N_ETC___d236,
       NOT_ff_core_request_notEmpty__494_495_AND_NOT__ETC___d1505,
       NOT_ff_hold_request_rv_port0__read__49_BIT_141_ETC___d459,
       NOT_m_fillbuffer_mv_release_info__94_BIT_1_621_ETC___d1799,
       SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d1620,
       SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173,
       SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106,
       SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1619,
       SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622,
       b__h37979,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1230,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1235,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1237,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1239,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1241,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1243,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1245,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1247,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1249,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1251,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1253,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1255,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1257,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1259,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1261,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1263,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1265,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1267,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1269,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1271,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1273,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1275,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1277,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1279,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1281,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1283,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1285,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1287,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1289,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1291,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1293,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1295,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1297,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1299,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1301,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1303,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1305,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1307,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1309,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1311,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1313,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1315,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1317,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1319,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1321,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1323,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1325,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1327,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1329,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1331,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1333,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1335,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1337,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1339,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1341,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1343,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1345,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1347,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1349,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1351,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1353,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1355,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1357,
       ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1359,
       ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383,
       lv_response_epochs__h39253,
       m_fillbuffer_mv_fbfull__28_OR_rg_fence_stall_3_ETC___d1517,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1503,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1656,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1659,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1661,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1663,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1665,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1667,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1669,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1671,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1673,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1675,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1677,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1679,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1681,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1683,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1685,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1687,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1689,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1691,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1693,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1695,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1697,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1699,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1701,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1703,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1705,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1707,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1709,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1711,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1713,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1715,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1717,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1719,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1721,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1723,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1725,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1727,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1729,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1731,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1733,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1735,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1737,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1739,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1741,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1743,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1745,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1747,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1749,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1751,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1753,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1755,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1757,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1759,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1761,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1763,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1765,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1767,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1769,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1771,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1773,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1775,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1777,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1779,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1781,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1783,
       m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980,
       wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d403,
       wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d414,
       wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d429,
       wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d440,
       wr_fault_whas__62_AND_wr_fault_wget__63_64_OR__ETC___d474,
       x__read__h3745,
       x__read__h3815,
       x__read__h3885,
       x__read__h3955,
       x__read__h4025,
       x_wget__h3734,
       x_wget__h3804,
       x_wget__h3874,
       x_wget__h3944,
       x_wget__h4014,
       y__h92674;

  // action method put_core_req_put
  assign RDY_put_core_req_put =
	     !ff_core_response_rv[72] && !rg_fence_stall &&
	     !m_fillbuffer_mv_fbfull &&
	     !rg_performing_replay &&
	     EN_ma_cache_enable &&
	     ff_core_request_FULL_N ;
  assign CAN_FIRE_put_core_req_put = RDY_put_core_req_put ;
  assign WILL_FIRE_put_core_req_put = EN_put_core_req_put ;

  // actionvalue method get_core_resp_get
  assign get_core_resp_get = ff_core_response_rv_port1__read[71:0] ;
  assign RDY_get_core_resp_get = ff_core_response_rv_port1__read[72] ;
  assign CAN_FIRE_get_core_resp_get = ff_core_response_rv_port1__read[72] ;
  assign WILL_FIRE_get_core_resp_get = EN_get_core_resp_get ;

  // actionvalue method get_read_mem_req_get
  assign get_read_mem_req_get = ff_read_mem_request_D_OUT ;
  assign RDY_get_read_mem_req_get = ff_read_mem_request_EMPTY_N ;
  assign CAN_FIRE_get_read_mem_req_get = ff_read_mem_request_EMPTY_N ;
  assign WILL_FIRE_get_read_mem_req_get = EN_get_read_mem_req_get ;

  // action method put_read_mem_resp_put
  assign RDY_put_read_mem_resp_put = !ff_read_mem_response_rv[66] ;
  assign CAN_FIRE_put_read_mem_resp_put = !ff_read_mem_response_rv[66] ;
  assign WILL_FIRE_put_read_mem_resp_put = EN_put_read_mem_resp_put ;

  // value method mv_write_mem_req
  assign mv_write_mem_req = ff_write_mem_request_D_OUT ;
  assign RDY_mv_write_mem_req = ff_write_mem_request_EMPTY_N ;

  // action method ma_write_mem_req_deq
  assign RDY_ma_write_mem_req_deq = ff_write_mem_request_EMPTY_N ;
  assign CAN_FIRE_ma_write_mem_req_deq = ff_write_mem_request_EMPTY_N ;
  assign WILL_FIRE_ma_write_mem_req_deq = EN_ma_write_mem_req_deq ;

  // action method put_write_mem_resp_put
  assign RDY_put_write_mem_resp_put = !ff_write_mem_response_rv[1] ;
  assign CAN_FIRE_put_write_mem_resp_put = !ff_write_mem_response_rv[1] ;
  assign WILL_FIRE_put_write_mem_resp_put = EN_put_write_mem_resp_put ;

  // action method ma_curr_priv
  assign RDY_ma_curr_priv = 1'd1 ;
  assign CAN_FIRE_ma_curr_priv = 1'd1 ;
  assign WILL_FIRE_ma_curr_priv = EN_ma_curr_priv ;

  // actionvalue method get_ptw_resp_get
  assign get_ptw_resp_get = ff_ptw_response_rv_port1__read[71:0] ;
  assign RDY_get_ptw_resp_get = ff_ptw_response_rv_port1__read[72] ;
  assign CAN_FIRE_get_ptw_resp_get = ff_ptw_response_rv_port1__read[72] ;
  assign WILL_FIRE_get_ptw_resp_get = EN_get_ptw_resp_get ;

  // action method put_pa_from_tlb_put
  assign RDY_put_pa_from_tlb_put = !ff_from_tlb_rv[40] ;
  assign CAN_FIRE_put_pa_from_tlb_put = !ff_from_tlb_rv[40] ;
  assign WILL_FIRE_put_pa_from_tlb_put = EN_put_pa_from_tlb_put ;

  // actionvalue method get_hold_req_get
  assign get_hold_req_get = ff_hold_request_rv_port1__read[140:0] ;
  assign RDY_get_hold_req_get = ff_hold_request_rv_port1__read[141] ;
  assign CAN_FIRE_get_hold_req_get = ff_hold_request_rv_port1__read[141] ;
  assign WILL_FIRE_get_hold_req_get = EN_get_hold_req_get ;

  // value method mv_perf_counters
  assign mv_perf_counters =
	     { wr_total_read_access_whas,
	       wr_total_write_access_whas,
	       wr_total_atomic_access_whas,
	       x__read__h3745,
	       x__read__h3815,
	       x__read__h3885,
	       x__read__h3955,
	       x__read__h4025,
	       wr_total_read_fb_hits_whas,
	       wr_total_write_fb_hits_whas,
	       wr_total_atomic_fb_hits_whas,
	       wr_total_fb_releases_whas,
	       MUX_ff_write_mem_request_enq_1__SEL_2 } ;
  assign RDY_mv_perf_counters = 1'd1 ;

  // action method ma_cache_enable
  assign RDY_ma_cache_enable = 1'd1 ;
  assign CAN_FIRE_ma_cache_enable = 1'd1 ;
  assign WILL_FIRE_ma_cache_enable = EN_ma_cache_enable ;

  // value method mv_storebuffer_empty
  assign mv_storebuffer_empty = m_storebuffer_mv_sb_empty ;
  assign RDY_mv_storebuffer_empty = 1'd1 ;

  // action method ma_perform_store
  assign RDY_ma_perform_store =
	     m_storebuffer_RDY_mav_store_to_commit &&
	     ff_write_mem_request_FULL_N ;
  assign CAN_FIRE_ma_perform_store =
	     m_storebuffer_RDY_mav_store_to_commit &&
	     ff_write_mem_request_FULL_N ;
  assign WILL_FIRE_ma_perform_store = EN_ma_perform_store ;

  // value method mv_cacheable_store
  assign mv_cacheable_store = m_storebuffer_mv_cacheable_store ;
  assign RDY_mv_cacheable_store = 1'd1 ;

  // value method mv_cache_available
  assign mv_cache_available =
	     !ff_core_response_rv[72] && ff_core_request_FULL_N &&
	     !rg_fence_stall &&
	     !m_fillbuffer_mv_fbfull &&
	     !rg_performing_replay &&
	     !m_storebuffer_mv_sb_full &&
	     !m_storebuffer_mv_sb_busy ;
  assign RDY_mv_cache_available = 1'd1 ;

  // value method mv_commit_store_ready
  assign mv_commit_store_ready =
	     ff_write_mem_request_FULL_N && !m_storebuffer_mv_sb_busy ;
  assign RDY_mv_commit_store_ready = 1'd1 ;

  // submodule ff_core_request
  FIFO2 #(.width(32'd141), .guarded(1'd1)) ff_core_request(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ff_core_request_D_IN),
							   .ENQ(ff_core_request_ENQ),
							   .DEQ(ff_core_request_DEQ),
							   .CLR(ff_core_request_CLR),
							   .D_OUT(ff_core_request_D_OUT),
							   .FULL_N(ff_core_request_FULL_N),
							   .EMPTY_N(ff_core_request_EMPTY_N));

  // submodule ff_pending_req
  FIFO2 #(.width(32'd7), .guarded(1'd0)) ff_pending_req(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ff_pending_req_D_IN),
							.ENQ(ff_pending_req_ENQ),
							.DEQ(ff_pending_req_DEQ),
							.CLR(ff_pending_req_CLR),
							.D_OUT(ff_pending_req_D_OUT),
							.FULL_N(ff_pending_req_FULL_N),
							.EMPTY_N(ff_pending_req_EMPTY_N));

  // submodule ff_read_mem_request
  FIFO2 #(.width(32'd44), .guarded(1'd1)) ff_read_mem_request(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ff_read_mem_request_D_IN),
							      .ENQ(ff_read_mem_request_ENQ),
							      .DEQ(ff_read_mem_request_DEQ),
							      .CLR(ff_read_mem_request_CLR),
							      .D_OUT(ff_read_mem_request_D_OUT),
							      .FULL_N(ff_read_mem_request_FULL_N),
							      .EMPTY_N(ff_read_mem_request_EMPTY_N));

  // submodule ff_write_mem_request
  FIFO1 #(.width(32'd556), .guarded(1'd1)) ff_write_mem_request(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ff_write_mem_request_D_IN),
								.ENQ(ff_write_mem_request_ENQ),
								.DEQ(ff_write_mem_request_DEQ),
								.CLR(ff_write_mem_request_CLR),
								.D_OUT(ff_write_mem_request_D_OUT),
								.FULL_N(ff_write_mem_request_FULL_N),
								.EMPTY_N(ff_write_mem_request_EMPTY_N));

  // submodule m_data
  mkdcache_data #(.id(id)) m_data(.CLK(CLK),
				  .RST_N(RST_N),
				  .ma_request_banks(m_data_ma_request_banks),
				  .ma_request_dataline(m_data_ma_request_dataline),
				  .ma_request_index(m_data_ma_request_index),
				  .ma_request_read_write(m_data_ma_request_read_write),
				  .ma_request_way(m_data_ma_request_way),
				  .mv_read_response_blocknum(m_data_mv_read_response_blocknum),
				  .mv_read_response_wayselect(m_data_mv_read_response_wayselect),
				  .EN_ma_request(m_data_EN_ma_request),
				  .RDY_ma_request(),
				  .mv_read_response(m_data_mv_read_response),
				  .RDY_mv_read_response());

  // submodule m_fillbuffer
  mkdcache_fb_v2 #(.id(id)) m_fillbuffer(.CLK(CLK),
					 .RST_N(RST_N),
					 .ma_fill_from_memory_fbindex(m_fillbuffer_ma_fill_from_memory_fbindex),
					 .ma_fill_from_memory_init_bank(m_fillbuffer_ma_fill_from_memory_init_bank),
					 .ma_fill_from_memory_mem_resp(m_fillbuffer_ma_fill_from_memory_mem_resp),
					 .ma_from_storebuffer_address(m_fillbuffer_ma_from_storebuffer_address),
					 .ma_from_storebuffer_dataword(m_fillbuffer_ma_from_storebuffer_dataword),
					 .ma_from_storebuffer_fbindex(m_fillbuffer_ma_from_storebuffer_fbindex),
					 .ma_from_storebuffer_mask(m_fillbuffer_ma_from_storebuffer_mask),
					 .mav_allocate_line_address(m_fillbuffer_mav_allocate_line_address),
					 .mav_allocate_line_dataline(m_fillbuffer_mav_allocate_line_dataline),
					 .mav_allocate_line_dirty(m_fillbuffer_mav_allocate_line_dirty),
					 .mav_allocate_line_from_ram(m_fillbuffer_mav_allocate_line_from_ram),
					 .mav_polling_response_address(m_fillbuffer_mav_polling_response_address),
					 .mav_polling_response_fbindex(m_fillbuffer_mav_polling_response_fbindex),
					 .mav_polling_response_fill(m_fillbuffer_mav_polling_response_fill),
					 .EN_mav_allocate_line(m_fillbuffer_EN_mav_allocate_line),
					 .EN_ma_fill_from_memory(m_fillbuffer_EN_ma_fill_from_memory),
					 .EN_ma_from_storebuffer(m_fillbuffer_EN_ma_from_storebuffer),
					 .EN_ma_perform_release(m_fillbuffer_EN_ma_perform_release),
					 .EN_mav_polling_response(m_fillbuffer_EN_mav_polling_response),
					 .mv_fbfull(m_fillbuffer_mv_fbfull),
					 .mv_fbempty(m_fillbuffer_mv_fbempty),
					 .mv_fbhead_valid(m_fillbuffer_mv_fbhead_valid),
					 .mav_allocate_line(m_fillbuffer_mav_allocate_line),
					 .RDY_mav_allocate_line(),
					 .RDY_ma_fill_from_memory(),
					 .RDY_ma_from_storebuffer(),
					 .mv_release_info(m_fillbuffer_mv_release_info),
					 .RDY_mv_release_info(),
					 .RDY_ma_perform_release(),
					 .mav_polling_response(m_fillbuffer_mav_polling_response),
					 .RDY_mav_polling_response());

  // submodule m_storebuffer
  mkstorebuffer #(.id(id)) m_storebuffer(.CLK(CLK),
					 .RST_N(RST_N),
					 .ma_allocate_entry_address(m_storebuffer_ma_allocate_entry_address),
					 .ma_allocate_entry_atomic(m_storebuffer_ma_allocate_entry_atomic),
					 .ma_allocate_entry_atomic_op(m_storebuffer_ma_allocate_entry_atomic_op),
					 .ma_allocate_entry_data(m_storebuffer_ma_allocate_entry_data),
					 .ma_allocate_entry_epochs(m_storebuffer_ma_allocate_entry_epochs),
					 .ma_allocate_entry_fbindex(m_storebuffer_ma_allocate_entry_fbindex),
					 .ma_allocate_entry_io(m_storebuffer_ma_allocate_entry_io),
					 .ma_allocate_entry_read_data(m_storebuffer_ma_allocate_entry_read_data),
					 .ma_allocate_entry_size(m_storebuffer_ma_allocate_entry_size),
					 .mav_check_sb_hit_phyaddr(m_storebuffer_mav_check_sb_hit_phyaddr),
					 .EN_mav_check_sb_hit(m_storebuffer_EN_mav_check_sb_hit),
					 .EN_ma_allocate_entry(m_storebuffer_EN_ma_allocate_entry),
					 .EN_mav_store_to_commit(m_storebuffer_EN_mav_store_to_commit),
					 .mav_check_sb_hit(m_storebuffer_mav_check_sb_hit),
					 .RDY_mav_check_sb_hit(),
					 .RDY_ma_allocate_entry(m_storebuffer_RDY_ma_allocate_entry),
					 .mav_store_to_commit(m_storebuffer_mav_store_to_commit),
					 .RDY_mav_store_to_commit(m_storebuffer_RDY_mav_store_to_commit),
					 .mv_sb_full(m_storebuffer_mv_sb_full),
					 .RDY_mv_sb_full(),
					 .mv_sb_empty(m_storebuffer_mv_sb_empty),
					 .RDY_mv_sb_empty(),
					 .mv_cacheable_store(m_storebuffer_mv_cacheable_store),
					 .RDY_mv_cacheable_store(),
					 .mv_sb_busy(m_storebuffer_mv_sb_busy),
					 .RDY_mv_sb_busy());

  // submodule m_tag
  mkdcache_tag #(.id(id)) m_tag(.CLK(CLK),
				.RST_N(RST_N),
				.ma_request_address(m_tag_ma_request_address),
				.ma_request_index(m_tag_ma_request_index),
				.ma_request_read_write(m_tag_ma_request_read_write),
				.ma_request_way(m_tag_ma_request_way),
				.mv_read_response_address_in(m_tag_mv_read_response_address_in),
				.mv_read_response_wayselect(m_tag_mv_read_response_wayselect),
				.EN_ma_request(m_tag_EN_ma_request),
				.RDY_ma_request(),
				.mv_read_response(m_tag_mv_read_response),
				.RDY_mv_read_response());

  // rule RL_rl_deq_write_resp
  assign CAN_FIRE_RL_rl_deq_write_resp =
	     ff_core_request_EMPTY_N && rg_fence_pending &&
	     ff_core_request_D_OUT[76] ;
  assign WILL_FIRE_RL_rl_deq_write_resp = CAN_FIRE_RL_rl_deq_write_resp ;

  // rule RL_rl_deq_write_response
  assign CAN_FIRE_RL_rl_deq_write_response =
	     ff_write_mem_response_rv_port1__read[1] ;
  assign WILL_FIRE_RL_rl_deq_write_response =
	     CAN_FIRE_RL_rl_deq_write_response ;

  // rule RL_rl_ram_check
  assign CAN_FIRE_RL_rl_ram_check =
	     ff_from_tlb_rv_port1__read[40] && ff_core_request_EMPTY_N &&
	     EN_ma_curr_priv &&
	     EN_ma_cache_enable &&
	     NOT_ff_core_request_first__1_BIT_76_2_20_AND_N_ETC___d236 ;
  assign WILL_FIRE_RL_rl_ram_check = CAN_FIRE_RL_rl_ram_check ;

  // rule RL_rl_fillbuffer_check
  assign CAN_FIRE_RL_rl_fillbuffer_check =
	     ff_from_tlb_rv_port1__read[40] && ff_core_request_EMPTY_N &&
	     EN_ma_cache_enable &&
	     !ff_core_request_D_OUT[76] &&
	     !m_fillbuffer_mv_fbfull &&
	     !m_storebuffer_mv_sb_busy ;
  assign WILL_FIRE_RL_rl_fillbuffer_check = CAN_FIRE_RL_rl_fillbuffer_check ;

  // rule RL_rl_fill_from_memory
  assign CAN_FIRE_RL_rl_fill_from_memory =
	     ff_read_mem_response_rv_port1__read[66] &&
	     ff_pending_req_EMPTY_N &&
	     !ff_pending_req_D_OUT[0] ;
  assign WILL_FIRE_RL_rl_fill_from_memory = CAN_FIRE_RL_rl_fill_from_memory ;

  // rule RL_rl_send_memory_request
  assign CAN_FIRE_RL_rl_send_memory_request =
	     ff_from_tlb_rv_port1__read[40] && ff_core_request_EMPTY_N &&
	     EN_ma_cache_enable &&
	     ff_read_mem_request_FULL_N &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d1413 ;
  assign WILL_FIRE_RL_rl_send_memory_request =
	     CAN_FIRE_RL_rl_send_memory_request ;

  // rule RL_rl_capture_io_response
  assign CAN_FIRE_RL_rl_capture_io_response =
	     ff_read_mem_response_rv_port1__read[66] &&
	     ff_core_request_EMPTY_N &&
	     ff_pending_req_EMPTY_N &&
	     ff_pending_req_D_OUT[0] ;
  assign WILL_FIRE_RL_rl_capture_io_response =
	     CAN_FIRE_RL_rl_capture_io_response ;

  // rule RL_rl_fence_operation
  assign CAN_FIRE_RL_rl_fence_operation =
	     ff_core_request_EMPTY_N && ff_write_mem_request_FULL_N &&
	     !ff_core_response_rv[72] &&
	     ff_core_request_D_OUT[76] &&
	     rg_fence_stall &&
	     m_fillbuffer_mv_fbempty &&
	     m_storebuffer_mv_sb_empty &&
	     !rg_fence_pending &&
	     !rg_performing_replay ;
  assign WILL_FIRE_RL_rl_fence_operation =
	     CAN_FIRE_RL_rl_fence_operation && !EN_ma_perform_store ;

  // rule RL_rl_response_to_core
  assign CAN_FIRE_RL_rl_response_to_core =
	     ff_from_tlb_rv_port1__read[40] && ff_core_request_EMPTY_N &&
	     NOT_ff_hold_request_rv_port0__read__49_BIT_141_ETC___d459 &&
	     !ff_core_request_D_OUT[76] &&
	     (wr_fault_whas__62_AND_wr_fault_wget__63_64_OR__ETC___d474 ||
	      IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	      2'd1) ;
  assign WILL_FIRE_RL_rl_response_to_core = CAN_FIRE_RL_rl_response_to_core ;

  // rule RL_rl_perform_replay
  assign CAN_FIRE_RL_rl_perform_replay = rg_performing_replay ;
  assign WILL_FIRE_RL_rl_perform_replay = rg_performing_replay ;

  // rule RL_rl_release_from_fillbuffer
  assign CAN_FIRE_RL_rl_release_from_fillbuffer =
	     ff_write_mem_request_FULL_N &&
	     m_fillbuffer_mv_fbfull__28_OR_rg_fence_stall_3_ETC___d1517 &&
	     !rg_performing_replay ;
  assign WILL_FIRE_RL_rl_release_from_fillbuffer =
	     CAN_FIRE_RL_rl_release_from_fillbuffer && !EN_ma_perform_store &&
	     !EN_put_core_req_put ;

  // rule __me_check_4
  assign CAN_FIRE___me_check_4 = 1'b1 ;
  assign WILL_FIRE___me_check_4 = 1'b1 ;

  // rule RL_rg_release_readphase__dreg_update
  assign CAN_FIRE_RL_rg_release_readphase__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_release_readphase__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_ff_core_response_rv_port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_fence_operation &&
	     (rg_fence_way == 2'd3 && _theResult____h21192 == 7'd64 ||
	      !rg_globaldirty) ;
  assign MUX_ff_write_mem_request_enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_fence_operation &&
	     SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173 &&
	     SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106 ;
  assign MUX_ff_write_mem_request_enq_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] &&
	     rg_release_readphase ;
  assign MUX_ff_write_mem_request_enq_1__SEL_3 =
	     EN_ma_perform_store &&
	     m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	     m_storebuffer_mav_store_to_commit[2] ;
  assign MUX_m_data_ma_request_1__SEL_1 =
	     EN_put_core_req_put && ma_cache_enable_c ;
  assign MUX_m_data_ma_request_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] ;
  assign MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign MUX_m_fillbuffer_mav_allocate_line_1__SEL_2 =
	     WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 ;
  assign MUX_rg_globaldirty_write_1__SEL_2 =
	     EN_ma_perform_store &&
	     m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	     !m_storebuffer_mav_store_to_commit[2] ;
  assign MUX_rg_performing_replay_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     NOT_m_fillbuffer_mv_release_info__94_BIT_1_621_ETC___d1799 ;
  assign MUX_v_reg_dirty_0_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1656 ;
  assign MUX_v_reg_dirty_0_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1230 ;
  assign MUX_v_reg_dirty_1_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1659 ;
  assign MUX_v_reg_dirty_1_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1235 ;
  assign MUX_v_reg_dirty_10_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1677 ;
  assign MUX_v_reg_dirty_10_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1253 ;
  assign MUX_v_reg_dirty_11_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1679 ;
  assign MUX_v_reg_dirty_11_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1255 ;
  assign MUX_v_reg_dirty_12_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1681 ;
  assign MUX_v_reg_dirty_12_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1257 ;
  assign MUX_v_reg_dirty_13_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1683 ;
  assign MUX_v_reg_dirty_13_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1259 ;
  assign MUX_v_reg_dirty_14_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1685 ;
  assign MUX_v_reg_dirty_14_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1261 ;
  assign MUX_v_reg_dirty_15_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1687 ;
  assign MUX_v_reg_dirty_15_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1263 ;
  assign MUX_v_reg_dirty_16_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1689 ;
  assign MUX_v_reg_dirty_16_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1265 ;
  assign MUX_v_reg_dirty_17_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1691 ;
  assign MUX_v_reg_dirty_17_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1267 ;
  assign MUX_v_reg_dirty_18_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1693 ;
  assign MUX_v_reg_dirty_18_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1269 ;
  assign MUX_v_reg_dirty_19_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1695 ;
  assign MUX_v_reg_dirty_19_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1271 ;
  assign MUX_v_reg_dirty_2_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1661 ;
  assign MUX_v_reg_dirty_2_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1237 ;
  assign MUX_v_reg_dirty_20_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1697 ;
  assign MUX_v_reg_dirty_20_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1273 ;
  assign MUX_v_reg_dirty_21_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1699 ;
  assign MUX_v_reg_dirty_21_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1275 ;
  assign MUX_v_reg_dirty_22_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1701 ;
  assign MUX_v_reg_dirty_22_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1277 ;
  assign MUX_v_reg_dirty_23_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1703 ;
  assign MUX_v_reg_dirty_23_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1279 ;
  assign MUX_v_reg_dirty_24_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1705 ;
  assign MUX_v_reg_dirty_24_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1281 ;
  assign MUX_v_reg_dirty_25_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1707 ;
  assign MUX_v_reg_dirty_25_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1283 ;
  assign MUX_v_reg_dirty_26_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1709 ;
  assign MUX_v_reg_dirty_26_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1285 ;
  assign MUX_v_reg_dirty_27_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1711 ;
  assign MUX_v_reg_dirty_27_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1287 ;
  assign MUX_v_reg_dirty_28_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1713 ;
  assign MUX_v_reg_dirty_28_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1289 ;
  assign MUX_v_reg_dirty_29_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1715 ;
  assign MUX_v_reg_dirty_29_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1291 ;
  assign MUX_v_reg_dirty_3_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1663 ;
  assign MUX_v_reg_dirty_3_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1239 ;
  assign MUX_v_reg_dirty_30_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1717 ;
  assign MUX_v_reg_dirty_30_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1293 ;
  assign MUX_v_reg_dirty_31_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1719 ;
  assign MUX_v_reg_dirty_31_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1295 ;
  assign MUX_v_reg_dirty_32_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1721 ;
  assign MUX_v_reg_dirty_32_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1297 ;
  assign MUX_v_reg_dirty_33_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1723 ;
  assign MUX_v_reg_dirty_33_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1299 ;
  assign MUX_v_reg_dirty_34_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1725 ;
  assign MUX_v_reg_dirty_34_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1301 ;
  assign MUX_v_reg_dirty_35_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1727 ;
  assign MUX_v_reg_dirty_35_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1303 ;
  assign MUX_v_reg_dirty_36_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1729 ;
  assign MUX_v_reg_dirty_36_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1305 ;
  assign MUX_v_reg_dirty_37_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1731 ;
  assign MUX_v_reg_dirty_37_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1307 ;
  assign MUX_v_reg_dirty_38_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1733 ;
  assign MUX_v_reg_dirty_38_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1309 ;
  assign MUX_v_reg_dirty_39_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1735 ;
  assign MUX_v_reg_dirty_39_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1311 ;
  assign MUX_v_reg_dirty_4_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1665 ;
  assign MUX_v_reg_dirty_4_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1241 ;
  assign MUX_v_reg_dirty_40_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1737 ;
  assign MUX_v_reg_dirty_40_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1313 ;
  assign MUX_v_reg_dirty_41_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1739 ;
  assign MUX_v_reg_dirty_41_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1315 ;
  assign MUX_v_reg_dirty_42_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1741 ;
  assign MUX_v_reg_dirty_42_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1317 ;
  assign MUX_v_reg_dirty_43_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1743 ;
  assign MUX_v_reg_dirty_43_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1319 ;
  assign MUX_v_reg_dirty_44_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1745 ;
  assign MUX_v_reg_dirty_44_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1321 ;
  assign MUX_v_reg_dirty_45_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1747 ;
  assign MUX_v_reg_dirty_45_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1323 ;
  assign MUX_v_reg_dirty_46_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1749 ;
  assign MUX_v_reg_dirty_46_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1325 ;
  assign MUX_v_reg_dirty_47_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1751 ;
  assign MUX_v_reg_dirty_47_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1327 ;
  assign MUX_v_reg_dirty_48_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1753 ;
  assign MUX_v_reg_dirty_48_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1329 ;
  assign MUX_v_reg_dirty_49_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1755 ;
  assign MUX_v_reg_dirty_49_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1331 ;
  assign MUX_v_reg_dirty_5_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1667 ;
  assign MUX_v_reg_dirty_5_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1243 ;
  assign MUX_v_reg_dirty_50_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1757 ;
  assign MUX_v_reg_dirty_50_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1333 ;
  assign MUX_v_reg_dirty_51_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1759 ;
  assign MUX_v_reg_dirty_51_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1335 ;
  assign MUX_v_reg_dirty_52_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1761 ;
  assign MUX_v_reg_dirty_52_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1337 ;
  assign MUX_v_reg_dirty_53_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1763 ;
  assign MUX_v_reg_dirty_53_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1339 ;
  assign MUX_v_reg_dirty_54_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1765 ;
  assign MUX_v_reg_dirty_54_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1341 ;
  assign MUX_v_reg_dirty_55_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1767 ;
  assign MUX_v_reg_dirty_55_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1343 ;
  assign MUX_v_reg_dirty_56_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1769 ;
  assign MUX_v_reg_dirty_56_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1345 ;
  assign MUX_v_reg_dirty_57_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1771 ;
  assign MUX_v_reg_dirty_57_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1347 ;
  assign MUX_v_reg_dirty_58_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1773 ;
  assign MUX_v_reg_dirty_58_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1349 ;
  assign MUX_v_reg_dirty_59_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1775 ;
  assign MUX_v_reg_dirty_59_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1351 ;
  assign MUX_v_reg_dirty_6_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1669 ;
  assign MUX_v_reg_dirty_6_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1245 ;
  assign MUX_v_reg_dirty_60_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1777 ;
  assign MUX_v_reg_dirty_60_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1353 ;
  assign MUX_v_reg_dirty_61_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1779 ;
  assign MUX_v_reg_dirty_61_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1355 ;
  assign MUX_v_reg_dirty_62_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1781 ;
  assign MUX_v_reg_dirty_62_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1357 ;
  assign MUX_v_reg_dirty_63_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1783 ;
  assign MUX_v_reg_dirty_63_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1359 ;
  assign MUX_v_reg_dirty_7_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1671 ;
  assign MUX_v_reg_dirty_7_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1247 ;
  assign MUX_v_reg_dirty_8_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1673 ;
  assign MUX_v_reg_dirty_8_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1249 ;
  assign MUX_v_reg_dirty_9_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1675 ;
  assign MUX_v_reg_dirty_9_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1251 ;
  assign MUX_m_data_mv_read_response_2__VAL_2 = 4'd1 << rg_fence_way ;
  assign MUX_ff_core_response_rv_port0__write_1__VAL_1 =
	     { 1'd1,
	       64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       1'd0,
	       ff_core_request_D_OUT[81:75] } ;
  assign MUX_ff_core_response_rv_port0__write_1__VAL_2 =
	     { 1'd1,
	       lv_response_word__h39250,
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d554,
	       lv_response_cause__h39252,
	       lv_response_epochs__h39253 } ;
  assign MUX_ff_write_mem_request_enq_1__VAL_1 =
	     { final_address__h16659,
	       m_data_mv_read_response[575:64],
	       12'd118 } ;
  assign MUX_ff_write_mem_request_enq_1__VAL_2 =
	     { lv_evict_address__h108698,
	       m_data_mv_read_response[575:64],
	       12'd118 } ;
  assign MUX_ff_write_mem_request_enq_1__VAL_3 =
	     { m_storebuffer_mav_store_to_commit[166:135],
	       x_data__h124694,
	       8'd0,
	       x_burst_size__h124696,
	       1'd1 } ;
  assign MUX_m_data_ma_request_1__VAL_2 =
	     !SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	     rg_release_readphase ;
  assign MUX_m_fillbuffer_mav_allocate_line_4__VAL_1 = bs__h95635[i__h95636] ;
  assign MUX_replacement_v_count_0_write_1__VAL_2 =
	     SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 -
	     2'd1 ;
  assign MUX_v_reg_dirty_0_write_1__VAL_1 =
	     m_fillbuffer_mv_release_info[0] ?
	       dirty__h105475 | wayselect__h108894 :
	       dirty__h105475 & y__h114319 ;
  assign MUX_v_reg_dirty_0_write_1__VAL_2 = bs__h95635 & y__h97073 ;
  assign MUX_v_reg_valid_0_write_1__VAL_1 =
	     valid__h105474 | wayselect__h108894 ;
  assign MUX_v_reg_valid_0_write_1__VAL_2 =
	     SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 &
	     y__h97073 ;

  // inlined wires
  assign rg_release_readphase_1_whas =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] &&
	     SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 &&
	     !rg_release_readphase ;
  assign wr_fault_whas =
	     WILL_FIRE_RL_rl_ram_check &&
	     (fn_pmp_lookup___d289[6] || ff_from_tlb_rv_port1__read[7] ||
	      ff_from_tlb_rv_port1__read[0]) ;
  assign wr_ram_state_wget =
	     (lv_hitmask__h33388 != 4'd0 && ma_cache_enable_c) ? 2'd1 : 2'd0 ;
  assign wr_ram_state_whas =
	     WILL_FIRE_RL_rl_ram_check && !fn_pmp_lookup___d289[6] &&
	     !ff_from_tlb_rv_port1__read[7] &&
	     !ff_from_tlb_rv_port1__read[0] ;
  assign wr_ram_response_wget =
	     { response_word__h33658,
	       fn_pmp_lookup___d289[6] || ff_from_tlb_rv_port1__read[7] ||
	       ff_from_tlb_rv_port1__read[0],
	       lv_response_cause__h33674,
	       ff_core_request_D_OUT[75] } ;
  assign wr_fb_state_wget =
	     ((!ma_cache_enable_c ||
	       ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383) &&
	      ff_core_request_D_OUT[74:73] != 2'd0) ?
	       2'd1 :
	       (m_fillbuffer_mav_polling_response[1] ?
		  (m_fillbuffer_mav_polling_response[0] ? 2'd1 : 2'd2) :
		  2'd0) ;
  assign wr_fb_response_wget =
	     { lv_response_word__h36120,
	       m_fillbuffer_mav_polling_response[74],
	       IF_ff_core_request_first__1_BITS_74_TO_73_79_E_ETC___d296,
	       ff_core_request_D_OUT[75] } ;
  assign wr_nc_response_wget =
	     { response_word__h104997,
	       ff_read_mem_response_rv_port1__read[0],
	       IF_ff_core_request_first__1_BITS_74_TO_73_79_E_ETC___d296,
	       ff_core_request_D_OUT[75] } ;
  assign wr_total_read_access_whas =
	     EN_put_core_req_put && put_core_req_put[74:73] == 2'd0 ;
  assign wr_total_write_access_whas =
	     EN_put_core_req_put && put_core_req_put[74:73] == 2'd1 ;
  assign wr_total_atomic_access_whas =
	     EN_put_core_req_put && put_core_req_put[74:73] == 2'd2 ;
  assign wr_total_io_reads_whas =
	     WILL_FIRE_RL_rl_send_memory_request &&
	     (!ma_cache_enable_c ||
	      ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383) ;
  assign wr_total_fb_releases_whas =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign wr_total_atomic_fb_hits_whas =
	     WILL_FIRE_RL_rl_response_to_core &&
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     rg_handling_miss &&
	     ff_core_request_D_OUT[74:73] == 2'd2 ;
  assign wr_total_read_fb_hits_whas =
	     WILL_FIRE_RL_rl_response_to_core &&
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     rg_handling_miss &&
	     ff_core_request_D_OUT[74:73] == 2'd0 ;
  assign wr_total_write_fb_hits_whas =
	     WILL_FIRE_RL_rl_response_to_core &&
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     rg_handling_miss &&
	     ff_core_request_D_OUT[74:73] == 2'd1 ;
  assign _mav_allocate_line_RL_rl_send_memory_request_EN_m_fillbuffer_wget =
	     ma_cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 ;
  assign _wset_RL_rl_send_memory_request_EN_wr_total_io_reads_wget =
	     !ma_cache_enable_c ||
	     ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 ;
  assign ff_core_response_rv_EN_port0__write =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     !ff_from_tlb_rv_port1__read[0] &&
	     !ff_core_request_D_OUT[0] ;
  assign ff_core_response_rv_port0__write_1 =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       MUX_ff_core_response_rv_port0__write_1__VAL_1 :
	       MUX_ff_core_response_rv_port0__write_1__VAL_2 ;
  assign ff_core_response_rv_port1__read =
	     ff_core_response_rv_EN_port0__write ?
	       ff_core_response_rv_port0__write_1 :
	       ff_core_response_rv ;
  assign ff_core_response_rv_port1__write_1 =
	     { 1'd0,
	       72'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_core_response_rv_port2__read =
	     EN_get_core_resp_get ?
	       ff_core_response_rv_port1__write_1 :
	       ff_core_response_rv_port1__read ;
  assign ff_ptw_response_rv_EN_port0__write =
	     WILL_FIRE_RL_rl_response_to_core &&
	     !ff_from_tlb_rv_port1__read[0] &&
	     ff_core_request_D_OUT[0] ;
  assign ff_ptw_response_rv_port1__read =
	     ff_ptw_response_rv_EN_port0__write ?
	       MUX_ff_core_response_rv_port0__write_1__VAL_2 :
	       ff_ptw_response_rv ;
  assign ff_ptw_response_rv_port2__read =
	     EN_get_ptw_resp_get ?
	       ff_core_response_rv_port1__write_1 :
	       ff_ptw_response_rv_port1__read ;
  assign ff_read_mem_response_rv_port0__write_1 =
	     { 1'd1, put_read_mem_resp_put } ;
  assign ff_read_mem_response_rv_port1__read =
	     EN_put_read_mem_resp_put ?
	       ff_read_mem_response_rv_port0__write_1 :
	       ff_read_mem_response_rv ;
  assign ff_read_mem_response_rv_EN_port1__write =
	     WILL_FIRE_RL_rl_capture_io_response ||
	     WILL_FIRE_RL_rl_fill_from_memory ;
  assign ff_read_mem_response_rv_port1__write_1 =
	     { 1'd0,
	       66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_read_mem_response_rv_port2__read =
	     ff_read_mem_response_rv_EN_port1__write ?
	       ff_read_mem_response_rv_port1__write_1 :
	       ff_read_mem_response_rv_port1__read ;
  assign ff_write_mem_response_rv_port0__write_1 =
	     { 1'd1, put_write_mem_resp_put } ;
  assign ff_write_mem_response_rv_port1__read =
	     EN_put_write_mem_resp_put ?
	       ff_write_mem_response_rv_port0__write_1 :
	       ff_write_mem_response_rv ;
  assign ff_write_mem_response_rv_port1__write_1 =
	     { 1'd0, 1'bx /* unspecified value */  } ;
  assign ff_write_mem_response_rv_port2__read =
	     ff_write_mem_response_rv_port1__read[1] ?
	       ff_write_mem_response_rv_port1__write_1 :
	       ff_write_mem_response_rv_port1__read ;
  assign ff_hold_request_rv_EN_port0__write =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[0] ;
  assign ff_hold_request_rv_port0__write_1 = { 1'd1, ff_core_request_D_OUT } ;
  assign ff_hold_request_rv_port1__read =
	     ff_hold_request_rv_EN_port0__write ?
	       ff_hold_request_rv_port0__write_1 :
	       ff_hold_request_rv ;
  assign ff_hold_request_rv_port1__write_1 =
	     { 1'd0,
	       141'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_hold_request_rv_port2__read =
	     EN_get_hold_req_get ?
	       ff_hold_request_rv_port1__write_1 :
	       ff_hold_request_rv_port1__read ;
  assign ff_from_tlb_rv_port0__write_1 = { 1'd1, put_pa_from_tlb_put } ;
  assign ff_from_tlb_rv_port1__read =
	     EN_put_pa_from_tlb_put ?
	       ff_from_tlb_rv_port0__write_1 :
	       ff_from_tlb_rv ;
  assign ff_from_tlb_rv_port1__write_1 =
	     { 1'd0,
	       40'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_from_tlb_rv_port2__read =
	     CAN_FIRE_RL_rl_response_to_core ?
	       ff_from_tlb_rv_port1__write_1 :
	       ff_from_tlb_rv_port1__read ;

  // register ff_core_response_rv
  assign ff_core_response_rv_D_IN = ff_core_response_rv_port2__read ;
  assign ff_core_response_rv_EN = 1'b1 ;

  // register ff_from_tlb_rv
  assign ff_from_tlb_rv_D_IN = ff_from_tlb_rv_port2__read ;
  assign ff_from_tlb_rv_EN = 1'b1 ;

  // register ff_hold_request_rv
  assign ff_hold_request_rv_D_IN = ff_hold_request_rv_port2__read ;
  assign ff_hold_request_rv_EN = 1'b1 ;

  // register ff_ptw_response_rv
  assign ff_ptw_response_rv_D_IN = ff_ptw_response_rv_port2__read ;
  assign ff_ptw_response_rv_EN = 1'b1 ;

  // register ff_read_mem_response_rv
  assign ff_read_mem_response_rv_D_IN = ff_read_mem_response_rv_port2__read ;
  assign ff_read_mem_response_rv_EN = 1'b1 ;

  // register ff_write_mem_response_rv
  assign ff_write_mem_response_rv_D_IN =
	     ff_write_mem_response_rv_port2__read ;
  assign ff_write_mem_response_rv_EN = 1'b1 ;

  // register replacement_v_count_0
  assign replacement_v_count_0_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_0_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd0 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_1
  assign replacement_v_count_1_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_1_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd1 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_10
  assign replacement_v_count_10_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_10_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd10 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_11
  assign replacement_v_count_11_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_11_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd11 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_12
  assign replacement_v_count_12_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_12_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd12 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_13
  assign replacement_v_count_13_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_13_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd13 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_14
  assign replacement_v_count_14_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_14_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd14 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_15
  assign replacement_v_count_15_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_15_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd15 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_16
  assign replacement_v_count_16_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_16_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd16 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_17
  assign replacement_v_count_17_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_17_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd17 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_18
  assign replacement_v_count_18_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_18_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd18 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_19
  assign replacement_v_count_19_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_19_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd19 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_2
  assign replacement_v_count_2_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_2_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd2 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_20
  assign replacement_v_count_20_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_20_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd20 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_21
  assign replacement_v_count_21_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_21_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd21 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_22
  assign replacement_v_count_22_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_22_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd22 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_23
  assign replacement_v_count_23_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_23_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd23 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_24
  assign replacement_v_count_24_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_24_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd24 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_25
  assign replacement_v_count_25_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_25_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd25 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_26
  assign replacement_v_count_26_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_26_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd26 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_27
  assign replacement_v_count_27_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_27_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd27 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_28
  assign replacement_v_count_28_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_28_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd28 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_29
  assign replacement_v_count_29_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_29_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd29 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_3
  assign replacement_v_count_3_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_3_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd3 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_30
  assign replacement_v_count_30_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_30_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd30 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_31
  assign replacement_v_count_31_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_31_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd31 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_32
  assign replacement_v_count_32_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_32_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd32 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_33
  assign replacement_v_count_33_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_33_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd33 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_34
  assign replacement_v_count_34_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_34_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd34 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_35
  assign replacement_v_count_35_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_35_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd35 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_36
  assign replacement_v_count_36_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_36_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd36 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_37
  assign replacement_v_count_37_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_37_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd37 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_38
  assign replacement_v_count_38_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_38_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd38 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_39
  assign replacement_v_count_39_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_39_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd39 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_4
  assign replacement_v_count_4_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_4_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd4 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_40
  assign replacement_v_count_40_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_40_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd40 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_41
  assign replacement_v_count_41_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_41_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd41 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_42
  assign replacement_v_count_42_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_42_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd42 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_43
  assign replacement_v_count_43_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_43_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd43 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_44
  assign replacement_v_count_44_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_44_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd44 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_45
  assign replacement_v_count_45_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_45_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd45 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_46
  assign replacement_v_count_46_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_46_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd46 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_47
  assign replacement_v_count_47_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_47_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd47 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_48
  assign replacement_v_count_48_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_48_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd48 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_49
  assign replacement_v_count_49_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_49_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd49 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_5
  assign replacement_v_count_5_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_5_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd5 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_50
  assign replacement_v_count_50_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_50_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd50 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_51
  assign replacement_v_count_51_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_51_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd51 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_52
  assign replacement_v_count_52_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_52_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd52 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_53
  assign replacement_v_count_53_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_53_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd53 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_54
  assign replacement_v_count_54_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_54_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd54 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_55
  assign replacement_v_count_55_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_55_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd55 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_56
  assign replacement_v_count_56_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_56_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd56 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_57
  assign replacement_v_count_57_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_57_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd57 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_58
  assign replacement_v_count_58_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_58_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd58 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_59
  assign replacement_v_count_59_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_59_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd59 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_6
  assign replacement_v_count_6_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_6_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd6 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_60
  assign replacement_v_count_60_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_60_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd60 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_61
  assign replacement_v_count_61_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_61_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd61 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_62
  assign replacement_v_count_62_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_62_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd62 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_63
  assign replacement_v_count_63_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_63_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd63 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_7
  assign replacement_v_count_7_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_7_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd7 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_8
  assign replacement_v_count_8_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_8_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd8 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register replacement_v_count_9
  assign replacement_v_count_9_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_9_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd9 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 ;

  // register rg_fence_pending
  assign rg_fence_pending_D_IN = 1'd0 ;
  assign rg_fence_pending_EN = CAN_FIRE_RL_rl_deq_write_resp ;

  // register rg_fence_set
  assign rg_fence_set_D_IN =
	     (rg_fence_way == 2'd3 && _theResult____h21192 == 7'd64 ||
	      !rg_globaldirty) ?
	       6'd0 :
	       _theResult____h21192[5:0] ;
  assign rg_fence_set_EN = WILL_FIRE_RL_rl_fence_operation ;

  // register rg_fence_stall
  assign rg_fence_stall_D_IN =
	     !MUX_ff_core_response_rv_port0__write_1__SEL_1 &&
	     put_core_req_put[76] ;
  assign rg_fence_stall_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     EN_put_core_req_put ;

  // register rg_fence_way
  assign rg_fence_way_D_IN =
	     (rg_fence_way == 2'd3 && _theResult____h21192 == 7'd64 ||
	      !rg_globaldirty) ?
	       2'd0 :
	       x__h27877 ;
  assign rg_fence_way_EN = WILL_FIRE_RL_rl_fence_operation ;

  // register rg_globaldirty
  assign rg_globaldirty_D_IN =
	     !MUX_ff_core_response_rv_port0__write_1__SEL_1 ;
  assign rg_globaldirty_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     EN_ma_perform_store &&
	     m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	     !m_storebuffer_mav_store_to_commit[2] ;

  // register rg_handling_miss
  assign rg_handling_miss_D_IN = !WILL_FIRE_RL_rl_response_to_core ;
  assign rg_handling_miss_EN =
	     WILL_FIRE_RL_rl_response_to_core ||
	     WILL_FIRE_RL_rl_send_memory_request ;

  // register rg_performing_replay
  assign rg_performing_replay_D_IN = MUX_rg_performing_replay_write_1__SEL_1 ;
  assign rg_performing_replay_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     NOT_m_fillbuffer_mv_release_info__94_BIT_1_621_ETC___d1799 ||
	     rg_performing_replay ;

  // register rg_polling_mode
  assign rg_polling_mode_D_IN =
	     m_fillbuffer_mav_polling_response[1] &&
	     !m_fillbuffer_mav_polling_response[0] ;
  assign rg_polling_mode_EN =
	     WILL_FIRE_RL_rl_fillbuffer_check &&
	     (ma_cache_enable_c &&
	      !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 ||
	      ff_core_request_D_OUT[74:73] == 2'd0) ;

  // register rg_recent_req
  assign rg_recent_req_D_IN = set_index__h122600 ;
  assign rg_recent_req_EN = EN_put_core_req_put ;

  // register rg_release_readphase
  assign rg_release_readphase_D_IN = rg_release_readphase_1_whas ;
  assign rg_release_readphase_EN = 1'd1 ;

  // register rg_wEpoch
  assign rg_wEpoch_D_IN = 1'b0 ;
  assign rg_wEpoch_EN = 1'b0 ;

  // register v_reg_dirty_0
  always@(MUX_v_reg_dirty_0_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_0_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_0_write_1__SEL_1:
	v_reg_dirty_0_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_0_write_1__SEL_2:
	v_reg_dirty_0_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_0_D_IN = 4'd0;
    default: v_reg_dirty_0_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_0_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1230 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1656 ;

  // register v_reg_dirty_1
  always@(MUX_v_reg_dirty_1_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_1_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_1_write_1__SEL_1:
	v_reg_dirty_1_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_1_write_1__SEL_2:
	v_reg_dirty_1_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_1_D_IN = 4'd0;
    default: v_reg_dirty_1_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_1_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1235 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1659 ;

  // register v_reg_dirty_10
  always@(MUX_v_reg_dirty_10_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_10_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_10_write_1__SEL_1:
	v_reg_dirty_10_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_10_write_1__SEL_2:
	v_reg_dirty_10_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_10_D_IN = 4'd0;
    default: v_reg_dirty_10_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_10_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1253 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1677 ;

  // register v_reg_dirty_11
  always@(MUX_v_reg_dirty_11_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_11_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_11_write_1__SEL_1:
	v_reg_dirty_11_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_11_write_1__SEL_2:
	v_reg_dirty_11_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_11_D_IN = 4'd0;
    default: v_reg_dirty_11_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_11_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1255 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1679 ;

  // register v_reg_dirty_12
  always@(MUX_v_reg_dirty_12_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_12_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_12_write_1__SEL_1:
	v_reg_dirty_12_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_12_write_1__SEL_2:
	v_reg_dirty_12_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_12_D_IN = 4'd0;
    default: v_reg_dirty_12_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_12_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1257 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1681 ;

  // register v_reg_dirty_13
  always@(MUX_v_reg_dirty_13_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_13_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_13_write_1__SEL_1:
	v_reg_dirty_13_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_13_write_1__SEL_2:
	v_reg_dirty_13_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_13_D_IN = 4'd0;
    default: v_reg_dirty_13_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_13_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1259 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1683 ;

  // register v_reg_dirty_14
  always@(MUX_v_reg_dirty_14_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_14_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_14_write_1__SEL_1:
	v_reg_dirty_14_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_14_write_1__SEL_2:
	v_reg_dirty_14_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_14_D_IN = 4'd0;
    default: v_reg_dirty_14_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_14_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1261 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1685 ;

  // register v_reg_dirty_15
  always@(MUX_v_reg_dirty_15_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_15_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_15_write_1__SEL_1:
	v_reg_dirty_15_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_15_write_1__SEL_2:
	v_reg_dirty_15_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_15_D_IN = 4'd0;
    default: v_reg_dirty_15_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_15_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1263 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1687 ;

  // register v_reg_dirty_16
  always@(MUX_v_reg_dirty_16_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_16_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_16_write_1__SEL_1:
	v_reg_dirty_16_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_16_write_1__SEL_2:
	v_reg_dirty_16_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_16_D_IN = 4'd0;
    default: v_reg_dirty_16_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_16_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1265 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1689 ;

  // register v_reg_dirty_17
  always@(MUX_v_reg_dirty_17_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_17_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_17_write_1__SEL_1:
	v_reg_dirty_17_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_17_write_1__SEL_2:
	v_reg_dirty_17_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_17_D_IN = 4'd0;
    default: v_reg_dirty_17_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_17_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1267 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1691 ;

  // register v_reg_dirty_18
  always@(MUX_v_reg_dirty_18_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_18_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_18_write_1__SEL_1:
	v_reg_dirty_18_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_18_write_1__SEL_2:
	v_reg_dirty_18_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_18_D_IN = 4'd0;
    default: v_reg_dirty_18_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_18_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1269 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1693 ;

  // register v_reg_dirty_19
  always@(MUX_v_reg_dirty_19_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_19_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_19_write_1__SEL_1:
	v_reg_dirty_19_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_19_write_1__SEL_2:
	v_reg_dirty_19_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_19_D_IN = 4'd0;
    default: v_reg_dirty_19_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_19_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1271 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1695 ;

  // register v_reg_dirty_2
  always@(MUX_v_reg_dirty_2_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_2_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_2_write_1__SEL_1:
	v_reg_dirty_2_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_2_write_1__SEL_2:
	v_reg_dirty_2_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_2_D_IN = 4'd0;
    default: v_reg_dirty_2_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_2_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1237 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1661 ;

  // register v_reg_dirty_20
  always@(MUX_v_reg_dirty_20_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_20_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_20_write_1__SEL_1:
	v_reg_dirty_20_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_20_write_1__SEL_2:
	v_reg_dirty_20_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_20_D_IN = 4'd0;
    default: v_reg_dirty_20_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_20_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1273 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1697 ;

  // register v_reg_dirty_21
  always@(MUX_v_reg_dirty_21_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_21_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_21_write_1__SEL_1:
	v_reg_dirty_21_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_21_write_1__SEL_2:
	v_reg_dirty_21_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_21_D_IN = 4'd0;
    default: v_reg_dirty_21_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_21_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1275 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1699 ;

  // register v_reg_dirty_22
  always@(MUX_v_reg_dirty_22_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_22_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_22_write_1__SEL_1:
	v_reg_dirty_22_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_22_write_1__SEL_2:
	v_reg_dirty_22_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_22_D_IN = 4'd0;
    default: v_reg_dirty_22_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_22_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1277 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1701 ;

  // register v_reg_dirty_23
  always@(MUX_v_reg_dirty_23_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_23_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_23_write_1__SEL_1:
	v_reg_dirty_23_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_23_write_1__SEL_2:
	v_reg_dirty_23_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_23_D_IN = 4'd0;
    default: v_reg_dirty_23_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_23_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1279 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1703 ;

  // register v_reg_dirty_24
  always@(MUX_v_reg_dirty_24_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_24_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_24_write_1__SEL_1:
	v_reg_dirty_24_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_24_write_1__SEL_2:
	v_reg_dirty_24_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_24_D_IN = 4'd0;
    default: v_reg_dirty_24_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_24_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1281 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1705 ;

  // register v_reg_dirty_25
  always@(MUX_v_reg_dirty_25_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_25_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_25_write_1__SEL_1:
	v_reg_dirty_25_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_25_write_1__SEL_2:
	v_reg_dirty_25_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_25_D_IN = 4'd0;
    default: v_reg_dirty_25_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_25_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1283 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1707 ;

  // register v_reg_dirty_26
  always@(MUX_v_reg_dirty_26_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_26_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_26_write_1__SEL_1:
	v_reg_dirty_26_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_26_write_1__SEL_2:
	v_reg_dirty_26_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_26_D_IN = 4'd0;
    default: v_reg_dirty_26_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_26_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1285 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1709 ;

  // register v_reg_dirty_27
  always@(MUX_v_reg_dirty_27_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_27_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_27_write_1__SEL_1:
	v_reg_dirty_27_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_27_write_1__SEL_2:
	v_reg_dirty_27_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_27_D_IN = 4'd0;
    default: v_reg_dirty_27_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_27_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1287 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1711 ;

  // register v_reg_dirty_28
  always@(MUX_v_reg_dirty_28_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_28_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_28_write_1__SEL_1:
	v_reg_dirty_28_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_28_write_1__SEL_2:
	v_reg_dirty_28_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_28_D_IN = 4'd0;
    default: v_reg_dirty_28_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_28_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1289 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1713 ;

  // register v_reg_dirty_29
  always@(MUX_v_reg_dirty_29_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_29_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_29_write_1__SEL_1:
	v_reg_dirty_29_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_29_write_1__SEL_2:
	v_reg_dirty_29_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_29_D_IN = 4'd0;
    default: v_reg_dirty_29_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_29_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1291 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1715 ;

  // register v_reg_dirty_3
  always@(MUX_v_reg_dirty_3_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_3_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_3_write_1__SEL_1:
	v_reg_dirty_3_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_3_write_1__SEL_2:
	v_reg_dirty_3_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_3_D_IN = 4'd0;
    default: v_reg_dirty_3_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_3_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1239 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1663 ;

  // register v_reg_dirty_30
  always@(MUX_v_reg_dirty_30_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_30_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_30_write_1__SEL_1:
	v_reg_dirty_30_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_30_write_1__SEL_2:
	v_reg_dirty_30_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_30_D_IN = 4'd0;
    default: v_reg_dirty_30_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_30_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1293 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1717 ;

  // register v_reg_dirty_31
  always@(MUX_v_reg_dirty_31_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_31_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_31_write_1__SEL_1:
	v_reg_dirty_31_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_31_write_1__SEL_2:
	v_reg_dirty_31_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_31_D_IN = 4'd0;
    default: v_reg_dirty_31_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_31_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1295 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1719 ;

  // register v_reg_dirty_32
  always@(MUX_v_reg_dirty_32_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_32_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_32_write_1__SEL_1:
	v_reg_dirty_32_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_32_write_1__SEL_2:
	v_reg_dirty_32_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_32_D_IN = 4'd0;
    default: v_reg_dirty_32_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_32_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1297 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1721 ;

  // register v_reg_dirty_33
  always@(MUX_v_reg_dirty_33_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_33_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_33_write_1__SEL_1:
	v_reg_dirty_33_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_33_write_1__SEL_2:
	v_reg_dirty_33_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_33_D_IN = 4'd0;
    default: v_reg_dirty_33_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_33_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1299 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1723 ;

  // register v_reg_dirty_34
  always@(MUX_v_reg_dirty_34_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_34_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_34_write_1__SEL_1:
	v_reg_dirty_34_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_34_write_1__SEL_2:
	v_reg_dirty_34_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_34_D_IN = 4'd0;
    default: v_reg_dirty_34_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_34_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1301 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1725 ;

  // register v_reg_dirty_35
  always@(MUX_v_reg_dirty_35_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_35_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_35_write_1__SEL_1:
	v_reg_dirty_35_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_35_write_1__SEL_2:
	v_reg_dirty_35_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_35_D_IN = 4'd0;
    default: v_reg_dirty_35_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_35_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1303 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1727 ;

  // register v_reg_dirty_36
  always@(MUX_v_reg_dirty_36_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_36_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_36_write_1__SEL_1:
	v_reg_dirty_36_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_36_write_1__SEL_2:
	v_reg_dirty_36_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_36_D_IN = 4'd0;
    default: v_reg_dirty_36_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_36_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1305 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1729 ;

  // register v_reg_dirty_37
  always@(MUX_v_reg_dirty_37_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_37_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_37_write_1__SEL_1:
	v_reg_dirty_37_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_37_write_1__SEL_2:
	v_reg_dirty_37_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_37_D_IN = 4'd0;
    default: v_reg_dirty_37_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_37_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1307 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1731 ;

  // register v_reg_dirty_38
  always@(MUX_v_reg_dirty_38_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_38_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_38_write_1__SEL_1:
	v_reg_dirty_38_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_38_write_1__SEL_2:
	v_reg_dirty_38_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_38_D_IN = 4'd0;
    default: v_reg_dirty_38_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_38_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1309 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1733 ;

  // register v_reg_dirty_39
  always@(MUX_v_reg_dirty_39_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_39_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_39_write_1__SEL_1:
	v_reg_dirty_39_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_39_write_1__SEL_2:
	v_reg_dirty_39_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_39_D_IN = 4'd0;
    default: v_reg_dirty_39_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_39_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1311 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1735 ;

  // register v_reg_dirty_4
  always@(MUX_v_reg_dirty_4_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_4_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_4_write_1__SEL_1:
	v_reg_dirty_4_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_4_write_1__SEL_2:
	v_reg_dirty_4_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_4_D_IN = 4'd0;
    default: v_reg_dirty_4_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_4_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1241 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1665 ;

  // register v_reg_dirty_40
  always@(MUX_v_reg_dirty_40_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_40_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_40_write_1__SEL_1:
	v_reg_dirty_40_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_40_write_1__SEL_2:
	v_reg_dirty_40_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_40_D_IN = 4'd0;
    default: v_reg_dirty_40_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_40_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1313 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1737 ;

  // register v_reg_dirty_41
  always@(MUX_v_reg_dirty_41_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_41_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_41_write_1__SEL_1:
	v_reg_dirty_41_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_41_write_1__SEL_2:
	v_reg_dirty_41_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_41_D_IN = 4'd0;
    default: v_reg_dirty_41_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_41_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1315 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1739 ;

  // register v_reg_dirty_42
  always@(MUX_v_reg_dirty_42_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_42_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_42_write_1__SEL_1:
	v_reg_dirty_42_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_42_write_1__SEL_2:
	v_reg_dirty_42_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_42_D_IN = 4'd0;
    default: v_reg_dirty_42_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_42_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1317 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1741 ;

  // register v_reg_dirty_43
  always@(MUX_v_reg_dirty_43_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_43_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_43_write_1__SEL_1:
	v_reg_dirty_43_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_43_write_1__SEL_2:
	v_reg_dirty_43_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_43_D_IN = 4'd0;
    default: v_reg_dirty_43_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_43_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1319 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1743 ;

  // register v_reg_dirty_44
  always@(MUX_v_reg_dirty_44_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_44_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_44_write_1__SEL_1:
	v_reg_dirty_44_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_44_write_1__SEL_2:
	v_reg_dirty_44_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_44_D_IN = 4'd0;
    default: v_reg_dirty_44_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_44_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1321 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1745 ;

  // register v_reg_dirty_45
  always@(MUX_v_reg_dirty_45_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_45_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_45_write_1__SEL_1:
	v_reg_dirty_45_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_45_write_1__SEL_2:
	v_reg_dirty_45_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_45_D_IN = 4'd0;
    default: v_reg_dirty_45_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_45_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1323 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1747 ;

  // register v_reg_dirty_46
  always@(MUX_v_reg_dirty_46_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_46_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_46_write_1__SEL_1:
	v_reg_dirty_46_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_46_write_1__SEL_2:
	v_reg_dirty_46_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_46_D_IN = 4'd0;
    default: v_reg_dirty_46_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_46_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1325 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1749 ;

  // register v_reg_dirty_47
  always@(MUX_v_reg_dirty_47_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_47_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_47_write_1__SEL_1:
	v_reg_dirty_47_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_47_write_1__SEL_2:
	v_reg_dirty_47_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_47_D_IN = 4'd0;
    default: v_reg_dirty_47_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_47_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1327 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1751 ;

  // register v_reg_dirty_48
  always@(MUX_v_reg_dirty_48_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_48_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_48_write_1__SEL_1:
	v_reg_dirty_48_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_48_write_1__SEL_2:
	v_reg_dirty_48_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_48_D_IN = 4'd0;
    default: v_reg_dirty_48_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_48_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1329 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1753 ;

  // register v_reg_dirty_49
  always@(MUX_v_reg_dirty_49_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_49_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_49_write_1__SEL_1:
	v_reg_dirty_49_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_49_write_1__SEL_2:
	v_reg_dirty_49_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_49_D_IN = 4'd0;
    default: v_reg_dirty_49_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_49_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1331 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1755 ;

  // register v_reg_dirty_5
  always@(MUX_v_reg_dirty_5_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_5_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_5_write_1__SEL_1:
	v_reg_dirty_5_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_5_write_1__SEL_2:
	v_reg_dirty_5_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_5_D_IN = 4'd0;
    default: v_reg_dirty_5_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_5_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1243 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1667 ;

  // register v_reg_dirty_50
  always@(MUX_v_reg_dirty_50_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_50_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_50_write_1__SEL_1:
	v_reg_dirty_50_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_50_write_1__SEL_2:
	v_reg_dirty_50_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_50_D_IN = 4'd0;
    default: v_reg_dirty_50_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_50_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1333 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1757 ;

  // register v_reg_dirty_51
  always@(MUX_v_reg_dirty_51_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_51_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_51_write_1__SEL_1:
	v_reg_dirty_51_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_51_write_1__SEL_2:
	v_reg_dirty_51_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_51_D_IN = 4'd0;
    default: v_reg_dirty_51_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_51_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1335 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1759 ;

  // register v_reg_dirty_52
  always@(MUX_v_reg_dirty_52_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_52_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_52_write_1__SEL_1:
	v_reg_dirty_52_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_52_write_1__SEL_2:
	v_reg_dirty_52_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_52_D_IN = 4'd0;
    default: v_reg_dirty_52_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_52_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1337 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1761 ;

  // register v_reg_dirty_53
  always@(MUX_v_reg_dirty_53_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_53_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_53_write_1__SEL_1:
	v_reg_dirty_53_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_53_write_1__SEL_2:
	v_reg_dirty_53_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_53_D_IN = 4'd0;
    default: v_reg_dirty_53_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_53_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1339 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1763 ;

  // register v_reg_dirty_54
  always@(MUX_v_reg_dirty_54_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_54_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_54_write_1__SEL_1:
	v_reg_dirty_54_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_54_write_1__SEL_2:
	v_reg_dirty_54_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_54_D_IN = 4'd0;
    default: v_reg_dirty_54_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_54_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1341 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1765 ;

  // register v_reg_dirty_55
  always@(MUX_v_reg_dirty_55_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_55_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_55_write_1__SEL_1:
	v_reg_dirty_55_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_55_write_1__SEL_2:
	v_reg_dirty_55_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_55_D_IN = 4'd0;
    default: v_reg_dirty_55_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_55_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1343 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1767 ;

  // register v_reg_dirty_56
  always@(MUX_v_reg_dirty_56_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_56_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_56_write_1__SEL_1:
	v_reg_dirty_56_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_56_write_1__SEL_2:
	v_reg_dirty_56_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_56_D_IN = 4'd0;
    default: v_reg_dirty_56_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_56_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1345 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1769 ;

  // register v_reg_dirty_57
  always@(MUX_v_reg_dirty_57_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_57_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_57_write_1__SEL_1:
	v_reg_dirty_57_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_57_write_1__SEL_2:
	v_reg_dirty_57_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_57_D_IN = 4'd0;
    default: v_reg_dirty_57_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_57_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1347 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1771 ;

  // register v_reg_dirty_58
  always@(MUX_v_reg_dirty_58_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_58_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_58_write_1__SEL_1:
	v_reg_dirty_58_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_58_write_1__SEL_2:
	v_reg_dirty_58_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_58_D_IN = 4'd0;
    default: v_reg_dirty_58_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_58_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1349 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1773 ;

  // register v_reg_dirty_59
  always@(MUX_v_reg_dirty_59_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_59_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_59_write_1__SEL_1:
	v_reg_dirty_59_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_59_write_1__SEL_2:
	v_reg_dirty_59_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_59_D_IN = 4'd0;
    default: v_reg_dirty_59_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_59_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1351 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1775 ;

  // register v_reg_dirty_6
  always@(MUX_v_reg_dirty_6_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_6_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_6_write_1__SEL_1:
	v_reg_dirty_6_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_6_write_1__SEL_2:
	v_reg_dirty_6_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_6_D_IN = 4'd0;
    default: v_reg_dirty_6_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_6_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1245 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1669 ;

  // register v_reg_dirty_60
  always@(MUX_v_reg_dirty_60_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_60_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_60_write_1__SEL_1:
	v_reg_dirty_60_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_60_write_1__SEL_2:
	v_reg_dirty_60_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_60_D_IN = 4'd0;
    default: v_reg_dirty_60_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_60_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1353 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1777 ;

  // register v_reg_dirty_61
  always@(MUX_v_reg_dirty_61_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_61_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_61_write_1__SEL_1:
	v_reg_dirty_61_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_61_write_1__SEL_2:
	v_reg_dirty_61_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_61_D_IN = 4'd0;
    default: v_reg_dirty_61_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_61_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1355 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1779 ;

  // register v_reg_dirty_62
  always@(MUX_v_reg_dirty_62_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_62_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_62_write_1__SEL_1:
	v_reg_dirty_62_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_62_write_1__SEL_2:
	v_reg_dirty_62_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_62_D_IN = 4'd0;
    default: v_reg_dirty_62_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_62_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1357 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1781 ;

  // register v_reg_dirty_63
  always@(MUX_v_reg_dirty_63_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_63_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_63_write_1__SEL_1:
	v_reg_dirty_63_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_63_write_1__SEL_2:
	v_reg_dirty_63_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_63_D_IN = 4'd0;
    default: v_reg_dirty_63_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_63_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1359 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1783 ;

  // register v_reg_dirty_7
  always@(MUX_v_reg_dirty_7_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_7_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_7_write_1__SEL_1:
	v_reg_dirty_7_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_7_write_1__SEL_2:
	v_reg_dirty_7_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_7_D_IN = 4'd0;
    default: v_reg_dirty_7_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_7_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1247 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1671 ;

  // register v_reg_dirty_8
  always@(MUX_v_reg_dirty_8_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_8_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_8_write_1__SEL_1:
	v_reg_dirty_8_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_8_write_1__SEL_2:
	v_reg_dirty_8_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_8_D_IN = 4'd0;
    default: v_reg_dirty_8_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_8_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1249 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1673 ;

  // register v_reg_dirty_9
  always@(MUX_v_reg_dirty_9_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_9_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_9_write_1__SEL_1:
	v_reg_dirty_9_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_9_write_1__SEL_2:
	v_reg_dirty_9_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_9_D_IN = 4'd0;
    default: v_reg_dirty_9_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_9_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1251 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1675 ;

  // register v_reg_valid_0
  always@(MUX_v_reg_dirty_0_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_0_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_0_write_1__SEL_1:
	v_reg_valid_0_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_0_write_1__SEL_2:
	v_reg_valid_0_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_0_D_IN = 4'd0;
    default: v_reg_valid_0_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_0_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1230 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1656 ;

  // register v_reg_valid_1
  always@(MUX_v_reg_dirty_1_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_1_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_1_write_1__SEL_1:
	v_reg_valid_1_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_1_write_1__SEL_2:
	v_reg_valid_1_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_1_D_IN = 4'd0;
    default: v_reg_valid_1_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_1_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1235 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1659 ;

  // register v_reg_valid_10
  always@(MUX_v_reg_dirty_10_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_10_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_10_write_1__SEL_1:
	v_reg_valid_10_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_10_write_1__SEL_2:
	v_reg_valid_10_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_10_D_IN = 4'd0;
    default: v_reg_valid_10_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_10_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1253 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1677 ;

  // register v_reg_valid_11
  always@(MUX_v_reg_dirty_11_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_11_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_11_write_1__SEL_1:
	v_reg_valid_11_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_11_write_1__SEL_2:
	v_reg_valid_11_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_11_D_IN = 4'd0;
    default: v_reg_valid_11_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_11_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1255 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1679 ;

  // register v_reg_valid_12
  always@(MUX_v_reg_dirty_12_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_12_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_12_write_1__SEL_1:
	v_reg_valid_12_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_12_write_1__SEL_2:
	v_reg_valid_12_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_12_D_IN = 4'd0;
    default: v_reg_valid_12_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_12_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1257 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1681 ;

  // register v_reg_valid_13
  always@(MUX_v_reg_dirty_13_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_13_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_13_write_1__SEL_1:
	v_reg_valid_13_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_13_write_1__SEL_2:
	v_reg_valid_13_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_13_D_IN = 4'd0;
    default: v_reg_valid_13_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_13_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1259 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1683 ;

  // register v_reg_valid_14
  always@(MUX_v_reg_dirty_14_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_14_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_14_write_1__SEL_1:
	v_reg_valid_14_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_14_write_1__SEL_2:
	v_reg_valid_14_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_14_D_IN = 4'd0;
    default: v_reg_valid_14_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_14_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1261 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1685 ;

  // register v_reg_valid_15
  always@(MUX_v_reg_dirty_15_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_15_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_15_write_1__SEL_1:
	v_reg_valid_15_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_15_write_1__SEL_2:
	v_reg_valid_15_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_15_D_IN = 4'd0;
    default: v_reg_valid_15_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_15_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1263 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1687 ;

  // register v_reg_valid_16
  always@(MUX_v_reg_dirty_16_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_16_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_16_write_1__SEL_1:
	v_reg_valid_16_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_16_write_1__SEL_2:
	v_reg_valid_16_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_16_D_IN = 4'd0;
    default: v_reg_valid_16_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_16_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1265 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1689 ;

  // register v_reg_valid_17
  always@(MUX_v_reg_dirty_17_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_17_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_17_write_1__SEL_1:
	v_reg_valid_17_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_17_write_1__SEL_2:
	v_reg_valid_17_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_17_D_IN = 4'd0;
    default: v_reg_valid_17_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_17_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1267 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1691 ;

  // register v_reg_valid_18
  always@(MUX_v_reg_dirty_18_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_18_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_18_write_1__SEL_1:
	v_reg_valid_18_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_18_write_1__SEL_2:
	v_reg_valid_18_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_18_D_IN = 4'd0;
    default: v_reg_valid_18_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_18_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1269 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1693 ;

  // register v_reg_valid_19
  always@(MUX_v_reg_dirty_19_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_19_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_19_write_1__SEL_1:
	v_reg_valid_19_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_19_write_1__SEL_2:
	v_reg_valid_19_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_19_D_IN = 4'd0;
    default: v_reg_valid_19_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_19_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1271 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1695 ;

  // register v_reg_valid_2
  always@(MUX_v_reg_dirty_2_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_2_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_2_write_1__SEL_1:
	v_reg_valid_2_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_2_write_1__SEL_2:
	v_reg_valid_2_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_2_D_IN = 4'd0;
    default: v_reg_valid_2_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_2_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1237 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1661 ;

  // register v_reg_valid_20
  always@(MUX_v_reg_dirty_20_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_20_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_20_write_1__SEL_1:
	v_reg_valid_20_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_20_write_1__SEL_2:
	v_reg_valid_20_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_20_D_IN = 4'd0;
    default: v_reg_valid_20_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_20_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1273 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1697 ;

  // register v_reg_valid_21
  always@(MUX_v_reg_dirty_21_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_21_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_21_write_1__SEL_1:
	v_reg_valid_21_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_21_write_1__SEL_2:
	v_reg_valid_21_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_21_D_IN = 4'd0;
    default: v_reg_valid_21_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_21_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1275 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1699 ;

  // register v_reg_valid_22
  always@(MUX_v_reg_dirty_22_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_22_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_22_write_1__SEL_1:
	v_reg_valid_22_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_22_write_1__SEL_2:
	v_reg_valid_22_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_22_D_IN = 4'd0;
    default: v_reg_valid_22_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_22_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1277 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1701 ;

  // register v_reg_valid_23
  always@(MUX_v_reg_dirty_23_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_23_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_23_write_1__SEL_1:
	v_reg_valid_23_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_23_write_1__SEL_2:
	v_reg_valid_23_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_23_D_IN = 4'd0;
    default: v_reg_valid_23_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_23_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1279 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1703 ;

  // register v_reg_valid_24
  always@(MUX_v_reg_dirty_24_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_24_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_24_write_1__SEL_1:
	v_reg_valid_24_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_24_write_1__SEL_2:
	v_reg_valid_24_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_24_D_IN = 4'd0;
    default: v_reg_valid_24_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_24_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1281 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1705 ;

  // register v_reg_valid_25
  always@(MUX_v_reg_dirty_25_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_25_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_25_write_1__SEL_1:
	v_reg_valid_25_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_25_write_1__SEL_2:
	v_reg_valid_25_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_25_D_IN = 4'd0;
    default: v_reg_valid_25_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_25_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1283 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1707 ;

  // register v_reg_valid_26
  always@(MUX_v_reg_dirty_26_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_26_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_26_write_1__SEL_1:
	v_reg_valid_26_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_26_write_1__SEL_2:
	v_reg_valid_26_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_26_D_IN = 4'd0;
    default: v_reg_valid_26_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_26_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1285 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1709 ;

  // register v_reg_valid_27
  always@(MUX_v_reg_dirty_27_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_27_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_27_write_1__SEL_1:
	v_reg_valid_27_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_27_write_1__SEL_2:
	v_reg_valid_27_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_27_D_IN = 4'd0;
    default: v_reg_valid_27_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_27_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1287 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1711 ;

  // register v_reg_valid_28
  always@(MUX_v_reg_dirty_28_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_28_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_28_write_1__SEL_1:
	v_reg_valid_28_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_28_write_1__SEL_2:
	v_reg_valid_28_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_28_D_IN = 4'd0;
    default: v_reg_valid_28_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_28_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1289 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1713 ;

  // register v_reg_valid_29
  always@(MUX_v_reg_dirty_29_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_29_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_29_write_1__SEL_1:
	v_reg_valid_29_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_29_write_1__SEL_2:
	v_reg_valid_29_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_29_D_IN = 4'd0;
    default: v_reg_valid_29_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_29_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1291 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1715 ;

  // register v_reg_valid_3
  always@(MUX_v_reg_dirty_3_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_3_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_3_write_1__SEL_1:
	v_reg_valid_3_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_3_write_1__SEL_2:
	v_reg_valid_3_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_3_D_IN = 4'd0;
    default: v_reg_valid_3_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_3_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1239 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1663 ;

  // register v_reg_valid_30
  always@(MUX_v_reg_dirty_30_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_30_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_30_write_1__SEL_1:
	v_reg_valid_30_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_30_write_1__SEL_2:
	v_reg_valid_30_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_30_D_IN = 4'd0;
    default: v_reg_valid_30_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_30_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1293 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1717 ;

  // register v_reg_valid_31
  always@(MUX_v_reg_dirty_31_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_31_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_31_write_1__SEL_1:
	v_reg_valid_31_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_31_write_1__SEL_2:
	v_reg_valid_31_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_31_D_IN = 4'd0;
    default: v_reg_valid_31_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_31_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1295 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1719 ;

  // register v_reg_valid_32
  always@(MUX_v_reg_dirty_32_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_32_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_32_write_1__SEL_1:
	v_reg_valid_32_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_32_write_1__SEL_2:
	v_reg_valid_32_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_32_D_IN = 4'd0;
    default: v_reg_valid_32_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_32_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1297 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1721 ;

  // register v_reg_valid_33
  always@(MUX_v_reg_dirty_33_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_33_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_33_write_1__SEL_1:
	v_reg_valid_33_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_33_write_1__SEL_2:
	v_reg_valid_33_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_33_D_IN = 4'd0;
    default: v_reg_valid_33_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_33_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1299 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1723 ;

  // register v_reg_valid_34
  always@(MUX_v_reg_dirty_34_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_34_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_34_write_1__SEL_1:
	v_reg_valid_34_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_34_write_1__SEL_2:
	v_reg_valid_34_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_34_D_IN = 4'd0;
    default: v_reg_valid_34_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_34_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1301 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1725 ;

  // register v_reg_valid_35
  always@(MUX_v_reg_dirty_35_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_35_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_35_write_1__SEL_1:
	v_reg_valid_35_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_35_write_1__SEL_2:
	v_reg_valid_35_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_35_D_IN = 4'd0;
    default: v_reg_valid_35_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_35_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1303 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1727 ;

  // register v_reg_valid_36
  always@(MUX_v_reg_dirty_36_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_36_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_36_write_1__SEL_1:
	v_reg_valid_36_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_36_write_1__SEL_2:
	v_reg_valid_36_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_36_D_IN = 4'd0;
    default: v_reg_valid_36_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_36_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1305 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1729 ;

  // register v_reg_valid_37
  always@(MUX_v_reg_dirty_37_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_37_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_37_write_1__SEL_1:
	v_reg_valid_37_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_37_write_1__SEL_2:
	v_reg_valid_37_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_37_D_IN = 4'd0;
    default: v_reg_valid_37_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_37_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1307 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1731 ;

  // register v_reg_valid_38
  always@(MUX_v_reg_dirty_38_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_38_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_38_write_1__SEL_1:
	v_reg_valid_38_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_38_write_1__SEL_2:
	v_reg_valid_38_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_38_D_IN = 4'd0;
    default: v_reg_valid_38_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_38_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1309 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1733 ;

  // register v_reg_valid_39
  always@(MUX_v_reg_dirty_39_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_39_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_39_write_1__SEL_1:
	v_reg_valid_39_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_39_write_1__SEL_2:
	v_reg_valid_39_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_39_D_IN = 4'd0;
    default: v_reg_valid_39_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_39_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1311 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1735 ;

  // register v_reg_valid_4
  always@(MUX_v_reg_dirty_4_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_4_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_4_write_1__SEL_1:
	v_reg_valid_4_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_4_write_1__SEL_2:
	v_reg_valid_4_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_4_D_IN = 4'd0;
    default: v_reg_valid_4_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_4_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1241 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1665 ;

  // register v_reg_valid_40
  always@(MUX_v_reg_dirty_40_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_40_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_40_write_1__SEL_1:
	v_reg_valid_40_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_40_write_1__SEL_2:
	v_reg_valid_40_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_40_D_IN = 4'd0;
    default: v_reg_valid_40_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_40_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1313 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1737 ;

  // register v_reg_valid_41
  always@(MUX_v_reg_dirty_41_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_41_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_41_write_1__SEL_1:
	v_reg_valid_41_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_41_write_1__SEL_2:
	v_reg_valid_41_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_41_D_IN = 4'd0;
    default: v_reg_valid_41_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_41_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1315 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1739 ;

  // register v_reg_valid_42
  always@(MUX_v_reg_dirty_42_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_42_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_42_write_1__SEL_1:
	v_reg_valid_42_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_42_write_1__SEL_2:
	v_reg_valid_42_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_42_D_IN = 4'd0;
    default: v_reg_valid_42_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_42_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1317 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1741 ;

  // register v_reg_valid_43
  always@(MUX_v_reg_dirty_43_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_43_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_43_write_1__SEL_1:
	v_reg_valid_43_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_43_write_1__SEL_2:
	v_reg_valid_43_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_43_D_IN = 4'd0;
    default: v_reg_valid_43_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_43_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1319 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1743 ;

  // register v_reg_valid_44
  always@(MUX_v_reg_dirty_44_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_44_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_44_write_1__SEL_1:
	v_reg_valid_44_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_44_write_1__SEL_2:
	v_reg_valid_44_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_44_D_IN = 4'd0;
    default: v_reg_valid_44_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_44_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1321 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1745 ;

  // register v_reg_valid_45
  always@(MUX_v_reg_dirty_45_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_45_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_45_write_1__SEL_1:
	v_reg_valid_45_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_45_write_1__SEL_2:
	v_reg_valid_45_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_45_D_IN = 4'd0;
    default: v_reg_valid_45_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_45_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1323 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1747 ;

  // register v_reg_valid_46
  always@(MUX_v_reg_dirty_46_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_46_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_46_write_1__SEL_1:
	v_reg_valid_46_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_46_write_1__SEL_2:
	v_reg_valid_46_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_46_D_IN = 4'd0;
    default: v_reg_valid_46_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_46_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1325 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1749 ;

  // register v_reg_valid_47
  always@(MUX_v_reg_dirty_47_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_47_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_47_write_1__SEL_1:
	v_reg_valid_47_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_47_write_1__SEL_2:
	v_reg_valid_47_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_47_D_IN = 4'd0;
    default: v_reg_valid_47_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_47_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1327 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1751 ;

  // register v_reg_valid_48
  always@(MUX_v_reg_dirty_48_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_48_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_48_write_1__SEL_1:
	v_reg_valid_48_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_48_write_1__SEL_2:
	v_reg_valid_48_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_48_D_IN = 4'd0;
    default: v_reg_valid_48_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_48_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1329 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1753 ;

  // register v_reg_valid_49
  always@(MUX_v_reg_dirty_49_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_49_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_49_write_1__SEL_1:
	v_reg_valid_49_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_49_write_1__SEL_2:
	v_reg_valid_49_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_49_D_IN = 4'd0;
    default: v_reg_valid_49_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_49_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1331 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1755 ;

  // register v_reg_valid_5
  always@(MUX_v_reg_dirty_5_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_5_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_5_write_1__SEL_1:
	v_reg_valid_5_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_5_write_1__SEL_2:
	v_reg_valid_5_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_5_D_IN = 4'd0;
    default: v_reg_valid_5_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_5_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1243 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1667 ;

  // register v_reg_valid_50
  always@(MUX_v_reg_dirty_50_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_50_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_50_write_1__SEL_1:
	v_reg_valid_50_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_50_write_1__SEL_2:
	v_reg_valid_50_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_50_D_IN = 4'd0;
    default: v_reg_valid_50_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_50_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1333 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1757 ;

  // register v_reg_valid_51
  always@(MUX_v_reg_dirty_51_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_51_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_51_write_1__SEL_1:
	v_reg_valid_51_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_51_write_1__SEL_2:
	v_reg_valid_51_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_51_D_IN = 4'd0;
    default: v_reg_valid_51_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_51_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1335 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1759 ;

  // register v_reg_valid_52
  always@(MUX_v_reg_dirty_52_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_52_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_52_write_1__SEL_1:
	v_reg_valid_52_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_52_write_1__SEL_2:
	v_reg_valid_52_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_52_D_IN = 4'd0;
    default: v_reg_valid_52_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_52_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1337 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1761 ;

  // register v_reg_valid_53
  always@(MUX_v_reg_dirty_53_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_53_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_53_write_1__SEL_1:
	v_reg_valid_53_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_53_write_1__SEL_2:
	v_reg_valid_53_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_53_D_IN = 4'd0;
    default: v_reg_valid_53_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_53_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1339 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1763 ;

  // register v_reg_valid_54
  always@(MUX_v_reg_dirty_54_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_54_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_54_write_1__SEL_1:
	v_reg_valid_54_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_54_write_1__SEL_2:
	v_reg_valid_54_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_54_D_IN = 4'd0;
    default: v_reg_valid_54_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_54_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1341 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1765 ;

  // register v_reg_valid_55
  always@(MUX_v_reg_dirty_55_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_55_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_55_write_1__SEL_1:
	v_reg_valid_55_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_55_write_1__SEL_2:
	v_reg_valid_55_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_55_D_IN = 4'd0;
    default: v_reg_valid_55_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_55_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1343 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1767 ;

  // register v_reg_valid_56
  always@(MUX_v_reg_dirty_56_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_56_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_56_write_1__SEL_1:
	v_reg_valid_56_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_56_write_1__SEL_2:
	v_reg_valid_56_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_56_D_IN = 4'd0;
    default: v_reg_valid_56_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_56_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1345 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1769 ;

  // register v_reg_valid_57
  always@(MUX_v_reg_dirty_57_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_57_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_57_write_1__SEL_1:
	v_reg_valid_57_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_57_write_1__SEL_2:
	v_reg_valid_57_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_57_D_IN = 4'd0;
    default: v_reg_valid_57_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_57_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1347 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1771 ;

  // register v_reg_valid_58
  always@(MUX_v_reg_dirty_58_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_58_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_58_write_1__SEL_1:
	v_reg_valid_58_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_58_write_1__SEL_2:
	v_reg_valid_58_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_58_D_IN = 4'd0;
    default: v_reg_valid_58_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_58_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1349 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1773 ;

  // register v_reg_valid_59
  always@(MUX_v_reg_dirty_59_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_59_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_59_write_1__SEL_1:
	v_reg_valid_59_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_59_write_1__SEL_2:
	v_reg_valid_59_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_59_D_IN = 4'd0;
    default: v_reg_valid_59_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_59_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1351 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1775 ;

  // register v_reg_valid_6
  always@(MUX_v_reg_dirty_6_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_6_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_6_write_1__SEL_1:
	v_reg_valid_6_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_6_write_1__SEL_2:
	v_reg_valid_6_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_6_D_IN = 4'd0;
    default: v_reg_valid_6_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_6_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1245 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1669 ;

  // register v_reg_valid_60
  always@(MUX_v_reg_dirty_60_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_60_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_60_write_1__SEL_1:
	v_reg_valid_60_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_60_write_1__SEL_2:
	v_reg_valid_60_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_60_D_IN = 4'd0;
    default: v_reg_valid_60_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_60_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1353 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1777 ;

  // register v_reg_valid_61
  always@(MUX_v_reg_dirty_61_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_61_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_61_write_1__SEL_1:
	v_reg_valid_61_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_61_write_1__SEL_2:
	v_reg_valid_61_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_61_D_IN = 4'd0;
    default: v_reg_valid_61_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_61_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1355 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1779 ;

  // register v_reg_valid_62
  always@(MUX_v_reg_dirty_62_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_62_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_62_write_1__SEL_1:
	v_reg_valid_62_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_62_write_1__SEL_2:
	v_reg_valid_62_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_62_D_IN = 4'd0;
    default: v_reg_valid_62_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_62_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1357 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1781 ;

  // register v_reg_valid_63
  always@(MUX_v_reg_dirty_63_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_63_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_63_write_1__SEL_1:
	v_reg_valid_63_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_63_write_1__SEL_2:
	v_reg_valid_63_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_63_D_IN = 4'd0;
    default: v_reg_valid_63_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_63_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1359 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1783 ;

  // register v_reg_valid_7
  always@(MUX_v_reg_dirty_7_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_7_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_7_write_1__SEL_1:
	v_reg_valid_7_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_7_write_1__SEL_2:
	v_reg_valid_7_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_7_D_IN = 4'd0;
    default: v_reg_valid_7_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_7_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1247 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1671 ;

  // register v_reg_valid_8
  always@(MUX_v_reg_dirty_8_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_8_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_8_write_1__SEL_1:
	v_reg_valid_8_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_8_write_1__SEL_2:
	v_reg_valid_8_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_8_D_IN = 4'd0;
    default: v_reg_valid_8_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_8_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1249 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1673 ;

  // register v_reg_valid_9
  always@(MUX_v_reg_dirty_9_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_9_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_9_write_1__SEL_1:
	v_reg_valid_9_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_9_write_1__SEL_2:
	v_reg_valid_9_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_9_D_IN = 4'd0;
    default: v_reg_valid_9_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_9_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1251 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1675 ;

  // submodule ff_core_request
  assign ff_core_request_D_IN = put_core_req_put ;
  assign ff_core_request_ENQ = EN_put_core_req_put ;
  assign ff_core_request_DEQ =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core ;
  assign ff_core_request_CLR = 1'b0 ;

  // submodule ff_pending_req
  assign ff_pending_req_D_IN =
	     { ff_from_tlb_rv_port1__read[13:11],
	       m_fillbuffer_mav_allocate_line,
	       !ma_cache_enable_c ||
	       ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 } ;
  assign ff_pending_req_ENQ = CAN_FIRE_RL_rl_send_memory_request ;
  assign ff_pending_req_DEQ =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     ff_read_mem_response_rv_port1__read[1] ||
	     WILL_FIRE_RL_rl_capture_io_response ;
  assign ff_pending_req_CLR = 1'b0 ;

  // submodule ff_read_mem_request
  assign ff_read_mem_request_D_IN =
	     { phyaddr__h103942,
	       x_burst_len__h103964,
	       burst_size__h103938,
	       !ma_cache_enable_c ||
	       ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 } ;
  assign ff_read_mem_request_ENQ = CAN_FIRE_RL_rl_send_memory_request ;
  assign ff_read_mem_request_DEQ = EN_get_read_mem_req_get ;
  assign ff_read_mem_request_CLR = 1'b0 ;

  // submodule ff_write_mem_request
  always@(MUX_ff_write_mem_request_enq_1__SEL_1 or
	  MUX_ff_write_mem_request_enq_1__VAL_1 or
	  MUX_ff_write_mem_request_enq_1__SEL_2 or
	  MUX_ff_write_mem_request_enq_1__VAL_2 or
	  MUX_ff_write_mem_request_enq_1__SEL_3 or
	  MUX_ff_write_mem_request_enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_write_mem_request_enq_1__SEL_1:
	  ff_write_mem_request_D_IN = MUX_ff_write_mem_request_enq_1__VAL_1;
      MUX_ff_write_mem_request_enq_1__SEL_2:
	  ff_write_mem_request_D_IN = MUX_ff_write_mem_request_enq_1__VAL_2;
      MUX_ff_write_mem_request_enq_1__SEL_3:
	  ff_write_mem_request_D_IN = MUX_ff_write_mem_request_enq_1__VAL_3;
      default: ff_write_mem_request_D_IN =
		   556'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign ff_write_mem_request_ENQ =
	     WILL_FIRE_RL_rl_fence_operation &&
	     SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173 &&
	     SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] &&
	     rg_release_readphase ||
	     EN_ma_perform_store &&
	     m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	     m_storebuffer_mav_store_to_commit[2] ;
  assign ff_write_mem_request_DEQ = EN_ma_write_mem_req_deq ;
  assign ff_write_mem_request_CLR = 1'b0 ;

  // submodule m_data
  assign m_data_ma_request_banks = 8'd255 ;
  assign m_data_ma_request_dataline = m_fillbuffer_mv_release_info[545:34] ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  set_index__h122600 or
	  MUX_m_data_ma_request_1__SEL_2 or
	  m_fillbuffer_mv_release_info or
	  rg_performing_replay or
	  rg_recent_req or
	  WILL_FIRE_RL_rl_fence_operation or _theResult____h21192)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_data_ma_request_index = set_index__h122600;
      MUX_m_data_ma_request_1__SEL_2:
	  m_data_ma_request_index = m_fillbuffer_mv_release_info[13:8];
      rg_performing_replay: m_data_ma_request_index = rg_recent_req;
      WILL_FIRE_RL_rl_fence_operation:
	  m_data_ma_request_index = _theResult____h21192[5:0];
      default: m_data_ma_request_index = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign m_data_ma_request_read_write =
	     MUX_m_data_ma_request_1__SEL_2 &&
	     MUX_m_data_ma_request_1__VAL_2 ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  MUX_m_data_ma_request_1__SEL_2 or
	  v__h105471 or
	  rg_performing_replay or WILL_FIRE_RL_rl_fence_operation)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_data_ma_request_way = 2'bxx /* unspecified value */ ;
      MUX_m_data_ma_request_1__SEL_2: m_data_ma_request_way = v__h105471;
      rg_performing_replay:
	  m_data_ma_request_way = 2'bxx /* unspecified value */ ;
      WILL_FIRE_RL_rl_fence_operation:
	  m_data_ma_request_way = 2'bxx /* unspecified value */ ;
      default: m_data_ma_request_way = 2'bxx /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_rl_ram_check or
	  ff_from_tlb_rv_port1__read or
	  WILL_FIRE_RL_rl_fence_operation or
	  WILL_FIRE_RL_rl_release_from_fillbuffer)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_ram_check:
	  m_data_mv_read_response_blocknum =
	      ff_from_tlb_rv_port1__read[13:11];
      WILL_FIRE_RL_rl_fence_operation:
	  m_data_mv_read_response_blocknum = 3'bxxx /* unspecified value */ ;
      WILL_FIRE_RL_rl_release_from_fillbuffer:
	  m_data_mv_read_response_blocknum = 3'bxxx /* unspecified value */ ;
      default: m_data_mv_read_response_blocknum =
		   3'bxxx /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_rl_ram_check or
	  lv_hitmask__h33388 or
	  WILL_FIRE_RL_rl_fence_operation or
	  MUX_m_data_mv_read_response_2__VAL_2 or
	  WILL_FIRE_RL_rl_release_from_fillbuffer or wayselect__h108894)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_ram_check:
	  m_data_mv_read_response_wayselect = lv_hitmask__h33388;
      WILL_FIRE_RL_rl_fence_operation:
	  m_data_mv_read_response_wayselect =
	      MUX_m_data_mv_read_response_2__VAL_2;
      WILL_FIRE_RL_rl_release_from_fillbuffer:
	  m_data_mv_read_response_wayselect = wayselect__h108894;
      default: m_data_mv_read_response_wayselect =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  assign m_data_EN_ma_request =
	     EN_put_core_req_put && ma_cache_enable_c ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] ||
	     rg_performing_replay ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // submodule m_fillbuffer
  assign m_fillbuffer_ma_fill_from_memory_fbindex =
	     ff_pending_req_D_OUT[3:1] ;
  assign m_fillbuffer_ma_fill_from_memory_init_bank =
	     ff_pending_req_D_OUT[6:4] ;
  assign m_fillbuffer_ma_fill_from_memory_mem_resp =
	     ff_read_mem_response_rv_port1__read[65:0] ;
  assign m_fillbuffer_ma_from_storebuffer_address =
	     m_storebuffer_mav_store_to_commit[166:135] ;
  assign m_fillbuffer_ma_from_storebuffer_dataword =
	     m_storebuffer_mav_store_to_commit[134:71] ;
  assign m_fillbuffer_ma_from_storebuffer_fbindex =
	     m_storebuffer_mav_store_to_commit[69:67] ;
  assign m_fillbuffer_ma_from_storebuffer_mask =
	     m_storebuffer_mav_store_to_commit[66:3] ;
  assign m_fillbuffer_mav_allocate_line_address =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 ?
	       ff_from_tlb_rv_port1__read[39:8] :
	       phyaddr__h103942 ;
  assign m_fillbuffer_mav_allocate_line_dataline =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 ?
	       m_data_mv_read_response[575:64] :
	       512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  ;
  assign m_fillbuffer_mav_allocate_line_dirty =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 ?
	       MUX_m_fillbuffer_mav_allocate_line_4__VAL_1 :
	       1'bx /* unspecified value */  ;
  assign m_fillbuffer_mav_allocate_line_from_ram =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 ;
  assign m_fillbuffer_mav_polling_response_address = phyaddr__h32974 ;
  assign m_fillbuffer_mav_polling_response_fbindex =
	     ff_pending_req_D_OUT[3:1] ;
  assign m_fillbuffer_mav_polling_response_fill = ff_pending_req_EMPTY_N ;
  assign m_fillbuffer_EN_mav_allocate_line =
	     WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign m_fillbuffer_EN_ma_fill_from_memory =
	     CAN_FIRE_RL_rl_fill_from_memory ;
  assign m_fillbuffer_EN_ma_from_storebuffer =
	     MUX_rg_globaldirty_write_1__SEL_2 ;
  assign m_fillbuffer_EN_ma_perform_release =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     (m_fillbuffer_mv_release_info[1] ||
	      !SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_EN_mav_polling_response =
	     CAN_FIRE_RL_rl_fillbuffer_check ;

  // submodule m_storebuffer
  assign m_storebuffer_ma_allocate_entry_address = phyaddr__h32974 ;
  assign m_storebuffer_ma_allocate_entry_atomic = x_wget__h4014 ;
  assign m_storebuffer_ma_allocate_entry_atomic_op =
	     ff_core_request_D_OUT[5:1] ;
  assign m_storebuffer_ma_allocate_entry_data = ff_core_request_D_OUT[69:6] ;
  assign m_storebuffer_ma_allocate_entry_epochs = ff_core_request_D_OUT[75] ;
  assign m_storebuffer_ma_allocate_entry_fbindex =
	     (IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	      2'd1 &&
	      !wr_fault_whas) ?
	       x__h36144[2:0] :
	       m_fillbuffer_mav_allocate_line ;
  assign m_storebuffer_ma_allocate_entry_io =
	     _wset_RL_rl_send_memory_request_EN_wr_total_io_reads_wget ;
  assign m_storebuffer_ma_allocate_entry_read_data =
	     lv_response_word__h39250 ;
  assign m_storebuffer_ma_allocate_entry_size = ff_core_request_D_OUT[71:70] ;
  assign m_storebuffer_mav_check_sb_hit_phyaddr = phyaddr__h32974 ;
  assign m_storebuffer_EN_mav_check_sb_hit = CAN_FIRE_RL_rl_response_to_core ;
  assign m_storebuffer_EN_ma_allocate_entry =
	     WILL_FIRE_RL_rl_response_to_core &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1386 &&
	     !ff_from_tlb_rv_port1__read[0] ;
  assign m_storebuffer_EN_mav_store_to_commit = EN_ma_perform_store ;

  // submodule m_tag
  assign m_tag_ma_request_address = m_fillbuffer_mv_release_info[33:2] ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  set_index__h122600 or
	  MUX_m_data_ma_request_1__SEL_2 or
	  m_fillbuffer_mv_release_info or
	  rg_performing_replay or
	  rg_recent_req or
	  WILL_FIRE_RL_rl_fence_operation or _theResult____h21192)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_tag_ma_request_index = set_index__h122600;
      MUX_m_data_ma_request_1__SEL_2:
	  m_tag_ma_request_index = m_fillbuffer_mv_release_info[13:8];
      rg_performing_replay: m_tag_ma_request_index = rg_recent_req;
      WILL_FIRE_RL_rl_fence_operation:
	  m_tag_ma_request_index = _theResult____h21192[5:0];
      default: m_tag_ma_request_index = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign m_tag_ma_request_read_write =
	     MUX_m_data_ma_request_1__SEL_2 &&
	     MUX_m_data_ma_request_1__VAL_2 ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  MUX_m_data_ma_request_1__SEL_2 or
	  v__h105471 or
	  rg_performing_replay or WILL_FIRE_RL_rl_fence_operation)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
      MUX_m_data_ma_request_1__SEL_2: m_tag_ma_request_way = v__h105471;
      rg_performing_replay:
	  m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
      WILL_FIRE_RL_rl_fence_operation:
	  m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
      default: m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_rl_ram_check or
	  ff_from_tlb_rv_port1__read or
	  WILL_FIRE_RL_rl_fence_operation or
	  WILL_FIRE_RL_rl_release_from_fillbuffer)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_ram_check:
	  m_tag_mv_read_response_address_in =
	      ff_from_tlb_rv_port1__read[39:8];
      WILL_FIRE_RL_rl_fence_operation:
	  m_tag_mv_read_response_address_in =
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      WILL_FIRE_RL_rl_release_from_fillbuffer:
	  m_tag_mv_read_response_address_in =
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      default: m_tag_mv_read_response_address_in =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_rl_ram_check or
	  WILL_FIRE_RL_rl_fence_operation or
	  rg_fence_way or
	  WILL_FIRE_RL_rl_release_from_fillbuffer or v__h105471)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_ram_check:
	  m_tag_mv_read_response_wayselect = 2'bxx /* unspecified value */ ;
      WILL_FIRE_RL_rl_fence_operation:
	  m_tag_mv_read_response_wayselect = rg_fence_way;
      WILL_FIRE_RL_rl_release_from_fillbuffer:
	  m_tag_mv_read_response_wayselect = v__h105471;
      default: m_tag_mv_read_response_wayselect =
		   2'bxx /* unspecified value */ ;
    endcase
  end
  assign m_tag_EN_ma_request =
	     EN_put_core_req_put && ma_cache_enable_c ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] ||
	     rg_performing_replay ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // remaining internal signals
  module_fn_pmp_lookup instance_fn_pmp_lookup_0(.fn_pmp_lookup_req({ phyaddr__h32974,
								     pmp_access__h33218 }),
						.fn_pmp_lookup_priv(ma_curr_priv_c),
						.fn_pmp_lookup_pmpcfg({ { pmp_cfg_3,
									  pmp_cfg_2 },
									pmp_cfg_1,
									pmp_cfg_0 }),
						.fn_pmp_lookup_pmpaddr({ { pmp_addr_3,
									   pmp_addr_2 },
									 pmp_addr_1,
									 pmp_addr_0 }),
						.fn_pmp_lookup(fn_pmp_lookup___d289));
  assign IF_ff_core_request_first__1_BITS_71_TO_70_103__ETC___d1121 =
	     lv_sign__h38914 & y__h92674 ;
  assign IF_ff_core_request_first__1_BITS_74_TO_73_79_E_ETC___d296 =
	     (ff_core_request_D_OUT[74:73] == 2'd0) ? 6'd5 : 6'd7 ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1002 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[19] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1010 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[18] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1019 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[17] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1027 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[16] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1036 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[15] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1044 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[14] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1053 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[13] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1061 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[12] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1070 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[11] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1078 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[10] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1087 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[9] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1095 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[8] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1160 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[6] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1168 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[5] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1177 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[4] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1185 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[3] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1194 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[2] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1202 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[1] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1211 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[0] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 =
	     CAN_FIRE_RL_rl_fillbuffer_check ? wr_fb_state_wget : 2'd2 ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d547 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[7] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d560 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[71] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d568 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[70] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d577 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[69] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d585 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[68] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d594 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[67] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d602 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[66] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d611 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[65] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d619 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[64] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d628 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[63] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d636 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[62] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d645 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[61] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d653 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[60] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d662 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[59] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d670 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[58] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d679 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[57] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d687 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[56] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d696 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[55] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d704 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[54] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d713 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[53] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d721 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[52] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d730 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[51] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d738 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[50] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d747 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[49] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d755 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[48] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d764 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[47] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d772 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[46] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d781 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[45] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d789 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[44] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d798 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[43] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d806 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[42] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d815 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[41] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d823 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[40] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d832 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[39] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d840 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[38] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d849 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[37] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d857 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[36] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d866 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[35] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d874 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[34] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d883 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[33] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d891 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[32] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d900 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[31] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d908 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[30] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d917 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[29] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d925 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[28] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d934 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[27] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d942 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[26] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d951 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[25] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d959 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[24] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d968 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[23] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d976 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[22] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d985 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[21] ;
  assign IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d993 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[20] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1000 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[19] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1008 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[18] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1017 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[17] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1025 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[16] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1034 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[15] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1042 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[14] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1051 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[13] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1059 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[12] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1068 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[11] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1076 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[10] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1085 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[9] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1093 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[8] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1158 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[6] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1166 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[5] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1175 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[4] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1183 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[3] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1192 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[2] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1200 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[1] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1209 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[0] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 =
	     CAN_FIRE_RL_rl_capture_io_response ? 2'd1 : 2'd2 ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d542 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[7] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d554 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d542 ||
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d547 ||
	     b__h37979 && wr_ram_response_wget[7] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d558 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[71] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d566 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[70] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d575 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[69] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d583 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[68] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d592 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[67] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d600 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[66] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d609 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[65] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d617 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[64] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d626 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[63] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d634 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[62] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d643 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[61] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d651 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[60] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d660 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[59] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d668 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[58] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d677 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[57] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d685 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[56] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d694 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[55] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d702 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[54] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d711 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[53] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d719 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[52] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d728 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[51] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d736 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[50] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d745 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[49] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d753 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[48] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d762 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[47] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d770 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[46] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d779 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[45] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d787 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[44] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d796 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[43] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d804 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[42] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d813 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[41] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d821 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[40] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d830 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[39] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d838 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[38] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d847 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[37] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d855 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[36] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d864 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[35] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d872 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[34] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d881 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[33] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d889 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[32] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d898 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[31] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d906 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[30] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d915 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[29] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d923 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[28] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d932 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[27] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d940 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[26] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d949 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[25] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d957 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[24] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d966 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[23] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d974 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[22] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d983 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[21] ;
  assign IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d991 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[20] ;
  assign IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d1413 =
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd0 &&
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	     2'd0 &&
	     !m_fillbuffer_mv_fbfull &&
	     !wr_fault_whas &&
	     !rg_handling_miss &&
	     !ff_core_request_D_OUT[76] &&
	     ff_pending_req_FULL_N ;
  assign IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 =
	     wr_ram_state_whas ? wr_ram_state_wget : 2'd2 ;
  assign NOT_0_CONCAT_m_tag_mv_read_response_ff_from_tl_ETC___d326 =
	     x__h35344 + y__h35345 > 3'd1 ;
  assign NOT_IF_wr_fb_state_whas__75_THEN_wr_fb_state_w_ETC___d1375 =
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 !=
	     2'd1 ||
	     wr_fault_whas ||
	     !wr_fb_response_wget[7] ;
  assign NOT_IF_wr_nc_state_whas__65_THEN_wr_nc_state_w_ETC___d1371 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 !=
	     2'd1 ||
	     wr_fault_whas ||
	     !wr_nc_response_wget[7] ;
  assign NOT_IF_wr_ram_state_whas__70_THEN_wr_ram_state_ETC___d1379 =
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 !=
	     2'd1 &&
	     !wr_fault_whas ||
	     !wr_ram_response_wget[7] ;
  assign NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1800 =
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) &&
	     valid__h105474 == 4'd15 &&
	     (dirty__h105475 == 4'd15 || dirty__h105475 == 4'd0) ;
  assign NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1386 =
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     NOT_IF_wr_nc_state_whas__65_THEN_wr_nc_state_w_ETC___d1371 &&
	     NOT_IF_wr_fb_state_whas__75_THEN_wr_fb_state_w_ETC___d1375 &&
	     NOT_IF_wr_ram_state_whas__70_THEN_wr_ram_state_ETC___d1379 ;
  assign NOT_ff_core_request_first__1_BIT_76_2_20_AND_N_ETC___d236 =
	     !ff_core_request_D_OUT[76] && !rg_handling_miss &&
	     !rg_performing_replay &&
	     !rg_polling_mode &&
	     !m_fillbuffer_mv_fbfull &&
	     !rg_release_readphase &&
	     !m_storebuffer_mv_sb_busy ;
  assign NOT_ff_core_request_notEmpty__494_495_AND_NOT__ETC___d1505 =
	     !ff_core_request_EMPTY_N && !EN_put_core_req_put &&
	     !m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1503 ;
  assign NOT_ff_hold_request_rv_port0__read__49_BIT_141_ETC___d459 =
	     !ff_hold_request_rv[141] && !ff_ptw_response_rv[72] &&
	     !ff_core_response_rv[72] &&
	     m_storebuffer_RDY_ma_allocate_entry &&
	     EN_ma_cache_enable ;
  assign NOT_m_fillbuffer_mv_release_info__94_BIT_1_621_ETC___d1799 =
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) &&
	     (rg_release_readphase ||
	      m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1503) ;
  assign SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d1620 =
	     dirty__h105475[v__h105471] ;
  assign SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173 =
	     bs__h18818[rg_fence_way] ;
  assign SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106 =
	     bs__h16792[rg_fence_way] ;
  assign SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1619 =
	     valid__h105474[v__h105471] ;
  assign SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 =
	     SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1619 &
	     SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d1620 ;
  assign _theResult____h21192 =
	     (rg_fence_way == 2'd3) ?
	       { 1'd0, rg_fence_set } + 7'd1 :
	       { 1'd0, rg_fence_set } ;
  assign b__h37979 =
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 ||
	     wr_fault_whas ;
  assign burst_size__h103938 =
	     (!ma_cache_enable_c ||
	      ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383) ?
	       { 1'd0, ff_core_request_D_OUT[71:70] } :
	       3'd3 ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1230 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd0 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1235 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd1 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1237 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd2 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1239 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd3 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1241 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd4 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1243 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd5 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1245 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd6 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1247 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd7 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1249 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd8 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1251 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd9 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1253 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd10 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1255 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd11 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1257 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd12 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1259 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd13 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1261 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd14 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1263 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd15 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1265 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd16 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1267 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd17 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1269 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd18 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1271 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd19 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1273 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd20 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1275 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd21 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1277 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd22 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1279 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd23 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1281 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd24 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1283 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd25 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1285 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd26 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1287 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd27 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1289 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd28 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1291 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd29 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1293 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd30 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1295 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd31 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1297 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd32 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1299 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd33 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1301 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd34 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1303 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd35 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1305 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd36 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1307 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd37 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1309 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd38 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1311 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd39 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1313 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd40 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1315 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd41 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1317 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd42 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1319 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd43 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1321 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd44 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1323 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd45 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1325 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd46 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1327 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd47 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1329 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd48 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1331 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd49 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1333 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd50 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1335 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd51 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1337 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd52 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1339 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd53 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1341 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd54 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1343 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd55 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1345 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd56 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1347 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd57 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1349 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd58 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1351 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd59 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1353 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd60 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1355 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd61 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1357 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd62 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_19_TO_14_7_ETC___d1359 =
	     ff_from_tlb_rv_port1__read[19:14] == 6'd63 &&
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 =
	     ff_from_tlb_rv_port1__read[39:8] < 32'h80000000 ;
  assign final_address__h16659 =
	     { m_tag_mv_read_response[31:12], rg_fence_set, 6'd0 } ;
  assign i__h95636 = CAN_FIRE_RL_rl_ram_check ? x__h34761[1:0] : 2'd0 ;
  assign lv_cause__h32976 =
	     (ff_from_tlb_rv_port1__read[7] ||
	      ff_from_tlb_rv_port1__read[0]) ?
	       ff_from_tlb_rv_port1__read[6:1] :
	       IF_ff_core_request_first__1_BITS_74_TO_73_79_E_ETC___d296 ;
  assign lv_evict_address__h108698 =
	     { m_tag_mv_read_response[31:12],
	       m_fillbuffer_mv_release_info[13:8],
	       6'd0 } ;
  assign lv_hitmask__h33388 =
	     m_tag_mv_read_response[35:32] &
	     SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 ;
  assign lv_response_cause__h33674 =
	     (!ff_from_tlb_rv_port1__read[7] &&
	      !ff_from_tlb_rv_port1__read[0] &&
	      fn_pmp_lookup___d289[6]) ?
	       fn_pmp_lookup___d289[5:0] :
	       lv_cause__h32976 ;
  assign lv_response_cause__h39252 =
	     { IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1158 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1160 ||
	       b__h37979 && wr_ram_response_wget[6],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1166 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1168 ||
	       b__h37979 && wr_ram_response_wget[5],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1175 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1177 ||
	       b__h37979 && wr_ram_response_wget[4],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1183 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1185 ||
	       b__h37979 && wr_ram_response_wget[3],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1192 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1194 ||
	       b__h37979 && wr_ram_response_wget[2],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1200 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1202 ||
	       b__h37979 && wr_ram_response_wget[1] } ;
  assign lv_response_epochs__h39253 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1209 ||
	     IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1211 ||
	     b__h37979 && wr_ram_response_wget[0] ;
  assign lv_response_word__h36120 =
	     m_fillbuffer_mav_polling_response[73:10] >> x__h33678 ;
  assign lv_response_word__h39250 =
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d554 ?
	       ff_core_request_D_OUT[140:77] :
	       lv_response_word__h39254 ;
  assign lv_response_word__h39254 = x__h87435 | y__h87436 ;
  assign m_fillbuffer_mv_fbfull__28_OR_rg_fence_stall_3_ETC___d1517 =
	     (m_fillbuffer_mv_fbfull || rg_fence_stall ||
	      NOT_ff_core_request_notEmpty__494_495_AND_NOT__ETC___d1505) &&
	     m_storebuffer_mv_sb_empty &&
	     !m_fillbuffer_mv_fbempty &&
	     (!CAN_FIRE_RL_rl_fillbuffer_check ||
	      !(ff_core_request_D_OUT[74:73] != 2'd0)) &&
	     m_fillbuffer_mv_fbhead_valid ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1503 =
	     m_fillbuffer_mv_release_info[13:8] == rg_recent_req ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1656 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd0 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1659 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd1 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1661 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd2 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1663 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd3 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1665 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd4 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1667 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd5 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1669 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd6 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1671 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd7 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1673 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd8 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1675 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd9 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1677 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd10 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1679 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd11 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1681 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd12 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1683 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd13 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1685 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd14 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1687 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd15 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1689 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd16 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1691 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd17 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1693 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd18 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1695 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd19 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1697 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd20 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1699 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd21 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1701 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd22 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1703 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd23 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1705 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd24 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1707 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd25 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1709 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd26 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1711 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd27 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1713 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd28 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1715 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd29 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1717 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd30 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1719 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd31 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1721 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd32 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1723 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd33 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1725 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd34 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1727 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd35 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1729 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd36 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1731 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd37 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1733 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd38 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1735 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd39 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1737 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd40 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1739 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd41 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1741 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd42 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1743 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd43 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1745 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd44 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1747 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd45 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1749 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd46 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1751 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd47 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1753 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd48 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1755 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd49 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1757 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd50 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1759 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd51 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1761 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd52 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1763 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd53 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1765 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd54 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1767 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd55 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1769 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd56 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1771 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd57 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1773 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd58 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1775 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd59 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1777 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd60 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1779 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd61 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1781 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd62 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1783 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd63 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	      rg_release_readphase) ;
  assign m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 =
	     m_storebuffer_mav_store_to_commit[70] ==
	     ma_perform_store_currepoch ;
  assign phyaddr__h103942 =
	     (!ma_cache_enable_c ||
	      ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383) ?
	       ff_from_tlb_rv_port1__read[39:8] :
	       { ff_from_tlb_rv_port1__read[39:11], 3'd0 } ;
  assign phyaddr__h32974 = ff_from_tlb_rv_port1__read[39:8] ;
  assign pmp_access__h33218 =
	     (ff_core_request_D_OUT[74:73] == 2'd0) ?
	       ff_core_request_D_OUT[74:73] :
	       2'd1 ;
  assign response_word__h104997 =
	     ff_read_mem_response_rv_port1__read[65:2] >> x__h105019 ;
  assign response_word__h33658 = m_data_mv_read_response[63:0] >> x__h33678 ;
  assign set_index__h122600 =
	     put_core_req_put[76] ? 6'd0 : put_core_req_put[88:83] ;
  assign v__h105471 =
	     (valid__h105474 == 4'd15 &&
	      (dirty__h105475 == 4'd15 || dirty__h105475 == 4'd0)) ?
	       SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 :
	       ((valid__h105474 == 4'd15 && dirty__h105475 != 4'd15) ?
		  (dirty__h105475[3] ?
		     (dirty__h105475[2] ?
			(dirty__h105475[1] ?
			   (dirty__h105475[0] ? 2'd3 : 2'd0) :
			   2'd1) :
			2'd2) :
		     2'd3) :
		  (valid__h105474[3] ?
		     (valid__h105474[2] ?
			(valid__h105474[1] ?
			   (valid__h105474[0] ? 2'd3 : 2'd0) :
			   2'd1) :
			2'd2) :
		     2'd3)) ;
  assign wayselect__h108894 = 4'd1 << v__h105471 ;
  assign wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d403 =
	     (ma_cache_enable_c &&
	      !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 ||
	      ff_core_request_D_OUT[74:73] == 2'd0) &&
	     m_fillbuffer_mav_polling_response[1] ;
  assign wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d414 =
	     (ma_cache_enable_c &&
	      !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 ||
	      ff_core_request_D_OUT[74:73] == 2'd0) &&
	     m_fillbuffer_mav_polling_response[1] &&
	     m_fillbuffer_mav_polling_response[0] ;
  assign wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d429 =
	     (ma_cache_enable_c &&
	      !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 ||
	      ff_core_request_D_OUT[74:73] == 2'd0) &&
	     m_fillbuffer_mav_polling_response[1] &&
	     !m_fillbuffer_mav_polling_response[0] ;
  assign wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d440 =
	     (ma_cache_enable_c &&
	      !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 ||
	      ff_core_request_D_OUT[74:73] == 2'd0) &&
	     !m_fillbuffer_mav_polling_response[1] ;
  assign wr_fault_whas__62_AND_wr_fault_wget__63_64_OR__ETC___d474 =
	     wr_fault_whas ||
	     IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	     2'd1 ||
	     IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 ==
	     2'd1 ;
  assign x__h105019 = { ff_core_request_D_OUT[79:77], 3'b0 } ;
  assign x__h27877 = rg_fence_way + 2'd1 ;
  assign x__h33678 = { ff_from_tlb_rv_port1__read[10:8], 3'b0 } ;
  assign x__h34761 =
	     lv_hitmask__h33388[0] ?
	       3'd0 :
	       (lv_hitmask__h33388[1] ?
		  3'd1 :
		  (lv_hitmask__h33388[2] ?
		     3'd2 :
		     (lv_hitmask__h33388[3] ? 3'd3 : 3'd4))) ;
  assign x__h35344 = x__h35356 + y__h35357 ;
  assign x__h35356 = x__h35368 + y__h35369 ;
  assign x__h35368 = { 2'd0, lv_hitmask__h33388[3] } ;
  assign x__h36144 =
	     m_fillbuffer_mav_polling_response[2] ?
	       4'd0 :
	       (m_fillbuffer_mav_polling_response[3] ?
		  4'd1 :
		  (m_fillbuffer_mav_polling_response[4] ?
		     4'd2 :
		     (m_fillbuffer_mav_polling_response[5] ?
			4'd3 :
			(m_fillbuffer_mav_polling_response[6] ?
			   4'd4 :
			   (m_fillbuffer_mav_polling_response[7] ?
			      4'd5 :
			      (m_fillbuffer_mav_polling_response[8] ?
				 4'd6 :
				 (m_fillbuffer_mav_polling_response[9] ?
				    4'd7 :
				    4'd8))))))) ;
  assign x__h37959 = x__h37971 + y__h37972 ;
  assign x__h37971 = { 1'd0, b__h37979 } ;
  assign x__h87435 = x__h87437 & y__h87438 ;
  assign x__h87437 = x__h87450 | y__h87451 ;
  assign x__h87450 =
	     m_storebuffer_mav_check_sb_hit[127:64] &
	     m_storebuffer_mav_check_sb_hit[63:0] ;
  assign x__h87452 = ~m_storebuffer_mav_check_sb_hit[127:64] ;
  assign x__h97057 = 4'd1 << i__h95636 ;
  assign x__read__h3745 = wr_total_io_reads_whas && x_wget__h3734 ;
  assign x__read__h3815 = wr_total_io_reads_whas && x_wget__h3804 ;
  assign x__read__h3885 =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_2 && x_wget__h3874 ;
  assign x__read__h3955 =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_2 && x_wget__h3944 ;
  assign x__read__h4025 =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_2 && x_wget__h4014 ;
  assign x_burst_len__h103964 =
	     (!ma_cache_enable_c ||
	      ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383) ?
	       8'd0 :
	       8'd7 ;
  assign x_burst_size__h124696 =
	     { 1'd0, m_storebuffer_mav_store_to_commit[1:0] } ;
  assign x_data__h124694 = {8{m_storebuffer_mav_store_to_commit[134:71]}} ;
  assign x_wget__h3734 = ff_core_request_D_OUT[74:73] == 2'd0 ;
  assign x_wget__h3804 = ff_core_request_D_OUT[74:73] == 2'd1 ;
  assign x_wget__h3874 = x_wget__h3734 ;
  assign x_wget__h3944 = x_wget__h3804 ;
  assign x_wget__h4014 = ff_core_request_D_OUT[74:73] == 2'd2 ;
  assign y__h114319 = ~wayselect__h108894 ;
  assign y__h35345 = { 2'd0, lv_hitmask__h33388[0] } ;
  assign y__h35357 = { 2'd0, lv_hitmask__h33388[1] } ;
  assign y__h35369 = { 2'd0, lv_hitmask__h33388[2] } ;
  assign y__h37960 =
	     { 1'd0,
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 ==
	       2'd1 &&
	       !wr_fault_whas } ;
  assign y__h37972 =
	     { 1'd0,
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 ==
	       2'd1 &&
	       !wr_fault_whas } ;
  assign y__h87436 = x__h87551 & y__h87552 ;
  assign y__h87451 = x__h87452 & y__h87453 ;
  assign y__h87453 =
	     { IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d558 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d560 ||
	       b__h37979 && wr_ram_response_wget[71],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d566 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d568 ||
	       b__h37979 && wr_ram_response_wget[70],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d575 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d577 ||
	       b__h37979 && wr_ram_response_wget[69],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d583 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d585 ||
	       b__h37979 && wr_ram_response_wget[68],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d592 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d594 ||
	       b__h37979 && wr_ram_response_wget[67],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d600 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d602 ||
	       b__h37979 && wr_ram_response_wget[66],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d609 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d611 ||
	       b__h37979 && wr_ram_response_wget[65],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d617 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d619 ||
	       b__h37979 && wr_ram_response_wget[64],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d626 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d628 ||
	       b__h37979 && wr_ram_response_wget[63],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d634 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d636 ||
	       b__h37979 && wr_ram_response_wget[62],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d643 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d645 ||
	       b__h37979 && wr_ram_response_wget[61],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d651 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d653 ||
	       b__h37979 && wr_ram_response_wget[60],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d660 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d662 ||
	       b__h37979 && wr_ram_response_wget[59],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d668 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d670 ||
	       b__h37979 && wr_ram_response_wget[58],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d677 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d679 ||
	       b__h37979 && wr_ram_response_wget[57],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d685 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d687 ||
	       b__h37979 && wr_ram_response_wget[56],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d694 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d696 ||
	       b__h37979 && wr_ram_response_wget[55],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d702 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d704 ||
	       b__h37979 && wr_ram_response_wget[54],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d711 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d713 ||
	       b__h37979 && wr_ram_response_wget[53],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d719 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d721 ||
	       b__h37979 && wr_ram_response_wget[52],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d728 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d730 ||
	       b__h37979 && wr_ram_response_wget[51],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d736 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d738 ||
	       b__h37979 && wr_ram_response_wget[50],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d745 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d747 ||
	       b__h37979 && wr_ram_response_wget[49],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d753 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d755 ||
	       b__h37979 && wr_ram_response_wget[48],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d762 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d764 ||
	       b__h37979 && wr_ram_response_wget[47],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d770 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d772 ||
	       b__h37979 && wr_ram_response_wget[46],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d779 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d781 ||
	       b__h37979 && wr_ram_response_wget[45],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d787 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d789 ||
	       b__h37979 && wr_ram_response_wget[44],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d796 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d798 ||
	       b__h37979 && wr_ram_response_wget[43],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d804 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d806 ||
	       b__h37979 && wr_ram_response_wget[42],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d813 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d815 ||
	       b__h37979 && wr_ram_response_wget[41],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d821 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d823 ||
	       b__h37979 && wr_ram_response_wget[40],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d830 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d832 ||
	       b__h37979 && wr_ram_response_wget[39],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d838 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d840 ||
	       b__h37979 && wr_ram_response_wget[38],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d847 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d849 ||
	       b__h37979 && wr_ram_response_wget[37],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d855 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d857 ||
	       b__h37979 && wr_ram_response_wget[36],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d864 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d866 ||
	       b__h37979 && wr_ram_response_wget[35],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d872 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d874 ||
	       b__h37979 && wr_ram_response_wget[34],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d881 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d883 ||
	       b__h37979 && wr_ram_response_wget[33],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d889 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d891 ||
	       b__h37979 && wr_ram_response_wget[32],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d898 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d900 ||
	       b__h37979 && wr_ram_response_wget[31],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d906 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d908 ||
	       b__h37979 && wr_ram_response_wget[30],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d915 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d917 ||
	       b__h37979 && wr_ram_response_wget[29],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d923 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d925 ||
	       b__h37979 && wr_ram_response_wget[28],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d932 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d934 ||
	       b__h37979 && wr_ram_response_wget[27],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d940 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d942 ||
	       b__h37979 && wr_ram_response_wget[26],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d949 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d951 ||
	       b__h37979 && wr_ram_response_wget[25],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d957 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d959 ||
	       b__h37979 && wr_ram_response_wget[24],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d966 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d968 ||
	       b__h37979 && wr_ram_response_wget[23],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d974 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d976 ||
	       b__h37979 && wr_ram_response_wget[22],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d983 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d985 ||
	       b__h37979 && wr_ram_response_wget[21],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d991 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d993 ||
	       b__h37979 && wr_ram_response_wget[20],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1000 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1002 ||
	       b__h37979 && wr_ram_response_wget[19],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1008 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1010 ||
	       b__h37979 && wr_ram_response_wget[18],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1017 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1019 ||
	       b__h37979 && wr_ram_response_wget[17],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1025 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1027 ||
	       b__h37979 && wr_ram_response_wget[16],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1034 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1036 ||
	       b__h37979 && wr_ram_response_wget[15],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1042 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1044 ||
	       b__h37979 && wr_ram_response_wget[14],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1051 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1053 ||
	       b__h37979 && wr_ram_response_wget[13],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1059 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1061 ||
	       b__h37979 && wr_ram_response_wget[12],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1068 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1070 ||
	       b__h37979 && wr_ram_response_wget[11],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1076 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1078 ||
	       b__h37979 && wr_ram_response_wget[10],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1085 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1087 ||
	       b__h37979 && wr_ram_response_wget[9],
	       IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d1093 ||
	       IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d1095 ||
	       b__h37979 && wr_ram_response_wget[8] } ;
  assign y__h87552 =
	     {64{IF_ff_core_request_first__1_BITS_71_TO_70_103__ETC___d1121}} ;
  assign y__h92674 = ~ff_core_request_D_OUT[72] ;
  assign y__h97073 = ~x__h97057 ;
  always@(ff_core_request_D_OUT)
  begin
    case (ff_core_request_D_OUT[71:70])
      2'b0: y__h87438 = 64'h00000000000000FF;
      2'b01: y__h87438 = 64'h000000000000FFFF;
      2'b10: y__h87438 = 64'h00000000FFFFFFFF;
      2'd3: y__h87438 = 64'hFFFFFFFFFFFFFFFF;
    endcase
  end
  always@(ff_core_request_D_OUT)
  begin
    case (ff_core_request_D_OUT[71:70])
      2'b0: x__h87551 = 64'hFFFFFFFFFFFFFF00;
      2'b01: x__h87551 = 64'hFFFFFFFFFFFF0000;
      2'b10: x__h87551 = 64'hFFFFFFFF00000000;
      2'd3: x__h87551 = 64'd0;
    endcase
  end
  always@(m_fillbuffer_mv_release_info or
	  v_reg_dirty_0 or
	  v_reg_dirty_1 or
	  v_reg_dirty_2 or
	  v_reg_dirty_3 or
	  v_reg_dirty_4 or
	  v_reg_dirty_5 or
	  v_reg_dirty_6 or
	  v_reg_dirty_7 or
	  v_reg_dirty_8 or
	  v_reg_dirty_9 or
	  v_reg_dirty_10 or
	  v_reg_dirty_11 or
	  v_reg_dirty_12 or
	  v_reg_dirty_13 or
	  v_reg_dirty_14 or
	  v_reg_dirty_15 or
	  v_reg_dirty_16 or
	  v_reg_dirty_17 or
	  v_reg_dirty_18 or
	  v_reg_dirty_19 or
	  v_reg_dirty_20 or
	  v_reg_dirty_21 or
	  v_reg_dirty_22 or
	  v_reg_dirty_23 or
	  v_reg_dirty_24 or
	  v_reg_dirty_25 or
	  v_reg_dirty_26 or
	  v_reg_dirty_27 or
	  v_reg_dirty_28 or
	  v_reg_dirty_29 or
	  v_reg_dirty_30 or
	  v_reg_dirty_31 or
	  v_reg_dirty_32 or
	  v_reg_dirty_33 or
	  v_reg_dirty_34 or
	  v_reg_dirty_35 or
	  v_reg_dirty_36 or
	  v_reg_dirty_37 or
	  v_reg_dirty_38 or
	  v_reg_dirty_39 or
	  v_reg_dirty_40 or
	  v_reg_dirty_41 or
	  v_reg_dirty_42 or
	  v_reg_dirty_43 or
	  v_reg_dirty_44 or
	  v_reg_dirty_45 or
	  v_reg_dirty_46 or
	  v_reg_dirty_47 or
	  v_reg_dirty_48 or
	  v_reg_dirty_49 or
	  v_reg_dirty_50 or
	  v_reg_dirty_51 or
	  v_reg_dirty_52 or
	  v_reg_dirty_53 or
	  v_reg_dirty_54 or
	  v_reg_dirty_55 or
	  v_reg_dirty_56 or
	  v_reg_dirty_57 or
	  v_reg_dirty_58 or
	  v_reg_dirty_59 or
	  v_reg_dirty_60 or
	  v_reg_dirty_61 or v_reg_dirty_62 or v_reg_dirty_63)
  begin
    case (m_fillbuffer_mv_release_info[13:8])
      6'd0: dirty__h105475 = v_reg_dirty_0;
      6'd1: dirty__h105475 = v_reg_dirty_1;
      6'd2: dirty__h105475 = v_reg_dirty_2;
      6'd3: dirty__h105475 = v_reg_dirty_3;
      6'd4: dirty__h105475 = v_reg_dirty_4;
      6'd5: dirty__h105475 = v_reg_dirty_5;
      6'd6: dirty__h105475 = v_reg_dirty_6;
      6'd7: dirty__h105475 = v_reg_dirty_7;
      6'd8: dirty__h105475 = v_reg_dirty_8;
      6'd9: dirty__h105475 = v_reg_dirty_9;
      6'd10: dirty__h105475 = v_reg_dirty_10;
      6'd11: dirty__h105475 = v_reg_dirty_11;
      6'd12: dirty__h105475 = v_reg_dirty_12;
      6'd13: dirty__h105475 = v_reg_dirty_13;
      6'd14: dirty__h105475 = v_reg_dirty_14;
      6'd15: dirty__h105475 = v_reg_dirty_15;
      6'd16: dirty__h105475 = v_reg_dirty_16;
      6'd17: dirty__h105475 = v_reg_dirty_17;
      6'd18: dirty__h105475 = v_reg_dirty_18;
      6'd19: dirty__h105475 = v_reg_dirty_19;
      6'd20: dirty__h105475 = v_reg_dirty_20;
      6'd21: dirty__h105475 = v_reg_dirty_21;
      6'd22: dirty__h105475 = v_reg_dirty_22;
      6'd23: dirty__h105475 = v_reg_dirty_23;
      6'd24: dirty__h105475 = v_reg_dirty_24;
      6'd25: dirty__h105475 = v_reg_dirty_25;
      6'd26: dirty__h105475 = v_reg_dirty_26;
      6'd27: dirty__h105475 = v_reg_dirty_27;
      6'd28: dirty__h105475 = v_reg_dirty_28;
      6'd29: dirty__h105475 = v_reg_dirty_29;
      6'd30: dirty__h105475 = v_reg_dirty_30;
      6'd31: dirty__h105475 = v_reg_dirty_31;
      6'd32: dirty__h105475 = v_reg_dirty_32;
      6'd33: dirty__h105475 = v_reg_dirty_33;
      6'd34: dirty__h105475 = v_reg_dirty_34;
      6'd35: dirty__h105475 = v_reg_dirty_35;
      6'd36: dirty__h105475 = v_reg_dirty_36;
      6'd37: dirty__h105475 = v_reg_dirty_37;
      6'd38: dirty__h105475 = v_reg_dirty_38;
      6'd39: dirty__h105475 = v_reg_dirty_39;
      6'd40: dirty__h105475 = v_reg_dirty_40;
      6'd41: dirty__h105475 = v_reg_dirty_41;
      6'd42: dirty__h105475 = v_reg_dirty_42;
      6'd43: dirty__h105475 = v_reg_dirty_43;
      6'd44: dirty__h105475 = v_reg_dirty_44;
      6'd45: dirty__h105475 = v_reg_dirty_45;
      6'd46: dirty__h105475 = v_reg_dirty_46;
      6'd47: dirty__h105475 = v_reg_dirty_47;
      6'd48: dirty__h105475 = v_reg_dirty_48;
      6'd49: dirty__h105475 = v_reg_dirty_49;
      6'd50: dirty__h105475 = v_reg_dirty_50;
      6'd51: dirty__h105475 = v_reg_dirty_51;
      6'd52: dirty__h105475 = v_reg_dirty_52;
      6'd53: dirty__h105475 = v_reg_dirty_53;
      6'd54: dirty__h105475 = v_reg_dirty_54;
      6'd55: dirty__h105475 = v_reg_dirty_55;
      6'd56: dirty__h105475 = v_reg_dirty_56;
      6'd57: dirty__h105475 = v_reg_dirty_57;
      6'd58: dirty__h105475 = v_reg_dirty_58;
      6'd59: dirty__h105475 = v_reg_dirty_59;
      6'd60: dirty__h105475 = v_reg_dirty_60;
      6'd61: dirty__h105475 = v_reg_dirty_61;
      6'd62: dirty__h105475 = v_reg_dirty_62;
      6'd63: dirty__h105475 = v_reg_dirty_63;
    endcase
  end
  always@(m_fillbuffer_mv_release_info or
	  v_reg_valid_0 or
	  v_reg_valid_1 or
	  v_reg_valid_2 or
	  v_reg_valid_3 or
	  v_reg_valid_4 or
	  v_reg_valid_5 or
	  v_reg_valid_6 or
	  v_reg_valid_7 or
	  v_reg_valid_8 or
	  v_reg_valid_9 or
	  v_reg_valid_10 or
	  v_reg_valid_11 or
	  v_reg_valid_12 or
	  v_reg_valid_13 or
	  v_reg_valid_14 or
	  v_reg_valid_15 or
	  v_reg_valid_16 or
	  v_reg_valid_17 or
	  v_reg_valid_18 or
	  v_reg_valid_19 or
	  v_reg_valid_20 or
	  v_reg_valid_21 or
	  v_reg_valid_22 or
	  v_reg_valid_23 or
	  v_reg_valid_24 or
	  v_reg_valid_25 or
	  v_reg_valid_26 or
	  v_reg_valid_27 or
	  v_reg_valid_28 or
	  v_reg_valid_29 or
	  v_reg_valid_30 or
	  v_reg_valid_31 or
	  v_reg_valid_32 or
	  v_reg_valid_33 or
	  v_reg_valid_34 or
	  v_reg_valid_35 or
	  v_reg_valid_36 or
	  v_reg_valid_37 or
	  v_reg_valid_38 or
	  v_reg_valid_39 or
	  v_reg_valid_40 or
	  v_reg_valid_41 or
	  v_reg_valid_42 or
	  v_reg_valid_43 or
	  v_reg_valid_44 or
	  v_reg_valid_45 or
	  v_reg_valid_46 or
	  v_reg_valid_47 or
	  v_reg_valid_48 or
	  v_reg_valid_49 or
	  v_reg_valid_50 or
	  v_reg_valid_51 or
	  v_reg_valid_52 or
	  v_reg_valid_53 or
	  v_reg_valid_54 or
	  v_reg_valid_55 or
	  v_reg_valid_56 or
	  v_reg_valid_57 or
	  v_reg_valid_58 or
	  v_reg_valid_59 or
	  v_reg_valid_60 or
	  v_reg_valid_61 or v_reg_valid_62 or v_reg_valid_63)
  begin
    case (m_fillbuffer_mv_release_info[13:8])
      6'd0: valid__h105474 = v_reg_valid_0;
      6'd1: valid__h105474 = v_reg_valid_1;
      6'd2: valid__h105474 = v_reg_valid_2;
      6'd3: valid__h105474 = v_reg_valid_3;
      6'd4: valid__h105474 = v_reg_valid_4;
      6'd5: valid__h105474 = v_reg_valid_5;
      6'd6: valid__h105474 = v_reg_valid_6;
      6'd7: valid__h105474 = v_reg_valid_7;
      6'd8: valid__h105474 = v_reg_valid_8;
      6'd9: valid__h105474 = v_reg_valid_9;
      6'd10: valid__h105474 = v_reg_valid_10;
      6'd11: valid__h105474 = v_reg_valid_11;
      6'd12: valid__h105474 = v_reg_valid_12;
      6'd13: valid__h105474 = v_reg_valid_13;
      6'd14: valid__h105474 = v_reg_valid_14;
      6'd15: valid__h105474 = v_reg_valid_15;
      6'd16: valid__h105474 = v_reg_valid_16;
      6'd17: valid__h105474 = v_reg_valid_17;
      6'd18: valid__h105474 = v_reg_valid_18;
      6'd19: valid__h105474 = v_reg_valid_19;
      6'd20: valid__h105474 = v_reg_valid_20;
      6'd21: valid__h105474 = v_reg_valid_21;
      6'd22: valid__h105474 = v_reg_valid_22;
      6'd23: valid__h105474 = v_reg_valid_23;
      6'd24: valid__h105474 = v_reg_valid_24;
      6'd25: valid__h105474 = v_reg_valid_25;
      6'd26: valid__h105474 = v_reg_valid_26;
      6'd27: valid__h105474 = v_reg_valid_27;
      6'd28: valid__h105474 = v_reg_valid_28;
      6'd29: valid__h105474 = v_reg_valid_29;
      6'd30: valid__h105474 = v_reg_valid_30;
      6'd31: valid__h105474 = v_reg_valid_31;
      6'd32: valid__h105474 = v_reg_valid_32;
      6'd33: valid__h105474 = v_reg_valid_33;
      6'd34: valid__h105474 = v_reg_valid_34;
      6'd35: valid__h105474 = v_reg_valid_35;
      6'd36: valid__h105474 = v_reg_valid_36;
      6'd37: valid__h105474 = v_reg_valid_37;
      6'd38: valid__h105474 = v_reg_valid_38;
      6'd39: valid__h105474 = v_reg_valid_39;
      6'd40: valid__h105474 = v_reg_valid_40;
      6'd41: valid__h105474 = v_reg_valid_41;
      6'd42: valid__h105474 = v_reg_valid_42;
      6'd43: valid__h105474 = v_reg_valid_43;
      6'd44: valid__h105474 = v_reg_valid_44;
      6'd45: valid__h105474 = v_reg_valid_45;
      6'd46: valid__h105474 = v_reg_valid_46;
      6'd47: valid__h105474 = v_reg_valid_47;
      6'd48: valid__h105474 = v_reg_valid_48;
      6'd49: valid__h105474 = v_reg_valid_49;
      6'd50: valid__h105474 = v_reg_valid_50;
      6'd51: valid__h105474 = v_reg_valid_51;
      6'd52: valid__h105474 = v_reg_valid_52;
      6'd53: valid__h105474 = v_reg_valid_53;
      6'd54: valid__h105474 = v_reg_valid_54;
      6'd55: valid__h105474 = v_reg_valid_55;
      6'd56: valid__h105474 = v_reg_valid_56;
      6'd57: valid__h105474 = v_reg_valid_57;
      6'd58: valid__h105474 = v_reg_valid_58;
      6'd59: valid__h105474 = v_reg_valid_59;
      6'd60: valid__h105474 = v_reg_valid_60;
      6'd61: valid__h105474 = v_reg_valid_61;
      6'd62: valid__h105474 = v_reg_valid_62;
      6'd63: valid__h105474 = v_reg_valid_63;
    endcase
  end
  always@(rg_fence_set or
	  v_reg_dirty_0 or
	  v_reg_dirty_1 or
	  v_reg_dirty_2 or
	  v_reg_dirty_3 or
	  v_reg_dirty_4 or
	  v_reg_dirty_5 or
	  v_reg_dirty_6 or
	  v_reg_dirty_7 or
	  v_reg_dirty_8 or
	  v_reg_dirty_9 or
	  v_reg_dirty_10 or
	  v_reg_dirty_11 or
	  v_reg_dirty_12 or
	  v_reg_dirty_13 or
	  v_reg_dirty_14 or
	  v_reg_dirty_15 or
	  v_reg_dirty_16 or
	  v_reg_dirty_17 or
	  v_reg_dirty_18 or
	  v_reg_dirty_19 or
	  v_reg_dirty_20 or
	  v_reg_dirty_21 or
	  v_reg_dirty_22 or
	  v_reg_dirty_23 or
	  v_reg_dirty_24 or
	  v_reg_dirty_25 or
	  v_reg_dirty_26 or
	  v_reg_dirty_27 or
	  v_reg_dirty_28 or
	  v_reg_dirty_29 or
	  v_reg_dirty_30 or
	  v_reg_dirty_31 or
	  v_reg_dirty_32 or
	  v_reg_dirty_33 or
	  v_reg_dirty_34 or
	  v_reg_dirty_35 or
	  v_reg_dirty_36 or
	  v_reg_dirty_37 or
	  v_reg_dirty_38 or
	  v_reg_dirty_39 or
	  v_reg_dirty_40 or
	  v_reg_dirty_41 or
	  v_reg_dirty_42 or
	  v_reg_dirty_43 or
	  v_reg_dirty_44 or
	  v_reg_dirty_45 or
	  v_reg_dirty_46 or
	  v_reg_dirty_47 or
	  v_reg_dirty_48 or
	  v_reg_dirty_49 or
	  v_reg_dirty_50 or
	  v_reg_dirty_51 or
	  v_reg_dirty_52 or
	  v_reg_dirty_53 or
	  v_reg_dirty_54 or
	  v_reg_dirty_55 or
	  v_reg_dirty_56 or
	  v_reg_dirty_57 or
	  v_reg_dirty_58 or
	  v_reg_dirty_59 or
	  v_reg_dirty_60 or
	  v_reg_dirty_61 or v_reg_dirty_62 or v_reg_dirty_63)
  begin
    case (rg_fence_set)
      6'd0: bs__h18818 = v_reg_dirty_0;
      6'd1: bs__h18818 = v_reg_dirty_1;
      6'd2: bs__h18818 = v_reg_dirty_2;
      6'd3: bs__h18818 = v_reg_dirty_3;
      6'd4: bs__h18818 = v_reg_dirty_4;
      6'd5: bs__h18818 = v_reg_dirty_5;
      6'd6: bs__h18818 = v_reg_dirty_6;
      6'd7: bs__h18818 = v_reg_dirty_7;
      6'd8: bs__h18818 = v_reg_dirty_8;
      6'd9: bs__h18818 = v_reg_dirty_9;
      6'd10: bs__h18818 = v_reg_dirty_10;
      6'd11: bs__h18818 = v_reg_dirty_11;
      6'd12: bs__h18818 = v_reg_dirty_12;
      6'd13: bs__h18818 = v_reg_dirty_13;
      6'd14: bs__h18818 = v_reg_dirty_14;
      6'd15: bs__h18818 = v_reg_dirty_15;
      6'd16: bs__h18818 = v_reg_dirty_16;
      6'd17: bs__h18818 = v_reg_dirty_17;
      6'd18: bs__h18818 = v_reg_dirty_18;
      6'd19: bs__h18818 = v_reg_dirty_19;
      6'd20: bs__h18818 = v_reg_dirty_20;
      6'd21: bs__h18818 = v_reg_dirty_21;
      6'd22: bs__h18818 = v_reg_dirty_22;
      6'd23: bs__h18818 = v_reg_dirty_23;
      6'd24: bs__h18818 = v_reg_dirty_24;
      6'd25: bs__h18818 = v_reg_dirty_25;
      6'd26: bs__h18818 = v_reg_dirty_26;
      6'd27: bs__h18818 = v_reg_dirty_27;
      6'd28: bs__h18818 = v_reg_dirty_28;
      6'd29: bs__h18818 = v_reg_dirty_29;
      6'd30: bs__h18818 = v_reg_dirty_30;
      6'd31: bs__h18818 = v_reg_dirty_31;
      6'd32: bs__h18818 = v_reg_dirty_32;
      6'd33: bs__h18818 = v_reg_dirty_33;
      6'd34: bs__h18818 = v_reg_dirty_34;
      6'd35: bs__h18818 = v_reg_dirty_35;
      6'd36: bs__h18818 = v_reg_dirty_36;
      6'd37: bs__h18818 = v_reg_dirty_37;
      6'd38: bs__h18818 = v_reg_dirty_38;
      6'd39: bs__h18818 = v_reg_dirty_39;
      6'd40: bs__h18818 = v_reg_dirty_40;
      6'd41: bs__h18818 = v_reg_dirty_41;
      6'd42: bs__h18818 = v_reg_dirty_42;
      6'd43: bs__h18818 = v_reg_dirty_43;
      6'd44: bs__h18818 = v_reg_dirty_44;
      6'd45: bs__h18818 = v_reg_dirty_45;
      6'd46: bs__h18818 = v_reg_dirty_46;
      6'd47: bs__h18818 = v_reg_dirty_47;
      6'd48: bs__h18818 = v_reg_dirty_48;
      6'd49: bs__h18818 = v_reg_dirty_49;
      6'd50: bs__h18818 = v_reg_dirty_50;
      6'd51: bs__h18818 = v_reg_dirty_51;
      6'd52: bs__h18818 = v_reg_dirty_52;
      6'd53: bs__h18818 = v_reg_dirty_53;
      6'd54: bs__h18818 = v_reg_dirty_54;
      6'd55: bs__h18818 = v_reg_dirty_55;
      6'd56: bs__h18818 = v_reg_dirty_56;
      6'd57: bs__h18818 = v_reg_dirty_57;
      6'd58: bs__h18818 = v_reg_dirty_58;
      6'd59: bs__h18818 = v_reg_dirty_59;
      6'd60: bs__h18818 = v_reg_dirty_60;
      6'd61: bs__h18818 = v_reg_dirty_61;
      6'd62: bs__h18818 = v_reg_dirty_62;
      6'd63: bs__h18818 = v_reg_dirty_63;
    endcase
  end
  always@(rg_fence_set or
	  v_reg_valid_0 or
	  v_reg_valid_1 or
	  v_reg_valid_2 or
	  v_reg_valid_3 or
	  v_reg_valid_4 or
	  v_reg_valid_5 or
	  v_reg_valid_6 or
	  v_reg_valid_7 or
	  v_reg_valid_8 or
	  v_reg_valid_9 or
	  v_reg_valid_10 or
	  v_reg_valid_11 or
	  v_reg_valid_12 or
	  v_reg_valid_13 or
	  v_reg_valid_14 or
	  v_reg_valid_15 or
	  v_reg_valid_16 or
	  v_reg_valid_17 or
	  v_reg_valid_18 or
	  v_reg_valid_19 or
	  v_reg_valid_20 or
	  v_reg_valid_21 or
	  v_reg_valid_22 or
	  v_reg_valid_23 or
	  v_reg_valid_24 or
	  v_reg_valid_25 or
	  v_reg_valid_26 or
	  v_reg_valid_27 or
	  v_reg_valid_28 or
	  v_reg_valid_29 or
	  v_reg_valid_30 or
	  v_reg_valid_31 or
	  v_reg_valid_32 or
	  v_reg_valid_33 or
	  v_reg_valid_34 or
	  v_reg_valid_35 or
	  v_reg_valid_36 or
	  v_reg_valid_37 or
	  v_reg_valid_38 or
	  v_reg_valid_39 or
	  v_reg_valid_40 or
	  v_reg_valid_41 or
	  v_reg_valid_42 or
	  v_reg_valid_43 or
	  v_reg_valid_44 or
	  v_reg_valid_45 or
	  v_reg_valid_46 or
	  v_reg_valid_47 or
	  v_reg_valid_48 or
	  v_reg_valid_49 or
	  v_reg_valid_50 or
	  v_reg_valid_51 or
	  v_reg_valid_52 or
	  v_reg_valid_53 or
	  v_reg_valid_54 or
	  v_reg_valid_55 or
	  v_reg_valid_56 or
	  v_reg_valid_57 or
	  v_reg_valid_58 or
	  v_reg_valid_59 or
	  v_reg_valid_60 or
	  v_reg_valid_61 or v_reg_valid_62 or v_reg_valid_63)
  begin
    case (rg_fence_set)
      6'd0: bs__h16792 = v_reg_valid_0;
      6'd1: bs__h16792 = v_reg_valid_1;
      6'd2: bs__h16792 = v_reg_valid_2;
      6'd3: bs__h16792 = v_reg_valid_3;
      6'd4: bs__h16792 = v_reg_valid_4;
      6'd5: bs__h16792 = v_reg_valid_5;
      6'd6: bs__h16792 = v_reg_valid_6;
      6'd7: bs__h16792 = v_reg_valid_7;
      6'd8: bs__h16792 = v_reg_valid_8;
      6'd9: bs__h16792 = v_reg_valid_9;
      6'd10: bs__h16792 = v_reg_valid_10;
      6'd11: bs__h16792 = v_reg_valid_11;
      6'd12: bs__h16792 = v_reg_valid_12;
      6'd13: bs__h16792 = v_reg_valid_13;
      6'd14: bs__h16792 = v_reg_valid_14;
      6'd15: bs__h16792 = v_reg_valid_15;
      6'd16: bs__h16792 = v_reg_valid_16;
      6'd17: bs__h16792 = v_reg_valid_17;
      6'd18: bs__h16792 = v_reg_valid_18;
      6'd19: bs__h16792 = v_reg_valid_19;
      6'd20: bs__h16792 = v_reg_valid_20;
      6'd21: bs__h16792 = v_reg_valid_21;
      6'd22: bs__h16792 = v_reg_valid_22;
      6'd23: bs__h16792 = v_reg_valid_23;
      6'd24: bs__h16792 = v_reg_valid_24;
      6'd25: bs__h16792 = v_reg_valid_25;
      6'd26: bs__h16792 = v_reg_valid_26;
      6'd27: bs__h16792 = v_reg_valid_27;
      6'd28: bs__h16792 = v_reg_valid_28;
      6'd29: bs__h16792 = v_reg_valid_29;
      6'd30: bs__h16792 = v_reg_valid_30;
      6'd31: bs__h16792 = v_reg_valid_31;
      6'd32: bs__h16792 = v_reg_valid_32;
      6'd33: bs__h16792 = v_reg_valid_33;
      6'd34: bs__h16792 = v_reg_valid_34;
      6'd35: bs__h16792 = v_reg_valid_35;
      6'd36: bs__h16792 = v_reg_valid_36;
      6'd37: bs__h16792 = v_reg_valid_37;
      6'd38: bs__h16792 = v_reg_valid_38;
      6'd39: bs__h16792 = v_reg_valid_39;
      6'd40: bs__h16792 = v_reg_valid_40;
      6'd41: bs__h16792 = v_reg_valid_41;
      6'd42: bs__h16792 = v_reg_valid_42;
      6'd43: bs__h16792 = v_reg_valid_43;
      6'd44: bs__h16792 = v_reg_valid_44;
      6'd45: bs__h16792 = v_reg_valid_45;
      6'd46: bs__h16792 = v_reg_valid_46;
      6'd47: bs__h16792 = v_reg_valid_47;
      6'd48: bs__h16792 = v_reg_valid_48;
      6'd49: bs__h16792 = v_reg_valid_49;
      6'd50: bs__h16792 = v_reg_valid_50;
      6'd51: bs__h16792 = v_reg_valid_51;
      6'd52: bs__h16792 = v_reg_valid_52;
      6'd53: bs__h16792 = v_reg_valid_53;
      6'd54: bs__h16792 = v_reg_valid_54;
      6'd55: bs__h16792 = v_reg_valid_55;
      6'd56: bs__h16792 = v_reg_valid_56;
      6'd57: bs__h16792 = v_reg_valid_57;
      6'd58: bs__h16792 = v_reg_valid_58;
      6'd59: bs__h16792 = v_reg_valid_59;
      6'd60: bs__h16792 = v_reg_valid_60;
      6'd61: bs__h16792 = v_reg_valid_61;
      6'd62: bs__h16792 = v_reg_valid_62;
      6'd63: bs__h16792 = v_reg_valid_63;
    endcase
  end
  always@(m_fillbuffer_mv_release_info or
	  replacement_v_count_0 or
	  replacement_v_count_1 or
	  replacement_v_count_2 or
	  replacement_v_count_3 or
	  replacement_v_count_4 or
	  replacement_v_count_5 or
	  replacement_v_count_6 or
	  replacement_v_count_7 or
	  replacement_v_count_8 or
	  replacement_v_count_9 or
	  replacement_v_count_10 or
	  replacement_v_count_11 or
	  replacement_v_count_12 or
	  replacement_v_count_13 or
	  replacement_v_count_14 or
	  replacement_v_count_15 or
	  replacement_v_count_16 or
	  replacement_v_count_17 or
	  replacement_v_count_18 or
	  replacement_v_count_19 or
	  replacement_v_count_20 or
	  replacement_v_count_21 or
	  replacement_v_count_22 or
	  replacement_v_count_23 or
	  replacement_v_count_24 or
	  replacement_v_count_25 or
	  replacement_v_count_26 or
	  replacement_v_count_27 or
	  replacement_v_count_28 or
	  replacement_v_count_29 or
	  replacement_v_count_30 or
	  replacement_v_count_31 or
	  replacement_v_count_32 or
	  replacement_v_count_33 or
	  replacement_v_count_34 or
	  replacement_v_count_35 or
	  replacement_v_count_36 or
	  replacement_v_count_37 or
	  replacement_v_count_38 or
	  replacement_v_count_39 or
	  replacement_v_count_40 or
	  replacement_v_count_41 or
	  replacement_v_count_42 or
	  replacement_v_count_43 or
	  replacement_v_count_44 or
	  replacement_v_count_45 or
	  replacement_v_count_46 or
	  replacement_v_count_47 or
	  replacement_v_count_48 or
	  replacement_v_count_49 or
	  replacement_v_count_50 or
	  replacement_v_count_51 or
	  replacement_v_count_52 or
	  replacement_v_count_53 or
	  replacement_v_count_54 or
	  replacement_v_count_55 or
	  replacement_v_count_56 or
	  replacement_v_count_57 or
	  replacement_v_count_58 or
	  replacement_v_count_59 or
	  replacement_v_count_60 or
	  replacement_v_count_61 or
	  replacement_v_count_62 or replacement_v_count_63)
  begin
    case (m_fillbuffer_mv_release_info[13:8])
      6'd0:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_0;
      6'd1:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_1;
      6'd2:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_2;
      6'd3:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_3;
      6'd4:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_4;
      6'd5:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_5;
      6'd6:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_6;
      6'd7:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_7;
      6'd8:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_8;
      6'd9:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_9;
      6'd10:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_10;
      6'd11:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_11;
      6'd12:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_12;
      6'd13:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_13;
      6'd14:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_14;
      6'd15:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_15;
      6'd16:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_16;
      6'd17:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_17;
      6'd18:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_18;
      6'd19:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_19;
      6'd20:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_20;
      6'd21:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_21;
      6'd22:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_22;
      6'd23:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_23;
      6'd24:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_24;
      6'd25:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_25;
      6'd26:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_26;
      6'd27:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_27;
      6'd28:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_28;
      6'd29:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_29;
      6'd30:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_30;
      6'd31:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_31;
      6'd32:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_32;
      6'd33:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_33;
      6'd34:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_34;
      6'd35:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_35;
      6'd36:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_36;
      6'd37:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_37;
      6'd38:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_38;
      6'd39:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_39;
      6'd40:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_40;
      6'd41:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_41;
      6'd42:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_42;
      6'd43:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_43;
      6'd44:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_44;
      6'd45:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_45;
      6'd46:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_46;
      6'd47:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_47;
      6'd48:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_48;
      6'd49:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_49;
      6'd50:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_50;
      6'd51:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_51;
      6'd52:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_52;
      6'd53:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_53;
      6'd54:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_54;
      6'd55:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_55;
      6'd56:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_56;
      6'd57:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_57;
      6'd58:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_58;
      6'd59:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_59;
      6'd60:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_60;
      6'd61:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_61;
      6'd62:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_62;
      6'd63:
	  SEL_ARR_replacement_v_count_0_533_replacement__ETC___d1598 =
	      replacement_v_count_63;
    endcase
  end
  always@(ff_from_tlb_rv_port1__read or
	  v_reg_dirty_0 or
	  v_reg_dirty_1 or
	  v_reg_dirty_2 or
	  v_reg_dirty_3 or
	  v_reg_dirty_4 or
	  v_reg_dirty_5 or
	  v_reg_dirty_6 or
	  v_reg_dirty_7 or
	  v_reg_dirty_8 or
	  v_reg_dirty_9 or
	  v_reg_dirty_10 or
	  v_reg_dirty_11 or
	  v_reg_dirty_12 or
	  v_reg_dirty_13 or
	  v_reg_dirty_14 or
	  v_reg_dirty_15 or
	  v_reg_dirty_16 or
	  v_reg_dirty_17 or
	  v_reg_dirty_18 or
	  v_reg_dirty_19 or
	  v_reg_dirty_20 or
	  v_reg_dirty_21 or
	  v_reg_dirty_22 or
	  v_reg_dirty_23 or
	  v_reg_dirty_24 or
	  v_reg_dirty_25 or
	  v_reg_dirty_26 or
	  v_reg_dirty_27 or
	  v_reg_dirty_28 or
	  v_reg_dirty_29 or
	  v_reg_dirty_30 or
	  v_reg_dirty_31 or
	  v_reg_dirty_32 or
	  v_reg_dirty_33 or
	  v_reg_dirty_34 or
	  v_reg_dirty_35 or
	  v_reg_dirty_36 or
	  v_reg_dirty_37 or
	  v_reg_dirty_38 or
	  v_reg_dirty_39 or
	  v_reg_dirty_40 or
	  v_reg_dirty_41 or
	  v_reg_dirty_42 or
	  v_reg_dirty_43 or
	  v_reg_dirty_44 or
	  v_reg_dirty_45 or
	  v_reg_dirty_46 or
	  v_reg_dirty_47 or
	  v_reg_dirty_48 or
	  v_reg_dirty_49 or
	  v_reg_dirty_50 or
	  v_reg_dirty_51 or
	  v_reg_dirty_52 or
	  v_reg_dirty_53 or
	  v_reg_dirty_54 or
	  v_reg_dirty_55 or
	  v_reg_dirty_56 or
	  v_reg_dirty_57 or
	  v_reg_dirty_58 or
	  v_reg_dirty_59 or
	  v_reg_dirty_60 or
	  v_reg_dirty_61 or v_reg_dirty_62 or v_reg_dirty_63)
  begin
    case (ff_from_tlb_rv_port1__read[19:14])
      6'd0: bs__h95635 = v_reg_dirty_0;
      6'd1: bs__h95635 = v_reg_dirty_1;
      6'd2: bs__h95635 = v_reg_dirty_2;
      6'd3: bs__h95635 = v_reg_dirty_3;
      6'd4: bs__h95635 = v_reg_dirty_4;
      6'd5: bs__h95635 = v_reg_dirty_5;
      6'd6: bs__h95635 = v_reg_dirty_6;
      6'd7: bs__h95635 = v_reg_dirty_7;
      6'd8: bs__h95635 = v_reg_dirty_8;
      6'd9: bs__h95635 = v_reg_dirty_9;
      6'd10: bs__h95635 = v_reg_dirty_10;
      6'd11: bs__h95635 = v_reg_dirty_11;
      6'd12: bs__h95635 = v_reg_dirty_12;
      6'd13: bs__h95635 = v_reg_dirty_13;
      6'd14: bs__h95635 = v_reg_dirty_14;
      6'd15: bs__h95635 = v_reg_dirty_15;
      6'd16: bs__h95635 = v_reg_dirty_16;
      6'd17: bs__h95635 = v_reg_dirty_17;
      6'd18: bs__h95635 = v_reg_dirty_18;
      6'd19: bs__h95635 = v_reg_dirty_19;
      6'd20: bs__h95635 = v_reg_dirty_20;
      6'd21: bs__h95635 = v_reg_dirty_21;
      6'd22: bs__h95635 = v_reg_dirty_22;
      6'd23: bs__h95635 = v_reg_dirty_23;
      6'd24: bs__h95635 = v_reg_dirty_24;
      6'd25: bs__h95635 = v_reg_dirty_25;
      6'd26: bs__h95635 = v_reg_dirty_26;
      6'd27: bs__h95635 = v_reg_dirty_27;
      6'd28: bs__h95635 = v_reg_dirty_28;
      6'd29: bs__h95635 = v_reg_dirty_29;
      6'd30: bs__h95635 = v_reg_dirty_30;
      6'd31: bs__h95635 = v_reg_dirty_31;
      6'd32: bs__h95635 = v_reg_dirty_32;
      6'd33: bs__h95635 = v_reg_dirty_33;
      6'd34: bs__h95635 = v_reg_dirty_34;
      6'd35: bs__h95635 = v_reg_dirty_35;
      6'd36: bs__h95635 = v_reg_dirty_36;
      6'd37: bs__h95635 = v_reg_dirty_37;
      6'd38: bs__h95635 = v_reg_dirty_38;
      6'd39: bs__h95635 = v_reg_dirty_39;
      6'd40: bs__h95635 = v_reg_dirty_40;
      6'd41: bs__h95635 = v_reg_dirty_41;
      6'd42: bs__h95635 = v_reg_dirty_42;
      6'd43: bs__h95635 = v_reg_dirty_43;
      6'd44: bs__h95635 = v_reg_dirty_44;
      6'd45: bs__h95635 = v_reg_dirty_45;
      6'd46: bs__h95635 = v_reg_dirty_46;
      6'd47: bs__h95635 = v_reg_dirty_47;
      6'd48: bs__h95635 = v_reg_dirty_48;
      6'd49: bs__h95635 = v_reg_dirty_49;
      6'd50: bs__h95635 = v_reg_dirty_50;
      6'd51: bs__h95635 = v_reg_dirty_51;
      6'd52: bs__h95635 = v_reg_dirty_52;
      6'd53: bs__h95635 = v_reg_dirty_53;
      6'd54: bs__h95635 = v_reg_dirty_54;
      6'd55: bs__h95635 = v_reg_dirty_55;
      6'd56: bs__h95635 = v_reg_dirty_56;
      6'd57: bs__h95635 = v_reg_dirty_57;
      6'd58: bs__h95635 = v_reg_dirty_58;
      6'd59: bs__h95635 = v_reg_dirty_59;
      6'd60: bs__h95635 = v_reg_dirty_60;
      6'd61: bs__h95635 = v_reg_dirty_61;
      6'd62: bs__h95635 = v_reg_dirty_62;
      6'd63: bs__h95635 = v_reg_dirty_63;
    endcase
  end
  always@(ff_from_tlb_rv_port1__read or
	  v_reg_valid_0 or
	  v_reg_valid_1 or
	  v_reg_valid_2 or
	  v_reg_valid_3 or
	  v_reg_valid_4 or
	  v_reg_valid_5 or
	  v_reg_valid_6 or
	  v_reg_valid_7 or
	  v_reg_valid_8 or
	  v_reg_valid_9 or
	  v_reg_valid_10 or
	  v_reg_valid_11 or
	  v_reg_valid_12 or
	  v_reg_valid_13 or
	  v_reg_valid_14 or
	  v_reg_valid_15 or
	  v_reg_valid_16 or
	  v_reg_valid_17 or
	  v_reg_valid_18 or
	  v_reg_valid_19 or
	  v_reg_valid_20 or
	  v_reg_valid_21 or
	  v_reg_valid_22 or
	  v_reg_valid_23 or
	  v_reg_valid_24 or
	  v_reg_valid_25 or
	  v_reg_valid_26 or
	  v_reg_valid_27 or
	  v_reg_valid_28 or
	  v_reg_valid_29 or
	  v_reg_valid_30 or
	  v_reg_valid_31 or
	  v_reg_valid_32 or
	  v_reg_valid_33 or
	  v_reg_valid_34 or
	  v_reg_valid_35 or
	  v_reg_valid_36 or
	  v_reg_valid_37 or
	  v_reg_valid_38 or
	  v_reg_valid_39 or
	  v_reg_valid_40 or
	  v_reg_valid_41 or
	  v_reg_valid_42 or
	  v_reg_valid_43 or
	  v_reg_valid_44 or
	  v_reg_valid_45 or
	  v_reg_valid_46 or
	  v_reg_valid_47 or
	  v_reg_valid_48 or
	  v_reg_valid_49 or
	  v_reg_valid_50 or
	  v_reg_valid_51 or
	  v_reg_valid_52 or
	  v_reg_valid_53 or
	  v_reg_valid_54 or
	  v_reg_valid_55 or
	  v_reg_valid_56 or
	  v_reg_valid_57 or
	  v_reg_valid_58 or
	  v_reg_valid_59 or
	  v_reg_valid_60 or
	  v_reg_valid_61 or v_reg_valid_62 or v_reg_valid_63)
  begin
    case (ff_from_tlb_rv_port1__read[19:14])
      6'd0:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_0;
      6'd1:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_1;
      6'd2:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_2;
      6'd3:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_3;
      6'd4:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_4;
      6'd5:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_5;
      6'd6:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_6;
      6'd7:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_7;
      6'd8:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_8;
      6'd9:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_9;
      6'd10:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_10;
      6'd11:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_11;
      6'd12:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_12;
      6'd13:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_13;
      6'd14:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_14;
      6'd15:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_15;
      6'd16:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_16;
      6'd17:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_17;
      6'd18:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_18;
      6'd19:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_19;
      6'd20:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_20;
      6'd21:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_21;
      6'd22:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_22;
      6'd23:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_23;
      6'd24:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_24;
      6'd25:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_25;
      6'd26:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_26;
      6'd27:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_27;
      6'd28:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_28;
      6'd29:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_29;
      6'd30:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_30;
      6'd31:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_31;
      6'd32:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_32;
      6'd33:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_33;
      6'd34:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_34;
      6'd35:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_35;
      6'd36:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_36;
      6'd37:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_37;
      6'd38:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_38;
      6'd39:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_39;
      6'd40:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_40;
      6'd41:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_41;
      6'd42:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_42;
      6'd43:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_43;
      6'd44:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_44;
      6'd45:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_45;
      6'd46:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_46;
      6'd47:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_47;
      6'd48:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_48;
      6'd49:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_49;
      6'd50:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_50;
      6'd51:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_51;
      6'd52:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_52;
      6'd53:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_53;
      6'd54:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_54;
      6'd55:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_55;
      6'd56:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_56;
      6'd57:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_57;
      6'd58:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_58;
      6'd59:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_59;
      6'd60:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_60;
      6'd61:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_61;
      6'd62:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_62;
      6'd63:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_63;
    endcase
  end
  always@(ff_core_request_D_OUT or x__h87437)
  begin
    case (ff_core_request_D_OUT[71:70])
      2'b0: lv_sign__h38914 = x__h87437[7];
      2'b01: lv_sign__h38914 = x__h87437[15];
      default: lv_sign__h38914 = x__h87437[31];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ff_core_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      72'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_from_tlb_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      40'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_hold_request_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      141'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_ptw_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      72'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_read_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_write_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'bx /* unspecified value */  };
	replacement_v_count_0 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_1 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_10 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_11 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_12 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_13 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_14 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_15 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_16 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_17 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_18 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_19 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_2 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_20 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_21 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_22 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_23 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_24 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_25 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_26 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_27 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_28 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_29 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_3 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_30 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_31 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_32 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_33 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_34 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_35 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_36 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_37 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_38 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_39 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_4 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_40 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_41 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_42 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_43 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_44 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_45 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_46 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_47 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_48 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_49 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_5 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_50 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_51 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_52 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_53 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_54 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_55 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_56 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_57 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_58 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_59 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_6 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_60 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_61 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_62 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_63 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_7 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_8 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_9 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	rg_fence_pending <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fence_set <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_fence_stall <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fence_way <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_globaldirty <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_handling_miss <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_performing_replay <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_polling_mode <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_recent_req <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_release_readphase <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_wEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_reg_dirty_0 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_10 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_11 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_12 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_13 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_14 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_15 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_16 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_17 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_18 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_19 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_2 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_20 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_21 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_22 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_23 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_24 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_25 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_26 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_27 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_28 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_29 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_3 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_30 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_31 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_32 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_33 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_34 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_35 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_36 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_37 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_38 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_39 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_4 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_40 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_41 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_42 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_43 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_44 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_45 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_46 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_47 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_48 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_49 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_5 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_50 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_51 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_52 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_53 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_54 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_55 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_56 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_57 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_58 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_59 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_6 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_60 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_61 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_62 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_63 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_7 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_8 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_9 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_0 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_10 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_11 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_12 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_13 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_14 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_15 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_16 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_17 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_18 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_19 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_2 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_20 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_21 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_22 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_23 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_24 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_25 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_26 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_27 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_28 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_29 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_3 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_30 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_31 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_32 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_33 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_34 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_35 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_36 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_37 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_38 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_39 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_4 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_40 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_41 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_42 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_43 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_44 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_45 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_46 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_47 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_48 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_49 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_5 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_50 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_51 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_52 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_53 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_54 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_55 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_56 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_57 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_58 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_59 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_6 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_60 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_61 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_62 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_63 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_7 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_8 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_9 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (ff_core_response_rv_EN)
	  ff_core_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_core_response_rv_D_IN;
	if (ff_from_tlb_rv_EN)
	  ff_from_tlb_rv <= `BSV_ASSIGNMENT_DELAY ff_from_tlb_rv_D_IN;
	if (ff_hold_request_rv_EN)
	  ff_hold_request_rv <= `BSV_ASSIGNMENT_DELAY ff_hold_request_rv_D_IN;
	if (ff_ptw_response_rv_EN)
	  ff_ptw_response_rv <= `BSV_ASSIGNMENT_DELAY ff_ptw_response_rv_D_IN;
	if (ff_read_mem_response_rv_EN)
	  ff_read_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_read_mem_response_rv_D_IN;
	if (ff_write_mem_response_rv_EN)
	  ff_write_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_write_mem_response_rv_D_IN;
	if (replacement_v_count_0_EN)
	  replacement_v_count_0 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_0_D_IN;
	if (replacement_v_count_1_EN)
	  replacement_v_count_1 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_1_D_IN;
	if (replacement_v_count_10_EN)
	  replacement_v_count_10 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_10_D_IN;
	if (replacement_v_count_11_EN)
	  replacement_v_count_11 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_11_D_IN;
	if (replacement_v_count_12_EN)
	  replacement_v_count_12 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_12_D_IN;
	if (replacement_v_count_13_EN)
	  replacement_v_count_13 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_13_D_IN;
	if (replacement_v_count_14_EN)
	  replacement_v_count_14 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_14_D_IN;
	if (replacement_v_count_15_EN)
	  replacement_v_count_15 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_15_D_IN;
	if (replacement_v_count_16_EN)
	  replacement_v_count_16 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_16_D_IN;
	if (replacement_v_count_17_EN)
	  replacement_v_count_17 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_17_D_IN;
	if (replacement_v_count_18_EN)
	  replacement_v_count_18 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_18_D_IN;
	if (replacement_v_count_19_EN)
	  replacement_v_count_19 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_19_D_IN;
	if (replacement_v_count_2_EN)
	  replacement_v_count_2 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_2_D_IN;
	if (replacement_v_count_20_EN)
	  replacement_v_count_20 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_20_D_IN;
	if (replacement_v_count_21_EN)
	  replacement_v_count_21 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_21_D_IN;
	if (replacement_v_count_22_EN)
	  replacement_v_count_22 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_22_D_IN;
	if (replacement_v_count_23_EN)
	  replacement_v_count_23 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_23_D_IN;
	if (replacement_v_count_24_EN)
	  replacement_v_count_24 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_24_D_IN;
	if (replacement_v_count_25_EN)
	  replacement_v_count_25 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_25_D_IN;
	if (replacement_v_count_26_EN)
	  replacement_v_count_26 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_26_D_IN;
	if (replacement_v_count_27_EN)
	  replacement_v_count_27 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_27_D_IN;
	if (replacement_v_count_28_EN)
	  replacement_v_count_28 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_28_D_IN;
	if (replacement_v_count_29_EN)
	  replacement_v_count_29 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_29_D_IN;
	if (replacement_v_count_3_EN)
	  replacement_v_count_3 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_3_D_IN;
	if (replacement_v_count_30_EN)
	  replacement_v_count_30 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_30_D_IN;
	if (replacement_v_count_31_EN)
	  replacement_v_count_31 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_31_D_IN;
	if (replacement_v_count_32_EN)
	  replacement_v_count_32 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_32_D_IN;
	if (replacement_v_count_33_EN)
	  replacement_v_count_33 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_33_D_IN;
	if (replacement_v_count_34_EN)
	  replacement_v_count_34 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_34_D_IN;
	if (replacement_v_count_35_EN)
	  replacement_v_count_35 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_35_D_IN;
	if (replacement_v_count_36_EN)
	  replacement_v_count_36 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_36_D_IN;
	if (replacement_v_count_37_EN)
	  replacement_v_count_37 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_37_D_IN;
	if (replacement_v_count_38_EN)
	  replacement_v_count_38 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_38_D_IN;
	if (replacement_v_count_39_EN)
	  replacement_v_count_39 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_39_D_IN;
	if (replacement_v_count_4_EN)
	  replacement_v_count_4 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_4_D_IN;
	if (replacement_v_count_40_EN)
	  replacement_v_count_40 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_40_D_IN;
	if (replacement_v_count_41_EN)
	  replacement_v_count_41 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_41_D_IN;
	if (replacement_v_count_42_EN)
	  replacement_v_count_42 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_42_D_IN;
	if (replacement_v_count_43_EN)
	  replacement_v_count_43 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_43_D_IN;
	if (replacement_v_count_44_EN)
	  replacement_v_count_44 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_44_D_IN;
	if (replacement_v_count_45_EN)
	  replacement_v_count_45 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_45_D_IN;
	if (replacement_v_count_46_EN)
	  replacement_v_count_46 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_46_D_IN;
	if (replacement_v_count_47_EN)
	  replacement_v_count_47 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_47_D_IN;
	if (replacement_v_count_48_EN)
	  replacement_v_count_48 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_48_D_IN;
	if (replacement_v_count_49_EN)
	  replacement_v_count_49 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_49_D_IN;
	if (replacement_v_count_5_EN)
	  replacement_v_count_5 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_5_D_IN;
	if (replacement_v_count_50_EN)
	  replacement_v_count_50 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_50_D_IN;
	if (replacement_v_count_51_EN)
	  replacement_v_count_51 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_51_D_IN;
	if (replacement_v_count_52_EN)
	  replacement_v_count_52 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_52_D_IN;
	if (replacement_v_count_53_EN)
	  replacement_v_count_53 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_53_D_IN;
	if (replacement_v_count_54_EN)
	  replacement_v_count_54 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_54_D_IN;
	if (replacement_v_count_55_EN)
	  replacement_v_count_55 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_55_D_IN;
	if (replacement_v_count_56_EN)
	  replacement_v_count_56 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_56_D_IN;
	if (replacement_v_count_57_EN)
	  replacement_v_count_57 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_57_D_IN;
	if (replacement_v_count_58_EN)
	  replacement_v_count_58 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_58_D_IN;
	if (replacement_v_count_59_EN)
	  replacement_v_count_59 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_59_D_IN;
	if (replacement_v_count_6_EN)
	  replacement_v_count_6 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_6_D_IN;
	if (replacement_v_count_60_EN)
	  replacement_v_count_60 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_60_D_IN;
	if (replacement_v_count_61_EN)
	  replacement_v_count_61 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_61_D_IN;
	if (replacement_v_count_62_EN)
	  replacement_v_count_62 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_62_D_IN;
	if (replacement_v_count_63_EN)
	  replacement_v_count_63 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_63_D_IN;
	if (replacement_v_count_7_EN)
	  replacement_v_count_7 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_7_D_IN;
	if (replacement_v_count_8_EN)
	  replacement_v_count_8 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_8_D_IN;
	if (replacement_v_count_9_EN)
	  replacement_v_count_9 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_9_D_IN;
	if (rg_fence_pending_EN)
	  rg_fence_pending <= `BSV_ASSIGNMENT_DELAY rg_fence_pending_D_IN;
	if (rg_fence_set_EN)
	  rg_fence_set <= `BSV_ASSIGNMENT_DELAY rg_fence_set_D_IN;
	if (rg_fence_stall_EN)
	  rg_fence_stall <= `BSV_ASSIGNMENT_DELAY rg_fence_stall_D_IN;
	if (rg_fence_way_EN)
	  rg_fence_way <= `BSV_ASSIGNMENT_DELAY rg_fence_way_D_IN;
	if (rg_globaldirty_EN)
	  rg_globaldirty <= `BSV_ASSIGNMENT_DELAY rg_globaldirty_D_IN;
	if (rg_handling_miss_EN)
	  rg_handling_miss <= `BSV_ASSIGNMENT_DELAY rg_handling_miss_D_IN;
	if (rg_performing_replay_EN)
	  rg_performing_replay <= `BSV_ASSIGNMENT_DELAY
	      rg_performing_replay_D_IN;
	if (rg_polling_mode_EN)
	  rg_polling_mode <= `BSV_ASSIGNMENT_DELAY rg_polling_mode_D_IN;
	if (rg_recent_req_EN)
	  rg_recent_req <= `BSV_ASSIGNMENT_DELAY rg_recent_req_D_IN;
	if (rg_release_readphase_EN)
	  rg_release_readphase <= `BSV_ASSIGNMENT_DELAY
	      rg_release_readphase_D_IN;
	if (rg_wEpoch_EN) rg_wEpoch <= `BSV_ASSIGNMENT_DELAY rg_wEpoch_D_IN;
	if (v_reg_dirty_0_EN)
	  v_reg_dirty_0 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_0_D_IN;
	if (v_reg_dirty_1_EN)
	  v_reg_dirty_1 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_1_D_IN;
	if (v_reg_dirty_10_EN)
	  v_reg_dirty_10 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_10_D_IN;
	if (v_reg_dirty_11_EN)
	  v_reg_dirty_11 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_11_D_IN;
	if (v_reg_dirty_12_EN)
	  v_reg_dirty_12 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_12_D_IN;
	if (v_reg_dirty_13_EN)
	  v_reg_dirty_13 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_13_D_IN;
	if (v_reg_dirty_14_EN)
	  v_reg_dirty_14 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_14_D_IN;
	if (v_reg_dirty_15_EN)
	  v_reg_dirty_15 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_15_D_IN;
	if (v_reg_dirty_16_EN)
	  v_reg_dirty_16 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_16_D_IN;
	if (v_reg_dirty_17_EN)
	  v_reg_dirty_17 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_17_D_IN;
	if (v_reg_dirty_18_EN)
	  v_reg_dirty_18 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_18_D_IN;
	if (v_reg_dirty_19_EN)
	  v_reg_dirty_19 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_19_D_IN;
	if (v_reg_dirty_2_EN)
	  v_reg_dirty_2 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_2_D_IN;
	if (v_reg_dirty_20_EN)
	  v_reg_dirty_20 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_20_D_IN;
	if (v_reg_dirty_21_EN)
	  v_reg_dirty_21 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_21_D_IN;
	if (v_reg_dirty_22_EN)
	  v_reg_dirty_22 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_22_D_IN;
	if (v_reg_dirty_23_EN)
	  v_reg_dirty_23 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_23_D_IN;
	if (v_reg_dirty_24_EN)
	  v_reg_dirty_24 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_24_D_IN;
	if (v_reg_dirty_25_EN)
	  v_reg_dirty_25 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_25_D_IN;
	if (v_reg_dirty_26_EN)
	  v_reg_dirty_26 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_26_D_IN;
	if (v_reg_dirty_27_EN)
	  v_reg_dirty_27 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_27_D_IN;
	if (v_reg_dirty_28_EN)
	  v_reg_dirty_28 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_28_D_IN;
	if (v_reg_dirty_29_EN)
	  v_reg_dirty_29 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_29_D_IN;
	if (v_reg_dirty_3_EN)
	  v_reg_dirty_3 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_3_D_IN;
	if (v_reg_dirty_30_EN)
	  v_reg_dirty_30 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_30_D_IN;
	if (v_reg_dirty_31_EN)
	  v_reg_dirty_31 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_31_D_IN;
	if (v_reg_dirty_32_EN)
	  v_reg_dirty_32 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_32_D_IN;
	if (v_reg_dirty_33_EN)
	  v_reg_dirty_33 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_33_D_IN;
	if (v_reg_dirty_34_EN)
	  v_reg_dirty_34 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_34_D_IN;
	if (v_reg_dirty_35_EN)
	  v_reg_dirty_35 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_35_D_IN;
	if (v_reg_dirty_36_EN)
	  v_reg_dirty_36 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_36_D_IN;
	if (v_reg_dirty_37_EN)
	  v_reg_dirty_37 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_37_D_IN;
	if (v_reg_dirty_38_EN)
	  v_reg_dirty_38 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_38_D_IN;
	if (v_reg_dirty_39_EN)
	  v_reg_dirty_39 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_39_D_IN;
	if (v_reg_dirty_4_EN)
	  v_reg_dirty_4 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_4_D_IN;
	if (v_reg_dirty_40_EN)
	  v_reg_dirty_40 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_40_D_IN;
	if (v_reg_dirty_41_EN)
	  v_reg_dirty_41 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_41_D_IN;
	if (v_reg_dirty_42_EN)
	  v_reg_dirty_42 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_42_D_IN;
	if (v_reg_dirty_43_EN)
	  v_reg_dirty_43 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_43_D_IN;
	if (v_reg_dirty_44_EN)
	  v_reg_dirty_44 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_44_D_IN;
	if (v_reg_dirty_45_EN)
	  v_reg_dirty_45 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_45_D_IN;
	if (v_reg_dirty_46_EN)
	  v_reg_dirty_46 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_46_D_IN;
	if (v_reg_dirty_47_EN)
	  v_reg_dirty_47 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_47_D_IN;
	if (v_reg_dirty_48_EN)
	  v_reg_dirty_48 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_48_D_IN;
	if (v_reg_dirty_49_EN)
	  v_reg_dirty_49 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_49_D_IN;
	if (v_reg_dirty_5_EN)
	  v_reg_dirty_5 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_5_D_IN;
	if (v_reg_dirty_50_EN)
	  v_reg_dirty_50 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_50_D_IN;
	if (v_reg_dirty_51_EN)
	  v_reg_dirty_51 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_51_D_IN;
	if (v_reg_dirty_52_EN)
	  v_reg_dirty_52 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_52_D_IN;
	if (v_reg_dirty_53_EN)
	  v_reg_dirty_53 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_53_D_IN;
	if (v_reg_dirty_54_EN)
	  v_reg_dirty_54 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_54_D_IN;
	if (v_reg_dirty_55_EN)
	  v_reg_dirty_55 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_55_D_IN;
	if (v_reg_dirty_56_EN)
	  v_reg_dirty_56 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_56_D_IN;
	if (v_reg_dirty_57_EN)
	  v_reg_dirty_57 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_57_D_IN;
	if (v_reg_dirty_58_EN)
	  v_reg_dirty_58 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_58_D_IN;
	if (v_reg_dirty_59_EN)
	  v_reg_dirty_59 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_59_D_IN;
	if (v_reg_dirty_6_EN)
	  v_reg_dirty_6 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_6_D_IN;
	if (v_reg_dirty_60_EN)
	  v_reg_dirty_60 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_60_D_IN;
	if (v_reg_dirty_61_EN)
	  v_reg_dirty_61 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_61_D_IN;
	if (v_reg_dirty_62_EN)
	  v_reg_dirty_62 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_62_D_IN;
	if (v_reg_dirty_63_EN)
	  v_reg_dirty_63 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_63_D_IN;
	if (v_reg_dirty_7_EN)
	  v_reg_dirty_7 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_7_D_IN;
	if (v_reg_dirty_8_EN)
	  v_reg_dirty_8 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_8_D_IN;
	if (v_reg_dirty_9_EN)
	  v_reg_dirty_9 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_9_D_IN;
	if (v_reg_valid_0_EN)
	  v_reg_valid_0 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_0_D_IN;
	if (v_reg_valid_1_EN)
	  v_reg_valid_1 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_1_D_IN;
	if (v_reg_valid_10_EN)
	  v_reg_valid_10 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_10_D_IN;
	if (v_reg_valid_11_EN)
	  v_reg_valid_11 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_11_D_IN;
	if (v_reg_valid_12_EN)
	  v_reg_valid_12 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_12_D_IN;
	if (v_reg_valid_13_EN)
	  v_reg_valid_13 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_13_D_IN;
	if (v_reg_valid_14_EN)
	  v_reg_valid_14 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_14_D_IN;
	if (v_reg_valid_15_EN)
	  v_reg_valid_15 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_15_D_IN;
	if (v_reg_valid_16_EN)
	  v_reg_valid_16 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_16_D_IN;
	if (v_reg_valid_17_EN)
	  v_reg_valid_17 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_17_D_IN;
	if (v_reg_valid_18_EN)
	  v_reg_valid_18 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_18_D_IN;
	if (v_reg_valid_19_EN)
	  v_reg_valid_19 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_19_D_IN;
	if (v_reg_valid_2_EN)
	  v_reg_valid_2 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_2_D_IN;
	if (v_reg_valid_20_EN)
	  v_reg_valid_20 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_20_D_IN;
	if (v_reg_valid_21_EN)
	  v_reg_valid_21 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_21_D_IN;
	if (v_reg_valid_22_EN)
	  v_reg_valid_22 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_22_D_IN;
	if (v_reg_valid_23_EN)
	  v_reg_valid_23 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_23_D_IN;
	if (v_reg_valid_24_EN)
	  v_reg_valid_24 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_24_D_IN;
	if (v_reg_valid_25_EN)
	  v_reg_valid_25 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_25_D_IN;
	if (v_reg_valid_26_EN)
	  v_reg_valid_26 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_26_D_IN;
	if (v_reg_valid_27_EN)
	  v_reg_valid_27 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_27_D_IN;
	if (v_reg_valid_28_EN)
	  v_reg_valid_28 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_28_D_IN;
	if (v_reg_valid_29_EN)
	  v_reg_valid_29 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_29_D_IN;
	if (v_reg_valid_3_EN)
	  v_reg_valid_3 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_3_D_IN;
	if (v_reg_valid_30_EN)
	  v_reg_valid_30 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_30_D_IN;
	if (v_reg_valid_31_EN)
	  v_reg_valid_31 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_31_D_IN;
	if (v_reg_valid_32_EN)
	  v_reg_valid_32 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_32_D_IN;
	if (v_reg_valid_33_EN)
	  v_reg_valid_33 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_33_D_IN;
	if (v_reg_valid_34_EN)
	  v_reg_valid_34 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_34_D_IN;
	if (v_reg_valid_35_EN)
	  v_reg_valid_35 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_35_D_IN;
	if (v_reg_valid_36_EN)
	  v_reg_valid_36 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_36_D_IN;
	if (v_reg_valid_37_EN)
	  v_reg_valid_37 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_37_D_IN;
	if (v_reg_valid_38_EN)
	  v_reg_valid_38 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_38_D_IN;
	if (v_reg_valid_39_EN)
	  v_reg_valid_39 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_39_D_IN;
	if (v_reg_valid_4_EN)
	  v_reg_valid_4 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_4_D_IN;
	if (v_reg_valid_40_EN)
	  v_reg_valid_40 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_40_D_IN;
	if (v_reg_valid_41_EN)
	  v_reg_valid_41 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_41_D_IN;
	if (v_reg_valid_42_EN)
	  v_reg_valid_42 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_42_D_IN;
	if (v_reg_valid_43_EN)
	  v_reg_valid_43 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_43_D_IN;
	if (v_reg_valid_44_EN)
	  v_reg_valid_44 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_44_D_IN;
	if (v_reg_valid_45_EN)
	  v_reg_valid_45 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_45_D_IN;
	if (v_reg_valid_46_EN)
	  v_reg_valid_46 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_46_D_IN;
	if (v_reg_valid_47_EN)
	  v_reg_valid_47 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_47_D_IN;
	if (v_reg_valid_48_EN)
	  v_reg_valid_48 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_48_D_IN;
	if (v_reg_valid_49_EN)
	  v_reg_valid_49 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_49_D_IN;
	if (v_reg_valid_5_EN)
	  v_reg_valid_5 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_5_D_IN;
	if (v_reg_valid_50_EN)
	  v_reg_valid_50 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_50_D_IN;
	if (v_reg_valid_51_EN)
	  v_reg_valid_51 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_51_D_IN;
	if (v_reg_valid_52_EN)
	  v_reg_valid_52 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_52_D_IN;
	if (v_reg_valid_53_EN)
	  v_reg_valid_53 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_53_D_IN;
	if (v_reg_valid_54_EN)
	  v_reg_valid_54 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_54_D_IN;
	if (v_reg_valid_55_EN)
	  v_reg_valid_55 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_55_D_IN;
	if (v_reg_valid_56_EN)
	  v_reg_valid_56 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_56_D_IN;
	if (v_reg_valid_57_EN)
	  v_reg_valid_57 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_57_D_IN;
	if (v_reg_valid_58_EN)
	  v_reg_valid_58 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_58_D_IN;
	if (v_reg_valid_59_EN)
	  v_reg_valid_59 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_59_D_IN;
	if (v_reg_valid_6_EN)
	  v_reg_valid_6 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_6_D_IN;
	if (v_reg_valid_60_EN)
	  v_reg_valid_60 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_60_D_IN;
	if (v_reg_valid_61_EN)
	  v_reg_valid_61 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_61_D_IN;
	if (v_reg_valid_62_EN)
	  v_reg_valid_62 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_62_D_IN;
	if (v_reg_valid_63_EN)
	  v_reg_valid_63 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_63_D_IN;
	if (v_reg_valid_7_EN)
	  v_reg_valid_7 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_7_D_IN;
	if (v_reg_valid_8_EN)
	  v_reg_valid_8 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_8_D_IN;
	if (v_reg_valid_9_EN)
	  v_reg_valid_9 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_9_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ff_core_response_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    ff_from_tlb_rv = 41'h0AAAAAAAAAA;
    ff_hold_request_rv = 142'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ff_ptw_response_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    ff_read_mem_response_rv = 67'h2AAAAAAAAAAAAAAAA;
    ff_write_mem_response_rv = 2'h2;
    replacement_v_count_0 = 2'h2;
    replacement_v_count_1 = 2'h2;
    replacement_v_count_10 = 2'h2;
    replacement_v_count_11 = 2'h2;
    replacement_v_count_12 = 2'h2;
    replacement_v_count_13 = 2'h2;
    replacement_v_count_14 = 2'h2;
    replacement_v_count_15 = 2'h2;
    replacement_v_count_16 = 2'h2;
    replacement_v_count_17 = 2'h2;
    replacement_v_count_18 = 2'h2;
    replacement_v_count_19 = 2'h2;
    replacement_v_count_2 = 2'h2;
    replacement_v_count_20 = 2'h2;
    replacement_v_count_21 = 2'h2;
    replacement_v_count_22 = 2'h2;
    replacement_v_count_23 = 2'h2;
    replacement_v_count_24 = 2'h2;
    replacement_v_count_25 = 2'h2;
    replacement_v_count_26 = 2'h2;
    replacement_v_count_27 = 2'h2;
    replacement_v_count_28 = 2'h2;
    replacement_v_count_29 = 2'h2;
    replacement_v_count_3 = 2'h2;
    replacement_v_count_30 = 2'h2;
    replacement_v_count_31 = 2'h2;
    replacement_v_count_32 = 2'h2;
    replacement_v_count_33 = 2'h2;
    replacement_v_count_34 = 2'h2;
    replacement_v_count_35 = 2'h2;
    replacement_v_count_36 = 2'h2;
    replacement_v_count_37 = 2'h2;
    replacement_v_count_38 = 2'h2;
    replacement_v_count_39 = 2'h2;
    replacement_v_count_4 = 2'h2;
    replacement_v_count_40 = 2'h2;
    replacement_v_count_41 = 2'h2;
    replacement_v_count_42 = 2'h2;
    replacement_v_count_43 = 2'h2;
    replacement_v_count_44 = 2'h2;
    replacement_v_count_45 = 2'h2;
    replacement_v_count_46 = 2'h2;
    replacement_v_count_47 = 2'h2;
    replacement_v_count_48 = 2'h2;
    replacement_v_count_49 = 2'h2;
    replacement_v_count_5 = 2'h2;
    replacement_v_count_50 = 2'h2;
    replacement_v_count_51 = 2'h2;
    replacement_v_count_52 = 2'h2;
    replacement_v_count_53 = 2'h2;
    replacement_v_count_54 = 2'h2;
    replacement_v_count_55 = 2'h2;
    replacement_v_count_56 = 2'h2;
    replacement_v_count_57 = 2'h2;
    replacement_v_count_58 = 2'h2;
    replacement_v_count_59 = 2'h2;
    replacement_v_count_6 = 2'h2;
    replacement_v_count_60 = 2'h2;
    replacement_v_count_61 = 2'h2;
    replacement_v_count_62 = 2'h2;
    replacement_v_count_63 = 2'h2;
    replacement_v_count_7 = 2'h2;
    replacement_v_count_8 = 2'h2;
    replacement_v_count_9 = 2'h2;
    rg_fence_pending = 1'h0;
    rg_fence_set = 6'h2A;
    rg_fence_stall = 1'h0;
    rg_fence_way = 2'h2;
    rg_globaldirty = 1'h0;
    rg_handling_miss = 1'h0;
    rg_performing_replay = 1'h0;
    rg_polling_mode = 1'h0;
    rg_recent_req = 6'h2A;
    rg_release_readphase = 1'h0;
    rg_wEpoch = 1'h0;
    v_reg_dirty_0 = 4'hA;
    v_reg_dirty_1 = 4'hA;
    v_reg_dirty_10 = 4'hA;
    v_reg_dirty_11 = 4'hA;
    v_reg_dirty_12 = 4'hA;
    v_reg_dirty_13 = 4'hA;
    v_reg_dirty_14 = 4'hA;
    v_reg_dirty_15 = 4'hA;
    v_reg_dirty_16 = 4'hA;
    v_reg_dirty_17 = 4'hA;
    v_reg_dirty_18 = 4'hA;
    v_reg_dirty_19 = 4'hA;
    v_reg_dirty_2 = 4'hA;
    v_reg_dirty_20 = 4'hA;
    v_reg_dirty_21 = 4'hA;
    v_reg_dirty_22 = 4'hA;
    v_reg_dirty_23 = 4'hA;
    v_reg_dirty_24 = 4'hA;
    v_reg_dirty_25 = 4'hA;
    v_reg_dirty_26 = 4'hA;
    v_reg_dirty_27 = 4'hA;
    v_reg_dirty_28 = 4'hA;
    v_reg_dirty_29 = 4'hA;
    v_reg_dirty_3 = 4'hA;
    v_reg_dirty_30 = 4'hA;
    v_reg_dirty_31 = 4'hA;
    v_reg_dirty_32 = 4'hA;
    v_reg_dirty_33 = 4'hA;
    v_reg_dirty_34 = 4'hA;
    v_reg_dirty_35 = 4'hA;
    v_reg_dirty_36 = 4'hA;
    v_reg_dirty_37 = 4'hA;
    v_reg_dirty_38 = 4'hA;
    v_reg_dirty_39 = 4'hA;
    v_reg_dirty_4 = 4'hA;
    v_reg_dirty_40 = 4'hA;
    v_reg_dirty_41 = 4'hA;
    v_reg_dirty_42 = 4'hA;
    v_reg_dirty_43 = 4'hA;
    v_reg_dirty_44 = 4'hA;
    v_reg_dirty_45 = 4'hA;
    v_reg_dirty_46 = 4'hA;
    v_reg_dirty_47 = 4'hA;
    v_reg_dirty_48 = 4'hA;
    v_reg_dirty_49 = 4'hA;
    v_reg_dirty_5 = 4'hA;
    v_reg_dirty_50 = 4'hA;
    v_reg_dirty_51 = 4'hA;
    v_reg_dirty_52 = 4'hA;
    v_reg_dirty_53 = 4'hA;
    v_reg_dirty_54 = 4'hA;
    v_reg_dirty_55 = 4'hA;
    v_reg_dirty_56 = 4'hA;
    v_reg_dirty_57 = 4'hA;
    v_reg_dirty_58 = 4'hA;
    v_reg_dirty_59 = 4'hA;
    v_reg_dirty_6 = 4'hA;
    v_reg_dirty_60 = 4'hA;
    v_reg_dirty_61 = 4'hA;
    v_reg_dirty_62 = 4'hA;
    v_reg_dirty_63 = 4'hA;
    v_reg_dirty_7 = 4'hA;
    v_reg_dirty_8 = 4'hA;
    v_reg_dirty_9 = 4'hA;
    v_reg_valid_0 = 4'hA;
    v_reg_valid_1 = 4'hA;
    v_reg_valid_10 = 4'hA;
    v_reg_valid_11 = 4'hA;
    v_reg_valid_12 = 4'hA;
    v_reg_valid_13 = 4'hA;
    v_reg_valid_14 = 4'hA;
    v_reg_valid_15 = 4'hA;
    v_reg_valid_16 = 4'hA;
    v_reg_valid_17 = 4'hA;
    v_reg_valid_18 = 4'hA;
    v_reg_valid_19 = 4'hA;
    v_reg_valid_2 = 4'hA;
    v_reg_valid_20 = 4'hA;
    v_reg_valid_21 = 4'hA;
    v_reg_valid_22 = 4'hA;
    v_reg_valid_23 = 4'hA;
    v_reg_valid_24 = 4'hA;
    v_reg_valid_25 = 4'hA;
    v_reg_valid_26 = 4'hA;
    v_reg_valid_27 = 4'hA;
    v_reg_valid_28 = 4'hA;
    v_reg_valid_29 = 4'hA;
    v_reg_valid_3 = 4'hA;
    v_reg_valid_30 = 4'hA;
    v_reg_valid_31 = 4'hA;
    v_reg_valid_32 = 4'hA;
    v_reg_valid_33 = 4'hA;
    v_reg_valid_34 = 4'hA;
    v_reg_valid_35 = 4'hA;
    v_reg_valid_36 = 4'hA;
    v_reg_valid_37 = 4'hA;
    v_reg_valid_38 = 4'hA;
    v_reg_valid_39 = 4'hA;
    v_reg_valid_4 = 4'hA;
    v_reg_valid_40 = 4'hA;
    v_reg_valid_41 = 4'hA;
    v_reg_valid_42 = 4'hA;
    v_reg_valid_43 = 4'hA;
    v_reg_valid_44 = 4'hA;
    v_reg_valid_45 = 4'hA;
    v_reg_valid_46 = 4'hA;
    v_reg_valid_47 = 4'hA;
    v_reg_valid_48 = 4'hA;
    v_reg_valid_49 = 4'hA;
    v_reg_valid_5 = 4'hA;
    v_reg_valid_50 = 4'hA;
    v_reg_valid_51 = 4'hA;
    v_reg_valid_52 = 4'hA;
    v_reg_valid_53 = 4'hA;
    v_reg_valid_54 = 4'hA;
    v_reg_valid_55 = 4'hA;
    v_reg_valid_56 = 4'hA;
    v_reg_valid_57 = 4'hA;
    v_reg_valid_58 = 4'hA;
    v_reg_valid_59 = 4'hA;
    v_reg_valid_6 = 4'hA;
    v_reg_valid_60 = 4'hA;
    v_reg_valid_61 = 4'hA;
    v_reg_valid_62 = 4'hA;
    v_reg_valid_63 = 4'hA;
    v_reg_valid_7 = 4'hA;
    v_reg_valid_8 = 4'hA;
    v_reg_valid_9 = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1874 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1875 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1876 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_874_OR_TASK_testplusargs_875_ETC___d1881 =
	(TASK_testplusargs___d1874 ||
	 TASK_testplusargs___d1875 && TASK_testplusargs___d1876) &&
	put_core_req_put[76];
    TASK_testplusargs_874_OR_TASK_testplusargs_875_ETC___d1883 =
	(TASK_testplusargs___d1874 ||
	 TASK_testplusargs___d1875 && TASK_testplusargs___d1876) &&
	!put_core_req_put[76];
    TASK_testplusargs_874_OR_TASK_testplusargs_875_ETC___d1889 =
	(TASK_testplusargs___d1874 ||
	 TASK_testplusargs___d1875 && TASK_testplusargs___d1876) &&
	put_core_req_put[0];
    TASK_testplusargs_874_OR_TASK_testplusargs_875_ETC___d1891 =
	(TASK_testplusargs___d1874 ||
	 TASK_testplusargs___d1875 && TASK_testplusargs___d1876) &&
	!put_core_req_put[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  v__h122878 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write("[%10d", v__h122878, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write("[%2d]DCACHE: Receiving request: ", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write("DCache_core_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write("'h%h", put_core_req_put[140:77]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write(", ", "fence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  TASK_testplusargs_874_OR_TASK_testplusargs_875_ETC___d1881)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  TASK_testplusargs_874_OR_TASK_testplusargs_875_ETC___d1883)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write("'h%h", put_core_req_put[75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write("'h%h", put_core_req_put[74:73]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write("'h%h", put_core_req_put[72:70]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write("'h%h", put_core_req_put[69:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write(", ", "atomic_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write("'h%h", put_core_req_put[5:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write(", ", "ptwalk_req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  TASK_testplusargs_874_OR_TASK_testplusargs_875_ETC___d1889)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  TASK_testplusargs_874_OR_TASK_testplusargs_875_ETC___d1891)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1874 ||
	   TASK_testplusargs___d1875 && TASK_testplusargs___d1876))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1892 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1893 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1894 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  v__h123053 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1892 ||
	   TASK_testplusargs___d1893 && TASK_testplusargs___d1894))
	$write("[%10d", v__h123053, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1892 ||
	   TASK_testplusargs___d1893 && TASK_testplusargs___d1894))
	$write("[%2d]DCACHE: set:%d", id, set_index__h122600);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1892 ||
	   TASK_testplusargs___d1893 && TASK_testplusargs___d1894))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store)
	begin
	  TASK_testplusargs___d1963 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store)
	begin
	  TASK_testplusargs___d1964 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store)
	begin
	  TASK_testplusargs___d1965 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_963_OR_TASK_testplusargs_964_ETC___d1976 =
	(TASK_testplusargs___d1963 ||
	 TASK_testplusargs___d1964 && TASK_testplusargs___d1965) &&
	m_storebuffer_mav_store_to_commit[2];
    TASK_testplusargs_963_OR_TASK_testplusargs_964_ETC___d1978 =
	(TASK_testplusargs___d1963 ||
	 TASK_testplusargs___d1964 && TASK_testplusargs___d1965) &&
	!m_storebuffer_mav_store_to_commit[2];
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store)
	begin
	  v__h124238 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1963 ||
	   TASK_testplusargs___d1964 && TASK_testplusargs___d1965))
	$write("[%10d", v__h124238, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1963 ||
	   TASK_testplusargs___d1964 && TASK_testplusargs___d1965))
	$write("[%2d]DCACHE: Commit Store entry:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1963 ||
	   TASK_testplusargs___d1964 && TASK_testplusargs___d1965))
	$write("Storebuffer { ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1963 ||
	   TASK_testplusargs___d1964 && TASK_testplusargs___d1965))
	$write("'h%h", m_storebuffer_mav_store_to_commit[166:135]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1963 ||
	   TASK_testplusargs___d1964 && TASK_testplusargs___d1965))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1963 ||
	   TASK_testplusargs___d1964 && TASK_testplusargs___d1965))
	$write("'h%h", m_storebuffer_mav_store_to_commit[134:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1963 ||
	   TASK_testplusargs___d1964 && TASK_testplusargs___d1965))
	$write(", ", "epoch: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1963 ||
	   TASK_testplusargs___d1964 && TASK_testplusargs___d1965))
	$write("'h%h", m_storebuffer_mav_store_to_commit[70]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1963 ||
	   TASK_testplusargs___d1964 && TASK_testplusargs___d1965))
	$write(", ", "fbindex: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1963 ||
	   TASK_testplusargs___d1964 && TASK_testplusargs___d1965))
	$write("'h%h", m_storebuffer_mav_store_to_commit[69:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1963 ||
	   TASK_testplusargs___d1964 && TASK_testplusargs___d1965))
	$write(", ", "mask: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1963 ||
	   TASK_testplusargs___d1964 && TASK_testplusargs___d1965))
	$write("'h%h", m_storebuffer_mav_store_to_commit[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1963 ||
	   TASK_testplusargs___d1964 && TASK_testplusargs___d1965))
	$write(", ", "io: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  TASK_testplusargs_963_OR_TASK_testplusargs_964_ETC___d1976)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  TASK_testplusargs_963_OR_TASK_testplusargs_964_ETC___d1978)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1963 ||
	   TASK_testplusargs___d1964 && TASK_testplusargs___d1965))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1963 ||
	   TASK_testplusargs___d1964 && TASK_testplusargs___d1965))
	$write("'h%h", m_storebuffer_mav_store_to_commit[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1963 ||
	   TASK_testplusargs___d1964 && TASK_testplusargs___d1965))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	  m_storebuffer_mav_store_to_commit[2])
	begin
	  TASK_testplusargs___d1982 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	  m_storebuffer_mav_store_to_commit[2])
	begin
	  TASK_testplusargs___d1983 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	  m_storebuffer_mav_store_to_commit[2])
	begin
	  TASK_testplusargs___d1984 = $test$plusargs("l0");
	  #0;
	end
    m_storebuffer_mav_store_to_commit_969_BIT_2_97_ETC___d1987 =
	m_storebuffer_mav_store_to_commit[2] &&
	(TASK_testplusargs___d1982 ||
	 TASK_testplusargs___d1983 && TASK_testplusargs___d1984);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	  m_storebuffer_mav_store_to_commit[2])
	begin
	  v__h124456 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	  m_storebuffer_mav_store_to_commit_969_BIT_2_97_ETC___d1987)
	$write("[%10d", v__h124456, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	  m_storebuffer_mav_store_to_commit_969_BIT_2_97_ETC___d1987)
	$write("[%2d]DCACHE: Store to NC Addr:%h",
	       id,
	       m_storebuffer_mav_store_to_commit[166:135]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	  m_storebuffer_mav_store_to_commit_969_BIT_2_97_ETC___d1987)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	  !m_storebuffer_mav_store_to_commit[2])
	begin
	  TASK_testplusargs___d1998 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	  !m_storebuffer_mav_store_to_commit[2])
	begin
	  TASK_testplusargs___d1999 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	  !m_storebuffer_mav_store_to_commit[2])
	begin
	  TASK_testplusargs___d2000 = $test$plusargs("l0");
	  #0;
	end
    NOT_m_storebuffer_mav_store_to_commit_969_BIT__ETC___d2003 =
	!m_storebuffer_mav_store_to_commit[2] &&
	(TASK_testplusargs___d1998 ||
	 TASK_testplusargs___d1999 && TASK_testplusargs___d2000);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	  !m_storebuffer_mav_store_to_commit[2])
	begin
	  v__h124594 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	  NOT_m_storebuffer_mav_store_to_commit_969_BIT__ETC___d2003)
	$write("[%10d", v__h124594, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	  NOT_m_storebuffer_mav_store_to_commit_969_BIT__ETC___d2003)
	$write("[%2d]DCACHE: Store to Available line", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	  NOT_m_storebuffer_mav_store_to_commit_969_BIT__ETC___d2003)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  !m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980)
	begin
	  TASK_testplusargs___d2007 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  !m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980)
	begin
	  TASK_testplusargs___d2008 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  !m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980)
	begin
	  TASK_testplusargs___d2009 = $test$plusargs("l0");
	  #0;
	end
    NOT_m_storebuffer_mav_store_to_commit_969_BIT__ETC___d2012 =
	!m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980 &&
	(TASK_testplusargs___d2007 ||
	 TASK_testplusargs___d2008 && TASK_testplusargs___d2009);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  !m_storebuffer_mav_store_to_commit_969_BIT_70_9_ETC___d1980)
	begin
	  v__h125792 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  NOT_m_storebuffer_mav_store_to_commit_969_BIT__ETC___d2012)
	$write("[%10d", v__h125792, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  NOT_m_storebuffer_mav_store_to_commit_969_BIT__ETC___d2012)
	$write("[%2d]DCACHE: Store is being dropped- epoch mismatch", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  NOT_m_storebuffer_mav_store_to_commit_969_BIT__ETC___d2012)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d238 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d239 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d240 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d246 =
	(TASK_testplusargs___d238 ||
	 TASK_testplusargs___d239 && TASK_testplusargs___d240) &&
	ff_from_tlb_rv_port1__read[7];
    TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d248 =
	(TASK_testplusargs___d238 ||
	 TASK_testplusargs___d239 && TASK_testplusargs___d240) &&
	!ff_from_tlb_rv_port1__read[7];
    TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d251 =
	(TASK_testplusargs___d238 ||
	 TASK_testplusargs___d239 && TASK_testplusargs___d240) &&
	ff_from_tlb_rv_port1__read[0];
    TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d253 =
	(TASK_testplusargs___d238 ||
	 TASK_testplusargs___d239 && TASK_testplusargs___d240) &&
	!ff_from_tlb_rv_port1__read[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h33044 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write("[%10d", v__h33044, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write("[%2d]DCACHE: Response from PA:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write("DTLB_core_response { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write("'h%h", ff_from_tlb_rv_port1__read[39:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write(", ", "trap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d246)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d248)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write(", ", "cause: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write("'h%h", ff_from_tlb_rv_port1__read[6:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write(", ", "tlbmiss: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d251)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d253)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d254 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d255 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d256 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h33295 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d254 ||
	   TASK_testplusargs___d255 && TASK_testplusargs___d256))
	$write("[%10d", v__h33295, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d254 ||
	   TASK_testplusargs___d255 && TASK_testplusargs___d256))
	$write("[%2d]DCACHE: lv_tag_resp:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d254 ||
	   TASK_testplusargs___d255 && TASK_testplusargs___d256))
	$write("TagResponse { ", "waymask: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d254 ||
	   TASK_testplusargs___d255 && TASK_testplusargs___d256))
	$write("'h%h", m_tag_mv_read_response[35:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d254 ||
	   TASK_testplusargs___d255 && TASK_testplusargs___d256))
	$write(", ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d254 ||
	   TASK_testplusargs___d255 && TASK_testplusargs___d256))
	$write("'h%h", m_tag_mv_read_response[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d254 ||
	   TASK_testplusargs___d255 && TASK_testplusargs___d256))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d263 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d264 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d265 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h33456 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("[%10d", v__h33456, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("[%2d]DCACHE: lv_data_resp:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("DataResponse { ", "line: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("'h%h", m_data_mv_read_response[575:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("'h%h", m_data_mv_read_response[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_0_CONCAT_m_tag_mv_read_response_ff_from_tl_ETC___d326)
	$display("Dynamic assertion failed: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 671, column 48\nDCACHE: More than one way is a hit in the cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_0_CONCAT_m_tag_mv_read_response_ff_from_tl_ETC___d326)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d327 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d328 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d329 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d338 =
	(TASK_testplusargs___d327 ||
	 TASK_testplusargs___d328 && TASK_testplusargs___d329) &&
	ff_core_request_D_OUT[0];
    TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d340 =
	(TASK_testplusargs___d327 ||
	 TASK_testplusargs___d328 && TASK_testplusargs___d329) &&
	!ff_core_request_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h35631 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write("[%10d", v__h35631, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write("[%2d]DCACHE: RAM Req:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write("DCache_core_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write("'h%h", ff_core_request_D_OUT[140:77]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write(", ", "fence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write("'h%h", ff_core_request_D_OUT[75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write("'h%h", ff_core_request_D_OUT[74:73]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write("'h%h", ff_core_request_D_OUT[72:70]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write("'h%h", ff_core_request_D_OUT[69:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write(", ", "atomic_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write("'h%h", ff_core_request_D_OUT[5:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write(", ", "ptwalk_req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d338)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_27_OR_TASK_testplusargs_28_A_ETC___d340)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d327 ||
	   TASK_testplusargs___d328 && TASK_testplusargs___d329))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d341 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d342 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d343 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h35811 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d341 ||
	   TASK_testplusargs___d342 && TASK_testplusargs___d343))
	$write("[%10d", v__h35811, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d341 ||
	   TASK_testplusargs___d342 && TASK_testplusargs___d343))
	$write("[%2d]DCACHE: RAM Hit:%b ", id, lv_hitmask__h33388);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d341 ||
	   TASK_testplusargs___d342 && TASK_testplusargs___d343))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  TASK_testplusargs___d353 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  TASK_testplusargs___d354 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  TASK_testplusargs___d355 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_53_OR_TASK_testplusargs_54_A_ETC___d359 =
	(TASK_testplusargs___d353 ||
	 TASK_testplusargs___d354 && TASK_testplusargs___d355) &&
	ff_core_request_D_OUT[0];
    TASK_testplusargs_53_OR_TASK_testplusargs_54_A_ETC___d360 =
	(TASK_testplusargs___d353 ||
	 TASK_testplusargs___d354 && TASK_testplusargs___d355) &&
	!ff_core_request_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  v__h35946 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write("[%10d", v__h35946, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write("[%2d]DCACHE: FB Req:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write("DCache_core_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write("'h%h", ff_core_request_D_OUT[140:77]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write(", ", "fence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write("'h%h", ff_core_request_D_OUT[75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write("'h%h", ff_core_request_D_OUT[74:73]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write("'h%h", ff_core_request_D_OUT[72:70]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write("'h%h", ff_core_request_D_OUT[69:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write(", ", "atomic_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write("'h%h", ff_core_request_D_OUT[5:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write(", ", "ptwalk_req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  TASK_testplusargs_53_OR_TASK_testplusargs_54_A_ETC___d359)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  TASK_testplusargs_53_OR_TASK_testplusargs_54_A_ETC___d360)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d353 ||
	   TASK_testplusargs___d354 && TASK_testplusargs___d355))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383) &&
	  ff_core_request_D_OUT[74:73] != 2'd0)
	begin
	  TASK_testplusargs___d391 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383) &&
	  ff_core_request_D_OUT[74:73] != 2'd0)
	begin
	  TASK_testplusargs___d392 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383) &&
	  ff_core_request_D_OUT[74:73] != 2'd0)
	begin
	  TASK_testplusargs___d393 = $test$plusargs("l1");
	  #0;
	end
    NOT_wr_cache_enable_wget__15_82_OR_ff_from_tlb_ETC___d396 =
	(!ma_cache_enable_c ||
	 ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383) &&
	ff_core_request_D_OUT[74:73] != 2'd0 &&
	(TASK_testplusargs___d391 ||
	 TASK_testplusargs___d392 && TASK_testplusargs___d393);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383) &&
	  ff_core_request_D_OUT[74:73] != 2'd0)
	begin
	  v__h37146 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  NOT_wr_cache_enable_wget__15_82_OR_ff_from_tlb_ETC___d396)
	$write("[%10d", v__h37146, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  NOT_wr_cache_enable_wget__15_82_OR_ff_from_tlb_ETC___d396)
	$write("[%2d]DCACHE: FB: Detected NC Write", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  NOT_wr_cache_enable_wget__15_82_OR_ff_from_tlb_ETC___d396)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d403)
	begin
	  TASK_testplusargs___d404 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d403)
	begin
	  TASK_testplusargs___d405 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d403)
	begin
	  TASK_testplusargs___d406 = $test$plusargs("l1");
	  #0;
	end
    m_fillbuffer_mav_polling_response_64_BIT_1_86__ETC___d409 =
	m_fillbuffer_mav_polling_response[1] &&
	(TASK_testplusargs___d404 ||
	 TASK_testplusargs___d405 && TASK_testplusargs___d406);
    wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d410 =
	(ma_cache_enable_c &&
	 !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 ||
	 ff_core_request_D_OUT[74:73] == 2'd0) &&
	m_fillbuffer_mav_polling_response_64_BIT_1_86__ETC___d409;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d403)
	begin
	  v__h36996 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d410)
	$write("[%10d", v__h36996, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d410)
	$write("[%2d]DCACHE: FB: Hit in Line:%b for Addr:%h",
	       id,
	       m_fillbuffer_mav_polling_response[9:2],
	       ff_from_tlb_rv_port1__read[39:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d410)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d414)
	begin
	  TASK_testplusargs___d420 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d414)
	begin
	  TASK_testplusargs___d421 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d414)
	begin
	  TASK_testplusargs___d422 = $test$plusargs("l1");
	  #0;
	end
    m_fillbuffer_mav_polling_response_64_BIT_0_87__ETC___d425 =
	m_fillbuffer_mav_polling_response[0] &&
	(TASK_testplusargs___d420 ||
	 TASK_testplusargs___d421 && TASK_testplusargs___d422);
    wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d427 =
	(ma_cache_enable_c &&
	 !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 ||
	 ff_core_request_D_OUT[74:73] == 2'd0) &&
	m_fillbuffer_mav_polling_response[1] &&
	m_fillbuffer_mav_polling_response_64_BIT_0_87__ETC___d425;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d414)
	begin
	  v__h37342 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d427)
	$write("[%10d", v__h37342, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d427)
	$write("[%2d]DCACHE: FB: Required Word found", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d427)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d429)
	begin
	  TASK_testplusargs___d430 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d429)
	begin
	  TASK_testplusargs___d431 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d429)
	begin
	  TASK_testplusargs___d432 = $test$plusargs("l1");
	  #0;
	end
    NOT_m_fillbuffer_mav_polling_response_64_BIT_0_ETC___d435 =
	!m_fillbuffer_mav_polling_response[0] &&
	(TASK_testplusargs___d430 ||
	 TASK_testplusargs___d431 && TASK_testplusargs___d432);
    wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d437 =
	(ma_cache_enable_c &&
	 !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 ||
	 ff_core_request_D_OUT[74:73] == 2'd0) &&
	m_fillbuffer_mav_polling_response[1] &&
	NOT_m_fillbuffer_mav_polling_response_64_BIT_0_ETC___d435;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d429)
	begin
	  v__h37515 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d437)
	$write("[%10d", v__h37515, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d437)
	$write("[%2d]DCACHE: FB: Required word not available yet", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d437)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d440)
	begin
	  TASK_testplusargs___d441 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d440)
	begin
	  TASK_testplusargs___d442 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d440)
	begin
	  TASK_testplusargs___d443 = $test$plusargs("l1");
	  #0;
	end
    NOT_m_fillbuffer_mav_polling_response_64_BIT_1_ETC___d446 =
	!m_fillbuffer_mav_polling_response[1] &&
	(TASK_testplusargs___d441 ||
	 TASK_testplusargs___d442 && TASK_testplusargs___d443);
    wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d447 =
	(ma_cache_enable_c &&
	 !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 ||
	 ff_core_request_D_OUT[74:73] == 2'd0) &&
	NOT_m_fillbuffer_mav_polling_response_64_BIT_1_ETC___d446;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d440)
	begin
	  v__h37639 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d447)
	$write("[%10d", v__h37639, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d447)
	$write("[%2d]DCACHE: FB: Miss", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d447)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d1454 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d1455 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d1456 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_454_OR_TASK_testplusargs_455_ETC___d1462 =
	(TASK_testplusargs___d1454 ||
	 TASK_testplusargs___d1455 && TASK_testplusargs___d1456) &&
	ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_454_OR_TASK_testplusargs_455_ETC___d1464 =
	(TASK_testplusargs___d1454 ||
	 TASK_testplusargs___d1455 && TASK_testplusargs___d1456) &&
	!ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_454_OR_TASK_testplusargs_455_ETC___d1466 =
	(TASK_testplusargs___d1454 ||
	 TASK_testplusargs___d1455 && TASK_testplusargs___d1456) &&
	ff_read_mem_response_rv_port1__read[0];
    TASK_testplusargs_454_OR_TASK_testplusargs_455_ETC___d1468 =
	(TASK_testplusargs___d1454 ||
	 TASK_testplusargs___d1455 && TASK_testplusargs___d1456) &&
	!ff_read_mem_response_rv_port1__read[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  v__h104868 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1454 ||
	   TASK_testplusargs___d1455 && TASK_testplusargs___d1456))
	$write("[%10d", v__h104868, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1454 ||
	   TASK_testplusargs___d1455 && TASK_testplusargs___d1456))
	$write("[%2d]DCACHE: FILL: Response from Memory:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1454 ||
	   TASK_testplusargs___d1455 && TASK_testplusargs___d1456))
	$write("DCache_mem_readresp { ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1454 ||
	   TASK_testplusargs___d1455 && TASK_testplusargs___d1456))
	$write("'h%h", ff_read_mem_response_rv_port1__read[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1454 ||
	   TASK_testplusargs___d1455 && TASK_testplusargs___d1456))
	$write(", ", "last: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_454_OR_TASK_testplusargs_455_ETC___d1462)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_454_OR_TASK_testplusargs_455_ETC___d1464)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1454 ||
	   TASK_testplusargs___d1455 && TASK_testplusargs___d1456))
	$write(", ", "err: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_454_OR_TASK_testplusargs_455_ETC___d1466)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_454_OR_TASK_testplusargs_455_ETC___d1468)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1454 ||
	   TASK_testplusargs___d1455 && TASK_testplusargs___d1456))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1454 ||
	   TASK_testplusargs___d1455 && TASK_testplusargs___d1456))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383)
	begin
	  TASK_testplusargs___d1423 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383)
	begin
	  TASK_testplusargs___d1424 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383)
	begin
	  TASK_testplusargs___d1425 = $test$plusargs("l0");
	  #0;
	end
    wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d1428 =
	ma_cache_enable_c &&
	!ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 &&
	(TASK_testplusargs___d1423 ||
	 TASK_testplusargs___d1424 && TASK_testplusargs___d1425);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383)
	begin
	  v__h104151 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d1428)
	$write("[%10d", v__h104151, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d1428)
	$write("[%2d]DCACHE: MemReq: Allocating Fbindex:%d",
	       id,
	       m_fillbuffer_mav_allocate_line);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d1428)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383))
	begin
	  TASK_testplusargs___d1431 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383))
	begin
	  TASK_testplusargs___d1432 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383))
	begin
	  TASK_testplusargs___d1433 = $test$plusargs("l0");
	  #0;
	end
    NOT_wr_cache_enable_wget__15_82_OR_ff_from_tlb_ETC___d1436 =
	(!ma_cache_enable_c ||
	 ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383) &&
	(TASK_testplusargs___d1431 ||
	 TASK_testplusargs___d1432 && TASK_testplusargs___d1433);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383))
	begin
	  v__h104362 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  NOT_wr_cache_enable_wget__15_82_OR_ff_from_tlb_ETC___d1436)
	$write("[%10d", v__h104362, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  NOT_wr_cache_enable_wget__15_82_OR_ff_from_tlb_ETC___d1436)
	$write("[%2d]DCACHE: MemReq: Sending NC Request for Addr:%h",
	       id,
	       phyaddr__h103942);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  NOT_wr_cache_enable_wget__15_82_OR_ff_from_tlb_ETC___d1436)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383)
	begin
	  TASK_testplusargs___d1438 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383)
	begin
	  TASK_testplusargs___d1439 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383)
	begin
	  TASK_testplusargs___d1440 = $test$plusargs("l0");
	  #0;
	end
    wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d1443 =
	ma_cache_enable_c &&
	!ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383 &&
	(TASK_testplusargs___d1438 ||
	 TASK_testplusargs___d1439 && TASK_testplusargs___d1440);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d383)
	begin
	  v__h104599 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d1443)
	$write("[%10d", v__h104599, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d1443)
	$write("[%2d]DCACHE: MemReq: Sending Line Request for Addr:%h",
	       id,
	       phyaddr__h103942);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__15_AND_NOT_ff_from_tlb_r_ETC___d1443)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response)
	begin
	  TASK_testplusargs___d1476 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response)
	begin
	  TASK_testplusargs___d1477 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response)
	begin
	  TASK_testplusargs___d1478 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_476_OR_TASK_testplusargs_477_ETC___d1482 =
	(TASK_testplusargs___d1476 ||
	 TASK_testplusargs___d1477 && TASK_testplusargs___d1478) &&
	ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_476_OR_TASK_testplusargs_477_ETC___d1483 =
	(TASK_testplusargs___d1476 ||
	 TASK_testplusargs___d1477 && TASK_testplusargs___d1478) &&
	!ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_476_OR_TASK_testplusargs_477_ETC___d1484 =
	(TASK_testplusargs___d1476 ||
	 TASK_testplusargs___d1477 && TASK_testplusargs___d1478) &&
	ff_read_mem_response_rv_port1__read[0];
    TASK_testplusargs_476_OR_TASK_testplusargs_477_ETC___d1485 =
	(TASK_testplusargs___d1476 ||
	 TASK_testplusargs___d1477 && TASK_testplusargs___d1478) &&
	!ff_read_mem_response_rv_port1__read[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response)
	begin
	  v__h105165 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1476 ||
	   TASK_testplusargs___d1477 && TASK_testplusargs___d1478))
	$write("[%10d", v__h105165, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1476 ||
	   TASK_testplusargs___d1477 && TASK_testplusargs___d1478))
	$write("[%2d]DCACHE: NC Response from Memory: ", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1476 ||
	   TASK_testplusargs___d1477 && TASK_testplusargs___d1478))
	$write("DCache_mem_readresp { ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1476 ||
	   TASK_testplusargs___d1477 && TASK_testplusargs___d1478))
	$write("'h%h", ff_read_mem_response_rv_port1__read[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1476 ||
	   TASK_testplusargs___d1477 && TASK_testplusargs___d1478))
	$write(", ", "last: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  TASK_testplusargs_476_OR_TASK_testplusargs_477_ETC___d1482)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  TASK_testplusargs_476_OR_TASK_testplusargs_477_ETC___d1483)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1476 ||
	   TASK_testplusargs___d1477 && TASK_testplusargs___d1478))
	$write(", ", "err: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  TASK_testplusargs_476_OR_TASK_testplusargs_477_ETC___d1484)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  TASK_testplusargs_476_OR_TASK_testplusargs_477_ETC___d1485)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1476 ||
	   TASK_testplusargs___d1477 && TASK_testplusargs___d1478))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1476 ||
	   TASK_testplusargs___d1477 && TASK_testplusargs___d1478))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d26 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d27 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d28 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  v__h16573 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d26 ||
	   TASK_testplusargs___d27 && TASK_testplusargs___d28))
	$write("[%10d", v__h16573, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d26 ||
	   TASK_testplusargs___d27 && TASK_testplusargs___d28))
	$write("[%2d]DCACHE : Fence operation in progress", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d26 ||
	   TASK_testplusargs___d27 && TASK_testplusargs___d28))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d32 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d33 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d34 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  v__h16728 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d32 ||
	   TASK_testplusargs___d33 && TASK_testplusargs___d34))
	$write("[%10d", v__h16728, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d32 ||
	   TASK_testplusargs___d33 && TASK_testplusargs___d34))
	$write("[%2d]DCACHE: Fence: CurrWay:%2d CurrSet:%2d Valid:%b Dirty:%b Addr:%h Data:%h",
	       id,
	       rg_fence_way,
	       rg_fence_set,
	       SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106,
	       SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173,
	       final_address__h16659,
	       m_data_mv_read_response[575:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d32 ||
	   TASK_testplusargs___d33 && TASK_testplusargs___d34))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173 &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106)
	begin
	  TASK_testplusargs___d182 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173 &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106)
	begin
	  TASK_testplusargs___d183 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173 &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106)
	begin
	  TASK_testplusargs___d184 = $test$plusargs("l2");
	  #0;
	end
    SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187 =
	SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173 &&
	SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106 &&
	(TASK_testplusargs___d182 ||
	 TASK_testplusargs___d183 && TASK_testplusargs___d184);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173 &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106)
	begin
	  v__h21095 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("[%10d", v__h21095, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("[%2d]DCACHE: Fence: Evicting to Memory:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("DCache_mem_writereq { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("'h%h", final_address__h16659);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("'h%h", m_data_mv_read_response[575:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write(", ", "burst_len: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("'h%h", 8'd7);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write(", ", "burst_size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("'h%h", 3'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write(", ", "io: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("False", " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d482 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d483 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d484 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  v__h37833 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d482 ||
	   TASK_testplusargs___d483 && TASK_testplusargs___d484))
	$write("[%10d", v__h37833, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d482 ||
	   TASK_testplusargs___d483 && TASK_testplusargs___d484))
	$write("[%2d]DCACHE: Response: Storemask:%h Storedata:%h",
	       id,
	       m_storebuffer_mav_check_sb_hit[127:64],
	       m_storebuffer_mav_check_sb_hit[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d482 ||
	   TASK_testplusargs___d483 && TASK_testplusargs___d484))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !wr_fault_whas &&
	  x__h37959 + y__h37960 != 2'd1)
	$display("Dynamic assertion failed: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 768, column 51\nMore than one data structure shows a hit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !wr_fault_whas &&
	  x__h37959 + y__h37960 != 2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d506 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d507 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d508 = $test$plusargs("l0");
	  #0;
	end
    IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d511 =
	IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 == 2'd1 &&
	!wr_fault_whas &&
	(TASK_testplusargs___d506 ||
	 TASK_testplusargs___d507 && TASK_testplusargs___d508);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  v__h38270 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d511)
	$write("[%10d", v__h38270, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d511)
	$write("[%2d]DCACHE: Response: Hit from SRAM", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d511)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d513 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d514 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d515 = $test$plusargs("l0");
	  #0;
	end
    IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d518 =
	IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 == 2'd1 &&
	!wr_fault_whas &&
	(TASK_testplusargs___d513 ||
	 TASK_testplusargs___d514 && TASK_testplusargs___d515);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  v__h38469 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d518)
	$write("[%10d", v__h38469, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d518)
	$write("[%2d]DCACHE: Response: Hit from Fillbuffer", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d518)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d528 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d529 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d530 = $test$plusargs("l0");
	  #0;
	end
    IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d533 =
	IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 == 2'd1 &&
	!wr_fault_whas &&
	(TASK_testplusargs___d528 ||
	 TASK_testplusargs___d529 && TASK_testplusargs___d530);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d467 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  v__h38823 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d533)
	$write("[%10d", v__h38823, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d533)
	$write("[%2d]DCACHE: Response: Hit from NC", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d533)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d1361 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d1362 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d1363 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_361_OR_TASK_testplusargs_362_ETC___d1382 =
	(TASK_testplusargs___d1361 ||
	 TASK_testplusargs___d1362 && TASK_testplusargs___d1363) &&
	NOT_IF_wr_nc_state_whas__65_THEN_wr_nc_state_w_ETC___d1371 &&
	NOT_IF_wr_fb_state_whas__75_THEN_wr_fb_state_w_ETC___d1375 &&
	NOT_IF_wr_ram_state_whas__70_THEN_wr_ram_state_ETC___d1379;
    TASK_testplusargs_361_OR_TASK_testplusargs_362_ETC___d1384 =
	(TASK_testplusargs___d1361 ||
	 TASK_testplusargs___d1362 && TASK_testplusargs___d1363) &&
	IF_wr_nc_state_whas__65_THEN_wr_nc_state_wget__ETC___d554;
    NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1366 =
	!ff_from_tlb_rv_port1__read[0] &&
	(TASK_testplusargs___d1361 ||
	 TASK_testplusargs___d1362 && TASK_testplusargs___d1363);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !ff_from_tlb_rv_port1__read[0])
	begin
	  v__h103586 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1366)
	$write("[%10d", v__h103586, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1366)
	$write("[%2d]DCACHE: Responding to Core:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1366)
	$write("DMem_core_response { ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1366)
	$write("'h%h", lv_response_word__h39250);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1366)
	$write(", ", "trap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  !ff_from_tlb_rv_port1__read[0] &&
	  TASK_testplusargs_361_OR_TASK_testplusargs_362_ETC___d1382)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  !ff_from_tlb_rv_port1__read[0] &&
	  TASK_testplusargs_361_OR_TASK_testplusargs_362_ETC___d1384)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1366)
	$write(", ", "cause: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1366)
	$write("'h%h", lv_response_cause__h39252);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1366)
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1366)
	$write("'h%h", lv_response_epochs__h39253, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1366)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1386 &&
	  !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d1394 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1386 &&
	  !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d1395 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1386 &&
	  !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d1396 = $test$plusargs("l0");
	  #0;
	end
    NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1399 =
	NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1386 &&
	!ff_from_tlb_rv_port1__read[0] &&
	(TASK_testplusargs___d1394 ||
	 TASK_testplusargs___d1395 && TASK_testplusargs___d1396);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1386 &&
	  !ff_from_tlb_rv_port1__read[0])
	begin
	  v__h103867 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1399)
	$write("[%10d", v__h103867, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1399)
	$write("[%2d]DCACHE: Response: Allocating Store Buffer", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1399)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  WILL_FIRE_RL_rl_send_memory_request &&
	  ff_core_request_D_OUT[74:73] != 2'd0 &&
	  IF_wr_ram_state_whas__70_THEN_wr_ram_state_wge_ETC___d472 == 2'd1 &&
	  !wr_fault_whas &&
	  _mav_allocate_line_RL_rl_send_memory_request_EN_m_fillbuffer_wget)
	$display("Error: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 735, column 10: (R0002)\n  Conflict-free rules RL_rl_response_to_core and RL_rl_send_memory_request\n  called conflicting methods mav_allocate_line and mav_allocate_line of module\n  instance m_fillbuffer.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  WILL_FIRE_RL_rl_send_memory_request &&
	  IF_wr_fb_state_whas__75_THEN_wr_fb_state_wget__ETC___d477 == 2'd1 &&
	  !wr_fault_whas &&
	  (ff_core_request_D_OUT[74:73] == 2'd2 ||
	   ff_core_request_D_OUT[74:73] == 2'd1 ||
	   ff_core_request_D_OUT[74:73] == 2'd0))
	$display("Error: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 735, column 10: (R0002)\n  Conflict-free rules RL_rl_response_to_core and RL_rl_send_memory_request\n  called conflicting methods read and write of module instance\n  rg_handling_miss.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  TASK_testplusargs___d1487 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  TASK_testplusargs___d1488 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  TASK_testplusargs___d1489 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  v__h105374 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay &&
	  (TASK_testplusargs___d1487 ||
	   TASK_testplusargs___d1488 && TASK_testplusargs___d1489))
	$write("[%10d", v__h105374, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay &&
	  (TASK_testplusargs___d1487 ||
	   TASK_testplusargs___d1488 && TASK_testplusargs___d1489))
	$write("[%2d]DCACHE: Replaying Req. Index:%d", id, rg_recent_req);
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay &&
	  (TASK_testplusargs___d1487 ||
	   TASK_testplusargs___d1488 && TASK_testplusargs___d1489))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer)
	begin
	  TASK_testplusargs___d1520 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer)
	begin
	  TASK_testplusargs___d1521 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer)
	begin
	  TASK_testplusargs___d1522 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer)
	begin
	  v__h108116 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  (TASK_testplusargs___d1520 ||
	   TASK_testplusargs___d1521 && TASK_testplusargs___d1522))
	$write("[%10d", v__h108116, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  (TASK_testplusargs___d1520 ||
	   TASK_testplusargs___d1521 && TASK_testplusargs___d1522))
	$write("[%2d]DCACHE: Release: set%d way:%d valid:%b dirty:%b",
	       id,
	       m_fillbuffer_mv_release_info[13:8],
	       v__h105471,
	       SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1619,
	       SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d1620);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  (TASK_testplusargs___d1520 ||
	   TASK_testplusargs___d1521 && TASK_testplusargs___d1522))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 &&
	  !rg_release_readphase)
	begin
	  TASK_testplusargs___d1630 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 &&
	  !rg_release_readphase)
	begin
	  TASK_testplusargs___d1631 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 &&
	  !rg_release_readphase)
	begin
	  TASK_testplusargs___d1632 = $test$plusargs("l0");
	  #0;
	end
    SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1635 =
	SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 &&
	!rg_release_readphase &&
	(TASK_testplusargs___d1630 ||
	 TASK_testplusargs___d1631 && TASK_testplusargs___d1632);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 &&
	  !rg_release_readphase)
	begin
	  v__h109138 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1635)
	$write("[%10d", v__h109138, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1635)
	$write("[%2d]DCACHE: Release: Reading dirty set:%d way:%d",
	       id,
	       m_fillbuffer_mv_release_info[13:8],
	       v__h105471);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1635)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase)
	begin
	  TASK_testplusargs___d1639 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase)
	begin
	  TASK_testplusargs___d1640 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase)
	begin
	  TASK_testplusargs___d1641 = $test$plusargs("l0");
	  #0;
	end
    rg_release_readphase_31_AND_TASK_testplusargs__ETC___d1644 =
	rg_release_readphase &&
	(TASK_testplusargs___d1639 ||
	 TASK_testplusargs___d1640 && TASK_testplusargs___d1641);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase)
	begin
	  v__h108817 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase_31_AND_TASK_testplusargs__ETC___d1644)
	$write("[%10d", v__h108817, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase_31_AND_TASK_testplusargs__ETC___d1644)
	$write("[%2d]DCACHE: Evicting Addr:%h set_index:%d tag:%h data:%h",
	       id,
	       lv_evict_address__h108698,
	       m_fillbuffer_mv_release_info[13:8],
	       m_tag_mv_read_response[31:12],
	       m_data_mv_read_response[575:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase_31_AND_TASK_testplusargs__ETC___d1644)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	   rg_release_readphase))
	begin
	  TASK_testplusargs___d1789 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	   rg_release_readphase))
	begin
	  TASK_testplusargs___d1790 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	   rg_release_readphase))
	begin
	  TASK_testplusargs___d1791 = $test$plusargs("l0");
	  #0;
	end
    NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1794 =
	(!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	 rg_release_readphase) &&
	(TASK_testplusargs___d1789 ||
	 TASK_testplusargs___d1790 && TASK_testplusargs___d1791);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1622 ||
	   rg_release_readphase))
	begin
	  v__h117158 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1794)
	$write("[%10d", v__h117158, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1794)
	$write("[%2d]DCACHE: Release: Upd Addr:%h set:%d way:%d dirty:%b data:%h",
	       id,
	       m_fillbuffer_mv_release_info[33:2],
	       m_fillbuffer_mv_release_info[13:8],
	       v__h105471,
	       m_fillbuffer_mv_release_info[0],
	       m_fillbuffer_mv_release_info[545:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1794)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  WILL_FIRE_RL_rl_response_to_core &&
	  !m_fillbuffer_mv_fbfull &&
	  !rg_fence_stall &&
	  !m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1503 &&
	  !rg_performing_replay &&
	  !m_fillbuffer_mv_fbempty &&
	  m_fillbuffer_mv_fbhead_valid &&
	  (!CAN_FIRE_RL_rl_fillbuffer_check ||
	   !(ff_core_request_D_OUT[74:73] != 2'd0)) &&
	  !EN_put_core_req_put &&
	  ff_write_mem_request_FULL_N &&
	  m_storebuffer_mv_sb_empty)
	$display("Error: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 966, column 10: (R0002)\n  Conflict-free rules RL_rl_release_from_fillbuffer and RL_rl_response_to_core\n  called conflicting methods notEmpty and deq of module instance\n  ff_core_request.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  WILL_FIRE_RL_rl_release_from_fillbuffer)
	$display("Error: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 215, column 53: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_ram_check] and\n  [RL_rl_release_from_fillbuffer] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkdcache

