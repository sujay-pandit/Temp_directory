//
// Generated by Bluespec Compiler, version 2022.01-5-ge3edf4b1 (build e3edf4b1)
//
// On Fri Apr 15 12:46:43 EDT 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_ma_core_req                O     1
// mv_core_resp                   O    65 reg
// RDY_mv_core_resp               O     1 const
// mav_fwd_req                    O    80 reg
// RDY_mav_fwd_req                O     1 reg
// mv_csr_misa                    O    64
// mv_cacheenable                 O     3 reg
// RDY_mv_cacheenable             O     1 const
// mv_csr_misa_c                  O     1 reg
// RDY_mv_csr_misa_c              O     1 const
// mv_pmp_cfg                     O    32 reg
// RDY_mv_pmp_cfg                 O     1 const
// mv_pmp_addr                    O   116 reg
// RDY_mv_pmp_addr                O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_core_req_req                I    80
// EN_ma_core_req                 I     1
// EN_mav_fwd_req                 I     1
//
// Combinational paths from inputs to outputs:
//   EN_mav_fwd_req -> RDY_ma_core_req
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_csr_grp2(CLK,
		   RST_N,

		   ma_core_req_req,
		   EN_ma_core_req,
		   RDY_ma_core_req,

		   mv_core_resp,
		   RDY_mv_core_resp,

		   EN_mav_fwd_req,
		   mav_fwd_req,
		   RDY_mav_fwd_req,

		   mv_csr_misa,

		   mv_cacheenable,
		   RDY_mv_cacheenable,

		   mv_csr_misa_c,
		   RDY_mv_csr_misa_c,

		   mv_pmp_cfg,
		   RDY_mv_pmp_cfg,

		   mv_pmp_addr,
		   RDY_mv_pmp_addr);
  input  CLK;
  input  RST_N;

  // action method ma_core_req
  input  [79 : 0] ma_core_req_req;
  input  EN_ma_core_req;
  output RDY_ma_core_req;

  // value method mv_core_resp
  output [64 : 0] mv_core_resp;
  output RDY_mv_core_resp;

  // actionvalue method mav_fwd_req
  input  EN_mav_fwd_req;
  output [79 : 0] mav_fwd_req;
  output RDY_mav_fwd_req;

  // value method mv_csr_misa
  output [63 : 0] mv_csr_misa;

  // value method mv_cacheenable
  output [2 : 0] mv_cacheenable;
  output RDY_mv_cacheenable;

  // value method mv_csr_misa_c
  output mv_csr_misa_c;
  output RDY_mv_csr_misa_c;

  // value method mv_pmp_cfg
  output [31 : 0] mv_pmp_cfg;
  output RDY_mv_pmp_cfg;

  // value method mv_pmp_addr
  output [115 : 0] mv_pmp_addr;
  output RDY_mv_pmp_addr;

  // signals for module outputs
  wire [115 : 0] mv_pmp_addr;
  wire [79 : 0] mav_fwd_req;
  wire [64 : 0] mv_core_resp;
  wire [63 : 0] mv_csr_misa;
  wire [31 : 0] mv_pmp_cfg;
  wire [2 : 0] mv_cacheenable;
  wire RDY_ma_core_req,
       RDY_mav_fwd_req,
       RDY_mv_cacheenable,
       RDY_mv_core_resp,
       RDY_mv_csr_misa_c,
       RDY_mv_pmp_addr,
       RDY_mv_pmp_cfg,
       mv_csr_misa_c;

  // inlined wires
  reg [64 : 0] rg_resp_to_core_1_wget;
  wire [129 : 0] csr_op_arg_wget;

  // register rg_bpuenable
  reg rg_bpuenable;
  wire rg_bpuenable_D_IN, rg_bpuenable_EN;

  // register rg_denable
  reg rg_denable;
  wire rg_denable_D_IN, rg_denable_EN;

  // register rg_ienable
  reg rg_ienable;
  wire rg_ienable_D_IN, rg_ienable_EN;

  // register rg_misa_a
  reg rg_misa_a;
  wire rg_misa_a_D_IN, rg_misa_a_EN;

  // register rg_misa_c
  reg rg_misa_c;
  wire rg_misa_c_D_IN, rg_misa_c_EN;

  // register rg_misa_d
  reg rg_misa_d;
  wire rg_misa_d_D_IN, rg_misa_d_EN;

  // register rg_misa_f
  reg rg_misa_f;
  wire rg_misa_f_D_IN, rg_misa_f_EN;

  // register rg_misa_i
  reg rg_misa_i;
  wire rg_misa_i_D_IN, rg_misa_i_EN;

  // register rg_misa_m
  reg rg_misa_m;
  wire rg_misa_m_D_IN, rg_misa_m_EN;

  // register rg_misa_s
  reg rg_misa_s;
  wire rg_misa_s_D_IN, rg_misa_s_EN;

  // register rg_misa_u
  reg rg_misa_u;
  wire rg_misa_u_D_IN, rg_misa_u_EN;

  // register rg_mscratch
  reg [63 : 0] rg_mscratch;
  wire [63 : 0] rg_mscratch_D_IN;
  wire rg_mscratch_EN;

  // register rg_resp_to_core
  reg [64 : 0] rg_resp_to_core;
  wire [64 : 0] rg_resp_to_core_D_IN;
  wire rg_resp_to_core_EN;

  // register rg_sscratch
  reg [63 : 0] rg_sscratch;
  wire [63 : 0] rg_sscratch_D_IN;
  wire rg_sscratch_EN;

  // register v_pmp_addr_0
  reg [63 : 0] v_pmp_addr_0;
  wire [63 : 0] v_pmp_addr_0_D_IN;
  wire v_pmp_addr_0_EN;

  // register v_pmp_addr_1
  reg [63 : 0] v_pmp_addr_1;
  wire [63 : 0] v_pmp_addr_1_D_IN;
  wire v_pmp_addr_1_EN;

  // register v_pmp_addr_2
  reg [63 : 0] v_pmp_addr_2;
  wire [63 : 0] v_pmp_addr_2_D_IN;
  wire v_pmp_addr_2_EN;

  // register v_pmp_addr_3
  reg [63 : 0] v_pmp_addr_3;
  wire [63 : 0] v_pmp_addr_3_D_IN;
  wire v_pmp_addr_3_EN;

  // register v_pmp_cfg_0
  reg [7 : 0] v_pmp_cfg_0;
  wire [7 : 0] v_pmp_cfg_0_D_IN;
  wire v_pmp_cfg_0_EN;

  // register v_pmp_cfg_1
  reg [7 : 0] v_pmp_cfg_1;
  wire [7 : 0] v_pmp_cfg_1_D_IN;
  wire v_pmp_cfg_1_EN;

  // register v_pmp_cfg_2
  reg [7 : 0] v_pmp_cfg_2;
  wire [7 : 0] v_pmp_cfg_2_D_IN;
  wire v_pmp_cfg_2_EN;

  // register v_pmp_cfg_3
  reg [7 : 0] v_pmp_cfg_3;
  wire [7 : 0] v_pmp_cfg_3_D_IN;
  wire v_pmp_cfg_3_EN;

  // ports of submodule ff_fwd_request
  wire [79 : 0] ff_fwd_request_D_IN, ff_fwd_request_D_OUT;
  wire ff_fwd_request_CLR,
       ff_fwd_request_DEQ,
       ff_fwd_request_EMPTY_N,
       ff_fwd_request_ENQ,
       ff_fwd_request_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rg_resp_to_core__dreg_update,
       CAN_FIRE_ma_core_req,
       CAN_FIRE_mav_fwd_req,
       WILL_FIRE_RL_rg_resp_to_core__dreg_update,
       WILL_FIRE_ma_core_req,
       WILL_FIRE_mav_fwd_req;

  // remaining internal signals
  reg [63 : 0] IF_ma_core_req_req_BITS_79_TO_68_EQ_0x301_THEN_ETC___d135,
	       x_wget__h484;
  wire [63 : 0] x__h2886,
		x__h3916,
		x__h8075,
		x__h8097,
		x_wget_fst__h2963,
		x_wget_snd_fst__h3048;
  wire [3 : 0] x__h2772;
  wire [2 : 0] r1__read__h2785;
  wire [1 : 0] r1__read_BITS_1_TO_0___h8631,
	       r1__read__h2787,
	       x_wget_snd_snd__h3049;

  // action method ma_core_req
  assign RDY_ma_core_req = ff_fwd_request_FULL_N ;
  assign CAN_FIRE_ma_core_req = ff_fwd_request_FULL_N ;
  assign WILL_FIRE_ma_core_req = EN_ma_core_req ;

  // value method mv_core_resp
  assign mv_core_resp = rg_resp_to_core ;
  assign RDY_mv_core_resp = 1'd1 ;

  // actionvalue method mav_fwd_req
  assign mav_fwd_req = ff_fwd_request_D_OUT ;
  assign RDY_mav_fwd_req = ff_fwd_request_EMPTY_N ;
  assign CAN_FIRE_mav_fwd_req = ff_fwd_request_EMPTY_N ;
  assign WILL_FIRE_mav_fwd_req = EN_mav_fwd_req ;

  // value method mv_csr_misa
  assign mv_csr_misa =
	     { 2'd2,
	       36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       5'd0,
	       rg_misa_u,
	       1'd0,
	       rg_misa_s,
	       5'd0,
	       rg_misa_m,
	       3'd0,
	       rg_misa_i,
	       2'd0,
	       rg_misa_f,
	       1'd0,
	       rg_misa_d,
	       rg_misa_c,
	       1'd0,
	       rg_misa_a } ;

  // value method mv_cacheenable
  assign mv_cacheenable = { r1__read_BITS_1_TO_0___h8631, rg_ienable } ;
  assign RDY_mv_cacheenable = 1'd1 ;

  // value method mv_csr_misa_c
  assign mv_csr_misa_c = rg_misa_c ;
  assign RDY_mv_csr_misa_c = 1'd1 ;

  // value method mv_pmp_cfg
  assign mv_pmp_cfg = { v_pmp_cfg_3, v_pmp_cfg_2, v_pmp_cfg_1, v_pmp_cfg_0 } ;
  assign RDY_mv_pmp_cfg = 1'd1 ;

  // value method mv_pmp_addr
  assign mv_pmp_addr =
	     { v_pmp_addr_3[29:1],
	       v_pmp_addr_2[29:1],
	       v_pmp_addr_1[29:1],
	       v_pmp_addr_0[29:1] } ;
  assign RDY_mv_pmp_addr = 1'd1 ;

  // submodule ff_fwd_request
  FIFOL1 #(.width(32'd80)) ff_fwd_request(.RST(RST_N),
					  .CLK(CLK),
					  .D_IN(ff_fwd_request_D_IN),
					  .ENQ(ff_fwd_request_ENQ),
					  .DEQ(ff_fwd_request_DEQ),
					  .CLR(ff_fwd_request_CLR),
					  .D_OUT(ff_fwd_request_D_OUT),
					  .FULL_N(ff_fwd_request_FULL_N),
					  .EMPTY_N(ff_fwd_request_EMPTY_N));

  // rule RL_rg_resp_to_core__dreg_update
  assign CAN_FIRE_RL_rg_resp_to_core__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_resp_to_core__dreg_update = 1'd1 ;

  // inlined wires
  always@(ma_core_req_req or
	  rg_sscratch or
	  rg_misa_u or
	  rg_misa_s or
	  rg_misa_m or
	  rg_misa_i or
	  rg_misa_f or
	  rg_misa_d or
	  rg_misa_c or
	  rg_misa_a or
	  rg_mscratch or
	  x__h3916 or
	  v_pmp_addr_0 or
	  v_pmp_addr_1 or v_pmp_addr_2 or v_pmp_addr_3 or x__h2772)
  begin
    case (ma_core_req_req[79:68])
      12'h140: rg_resp_to_core_1_wget = { 1'd1, rg_sscratch };
      12'h301:
	  rg_resp_to_core_1_wget =
	      { 44'hC0000000000,
		rg_misa_u,
		1'd0,
		rg_misa_s,
		5'd0,
		rg_misa_m,
		3'd0,
		rg_misa_i,
		2'd0,
		rg_misa_f,
		1'd0,
		rg_misa_d,
		rg_misa_c,
		1'd0,
		rg_misa_a };
      12'h340: rg_resp_to_core_1_wget = { 1'd1, rg_mscratch };
      12'h3A0: rg_resp_to_core_1_wget = { 1'd1, x__h3916 };
      12'h3A2,
      12'h3B4,
      12'h3B5,
      12'h3B6,
      12'h3B7,
      12'h3B8,
      12'h3B9,
      12'h3BA,
      12'h3BB,
      12'h3BC,
      12'h3BD,
      12'h3BE,
      12'h3BF:
	  rg_resp_to_core_1_wget = 65'h10000000000000000;
      12'h3B0: rg_resp_to_core_1_wget = { 1'd1, v_pmp_addr_0 };
      12'h3B1: rg_resp_to_core_1_wget = { 1'd1, v_pmp_addr_1 };
      12'h3B2: rg_resp_to_core_1_wget = { 1'd1, v_pmp_addr_2 };
      12'h3B3: rg_resp_to_core_1_wget = { 1'd1, v_pmp_addr_3 };
      12'h800: rg_resp_to_core_1_wget = { 61'h1000000000000000, x__h2772 };
      default: rg_resp_to_core_1_wget = 65'd0;
    endcase
  end
  assign csr_op_arg_wget =
	     { ma_core_req_req[67:4],
	       IF_ma_core_req_req_BITS_79_TO_68_EQ_0x301_THEN_ETC___d135,
	       ma_core_req_req[3:2] } ;

  // register rg_bpuenable
  assign rg_bpuenable_D_IN = x_wget__h484[2] ;
  assign rg_bpuenable_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h800 ;

  // register rg_denable
  assign rg_denable_D_IN = x_wget__h484[1] ;
  assign rg_denable_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h800 ;

  // register rg_ienable
  assign rg_ienable_D_IN = x_wget__h484[0] ;
  assign rg_ienable_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h800 ;

  // register rg_misa_a
  assign rg_misa_a_D_IN = x_wget__h484[0] ;
  assign rg_misa_a_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h301 ;

  // register rg_misa_c
  assign rg_misa_c_D_IN = x_wget__h484[2] ;
  assign rg_misa_c_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h301 &&
	     (x_wget__h484[2] || ma_core_req_req[1:0] == 2'd0) ;

  // register rg_misa_d
  assign rg_misa_d_D_IN = x_wget__h484[3] ;
  assign rg_misa_d_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h301 ;

  // register rg_misa_f
  assign rg_misa_f_D_IN = x_wget__h484[5] ;
  assign rg_misa_f_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h301 ;

  // register rg_misa_i
  assign rg_misa_i_D_IN = x_wget__h484[8] ;
  assign rg_misa_i_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h301 ;

  // register rg_misa_m
  assign rg_misa_m_D_IN = x_wget__h484[12] ;
  assign rg_misa_m_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h301 ;

  // register rg_misa_s
  assign rg_misa_s_D_IN = x_wget__h484[18] ;
  assign rg_misa_s_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h301 ;

  // register rg_misa_u
  assign rg_misa_u_D_IN = x_wget__h484[20] ;
  assign rg_misa_u_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h301 ;

  // register rg_mscratch
  assign rg_mscratch_D_IN = x_wget__h484 ;
  assign rg_mscratch_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h340 ;

  // register rg_resp_to_core
  assign rg_resp_to_core_D_IN =
	     EN_ma_core_req ? rg_resp_to_core_1_wget : 65'd0 ;
  assign rg_resp_to_core_EN = 1'd1 ;

  // register rg_sscratch
  assign rg_sscratch_D_IN = x_wget__h484 ;
  assign rg_sscratch_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h140 ;

  // register v_pmp_addr_0
  assign v_pmp_addr_0_D_IN = x_wget__h484 ;
  assign v_pmp_addr_0_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h3B0 &&
	     !v_pmp_cfg_0[7] ;

  // register v_pmp_addr_1
  assign v_pmp_addr_1_D_IN = x_wget__h484 ;
  assign v_pmp_addr_1_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h3B1 &&
	     !v_pmp_cfg_1[7] ;

  // register v_pmp_addr_2
  assign v_pmp_addr_2_D_IN = x_wget__h484 ;
  assign v_pmp_addr_2_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h3B2 &&
	     !v_pmp_cfg_2[7] ;

  // register v_pmp_addr_3
  assign v_pmp_addr_3_D_IN = x_wget__h484 ;
  assign v_pmp_addr_3_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h3B3 &&
	     !v_pmp_cfg_3[7] ;

  // register v_pmp_cfg_0
  assign v_pmp_cfg_0_D_IN = x_wget__h484[7:0] ;
  assign v_pmp_cfg_0_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h3A0 &&
	     !v_pmp_cfg_0[7] &&
	     x_wget__h484[1:0] != 2'b10 &&
	     x_wget__h484[4:3] != 2'd2 ;

  // register v_pmp_cfg_1
  assign v_pmp_cfg_1_D_IN = x_wget__h484[15:8] ;
  assign v_pmp_cfg_1_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h3A0 &&
	     !v_pmp_cfg_1[7] &&
	     x_wget__h484[9:8] != 2'b10 &&
	     x_wget__h484[12:11] != 2'd2 ;

  // register v_pmp_cfg_2
  assign v_pmp_cfg_2_D_IN = x_wget__h484[23:16] ;
  assign v_pmp_cfg_2_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h3A0 &&
	     !v_pmp_cfg_2[7] &&
	     x_wget__h484[17:16] != 2'b10 &&
	     x_wget__h484[20:19] != 2'd2 ;

  // register v_pmp_cfg_3
  assign v_pmp_cfg_3_D_IN = x_wget__h484[31:24] ;
  assign v_pmp_cfg_3_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h3A0 &&
	     !v_pmp_cfg_3[7] &&
	     x_wget__h484[25:24] != 2'b10 &&
	     x_wget__h484[28:27] != 2'd2 ;

  // submodule ff_fwd_request
  assign ff_fwd_request_D_IN = ma_core_req_req ;
  assign ff_fwd_request_ENQ =
	     EN_ma_core_req && ma_core_req_req[79:68] != 12'h301 &&
	     ma_core_req_req[79:68] != 12'h340 &&
	     ma_core_req_req[79:68] != 12'h3A0 &&
	     ma_core_req_req[79:68] != 12'h3A2 &&
	     ma_core_req_req[79:68] != 12'h3B0 &&
	     ma_core_req_req[79:68] != 12'h3B1 &&
	     ma_core_req_req[79:68] != 12'h3B2 &&
	     ma_core_req_req[79:68] != 12'h3B3 &&
	     ma_core_req_req[79:68] != 12'h3B4 &&
	     ma_core_req_req[79:68] != 12'h3B5 &&
	     ma_core_req_req[79:68] != 12'h3B6 &&
	     ma_core_req_req[79:68] != 12'h3B7 &&
	     ma_core_req_req[79:68] != 12'h3B8 &&
	     ma_core_req_req[79:68] != 12'h3B9 &&
	     ma_core_req_req[79:68] != 12'h3BA &&
	     ma_core_req_req[79:68] != 12'h3BB &&
	     ma_core_req_req[79:68] != 12'h3BC &&
	     ma_core_req_req[79:68] != 12'h3BD &&
	     ma_core_req_req[79:68] != 12'h3BE &&
	     ma_core_req_req[79:68] != 12'h3BF &&
	     ma_core_req_req[79:68] != 12'h140 &&
	     ma_core_req_req[79:68] != 12'h800 ;
  assign ff_fwd_request_DEQ = EN_mav_fwd_req ;
  assign ff_fwd_request_CLR = 1'b0 ;

  // remaining internal signals
  module_fn_csr_op instance_fn_csr_op_0(.fn_csr_op_writedata(x_wget_fst__h2963),
					.fn_csr_op_readdata(x_wget_snd_fst__h3048),
					.fn_csr_op_op(x_wget_snd_snd__h3049),
					.fn_csr_op(x__h8097));
  assign r1__read_BITS_1_TO_0___h8631 = { rg_bpuenable, rg_denable } ;
  assign r1__read__h2785 = { r1__read__h2787, rg_denable } ;
  assign r1__read__h2787 = { 1'd0, rg_bpuenable } ;
  assign x__h2772 = { r1__read__h2785, rg_ienable } ;
  assign x__h2886 =
	     { 43'h40000000000,
	       rg_misa_u,
	       1'd0,
	       rg_misa_s,
	       5'd0,
	       rg_misa_m,
	       3'd0,
	       rg_misa_i,
	       2'd0,
	       rg_misa_f,
	       1'd0,
	       rg_misa_d,
	       rg_misa_c,
	       1'd0,
	       rg_misa_a } ;
  assign x__h3916 =
	     { 32'd0, v_pmp_cfg_3, v_pmp_cfg_2, v_pmp_cfg_1, v_pmp_cfg_0 } ;
  assign x__h8075 = { 60'd0, x__h2772 } ;
  assign x_wget_fst__h2963 = csr_op_arg_wget[129:66] ;
  assign x_wget_snd_fst__h3048 = csr_op_arg_wget[65:2] ;
  assign x_wget_snd_snd__h3049 = csr_op_arg_wget[1:0] ;
  always@(ma_core_req_req or
	  x__h8075 or
	  rg_sscratch or
	  x__h2886 or
	  rg_mscratch or
	  x__h3916 or
	  v_pmp_addr_0 or v_pmp_addr_1 or v_pmp_addr_2 or v_pmp_addr_3)
  begin
    case (ma_core_req_req[79:68])
      12'h140:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x301_THEN_ETC___d135 =
	      rg_sscratch;
      12'h301:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x301_THEN_ETC___d135 =
	      x__h2886;
      12'h340:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x301_THEN_ETC___d135 =
	      rg_mscratch;
      12'h3A0:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x301_THEN_ETC___d135 =
	      x__h3916;
      12'h3A2:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x301_THEN_ETC___d135 = 64'd0;
      12'h3B0:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x301_THEN_ETC___d135 =
	      v_pmp_addr_0;
      12'h3B1:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x301_THEN_ETC___d135 =
	      v_pmp_addr_1;
      12'h3B2:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x301_THEN_ETC___d135 =
	      v_pmp_addr_2;
      12'h3B3:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x301_THEN_ETC___d135 =
	      v_pmp_addr_3;
      default: IF_ma_core_req_req_BITS_79_TO_68_EQ_0x301_THEN_ETC___d135 =
		   x__h8075;
    endcase
  end
  always@(ma_core_req_req or x__h8097)
  begin
    case (ma_core_req_req[79:68])
      12'h301, 12'h340, 12'h3A0, 12'h3A2, 12'h3B0, 12'h3B1, 12'h3B2, 12'h3B3:
	  x_wget__h484 = x__h8097;
      default: x_wget__h484 = x__h8097;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_bpuenable <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_denable <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_ienable <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_misa_a <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_misa_c <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_misa_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_misa_f <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_misa_i <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_misa_m <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_misa_s <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_misa_u <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_mscratch <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_resp_to_core <= `BSV_ASSIGNMENT_DELAY 65'd0;
	rg_sscratch <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_pmp_addr_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_pmp_addr_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_pmp_addr_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_pmp_addr_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	v_pmp_cfg_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	v_pmp_cfg_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	v_pmp_cfg_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	v_pmp_cfg_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (rg_bpuenable_EN)
	  rg_bpuenable <= `BSV_ASSIGNMENT_DELAY rg_bpuenable_D_IN;
	if (rg_denable_EN)
	  rg_denable <= `BSV_ASSIGNMENT_DELAY rg_denable_D_IN;
	if (rg_ienable_EN)
	  rg_ienable <= `BSV_ASSIGNMENT_DELAY rg_ienable_D_IN;
	if (rg_misa_a_EN) rg_misa_a <= `BSV_ASSIGNMENT_DELAY rg_misa_a_D_IN;
	if (rg_misa_c_EN) rg_misa_c <= `BSV_ASSIGNMENT_DELAY rg_misa_c_D_IN;
	if (rg_misa_d_EN) rg_misa_d <= `BSV_ASSIGNMENT_DELAY rg_misa_d_D_IN;
	if (rg_misa_f_EN) rg_misa_f <= `BSV_ASSIGNMENT_DELAY rg_misa_f_D_IN;
	if (rg_misa_i_EN) rg_misa_i <= `BSV_ASSIGNMENT_DELAY rg_misa_i_D_IN;
	if (rg_misa_m_EN) rg_misa_m <= `BSV_ASSIGNMENT_DELAY rg_misa_m_D_IN;
	if (rg_misa_s_EN) rg_misa_s <= `BSV_ASSIGNMENT_DELAY rg_misa_s_D_IN;
	if (rg_misa_u_EN) rg_misa_u <= `BSV_ASSIGNMENT_DELAY rg_misa_u_D_IN;
	if (rg_mscratch_EN)
	  rg_mscratch <= `BSV_ASSIGNMENT_DELAY rg_mscratch_D_IN;
	if (rg_resp_to_core_EN)
	  rg_resp_to_core <= `BSV_ASSIGNMENT_DELAY rg_resp_to_core_D_IN;
	if (rg_sscratch_EN)
	  rg_sscratch <= `BSV_ASSIGNMENT_DELAY rg_sscratch_D_IN;
	if (v_pmp_addr_0_EN)
	  v_pmp_addr_0 <= `BSV_ASSIGNMENT_DELAY v_pmp_addr_0_D_IN;
	if (v_pmp_addr_1_EN)
	  v_pmp_addr_1 <= `BSV_ASSIGNMENT_DELAY v_pmp_addr_1_D_IN;
	if (v_pmp_addr_2_EN)
	  v_pmp_addr_2 <= `BSV_ASSIGNMENT_DELAY v_pmp_addr_2_D_IN;
	if (v_pmp_addr_3_EN)
	  v_pmp_addr_3 <= `BSV_ASSIGNMENT_DELAY v_pmp_addr_3_D_IN;
	if (v_pmp_cfg_0_EN)
	  v_pmp_cfg_0 <= `BSV_ASSIGNMENT_DELAY v_pmp_cfg_0_D_IN;
	if (v_pmp_cfg_1_EN)
	  v_pmp_cfg_1 <= `BSV_ASSIGNMENT_DELAY v_pmp_cfg_1_D_IN;
	if (v_pmp_cfg_2_EN)
	  v_pmp_cfg_2 <= `BSV_ASSIGNMENT_DELAY v_pmp_cfg_2_D_IN;
	if (v_pmp_cfg_3_EN)
	  v_pmp_cfg_3 <= `BSV_ASSIGNMENT_DELAY v_pmp_cfg_3_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_bpuenable = 1'h0;
    rg_denable = 1'h0;
    rg_ienable = 1'h0;
    rg_misa_a = 1'h0;
    rg_misa_c = 1'h0;
    rg_misa_d = 1'h0;
    rg_misa_f = 1'h0;
    rg_misa_i = 1'h0;
    rg_misa_m = 1'h0;
    rg_misa_s = 1'h0;
    rg_misa_u = 1'h0;
    rg_mscratch = 64'hAAAAAAAAAAAAAAAA;
    rg_resp_to_core = 65'h0AAAAAAAAAAAAAAAA;
    rg_sscratch = 64'hAAAAAAAAAAAAAAAA;
    v_pmp_addr_0 = 64'hAAAAAAAAAAAAAAAA;
    v_pmp_addr_1 = 64'hAAAAAAAAAAAAAAAA;
    v_pmp_addr_2 = 64'hAAAAAAAAAAAAAAAA;
    v_pmp_addr_3 = 64'hAAAAAAAAAAAAAAAA;
    v_pmp_cfg_0 = 8'hAA;
    v_pmp_cfg_1 = 8'hAA;
    v_pmp_cfg_2 = 8'hAA;
    v_pmp_cfg_3 = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mk_csr_grp2

