//
// Generated by Bluespec Compiler, version 2022.01-5-ge3edf4b1 (build e3edf4b1)
//
// On Fri Apr 15 12:46:26 EDT 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY__start                     O     1
// get_result                     O    70 reg
// RDY_get_result                 O     1 const
// RDY_flush                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start_operand1                I    64 reg
// _start_operand2                I    64 reg
// _start_operand3                I    64 reg
// _start_opcode                  I     4 reg
// _start_funct7                  I     7 reg
// _start_funct3                  I     3 reg
// _start_imm                     I     2 reg
// _start_issp                    I     1 reg
// EN__start                      I     1
// EN_flush                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfpu(CLK,
	     RST_N,

	     _start_operand1,
	     _start_operand2,
	     _start_operand3,
	     _start_opcode,
	     _start_funct7,
	     _start_funct3,
	     _start_imm,
	     _start_issp,
	     EN__start,
	     RDY__start,

	     get_result,
	     RDY_get_result,

	     EN_flush,
	     RDY_flush);
  input  CLK;
  input  RST_N;

  // action method _start
  input  [63 : 0] _start_operand1;
  input  [63 : 0] _start_operand2;
  input  [63 : 0] _start_operand3;
  input  [3 : 0] _start_opcode;
  input  [6 : 0] _start_funct7;
  input  [2 : 0] _start_funct3;
  input  [1 : 0] _start_imm;
  input  _start_issp;
  input  EN__start;
  output RDY__start;

  // value method get_result
  output [69 : 0] get_result;
  output RDY_get_result;

  // action method flush
  input  EN_flush;
  output RDY_flush;

  // signals for module outputs
  wire [69 : 0] get_result;
  wire RDY__start, RDY_flush, RDY_get_result;

  // inlined wires
  reg [171 : 0] inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget;
  reg [84 : 0] inst_spfpu_divider_int_div_wfn_divide_step_arg_wget;
  reg [69 : 0] rg_result_1_wget;
  wire [191 : 0] getMant64_arg_wget, setCanonicalNaN_arg_wget;
  wire [188 : 0] condFlags64_arg_wget;
  wire [155 : 0] getMant64_res_wget;
  wire [95 : 0] getMant32_arg_wget, setCanonicalNaN_res_wget;
  wire [92 : 0] condFlags32_arg_wget;
  wire [69 : 0] inst_dpfpu_sqrt_ff_final_out_1_wget;
  wire [68 : 0] getMant32_res_wget,
		inst_dpfm_add_sub_ff_final_out_wget,
		inst_dpfpu_divider_wr_final_out_wget;
  wire [67 : 0] inst_fpu_int_to_fp_fcvt_s_llu_arg_wget;
  wire [37 : 0] inst_spfpu_sqrt_ff_final_out_1_wget;
  wire [36 : 0] inst_spfm_add_sub_ff_final_out_wget,
		inst_spfpu_divider_wr_final_out_wget;
  wire [35 : 0] inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget;
  wire [32 : 0] getExp64_res_wget;
  wire [23 : 0] getExp32_res_wget;
  wire [14 : 0] condFlags32_res_wget, condFlags64_res_wget;
  wire inst_dpfpu_sqrt_ff_final_out_1_whas,
       inst_spfpu_sqrt_ff_final_out_1_whas,
       rg_result_1_whas;

  // register inst_dpfm_add_sub_ff_input_register
  reg [200 : 0] inst_dpfm_add_sub_ff_input_register;
  wire [200 : 0] inst_dpfm_add_sub_ff_input_register_D_IN;
  wire inst_dpfm_add_sub_ff_input_register_EN;

  // register inst_dpfm_add_sub_ff_stage2
  reg [203 : 0] inst_dpfm_add_sub_ff_stage2;
  wire [203 : 0] inst_dpfm_add_sub_ff_stage2_D_IN;
  wire inst_dpfm_add_sub_ff_stage2_EN;

  // register inst_dpfm_add_sub_ff_stage4
  reg [348 : 0] inst_dpfm_add_sub_ff_stage4;
  wire [348 : 0] inst_dpfm_add_sub_ff_stage4_D_IN;
  wire inst_dpfm_add_sub_ff_stage4_EN;

  // register inst_dpfm_add_sub_ff_stage5
  reg [196 : 0] inst_dpfm_add_sub_ff_stage5;
  wire [196 : 0] inst_dpfm_add_sub_ff_stage5_D_IN;
  wire inst_dpfm_add_sub_ff_stage5_EN;

  // register inst_dpfm_add_sub_rg_state_handler
  reg [2 : 0] inst_dpfm_add_sub_rg_state_handler;
  reg [2 : 0] inst_dpfm_add_sub_rg_state_handler_D_IN;
  wire inst_dpfm_add_sub_rg_state_handler_EN;

  // register inst_dpfpu_divider_int_div_rg_inter_stage
  reg [169 : 0] inst_dpfpu_divider_int_div_rg_inter_stage;
  wire [169 : 0] inst_dpfpu_divider_int_div_rg_inter_stage_D_IN;
  wire inst_dpfpu_divider_int_div_rg_inter_stage_EN;

  // register inst_dpfpu_divider_int_div_rg_state
  reg [5 : 0] inst_dpfpu_divider_int_div_rg_state;
  reg [5 : 0] inst_dpfpu_divider_int_div_rg_state_D_IN;
  wire inst_dpfpu_divider_int_div_rg_state_EN;

  // register inst_dpfpu_divider_rg_stage1
  reg [127 : 0] inst_dpfpu_divider_rg_stage1;
  wire [127 : 0] inst_dpfpu_divider_rg_stage1_D_IN;
  wire inst_dpfpu_divider_rg_stage1_EN;

  // register inst_dpfpu_divider_rg_stage2
  reg [21 : 0] inst_dpfpu_divider_rg_stage2;
  wire [21 : 0] inst_dpfpu_divider_rg_stage2_D_IN;
  wire inst_dpfpu_divider_rg_stage2_EN;

  // register inst_dpfpu_divider_rg_stage3
  reg [138 : 0] inst_dpfpu_divider_rg_stage3;
  wire [138 : 0] inst_dpfpu_divider_rg_stage3_D_IN;
  wire inst_dpfpu_divider_rg_stage3_EN;

  // register inst_dpfpu_divider_rg_state_handler
  reg [1 : 0] inst_dpfpu_divider_rg_state_handler;
  reg [1 : 0] inst_dpfpu_divider_rg_state_handler_D_IN;
  wire inst_dpfpu_divider_rg_state_handler_EN;

  // register inst_dpfpu_sqrt_ff_final_out
  reg [69 : 0] inst_dpfpu_sqrt_ff_final_out;
  wire [69 : 0] inst_dpfpu_sqrt_ff_final_out_D_IN;
  wire inst_dpfpu_sqrt_ff_final_out_EN;

  // register inst_dpfpu_sqrt_rg_inter_stage
  reg [293 : 0] inst_dpfpu_sqrt_rg_inter_stage;
  wire [293 : 0] inst_dpfpu_sqrt_rg_inter_stage_D_IN;
  wire inst_dpfpu_sqrt_rg_inter_stage_EN;

  // register inst_dpfpu_sqrt_rg_state
  reg [5 : 0] inst_dpfpu_sqrt_rg_state;
  reg [5 : 0] inst_dpfpu_sqrt_rg_state_D_IN;
  wire inst_dpfpu_sqrt_rg_state_EN;

  // register inst_spfm_add_sub_ff_input_register
  reg [107 : 0] inst_spfm_add_sub_ff_input_register;
  wire [107 : 0] inst_spfm_add_sub_ff_input_register_D_IN;
  wire inst_spfm_add_sub_ff_input_register_EN;

  // register inst_spfm_add_sub_ff_stage2
  reg [110 : 0] inst_spfm_add_sub_ff_stage2;
  wire [110 : 0] inst_spfm_add_sub_ff_stage2_D_IN;
  wire inst_spfm_add_sub_ff_stage2_EN;

  // register inst_spfm_add_sub_ff_stage4
  reg [171 : 0] inst_spfm_add_sub_ff_stage4;
  wire [171 : 0] inst_spfm_add_sub_ff_stage4_D_IN;
  wire inst_spfm_add_sub_ff_stage4_EN;

  // register inst_spfm_add_sub_ff_stage5
  reg [105 : 0] inst_spfm_add_sub_ff_stage5;
  wire [105 : 0] inst_spfm_add_sub_ff_stage5_D_IN;
  wire inst_spfm_add_sub_ff_stage5_EN;

  // register inst_spfm_add_sub_rg_state_handler
  reg [2 : 0] inst_spfm_add_sub_rg_state_handler;
  reg [2 : 0] inst_spfm_add_sub_rg_state_handler_D_IN;
  wire inst_spfm_add_sub_rg_state_handler_EN;

  // register inst_spfpu_divider_int_div_rg_inter_stage
  reg [82 : 0] inst_spfpu_divider_int_div_rg_inter_stage;
  wire [82 : 0] inst_spfpu_divider_int_div_rg_inter_stage_D_IN;
  wire inst_spfpu_divider_int_div_rg_inter_stage_EN;

  // register inst_spfpu_divider_int_div_rg_state
  reg [5 : 0] inst_spfpu_divider_int_div_rg_state;
  reg [5 : 0] inst_spfpu_divider_int_div_rg_state_D_IN;
  wire inst_spfpu_divider_int_div_rg_state_EN;

  // register inst_spfpu_divider_rg_stage1
  reg [66 : 0] inst_spfpu_divider_rg_stage1;
  wire [66 : 0] inst_spfpu_divider_rg_stage1_D_IN;
  wire inst_spfpu_divider_rg_stage1_EN;

  // register inst_spfpu_divider_rg_stage2
  reg [18 : 0] inst_spfpu_divider_rg_stage2;
  wire [18 : 0] inst_spfpu_divider_rg_stage2_D_IN;
  wire inst_spfpu_divider_rg_stage2_EN;

  // register inst_spfpu_divider_rg_stage3
  reg [77 : 0] inst_spfpu_divider_rg_stage3;
  wire [77 : 0] inst_spfpu_divider_rg_stage3_D_IN;
  wire inst_spfpu_divider_rg_stage3_EN;

  // register inst_spfpu_divider_rg_state_handler
  reg [1 : 0] inst_spfpu_divider_rg_state_handler;
  reg [1 : 0] inst_spfpu_divider_rg_state_handler_D_IN;
  wire inst_spfpu_divider_rg_state_handler_EN;

  // register inst_spfpu_sqrt_ff_final_out
  reg [37 : 0] inst_spfpu_sqrt_ff_final_out;
  wire [37 : 0] inst_spfpu_sqrt_ff_final_out_D_IN;
  wire inst_spfpu_sqrt_ff_final_out_EN;

  // register inst_spfpu_sqrt_rg_inter_stage
  reg [145 : 0] inst_spfpu_sqrt_rg_inter_stage;
  wire [145 : 0] inst_spfpu_sqrt_rg_inter_stage_D_IN;
  wire inst_spfpu_sqrt_rg_inter_stage_EN;

  // register inst_spfpu_sqrt_rg_state
  reg [5 : 0] inst_spfpu_sqrt_rg_state;
  reg [5 : 0] inst_spfpu_sqrt_rg_state_D_IN;
  wire inst_spfpu_sqrt_rg_state_EN;

  // register rg_multicycle_op
  reg rg_multicycle_op;
  wire rg_multicycle_op_D_IN, rg_multicycle_op_EN;

  // register rg_result
  reg [69 : 0] rg_result;
  wire [69 : 0] rg_result_D_IN;
  wire rg_result_EN;

  // ports of submodule ff_input
  wire [208 : 0] ff_input_D_IN, ff_input_D_OUT;
  wire ff_input_CLR,
       ff_input_DEQ,
       ff_input_EMPTY_N,
       ff_input_ENQ,
       ff_input_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_flush_fifo,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_flush,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4,
       CAN_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_flush,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_rl_flush,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1,
       CAN_FIRE_RL_inst_spfpu_divider_rl_flush,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage2,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage3,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage4,
       CAN_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_flush,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2,
       CAN_FIRE_RL_rg_result__dreg_update,
       CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub,
       CAN_FIRE_RL_rl_get_output_from_dpfpu_divider,
       CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt,
       CAN_FIRE_RL_rl_get_output_from_fm_add_sub,
       CAN_FIRE_RL_rl_get_output_from_spfpu_divider,
       CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       CAN_FIRE_RL_start_stage,
       CAN_FIRE___me_check_1,
       CAN_FIRE___me_check_10,
       CAN_FIRE___me_check_11,
       CAN_FIRE___me_check_12,
       CAN_FIRE___me_check_19,
       CAN_FIRE___me_check_2,
       CAN_FIRE___me_check_20,
       CAN_FIRE___me_check_21,
       CAN_FIRE___me_check_23,
       CAN_FIRE___me_check_24,
       CAN_FIRE___me_check_28,
       CAN_FIRE___me_check_29,
       CAN_FIRE___me_check_3,
       CAN_FIRE___me_check_30,
       CAN_FIRE___me_check_38,
       CAN_FIRE___me_check_39,
       CAN_FIRE___me_check_40,
       CAN_FIRE___me_check_41,
       CAN_FIRE___me_check_42,
       CAN_FIRE___me_check_5,
       CAN_FIRE___me_check_6,
       CAN_FIRE__start,
       CAN_FIRE_flush,
       WILL_FIRE_RL_flush_fifo,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_flush,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4,
       WILL_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_flush,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_rl_flush,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1,
       WILL_FIRE_RL_inst_spfpu_divider_rl_flush,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage2,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage3,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage4,
       WILL_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_flush,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2,
       WILL_FIRE_RL_rg_result__dreg_update,
       WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub,
       WILL_FIRE_RL_rl_get_output_from_dpfpu_divider,
       WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt,
       WILL_FIRE_RL_rl_get_output_from_fm_add_sub,
       WILL_FIRE_RL_rl_get_output_from_spfpu_divider,
       WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       WILL_FIRE_RL_start_stage,
       WILL_FIRE___me_check_1,
       WILL_FIRE___me_check_10,
       WILL_FIRE___me_check_11,
       WILL_FIRE___me_check_12,
       WILL_FIRE___me_check_19,
       WILL_FIRE___me_check_2,
       WILL_FIRE___me_check_20,
       WILL_FIRE___me_check_21,
       WILL_FIRE___me_check_23,
       WILL_FIRE___me_check_24,
       WILL_FIRE___me_check_28,
       WILL_FIRE___me_check_29,
       WILL_FIRE___me_check_3,
       WILL_FIRE___me_check_30,
       WILL_FIRE___me_check_38,
       WILL_FIRE___me_check_39,
       WILL_FIRE___me_check_40,
       WILL_FIRE___me_check_41,
       WILL_FIRE___me_check_42,
       WILL_FIRE___me_check_5,
       WILL_FIRE___me_check_6,
       WILL_FIRE__start,
       WILL_FIRE_flush;

  // inputs to muxes for submodule ports
  reg [69 : 0] MUX_rg_result_1_wset_1__VAL_1;
  wire [293 : 0] MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1,
		 MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2;
  wire [171 : 0] MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1,
		 MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2,
		 MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
  wire [145 : 0] MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1,
		 MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2;
  wire [84 : 0] MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1,
		MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2,
		MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
  wire [69 : 0] MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1,
		MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2,
		MUX_rg_result_1_wset_1__VAL_2,
		MUX_rg_result_1_wset_1__VAL_3,
		MUX_rg_result_1_wset_1__VAL_4,
		MUX_rg_result_1_wset_1__VAL_5,
		MUX_rg_result_1_wset_1__VAL_6,
		MUX_rg_result_1_wset_1__VAL_7;
  wire [37 : 0] MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1,
		MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2;
  wire [5 : 0] MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2,
	       MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1,
	       MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2,
	       MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
  wire MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1,
       MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1,
       MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1,
       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1,
       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1,
       MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1,
       MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1,
       MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1,
       MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1,
       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1,
       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1,
       MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1,
       MUX_rg_multicycle_op_write_1__SEL_1,
       MUX_rg_result_1_wset_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d6060;
  reg TASK_testplusargs___d6061;
  reg TASK_testplusargs___d6062;
  reg [63 : 0] v__h345288;
  reg TASK_testplusargs___d6066;
  reg TASK_testplusargs___d6067;
  reg TASK_testplusargs___d6068;
  reg [63 : 0] v__h345423;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q32;
  reg [31 : 0] CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q54,
	       CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q36;
  reg CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q7,
      CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q43,
      IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5011,
      IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5135,
      IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3702,
      IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3934,
      IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d4100,
      IF_inst_dpfm_add_sub_ff_stage5_read__156_BITS__ETC___d3221,
      IF_inst_dpfpu_divider_rg_stage3_675_BITS_4_TO__ETC___d1720,
      IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_BI_ETC___d1833,
      IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238,
      IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317,
      IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430,
      _theResult_____4___1__h264655;
  wire [211 : 0] _0_CONCAT_INV_IF_condFlags64_res_whas__428_THEN_ETC___d5277;
  wire [169 : 0] inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14,
		 x__h71463,
		 x_wget__h66729;
  wire [159 : 0] IF_IF_inst_dpfm_add_sub_ff_stage2_read__373_BI_ETC___d2414,
		 IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200,
		 _theResult____h117983,
		 _theResult____h167734,
		 _theResult___snd_fst__h194407,
		 _theResult___snd_fst__h194409,
		 add_mantissa__h167730,
		 mantissa2__h117970,
		 mantissa2__h117992,
		 mantissa2__h118013,
		 mantissa3___1__h137703,
		 mantissa3__h118014,
		 mantissa_to_shift___1__h118011,
		 mantissa_to_shift__h118006,
		 resultant_mantissa___1__h194162,
		 resultant_mantissa_norm_expo__h193856,
		 resultant_mantissa_norm_zerosMSB__h193857,
		 sub_mantissa1__h167731,
		 sub_mantissa2__h167732,
		 sub_mantissa__h167733;
  wire [125 : 0] IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d4774,
		 IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4773,
		 IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4776;
  wire [115 : 0] _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025,
		 final_man__h251118;
  wire [113 : 0] IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1400,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1376,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1401,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q18,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19,
		 inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q15,
		 inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16;
  wire [112 : 0] IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1383,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1351;
  wire [109 : 0] IF_IF_IF_condFlags64_res_whas__428_THEN_condFl_ETC___d5989,
		 mantissa___1__h333118,
		 mantissa__h314784,
		 mantissa__h314786,
		 mantissa__h314796,
		 mantissa__h89219;
  wire [106 : 0] IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2109,
		 _theResult_____1_snd__h107961,
		 _theResult_____1_snd__h107964,
		 _theResult___snd_fst__h108001,
		 lv_product_mantissa___1__h107932,
		 lv_product_mantissa___1__h107947,
		 lv_product_mantissa__h107902,
		 lv_product_mantissa__h90452,
		 lv_product_mantissa_shiftL_expo__h107910,
		 lv_product_mantissa_shiftL_zerosMSB__h107912,
		 x_lv_product_mantissa__h90529;
  wire [95 : 0] _0_CONCAT_INV_IF_condFlags32_res_whas__343_THEN_ETC___d5198;
  wire [86 : 0] _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858,
		final_man__h248046;
  wire [82 : 0] inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8,
		x__h5456,
		x_wget__h695;
  wire [72 : 0] IF_IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_ETC___d779,
		IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217,
		_theResult____h30260,
		_theResult____h53476,
		_theResult___snd_fst__h66055,
		_theResult___snd_fst__h66057,
		add_mantissa__h53472,
		mantissa2__h30247,
		mantissa2__h30269,
		mantissa2__h30290,
		mantissa3___1__h39482,
		mantissa3__h30291,
		mantissa_to_shift___1__h30288,
		mantissa_to_shift__h30283,
		resultant_mantissa___1__h65810,
		resultant_mantissa_norm_expo__h65504,
		resultant_mantissa_norm_zerosMSB__h65505,
		sub_mantissa1__h53473,
		sub_mantissa2__h53474,
		sub_mantissa__h53475;
  wire [69 : 0] IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4457,
		IF_ff_input_first__309_BIT_0_341_THEN_0xFFFFFF_ETC___d4449,
		IF_ff_input_first__309_BIT_0_341_THEN_42949672_ETC___d3802,
		IF_ff_input_first__309_BIT_0_341_THEN_IF_NOT_I_ETC___d4252,
		IF_ff_input_first__309_BIT_0_341_THEN_IF_ff_in_ETC___d3521;
  wire [68 : 0] IF_inst_dpfpu_divider_rg_stage3_675_BIT_10_682_ETC___d1763;
  wire [63 : 0] IF_0b0_CONCAT_getExp64_res_wget__986_BITS_32_T_ETC___d4051,
		IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d4426,
		IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d3483,
		IF_IF_getExp32_res_whas__818_THEN_getExp32_res_ETC___d3885,
		IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986,
		IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682,
		IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3481,
		IF_ff_input_first__309_BIT_1_534_THEN_0_ELSE_1_ETC___d3883,
		IF_ff_input_first__309_BIT_3_362_AND_IF_condFl_ETC___d3480,
		NOT_ff_input_first__309_BIT_1_534_548_AND_ff_i_ETC___d3713,
		_theResult_____1_fst__h87506,
		_theResult_____1_snd__h249737,
		_theResult_____1_snd__h252808,
		_theResult_____2_snd__h249412,
		_theResult_____2_snd__h249519,
		_theResult_____2_snd__h249571,
		_theResult_____2_snd__h249622,
		_theResult_____2_snd__h249625,
		_theResult_____2_snd__h252485,
		_theResult_____2_snd__h252590,
		_theResult_____2_snd__h252642,
		_theResult_____2_snd__h252693,
		_theResult_____2_snd__h252696,
		_theResult_____3_snd__h228528,
		_theResult_____3_snd__h229144,
		_theResult_____3_snd_snd_fst__h248640,
		_theResult_____3_snd_snd_fst__h251715,
		_theResult_____3_snd_snd_snd__h194002,
		_theResult____h209743,
		_theResult____h220847,
		_theResult___snd__h249119,
		_theResult___snd__h249123,
		_theResult___snd__h249193,
		_theResult___snd__h249263,
		_theResult___snd__h249267,
		_theResult___snd__h249338,
		_theResult___snd__h252192,
		_theResult___snd__h252196,
		_theResult___snd__h252266,
		_theResult___snd__h252336,
		_theResult___snd__h252340,
		_theResult___snd__h252411,
		_theResult___snd_final_result__h220855,
		_theResult___snd_snd__h249004,
		_theResult___snd_snd__h252079,
		_theResult___snd_snd_snd_fst__h249054,
		_theResult___snd_snd_snd_fst__h249056,
		_theResult___snd_snd_snd_fst__h249060,
		_theResult___snd_snd_snd_fst__h249088,
		_theResult___snd_snd_snd_fst__h249137,
		_theResult___snd_snd_snd_fst__h249162,
		_theResult___snd_snd_snd_fst__h249200,
		_theResult___snd_snd_snd_fst__h249204,
		_theResult___snd_snd_snd_fst__h249231,
		_theResult___snd_snd_snd_fst__h249281,
		_theResult___snd_snd_snd_fst__h249306,
		_theResult___snd_snd_snd_fst__h252127,
		_theResult___snd_snd_snd_fst__h252129,
		_theResult___snd_snd_snd_fst__h252133,
		_theResult___snd_snd_snd_fst__h252161,
		_theResult___snd_snd_snd_fst__h252210,
		_theResult___snd_snd_snd_fst__h252235,
		_theResult___snd_snd_snd_fst__h252273,
		_theResult___snd_snd_snd_fst__h252277,
		_theResult___snd_snd_snd_fst__h252304,
		_theResult___snd_snd_snd_fst__h252354,
		_theResult___snd_snd_snd_fst__h252379,
		_theResult___snd_snd_snd_snd_fst__h248998,
		_theResult___snd_snd_snd_snd_fst__h252073,
		final_result___1__h248401,
		final_result___1__h248433,
		final_result___1__h248522,
		final_result___1__h249064,
		final_result___1__h249663,
		final_result___1__h249693,
		final_result___1__h251476,
		final_result___1__h251508,
		final_result___1__h251597,
		final_result___1__h252137,
		final_result___1__h252734,
		final_result___1__h252764,
		final_result___2__h248683,
		final_result___2__h249624,
		final_result___2__h251757,
		final_result___2__h252695,
		final_result___3__h248635,
		final_result___3__h251710,
		final_result__h248054,
		final_result__h251126,
		final_result__h265349,
		final_result__h265372,
		final_result__h315219,
		final_result__h89566,
		getMant64_argwget_BITS_127_TO_64__q23,
		getMant64_argwget_BITS_191_TO_128__q22,
		getMant64_argwget_BITS_63_TO_0__q24,
		inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21,
		lv_final_output__h87484,
		lv_result__h229188,
		lv_result__h229229,
		new_value_final_result__h193908,
		setCanonicalNaN_argwget_BITS_127_TO_64__q39,
		setCanonicalNaN_argwget_BITS_191_TO_128__q38,
		setCanonicalNaN_argwget_BITS_63_TO_0__q40,
		x_data__h225919,
		x_data__h228497,
		x_data__h229480,
		x_data__h229636,
		x_data__h245809,
		x_data__h246113,
		x_data__h248077,
		x_data__h251149,
		x_data__h258075,
		x_data__h265273,
		x_data__h265345,
		x_data__h344813,
		x_data__h344937,
		x_data__h345052;
  wire [62 : 0] IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d4423,
		IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__15_ETC___d3248,
		IF_NOT_inst_dpfpu_divider_rg_stage3_675_BITS_8_ETC___d1753,
		IF_inst_dpfpu_divider_rg_stage3_675_BIT_7_731__ETC___d1752;
  wire [61 : 0] IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d4639,
		IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4641;
  wire [57 : 0] IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q17,
		_remainder___1__h69609,
		_remainder__h69437,
		_theResult_____3__h314794,
		_theResult____h89217,
		lv_remainder__h89333,
		lv_remainder__h89423,
		lv_remainder__h89987,
		lv_remainder_temp__h89214,
		lv_root_rem__h89554,
		lv_root_temp_1__h89215,
		lv_root_temp_2__h89216,
		x__h89965;
  wire [55 : 0] IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d84,
		IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_ETC__q6,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d60,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d85,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13,
		IF_inst_dpfpu_divider_int_div_wr_final_out_wha_ETC___d1574,
		_denominator__h71398,
		_dividend___1__h69610,
		_dividend__h68802,
		_dividend__h68938,
		_dividend__h69439,
		_dividend__h69440,
		_numerator__h71399,
		_theResult___fst__h73013,
		_theResult___fst__h73032,
		_theResult___fst__h87165,
		_theResult___fst__h87169,
		inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10,
		inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9,
		lv_extended_mantissa___1__h90052,
		lv_extended_mantissa__h89562,
		lv_quotient___1__h73049,
		lv_quotient_shiftL_expo__h73025,
		lv_quotient_shiftL_zerosMSB__h73027,
		x_lv_quotient__h72915;
  wire [54 : 0] IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__428_ETC___d5996,
		IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q37,
		IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35,
		result_mantissa__h89553,
		x__h333147,
		x__h89263,
		x__h89526;
  wire [53 : 0] IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3245,
		IF_IF_IF_inst_dpfpu_divider_rg_stage3_675_BITS_ETC___d1728,
		IF_IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0_ETC___d3706,
		_theResult_____4__h87382,
		_theResult_____5__h193878,
		lv_man___1__h245706,
		lv_man__h235047,
		lv_rounded_mantissa___1__h194562,
		lv_rounded_mantissa__h194592,
		lv_rounded_quotient___1__h87749,
		lv_rounded_quotient__h87381,
		lv_rounded_quotient__h87779;
  wire [52 : 0] man1__h284172,
		man2__h284173,
		x__h270354,
		x__h270440,
		x__h301424,
		x__h301452;
  wire [51 : 0] IF_IF_IF_condFlags32_res_whas__343_THEN_condFl_ETC___d5813,
		IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038,
		_theResult___fst__h251370,
		_theResult___fst__h251380,
		_theResult___fst__h251427,
		_theResult___fst__h251468,
		_theResult___fst__h251487,
		_theResult___fst__h251529,
		_theResult___fst__h251548,
		_theResult___fst__h251576,
		_theResult___fst__h251618,
		_theResult___fst__h251636,
		_theResult___fst__h251678,
		condFlags64_argwget_BITS_125_TO_74__q28,
		condFlags64_argwget_BITS_188_TO_137__q27,
		condFlags64_argwget_BITS_62_TO_11__q29,
		getMant64_reswget_BITS_103_TO_52__q33,
		getMant64_reswget_BITS_155_TO_104__q25,
		man__h258380,
		mant__h258320,
		mantissa___1__h313190,
		mantissa__h15992,
		mantissa__h220838,
		mantissa__h304193,
		mantissa__h304195,
		mantissa__h304205;
  wire [48 : 0] IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313,
		IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d590,
		_theResult_____1_snd__h25400,
		_theResult_____1_snd__h25403,
		_theResult___snd_fst__h25440,
		lv_product_mantissa___1__h25371,
		lv_product_mantissa___1__h25386,
		lv_product_mantissa__h17229,
		lv_product_mantissa__h25341,
		lv_product_mantissa_shiftL_expo__h25349,
		lv_product_mantissa_shiftL_zerosMSB__h25351,
		man__h264258,
		man__h264375,
		x_lv_product_mantissa__h17306,
		y_avValue_snd_snd_fst__h264722;
  wire [36 : 0] IF_inst_spfpu_divider_rg_stage3_72_BIT_10_79_T_ETC___d360,
		x_wget__h195058,
		x_wget__h195196;
  wire [31 : 0] IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3404,
		IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4363,
		IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4361,
		IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110,
		IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3400,
		IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3402,
		IF_ff_input_first__309_BIT_3_362_AND_IF_condFl_ETC___d3401,
		_1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC__q48,
		_1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC__q26,
		_theResult_____1_fst__h14278,
		_theResult_____3_snd__h225975,
		_theResult_____3_snd__h226597,
		_theResult_____3_snd_snd_snd__h65650,
		_theResult____h203871,
		_theResult____h220834,
		_theResult___snd_fst__h265182,
		ff_inputD_OUT_BITS_176_TO_145__q1,
		final_result___248683_BITS_31_TO_0__q57,
		final_result___249624_BITS_31_TO_0__q56,
		final_result___251757_BITS_31_TO_0__q35,
		final_result___252695_BITS_31_TO_0__q34,
		final_result__h16339,
		final_result__h304629,
		getMant32_argwget_BITS_31_TO_0__q46,
		getMant32_argwget_BITS_63_TO_32__q45,
		getMant32_argwget_BITS_95_TO_64__q44,
		inp32___1__h230088,
		inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20,
		lv_final_output__h14256,
		lv_result__h226641,
		lv_result__h226682,
		new_value_final_result__h65556,
		res___1__h265184,
		res__h203788,
		res__h264525,
		setCanonicalNaN_reswget_BITS_31_TO_0__q59,
		setCanonicalNaN_reswget_BITS_63_TO_32__q42,
		setCanonicalNaN_reswget_BITS_95_TO_64__q41,
		theResult__20834_SL_x29708_BITS_4_TO_0__q2,
		x1_avValue_final_result__h203793,
		x1_avValue_final_result__h209652,
		x1_avValue_final_result__h220732,
		x1_avValue_final_result__h220740,
		x1_avValue_final_result__h245798,
		x1_avValue_snd_fst__h265179,
		x__h220916,
		x__h221057,
		x__h221139,
		y_avValue_snd_fst__h265176;
  wire [30 : 0] IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1265,
		IF_NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_ETC___d350,
		IF_inst_spfpu_divider_rg_stage3_72_BIT_7_28_OR_ETC___d349;
  wire [28 : 0] IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q11,
		_remainder___1__h3596,
		_remainder__h3424,
		_theResult_____3__h304203,
		_theResult____h15990,
		lv_remainder__h16106,
		lv_remainder__h16196,
		lv_remainder__h16760,
		lv_remainder_temp__h15987,
		lv_root_rem__h16327,
		lv_root_temp_1__h15988,
		lv_root_temp_2__h15989,
		x__h16738;
  wire [26 : 0] IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q4,
		IF_inst_spfpu_divider_int_div_wr_final_out_wha_ETC___d200,
		_denominator__h5391,
		_dividend___1__h3597,
		_dividend__h2789,
		_dividend__h2925,
		_dividend__h3426,
		_dividend__h3427,
		_numerator__h5392,
		_theResult___fst__h13937,
		_theResult___fst__h13941,
		_theResult___fst__h7006,
		_theResult___fst__h7025,
		lv_extended_mantissa___1__h16825,
		lv_extended_mantissa__h16335,
		lv_quotient___1__h7042,
		lv_quotient_shiftL_expo__h7018,
		lv_quotient_shiftL_zerosMSB__h7020,
		x_lv_quotient__h6908;
  wire [25 : 0] IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__343_ETC___d5820,
		IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58,
		result_mantissa__h16326,
		x__h16036,
		x__h16299,
		x__h313219;
  wire [24 : 0] IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5015,
		IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5139,
		IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1262,
		IF_IF_IF_inst_spfpu_divider_rg_stage3_72_BITS__ETC___d325,
		_theResult_____4__h14154,
		_theResult_____5__h65526,
		lv_man___1__h209557,
		lv_man___1__h220632,
		lv_man__h203886,
		lv_man__h209758,
		lv_rounded_mantissa___1__h66210,
		lv_rounded_mantissa__h66240,
		lv_rounded_quotient___1__h14521,
		lv_rounded_quotient__h14153,
		lv_rounded_quotient__h14551;
  wire [23 : 0] IF_IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0_ETC___d4340,
		fman___1__h265205,
		fman__h264863,
		man1__h274170,
		man2__h274171,
		x__h268167,
		x__h268253,
		x__h282084,
		x__h282112;
  wire [22 : 0] IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871,
		_theResult___fst__h248295,
		_theResult___fst__h248305,
		_theResult___fst__h248352,
		_theResult___fst__h248393,
		_theResult___fst__h248412,
		_theResult___fst__h248454,
		_theResult___fst__h248473,
		_theResult___fst__h248501,
		_theResult___fst__h248543,
		_theResult___fst__h248561,
		_theResult___fst__h248603,
		condFlags32_argwget_BITS_30_TO_8__q51,
		condFlags32_argwget_BITS_61_TO_39__q50,
		condFlags32_argwget_BITS_92_TO_70__q49,
		getMant32_reswget_BITS_45_TO_23__q55,
		getMant32_reswget_BITS_68_TO_46__q47,
		value__h262139;
  wire [12 : 0] IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3232,
		IF_NOT_inst_dpfpu_divider_rg_stage3_675_BIT_13_ETC___d1740,
		_0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3175,
		_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1871,
		_1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1449,
		_theResult_____1_fst__h107960,
		_theResult_____1_fst__h107963,
		_theResult_____4_snd_fst__h118212,
		_theResult___fst__h107916,
		_theResult___fst__h194190,
		_theResult___fst__h194194,
		_theResult___snd_fst__h87249,
		_theResult___snd_fst__h87259,
		_theResult___snd_fst__h87267,
		_theResult___snd_fst__h87277,
		_theResult___snd_fst__h87279,
		exp1__h284180,
		exp1_temp__h270301,
		exp2__h284181,
		exp2_temp__h270302,
		exponent2__h117993,
		exponent3__h117972,
		exponent3__h117984,
		exponent_difference__h118007,
		inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1862,
		inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1446,
		lv_exponent___1__h87778,
		lv_exponent___1__h87865,
		lv_exponent__h284182,
		lv_exponent__h87384,
		lv_exponent_inc_shift__h73023,
		lv_exponent_sub_shift__h73026,
		lv_exponent_sub_zerosMSB__h73028,
		lv_minuend__h118003,
		lv_product_exponent___1__h107933,
		lv_product_exponent__h107900,
		lv_product_exponent_inc_shift__h107908,
		lv_product_exponent_sub_shift__h107911,
		lv_product_exponent_sub_zerosMSB__h107913,
		lv_summed_exponent__h270303,
		resultant_exponent___1__h194591,
		resultant_exponent__h193860,
		resultant_exponent_inc__h193855,
		resultant_exponent_sub__h193853,
		resultant_exponent_sub_zerosMSB__h193858,
		shift_neg__h107909,
		shift_neg__h73024,
		x__h107996,
		x__h270555,
		x__h270557,
		x__h270559,
		x__h284244,
		x_lv_exponent__h72916,
		x_lv_product_exponent__h90528,
		y__h107995,
		y__h270556,
		y__h270558,
		y__h284243,
		y__h284245,
		y__h284246,
		y__h292838;
  wire [11 : 0] IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5982,
		IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_ETC__q5,
		_theResult_____1_fst__h90053,
		exponent___1__h315365,
		lv_exp__h251115,
		result_exponent___1__h90075,
		result_exponent__h314793,
		x__h251251,
		x__h315336,
		x__h315367,
		x__h333391,
		x__h333393,
		y__h315337,
		y__h333392;
  wire [10 : 0] expo__h220837,
		expo__h220850,
		expo__h258319,
		expo__h258378,
		local_expo___1__h245729,
		shiftDist__h264257,
		x__h264405;
  wire [9 : 0] IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249,
	       IF_NOT_inst_spfpu_divider_rg_stage3_72_BIT_77__ETC___d337,
	       _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1192,
	       _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468,
	       _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133,
	       _theResult_____1_fst__h25399,
	       _theResult_____1_fst__h25402,
	       _theResult_____4_snd_fst__h30489,
	       _theResult___fst__h25355,
	       _theResult___fst__h65838,
	       _theResult___fst__h65842,
	       _theResult___snd_fst__h14021,
	       _theResult___snd_fst__h14031,
	       _theResult___snd_fst__h14039,
	       _theResult___snd_fst__h14049,
	       _theResult___snd_fst__h14051,
	       exp1__h274178,
	       exp1_temp__h268114,
	       exp2__h274179,
	       exp2_temp__h268115,
	       exponent2__h30270,
	       exponent3__h30249,
	       exponent3__h30261,
	       exponent_difference__h30284,
	       inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d459,
	       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130,
	       lv_exponent___1__h14550,
	       lv_exponent___1__h14637,
	       lv_exponent__h14156,
	       lv_exponent__h274180,
	       lv_exponent_inc_shift__h7016,
	       lv_exponent_sub_shift__h7019,
	       lv_exponent_sub_zerosMSB__h7021,
	       lv_minuend__h30280,
	       lv_product_exponent___1__h25372,
	       lv_product_exponent__h25339,
	       lv_product_exponent_inc_shift__h25347,
	       lv_product_exponent_sub_shift__h25350,
	       lv_product_exponent_sub_zerosMSB__h25352,
	       lv_summed_exponent__h268116,
	       resultant_exponent___1__h66239,
	       resultant_exponent__h65508,
	       resultant_exponent_inc__h65503,
	       resultant_exponent_sub__h65501,
	       resultant_exponent_sub_zerosMSB__h65506,
	       shift_neg__h25348,
	       shift_neg__h7017,
	       x__h25435,
	       x__h254619,
	       x__h256096,
	       x__h268368,
	       x__h268370,
	       x__h268372,
	       x__h274242,
	       x_lv_exponent__h6909,
	       x_lv_product_exponent__h17305,
	       y__h25434,
	       y__h268369,
	       y__h268371,
	       y__h274241,
	       y__h274243,
	       y__h274244,
	       y__h278167;
  wire [8 : 0] IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5806,
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q3,
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5252,
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5325,
	       _theResult_____1_fst__h16826,
	       exponent___1__h304775,
	       exponent__h304189,
	       result_exponent___1__h16848,
	       result_exponent__h304202,
	       x__h304746,
	       x__h304777,
	       x__h313463,
	       x__h313465,
	       y__h304747,
	       y__h313464;
  wire [7 : 0] IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822,
	       _theResult_____2__h264919,
	       expo___1__h265208,
	       expo__h203873,
	       expo__h209745,
	       expo__h264520,
	       local_expo___1__h209582,
	       local_expo___1__h220657,
	       lv_zeros_on_left__h167736,
	       x__h153079,
	       x__h194439;
  wire [6 : 0] lsb_zeros__h107906,
	       lv_leading_zeros__h314785,
	       lv_zeros_on_left__h53478,
	       msb_zeros___1__h107935,
	       msb_zeros__h107904,
	       msb_zeros__h90471,
	       x__h107970,
	       x__h210053,
	       x__h235143,
	       x__h333121,
	       x__h46564,
	       x__h66087;
  wire [5 : 0] IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d5250,
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d5323,
	       lsb_zeros__h25345,
	       lsb_zeros__h73021,
	       lv_leading_zeros__h304194,
	       msb_zeros___1__h25374,
	       msb_zeros__h17248,
	       msb_zeros__h25343,
	       msb_zeros__h72864,
	       x__h204163,
	       x__h229708,
	       x__h25409,
	       x__h284251,
	       x__h292839,
	       x__h313193;
  wire [4 : 0] IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4442,
	       IF_NOT_IF_getExp64_res_whas__293_THEN_getExp64_ETC___d4436,
	       IF_ff_input_first__309_BIT_0_341_THEN_IF_NOT_I_ETC___d4251,
	       _theResult_____1_snd__h14257,
	       _theResult_____1_snd__h14268,
	       _theResult_____1_snd__h14279,
	       _theResult_____1_snd__h14296,
	       _theResult_____1_snd__h14406,
	       _theResult_____1_snd__h14646,
	       _theResult_____1_snd__h14664,
	       _theResult_____1_snd__h87485,
	       _theResult_____1_snd__h87496,
	       _theResult_____1_snd__h87507,
	       _theResult_____1_snd__h87524,
	       _theResult_____1_snd__h87634,
	       _theResult_____1_snd__h87874,
	       _theResult_____1_snd__h87892,
	       _theResult_____3_fst__h225974,
	       _theResult_____3_fst__h226179,
	       _theResult_____3_fst__h226596,
	       _theResult_____3_fst__h228527,
	       _theResult_____3_fst__h228732,
	       _theResult_____3_fst__h229143,
	       condFlags32_reswget_BITS_14_TO_10__q52,
	       condFlags32_reswget_BITS_9_TO_5__q53,
	       condFlags64_reswget_BITS_14_TO_10__q30,
	       condFlags64_reswget_BITS_9_TO_5__q31,
	       exception__h264518,
	       fflags__h16383,
	       fflags__h193899,
	       fflags__h203888,
	       fflags__h209760,
	       fflags__h304454,
	       fflags__h315044,
	       fflags__h65547,
	       fflags__h89610,
	       lsb_zeros__h7014,
	       msb_zeros__h6857,
	       result__h258191,
	       result__h263874,
	       result__h264946,
	       result__h264977,
	       wr_final_out_fflags__h220854,
	       x1_avValue_fflags__h203794,
	       x1_avValue_fflags__h209653,
	       x1_avValue_fflags__h220733,
	       x__h247272,
	       x__h247606,
	       x__h247787,
	       x__h250343,
	       x__h250677,
	       x__h250858,
	       x__h258383,
	       x__h274249,
	       x__h278168,
	       x_fflags__h225921,
	       x_fflags__h228499,
	       x_fflags__h229482,
	       x_fflags__h229638,
	       x_fflags__h258077,
	       x_fflags__h265275;
  wire [1 : 0] IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5753,
	       IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5871,
	       IF_inst_dpfm_add_sub_ff_stage2_read__373_BITS__ETC___d2789,
	       IF_inst_spfm_add_sub_ff_stage2_read__38_BITS_9_ETC___d980,
	       _theResult_____6_snd_snd__h167468,
	       _theResult_____6_snd_snd__h53210,
	       _theResult_____6_snd_snd_snd__h167515,
	       _theResult_____6_snd_snd_snd__h53257,
	       _theResult____h226196,
	       _theResult____h228749,
	       lv_compare_result__h225903,
	       lv_compare_result__h228482,
	       lv_result_is_infinity___1__h167469,
	       lv_result_is_infinity___1__h167531,
	       lv_result_is_infinity___1__h53211,
	       lv_result_is_infinity___1__h53273,
	       lv_result_is_zero___1__h167564,
	       lv_result_is_zero___1__h167568,
	       lv_result_is_zero___1__h53306,
	       lv_result_is_zero___1__h53310,
	       x__h167511,
	       x__h167552,
	       x__h167811,
	       x__h53253,
	       x__h53294,
	       x__h53553;
  wire IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_BI_ETC___d3276,
       IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_BI_ETC___d3292,
       IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1293,
       IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1309,
       IF_NOT_IF_condFlags32_res_whas__343_THEN_condF_ETC___d4182,
       IF_NOT_IF_condFlags32_res_whas__343_THEN_condF_ETC___d4234,
       IF_NOT_IF_condFlags64_res_whas__428_THEN_condF_ETC___d4218,
       IF_NOT_IF_condFlags64_res_whas__428_THEN_condF_ETC___d4248,
       IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349,
       IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3827,
       IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d4231,
       IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d5215,
       IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434,
       IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3994,
       IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d4245,
       IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d5292,
       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5208,
       IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d3837,
       IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d3842,
       IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d4005,
       IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d4010,
       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3833,
       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3835,
       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3838,
       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3840,
       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d4152,
       IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4295,
       IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301,
       IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4306,
       IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2330,
       IF_inst_dpfm_add_sub_ff_stage2_read__373_BIT_5_ETC___d2390,
       IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3183,
       IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d695,
       IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755,
       IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1200,
       INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2091,
       INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d572,
       INV_1_MINUS_inst_dpfpu_divider_rg_stage2_444_B_ETC___d1569,
       INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d195,
       NOT_0b0_CONCAT_getExp64_res_wget__986_BITS_32__ETC___d4243,
       NOT_IF_condFlags32_res_whas__343_THEN_condFlag_ETC___d3844,
       NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d4012,
       NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d5153,
       NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d5159,
       NOT_IF_getExp32_res_whas__818_THEN_getExp32_re_ETC___d4229,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5338,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5340,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5460,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5462,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5721,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5746,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5748,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5840,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5865,
       NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5867,
       NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5176,
       NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5187,
       NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5266,
       NOT_ff_input_first__309_BIT_2_523_527_AND_NOT__ETC___d3941,
       NOT_ff_input_first__309_BIT_2_523_527_AND_NOT__ETC___d4106,
       NOT_ff_input_first__309_BIT_2_523_527_AND_ff_i_ETC___d3948,
       NOT_ff_input_first__309_BIT_2_523_527_AND_ff_i_ETC___d4112,
       NOT_inst_dpfpu_divider_rg_stage2_444_BITS_21_T_ETC___d1649,
       NOT_inst_dpfpu_divider_rg_stage3_675_BITS_82_T_ETC___d1698,
       NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d246,
       NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_TO_ETC___d295,
       _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2742,
       _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d933,
       _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3177,
       _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194,
       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4001,
       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4003,
       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4006,
       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4008,
       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4188,
       _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1872,
       _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d469,
       _1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1450,
       _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134,
       _theResult_____1__h118017,
       _theResult_____1__h30294,
       _theResult_____1_fst__h194732,
       _theResult_____1_fst__h249736,
       _theResult_____1_fst__h252807,
       _theResult_____1_fst__h66380,
       _theResult_____1_snd__h249804,
       _theResult_____1_snd__h252875,
       _theResult_____1_snd_snd_fst__h194760,
       _theResult_____1_snd_snd_fst__h66408,
       _theResult_____1_snd_snd_snd__h194761,
       _theResult_____1_snd_snd_snd__h66409,
       _theResult_____2_fst__h249411,
       _theResult_____2_fst__h252484,
       _theResult_____3_fst__h193997,
       _theResult_____3_fst__h194647,
       _theResult_____3_fst__h248637,
       _theResult_____3_fst__h251712,
       _theResult_____3_fst__h65645,
       _theResult_____3_fst__h66295,
       _theResult_____3_snd_fst__h193999,
       _theResult_____3_snd_fst__h194649,
       _theResult_____3_snd_fst__h65647,
       _theResult_____3_snd_fst__h66297,
       _theResult_____3_snd_snd_fst__h194001,
       _theResult_____3_snd_snd_fst__h65649,
       _theResult_____6__h193877,
       _theResult_____6__h65525,
       _theResult_____6_fst__h167465,
       _theResult_____6_fst__h53207,
       _theResult____h14151,
       _theResult____h203883,
       _theResult____h209755,
       _theResult____h235044,
       _theResult____h87379,
       _theResult___fst__h249001,
       _theResult___fst__h249122,
       _theResult___fst__h249192,
       _theResult___fst__h249266,
       _theResult___fst__h249337,
       _theResult___fst__h252076,
       _theResult___fst__h252195,
       _theResult___fst__h252265,
       _theResult___fst__h252339,
       _theResult___fst__h252410,
       _theResult___fst__h268609,
       _theResult___fst__h268617,
       _theResult___fst__h270792,
       _theResult___fst__h270800,
       _theResult___snd_fst__h248259,
       _theResult___snd_fst__h248297,
       _theResult___snd_fst__h248307,
       _theResult___snd_fst__h248354,
       _theResult___snd_fst__h248414,
       _theResult___snd_fst__h248475,
       _theResult___snd_fst__h248503,
       _theResult___snd_fst__h248563,
       _theResult___snd_fst__h251334,
       _theResult___snd_fst__h251372,
       _theResult___snd_fst__h251382,
       _theResult___snd_fst__h251429,
       _theResult___snd_fst__h251489,
       _theResult___snd_fst__h251550,
       _theResult___snd_fst__h251578,
       _theResult___snd_fst__h251638,
       and_sign__h225901,
       and_sign__h228480,
       ex_overflow__h193868,
       ex_overflow__h65516,
       expo3_zero__h117981,
       expo3_zero__h30258,
       ff_input_first__309_BITS_12_TO_8_310_EQ_0b100__ETC___d3335,
       ff_input_first__309_BITS_12_TO_8_310_EQ_0b10_5_ETC___d4533,
       ff_input_first__309_BITS_12_TO_8_310_EQ_0b10_5_ETC___d4714,
       ff_input_first__309_BITS_12_TO_8_310_EQ_0b1100_ETC___d4597,
       ff_input_first__309_BIT_0_341_AND_NOT_IF_condF_ETC___d5150,
       ff_input_first__309_BIT_208_447_XOR_ff_input_f_ETC___d3810,
       ff_input_first__309_BIT_2_523_AND_NOT_ff_input_ETC___d3955,
       ff_input_first__309_BIT_2_523_AND_NOT_ff_input_ETC___d4118,
       ff_input_first__309_BIT_2_523_AND_ff_input_fir_ETC___d3961,
       ff_input_first__309_BIT_2_523_AND_ff_input_fir_ETC___d4123,
       inexact__h203884,
       inexact__h209756,
       inexact__h235045,
       inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1863,
       inst_dpfm_add_sub_ff_stage2_read__373_BIT_15_3_ETC___d2398,
       inst_dpfm_add_sub_ff_stage5_read__156_BIT_15_1_ETC___d3282,
       inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447,
       inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1448,
       inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460,
       inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763,
       inst_spfm_add_sub_ff_stage5_read__173_BIT_14_1_ETC___d1299,
       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131,
       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132,
       lv_inexact1__h248059,
       lv_inexact1__h251131,
       lv_inexact___1__h248632,
       lv_inexact___1__h251707,
       lv_inexact__h16334,
       lv_inexact__h193876,
       lv_inexact__h248052,
       lv_inexact__h251124,
       lv_inexact__h65524,
       lv_inexact__h89561,
       lv_invalid___2__h248634,
       lv_invalid___2__h251709,
       lv_invalid__h248034,
       lv_invalid__h248050,
       lv_invalid__h248061,
       lv_invalid__h251105,
       lv_invalid__h251122,
       lv_invalid__h251133,
       lv_op1_subnormal__h268105,
       lv_op1_subnormal__h270292,
       lv_op2_Nan__h225899,
       lv_op2_Nan__h228478,
       lv_op2_subnormal__h268106,
       lv_op2_subnormal__h270293,
       lv_round_up___1__h14450,
       lv_round_up___1__h14486,
       lv_round_up___1__h194308,
       lv_round_up___1__h194530,
       lv_round_up___1__h248717,
       lv_round_up___1__h249374,
       lv_round_up___1__h251792,
       lv_round_up___1__h252447,
       lv_round_up___1__h264684,
       lv_round_up___1__h264823,
       lv_round_up___1__h65956,
       lv_round_up___1__h66178,
       lv_round_up___1__h87678,
       lv_round_up___1__h87714,
       lv_roundup___1__h16406,
       lv_roundup___1__h16788,
       lv_roundup___1__h209485,
       lv_roundup___1__h209522,
       lv_roundup___1__h220560,
       lv_roundup___1__h220597,
       lv_roundup___1__h245635,
       lv_roundup___1__h245671,
       lv_roundup___1__h89633,
       lv_roundup___1__h90015,
       lv_sign__h220830,
       lv_sticky___1__h7043,
       lv_sticky___1__h73050,
       lv_sticky__h16332,
       lv_sticky__h193874,
       lv_sticky__h248057,
       lv_sticky__h251129,
       lv_sticky__h264136,
       lv_sticky__h264527,
       lv_sticky__h65522,
       lv_sticky__h89559,
       op_xor_sign3__h117982,
       op_xor_sign3__h30259,
       or_sign__h225900,
       or_sign__h228479,
       quiet_nan_two__h268110,
       quiet_nan_two__h270297,
       sign2__h117969,
       sign2__h30246,
       sign3__h117971,
       sign3__h30248,
       sign__h235042,
       x__h117714,
       x__h117745,
       x__h117775,
       x__h118123,
       x__h118135,
       x__h14079,
       x__h14084,
       x__h14313,
       x__h14463,
       x__h14498,
       x__h14500,
       x__h16697,
       x__h167388,
       x__h167395,
       x__h167503,
       x__h167543,
       x__h167545,
       x__h167547,
       x__h167548,
       x__h167576,
       x__h167588,
       x__h167618,
       x__h16812,
       x__h194460,
       x__h194542,
       x__h203902,
       x__h209498,
       x__h209774,
       x__h220573,
       x__h235063,
       x__h245648,
       x__h248975,
       x__h249386,
       x__h252050,
       x__h252459,
       x__h264734,
       x__h264835,
       x__h264837,
       x__h268423,
       x__h268686,
       x__h268692,
       x__h268749,
       x__h268762,
       x__h268852,
       x__h270606,
       x__h270869,
       x__h270875,
       x__h270931,
       x__h270944,
       x__h271034,
       x__h282142,
       x__h282206,
       x__h282220,
       x__h282225,
       x__h29991,
       x__h30022,
       x__h30052,
       x__h301534,
       x__h301548,
       x__h301553,
       x__h30400,
       x__h30412,
       x__h342352,
       x__h53130,
       x__h53137,
       x__h53245,
       x__h53285,
       x__h53287,
       x__h53289,
       x__h53290,
       x__h53318,
       x__h53330,
       x__h53360,
       x__h66108,
       x__h66190,
       x__h87307,
       x__h87312,
       x__h87541,
       x__h87691,
       x__h87726,
       x__h87728,
       x__h89924,
       x__h90039,
       y__h118136,
       y__h14462,
       y__h14499,
       y__h16418,
       y__h167544,
       y__h167546,
       y__h167589,
       y__h16800,
       y__h194320,
       y__h194556,
       y__h209497,
       y__h209535,
       y__h220572,
       y__h220610,
       y__h245647,
       y__h245684,
       y__h248729,
       y__h249399,
       y__h251804,
       y__h252472,
       y__h264696,
       y__h268763,
       y__h268765,
       y__h268809,
       y__h270945,
       y__h270947,
       y__h270991,
       y__h30413,
       y__h304468,
       y__h304489,
       y__h315058,
       y__h315079,
       y__h53286,
       y__h53288,
       y__h53331,
       y__h65968,
       y__h66204,
       y__h87690,
       y__h87727,
       y__h89645,
       y__h90027,
       y_avValue_snd_snd_snd__h264770,
       y_avValue_snd_snd_snd_snd_snd_snd__h264766;

  // action method _start
  assign RDY__start = !rg_multicycle_op && ff_input_FULL_N ;
  assign CAN_FIRE__start = !rg_multicycle_op && ff_input_FULL_N ;
  assign WILL_FIRE__start = EN__start ;

  // value method get_result
  assign get_result = rg_result ;
  assign RDY_get_result = 1'd1 ;

  // action method flush
  assign RDY_flush = 1'd1 ;
  assign CAN_FIRE_flush = 1'd1 ;
  assign WILL_FIRE_flush = EN_flush ;

  // submodule ff_input
  FIFO1 #(.width(32'd209), .guarded(1'd1)) ff_input(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ff_input_D_IN),
						    .ENQ(ff_input_ENQ),
						    .DEQ(ff_input_DEQ),
						    .CLR(ff_input_CLR),
						    .D_OUT(ff_input_D_OUT),
						    .FULL_N(ff_input_FULL_N),
						    .EMPTY_N(ff_input_EMPTY_N));

  // rule RL_rl_get_output_from_spfpu_sqrt
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     inst_spfpu_sqrt_ff_final_out[37] && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt ;

  // rule RL_rl_get_output_from_dpfpu_sqrt
  assign CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt =
	     inst_dpfpu_sqrt_ff_final_out[69] && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt =
	     CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt ;

  // rule RL_flush_fifo
  assign CAN_FIRE_RL_flush_fifo = EN_flush ;
  assign WILL_FIRE_RL_flush_fifo = EN_flush ;

  // rule RL_inst_spfpu_divider_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_divider_rl_stage2
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 =
	     inst_spfpu_divider_int_div_rg_state == 6'd0 &&
	     inst_spfpu_divider_rg_state_handler == 2'd1 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 ;

  // rule RL_inst_spfpu_divider_rl_stage4
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 =
	     inst_spfpu_divider_rg_state_handler == 2'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 ;

  // rule RL_rl_get_output_from_spfpu_divider
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_divider =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_divider =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_divider ;

  // rule RL_inst_spfpu_divider_int_div_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_divider_int_div_stage_1
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1 =
	     inst_spfpu_divider_int_div_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;

  // rule RL_inst_spfpu_divider_int_div_recursive_stage
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage =
	     inst_spfpu_divider_int_div_rg_state > 6'd1 &&
	     inst_spfpu_divider_int_div_rg_state <= 6'd12 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ;

  // rule RL_inst_spfpu_divider_int_div_end_stage
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage =
	     inst_spfpu_divider_int_div_rg_state == 6'd13 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage ;

  // rule __me_check_1
  assign CAN_FIRE___me_check_1 = 1'b1 ;
  assign WILL_FIRE___me_check_1 = 1'b1 ;

  // rule __me_check_2
  assign CAN_FIRE___me_check_2 = 1'b1 ;
  assign WILL_FIRE___me_check_2 = 1'b1 ;

  // rule __me_check_3
  assign CAN_FIRE___me_check_3 = 1'b1 ;
  assign WILL_FIRE___me_check_3 = 1'b1 ;

  // rule RL_inst_spfpu_divider_rl_stage3
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage &&
	     inst_spfpu_divider_rg_state_handler == 2'd2 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // rule __me_check_5
  assign CAN_FIRE___me_check_5 = 1'b1 ;
  assign WILL_FIRE___me_check_5 = 1'b1 ;

  // rule __me_check_6
  assign CAN_FIRE___me_check_6 = 1'b1 ;
  assign WILL_FIRE___me_check_6 = 1'b1 ;

  // rule RL_inst_spfpu_sqrt_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_sqrt_rl_stage2
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2 =
	     inst_spfpu_sqrt_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ;

  // rule RL_inst_spfpu_sqrt_rl_inter_stage
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage =
	     inst_spfpu_sqrt_rg_state > 6'd1 &&
	     inst_spfpu_sqrt_rg_state < 6'd25 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ;

  // rule RL_inst_spfpu_sqrt_rl_final_stage
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage =
	     inst_spfpu_sqrt_rg_state == 6'd25 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ;

  // rule __me_check_10
  assign CAN_FIRE___me_check_10 = 1'b1 ;
  assign WILL_FIRE___me_check_10 = 1'b1 ;

  // rule __me_check_11
  assign CAN_FIRE___me_check_11 = 1'b1 ;
  assign WILL_FIRE___me_check_11 = 1'b1 ;

  // rule __me_check_12
  assign CAN_FIRE___me_check_12 = 1'b1 ;
  assign WILL_FIRE___me_check_12 = 1'b1 ;

  // rule RL_inst_spfm_add_sub_rl_flush
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_flush = EN_flush ;

  // rule RL_inst_spfm_add_sub_rl_stage1_after_input_stage
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage =
	     inst_spfm_add_sub_rg_state_handler == 3'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ;

  // rule RL_inst_spfm_add_sub_rl_stage_3
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 =
	     inst_spfm_add_sub_rg_state_handler == 3'd2 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ;

  // rule RL_inst_spfm_add_sub_rl_stage4
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 =
	     inst_spfm_add_sub_rg_state_handler == 3'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // rule RL_inst_spfm_add_sub_rl_stage_5_final_stage
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage =
	     inst_spfm_add_sub_rg_state_handler == 3'd4 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage ;

  // rule RL_rl_get_output_from_fm_add_sub
  assign CAN_FIRE_RL_rl_get_output_from_fm_add_sub =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_fm_add_sub =
	     CAN_FIRE_RL_rl_get_output_from_fm_add_sub ;

  // rule RL_inst_dpfpu_divider_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_divider_rl_stage2
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 =
	     inst_dpfpu_divider_int_div_rg_state == 6'd0 &&
	     inst_dpfpu_divider_rg_state_handler == 2'd1 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 ;

  // rule RL_inst_dpfpu_divider_rl_stage4
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 =
	     inst_dpfpu_divider_rg_state_handler == 2'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 ;

  // rule RL_rl_get_output_from_dpfpu_divider
  assign CAN_FIRE_RL_rl_get_output_from_dpfpu_divider =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfpu_divider =
	     CAN_FIRE_RL_rl_get_output_from_dpfpu_divider ;

  // rule RL_inst_dpfpu_divider_int_div_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_divider_int_div_stage_1
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 =
	     inst_dpfpu_divider_int_div_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;

  // rule RL_inst_dpfpu_divider_int_div_recursive_stage
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage =
	     inst_dpfpu_divider_int_div_rg_state > 6'd1 &&
	     inst_dpfpu_divider_int_div_rg_state <= 6'd26 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ;

  // rule RL_inst_dpfpu_divider_int_div_end_stage
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage =
	     inst_dpfpu_divider_int_div_rg_state == 6'd27 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage ;

  // rule __me_check_19
  assign CAN_FIRE___me_check_19 = 1'b1 ;
  assign WILL_FIRE___me_check_19 = 1'b1 ;

  // rule __me_check_20
  assign CAN_FIRE___me_check_20 = 1'b1 ;
  assign WILL_FIRE___me_check_20 = 1'b1 ;

  // rule __me_check_21
  assign CAN_FIRE___me_check_21 = 1'b1 ;
  assign WILL_FIRE___me_check_21 = 1'b1 ;

  // rule RL_inst_dpfpu_divider_rl_stage3
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage &&
	     inst_dpfpu_divider_rg_state_handler == 2'd2 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // rule __me_check_23
  assign CAN_FIRE___me_check_23 = 1'b1 ;
  assign WILL_FIRE___me_check_23 = 1'b1 ;

  // rule __me_check_24
  assign CAN_FIRE___me_check_24 = 1'b1 ;
  assign WILL_FIRE___me_check_24 = 1'b1 ;

  // rule RL_inst_dpfpu_sqrt_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_sqrt_rl_stage2
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 =
	     inst_dpfpu_sqrt_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ;

  // rule RL_inst_dpfpu_sqrt_rl_inter_stage
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage =
	     inst_dpfpu_sqrt_rg_state > 6'd1 &&
	     inst_dpfpu_sqrt_rg_state < 6'd54 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ;

  // rule RL_inst_dpfpu_sqrt_rl_final_stage
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage =
	     inst_dpfpu_sqrt_rg_state == 6'd54 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ;

  // rule __me_check_28
  assign CAN_FIRE___me_check_28 = 1'b1 ;
  assign WILL_FIRE___me_check_28 = 1'b1 ;

  // rule __me_check_29
  assign CAN_FIRE___me_check_29 = 1'b1 ;
  assign WILL_FIRE___me_check_29 = 1'b1 ;

  // rule __me_check_30
  assign CAN_FIRE___me_check_30 = 1'b1 ;
  assign WILL_FIRE___me_check_30 = 1'b1 ;

  // rule RL_inst_dpfm_add_sub_rl_flush
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_flush = EN_flush ;

  // rule RL_inst_dpfm_add_sub_rl_stage1_after_input_stage
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage =
	     inst_dpfm_add_sub_rg_state_handler == 3'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ;

  // rule RL_inst_dpfm_add_sub_rl_stage_3
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 =
	     inst_dpfm_add_sub_rg_state_handler == 3'd2 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ;

  // rule RL_inst_dpfm_add_sub_rl_stage4
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 =
	     inst_dpfm_add_sub_rg_state_handler == 3'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // rule RL_inst_dpfm_add_sub_rl_stage_5_final_stage
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage =
	     inst_dpfm_add_sub_rg_state_handler == 3'd4 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage ;

  // rule RL_rl_get_output_from_dpfm_add_sub
  assign CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub =
	     CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub ;

  // rule __me_check_38
  assign CAN_FIRE___me_check_38 = 1'b1 ;
  assign WILL_FIRE___me_check_38 = 1'b1 ;

  // rule __me_check_39
  assign CAN_FIRE___me_check_39 = 1'b1 ;
  assign WILL_FIRE___me_check_39 = 1'b1 ;

  // rule __me_check_40
  assign CAN_FIRE___me_check_40 = 1'b1 ;
  assign WILL_FIRE___me_check_40 = 1'b1 ;

  // rule __me_check_41
  assign CAN_FIRE___me_check_41 = 1'b1 ;
  assign WILL_FIRE___me_check_41 = 1'b1 ;

  // rule __me_check_42
  assign CAN_FIRE___me_check_42 = 1'b1 ;
  assign WILL_FIRE___me_check_42 = 1'b1 ;

  // rule RL_start_stage
  assign CAN_FIRE_RL_start_stage =
	     ff_input_EMPTY_N && inst_spfpu_sqrt_rg_state == 6'd0 &&
	     inst_dpfpu_sqrt_rg_state == 6'd0 ;
  assign WILL_FIRE_RL_start_stage = CAN_FIRE_RL_start_stage ;

  // rule RL_rg_result__dreg_update
  assign CAN_FIRE_RL_rg_result__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_result__dreg_update = 1'd1 ;

  // rule RL_inst_spfpu_sqrt_ff_final_out__dreg_update
  assign CAN_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;

  // rule RL_inst_dpfpu_sqrt_ff_final_out__dreg_update
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5266 ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 =
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;
  assign MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5462 ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5840 ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5867 ;
  assign MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5865 ;
  assign MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5187 ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 =
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;
  assign MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5340 ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5721 ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5748 ;
  assign MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5746 ;
  assign MUX_rg_multicycle_op_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5176 ;
  assign MUX_rg_result_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] == 5'b10100 ||
	      ff_input_D_OUT[12:8] == 5'b00101 ||
	      ff_input_D_OUT[12:8] == 5'b11010 ||
	      ff_input_first__309_BITS_12_TO_8_310_EQ_0b100__ETC___d3335) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ;
  assign MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2 =
	     inst_dpfpu_divider_int_div_rg_state + 6'd1 ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 =
	     { inst_dpfpu_divider_int_div_rg_inter_stage, 2'd0 } ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 =
	     { inst_dpfpu_divider_int_div_rg_inter_stage, 2'd2 } ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3 =
	     { x__h71463, 2'd0 } ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1 =
	     (IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 ||
	      ff_input_D_OUT[208] &&
	      (IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 ||
	       condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	       !condFlags64_reswget_BITS_14_TO_10__q30[3])) ?
	       { 65'h17FF8000000000000, fflags__h315044 } :
	       ((condFlags64_reswget_BITS_14_TO_10__q30[1] &&
		 !ff_input_D_OUT[208]) ?
		  70'h2FFE00000000000000 :
		  { 1'd1, final_result__h315219, 5'd0 }) ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2 =
	     { 1'd1, final_result__h89566, fflags__h89610 } ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1 =
	     { mantissa__h314796,
	       x__h333147,
	       result_exponent__h314793,
	       ff_input_D_OUT[208],
	       _theResult_____3__h314794,
	       IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__428_ETC___d5996,
	       ff_input_D_OUT[5:3] } ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2 =
	     { mantissa__h89219,
	       x__h89263,
	       inst_dpfpu_sqrt_rg_inter_stage[128:116],
	       _theResult____h89217,
	       x__h89526,
	       inst_dpfpu_sqrt_rg_inter_stage[2:0] } ;
  assign MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1 =
	     inst_dpfpu_sqrt_rg_state + 6'd1 ;
  assign MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2 =
	     inst_spfpu_divider_int_div_rg_state + 6'd1 ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 =
	     { inst_spfpu_divider_int_div_rg_inter_stage, 2'd0 } ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 =
	     { inst_spfpu_divider_int_div_rg_inter_stage, 2'd3 } ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3 =
	     { x__h5456, 2'd0 } ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1 =
	     (IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 ||
	      ff_input_D_OUT[176] &&
	      (IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 ||
	       condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	       !condFlags32_reswget_BITS_14_TO_10__q52[3])) ?
	       { 33'h17FC00000, fflags__h304454 } :
	       ((condFlags32_reswget_BITS_14_TO_10__q52[1] &&
		 !ff_input_D_OUT[176]) ?
		  38'h2FF0000000 :
		  { 1'd1, final_result__h304629, 5'd0 }) ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2 =
	     { 1'd1, final_result__h16339, fflags__h16383 } ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1 =
	     { mantissa__h304205,
	       x__h313219,
	       result_exponent__h304202,
	       ff_input_D_OUT[176],
	       _theResult_____3__h304203,
	       IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__343_ETC___d5820,
	       ff_input_D_OUT[5:3] } ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2 =
	     { mantissa__h15992,
	       x__h16036,
	       inst_spfpu_sqrt_rg_inter_stage[67:58],
	       _theResult____h15990,
	       x__h16299,
	       inst_spfpu_sqrt_rg_inter_stage[2:0] } ;
  assign MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1 =
	     inst_spfpu_sqrt_rg_state + 6'd1 ;
  always@(ff_input_D_OUT or
	  IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4457 or
	  x_data__h245809 or
	  x_data__h246113 or
	  IF_ff_input_first__309_BIT_0_341_THEN_IF_ff_in_ETC___d3521 or
	  IF_ff_input_first__309_BIT_0_341_THEN_IF_NOT_I_ETC___d4252 or
	  IF_ff_input_first__309_BIT_0_341_THEN_42949672_ETC___d3802)
  begin
    case (ff_input_D_OUT[12:8])
      5'b00100:
	  MUX_rg_result_1_wset_1__VAL_1 =
	      { ff_input_D_OUT[0] ? x_data__h245809 : x_data__h246113,
		6'd32 };
      5'b00101, 5'b10100:
	  MUX_rg_result_1_wset_1__VAL_1 =
	      IF_ff_input_first__309_BIT_0_341_THEN_IF_ff_in_ETC___d3521;
      5'b11000:
	  MUX_rg_result_1_wset_1__VAL_1 =
	      IF_ff_input_first__309_BIT_0_341_THEN_IF_NOT_I_ETC___d4252;
      5'b11010:
	  MUX_rg_result_1_wset_1__VAL_1 =
	      IF_ff_input_first__309_BIT_0_341_THEN_42949672_ETC___d3802;
      default: MUX_rg_result_1_wset_1__VAL_1 =
		   IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4457;
    endcase
  end
  assign MUX_rg_result_1_wset_1__VAL_2 =
	     { inst_dpfm_add_sub_ff_final_out_wget[68:5],
	       1'd1,
	       inst_dpfm_add_sub_ff_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_3 =
	     { inst_dpfpu_divider_wr_final_out_wget[68:5],
	       1'd1,
	       inst_dpfpu_divider_wr_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_4 =
	     { x_data__h345052,
	       1'd1,
	       inst_spfm_add_sub_ff_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_5 =
	     { x_data__h344813,
	       1'd1,
	       inst_spfpu_divider_wr_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_6 =
	     { inst_dpfpu_sqrt_ff_final_out[68:5],
	       1'd1,
	       inst_dpfpu_sqrt_ff_final_out[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_7 =
	     { x_data__h344937, 1'd1, inst_spfpu_sqrt_ff_final_out[4:0] } ;

  // inlined wires
  always@(MUX_rg_result_1_wset_1__SEL_1 or
	  MUX_rg_result_1_wset_1__VAL_1 or
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub or
	  MUX_rg_result_1_wset_1__VAL_2 or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_divider or
	  MUX_rg_result_1_wset_1__VAL_3 or
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub or
	  MUX_rg_result_1_wset_1__VAL_4 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_divider or
	  MUX_rg_result_1_wset_1__VAL_5 or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt or
	  MUX_rg_result_1_wset_1__VAL_6 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt or
	  MUX_rg_result_1_wset_1__VAL_7)
  case (1'b1)
    MUX_rg_result_1_wset_1__SEL_1:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_1;
    WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_2;
    WILL_FIRE_RL_rl_get_output_from_dpfpu_divider:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_3;
    WILL_FIRE_RL_rl_get_output_from_fm_add_sub:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_4;
    WILL_FIRE_RL_rl_get_output_from_spfpu_divider:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_5;
    WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_6;
    WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_7;
    default: rg_result_1_wget =
		 70'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_result_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] == 5'b10100 ||
	      ff_input_D_OUT[12:8] == 5'b00101 ||
	      ff_input_D_OUT[12:8] == 5'b11010 ||
	      ff_input_first__309_BITS_12_TO_8_310_EQ_0b100__ETC___d3335) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_fm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub ;
  always@(MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1;
      WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2;
      WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
      default: inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
		   85'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign inst_spfpu_divider_wr_final_out_wget =
	     inst_spfpu_divider_rg_stage3[11] ?
	       { lv_final_output__h14256, _theResult_____1_snd__h14257 } :
	       IF_inst_spfpu_divider_rg_stage3_72_BIT_10_79_T_ETC___d360 ;
  assign inst_spfpu_sqrt_ff_final_out_1_wget =
	     MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1 ?
	       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1 :
	       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2 ;
  assign inst_spfpu_sqrt_ff_final_out_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5721 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ;
  assign inst_spfm_add_sub_ff_final_out_wget =
	     { new_value_final_result__h65556, fflags__h65547 } ;
  always@(MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1;
      WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2;
      WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
      default: inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
		   172'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign inst_dpfpu_divider_wr_final_out_wget =
	     inst_dpfpu_divider_rg_stage3[11] ?
	       { lv_final_output__h87484, _theResult_____1_snd__h87485 } :
	       IF_inst_dpfpu_divider_rg_stage3_675_BIT_10_682_ETC___d1763 ;
  assign inst_dpfpu_sqrt_ff_final_out_1_wget =
	     MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1 ?
	       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1 :
	       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2 ;
  assign inst_dpfpu_sqrt_ff_final_out_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5840 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ;
  assign inst_dpfm_add_sub_ff_final_out_wget =
	     { new_value_final_result__h193908, fflags__h193899 } ;
  assign inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget =
	     { ff_input_D_OUT[176:145],
	       ff_input_D_OUT[1],
	       ff_input_D_OUT[5:3] } ;
  assign inst_fpu_int_to_fp_fcvt_s_llu_arg_wget =
	     { ff_input_D_OUT[208:145],
	       ff_input_D_OUT[1],
	       ff_input_D_OUT[5:3] } ;
  assign condFlags32_arg_wget =
	     { getMant32_res_wget[68:46],
	       getExp32_res_wget[23:16],
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4641 } ;
  assign condFlags32_res_wget = { x__h247272, x__h247606, x__h247787 } ;
  assign getMant32_arg_wget =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { setCanonicalNaN_res_wget[95:32], 32'd0 } :
	       (ff_input_first__309_BITS_12_TO_8_310_EQ_0b1100_ETC___d4597 ?
		  { setCanonicalNaN_res_wget[95:64], 64'd0 } :
		  (((ff_input_D_OUT[12:8] == 5'b0 ||
		     ff_input_D_OUT[12:8] == 5'b00001) &&
		    ff_input_D_OUT[16:13] == 4'b0100) ?
		     { 32'h3F800000, setCanonicalNaN_res_wget[95:32] } :
		     ((ff_input_D_OUT[12:8] == 5'b00011 &&
		       ff_input_D_OUT[16:13] == 4'b0100) ?
			setCanonicalNaN_res_wget :
			((ff_input_D_OUT[12:8] == 5'b01011 &&
			  ff_input_D_OUT[16:13] == 4'b0100) ?
			   { setCanonicalNaN_res_wget[95:64], 64'd0 } :
			   ((ff_input_D_OUT[12:8] == 5'b00010 &&
			     ff_input_D_OUT[16:13] == 4'b0100) ?
			      { setCanonicalNaN_res_wget[95:32], 32'd0 } :
			      setCanonicalNaN_res_wget))))) ;
  assign getMant32_res_wget =
	     { getMant32_argwget_BITS_95_TO_64__q44[22:0],
	       getMant32_argwget_BITS_63_TO_32__q45[22:0],
	       getMant32_argwget_BITS_31_TO_0__q46[22:0] } ;
  assign getExp32_res_wget =
	     { getMant32_argwget_BITS_95_TO_64__q44[30:23],
	       getMant32_argwget_BITS_63_TO_32__q45[30:23],
	       getMant32_argwget_BITS_31_TO_0__q46[30:23] } ;
  assign condFlags64_arg_wget =
	     { getMant64_res_wget[155:104],
	       getExp64_res_wget[32:22],
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4776 } ;
  assign condFlags64_res_wget = { x__h250343, x__h250677, x__h250858 } ;
  assign getMant64_arg_wget =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[208:81], 64'd0 } :
	       (ff_input_first__309_BITS_12_TO_8_310_EQ_0b1100_ETC___d4597 ?
		  { ff_input_D_OUT[208:145], 128'd0 } :
		  (((ff_input_D_OUT[12:8] == 5'b0 ||
		     ff_input_D_OUT[12:8] == 5'b00001) &&
		    ff_input_D_OUT[16:13] == 4'b0100) ?
		     { 64'h3FF0000000000000, ff_input_D_OUT[208:81] } :
		     ((ff_input_D_OUT[12:8] == 5'b00011 &&
		       ff_input_D_OUT[16:13] == 4'b0100) ?
			{ ff_input_D_OUT[208:81], 64'd0 } :
			((ff_input_D_OUT[12:8] == 5'b01011 &&
			  ff_input_D_OUT[16:13] == 4'b0100) ?
			   { ff_input_D_OUT[208:145], 128'd0 } :
			   ((ff_input_D_OUT[12:8] == 5'b00010 &&
			     ff_input_D_OUT[16:13] == 4'b0100) ?
			      { ff_input_D_OUT[208:81], 64'd0 } :
			      ff_input_D_OUT[208:17]))))) ;
  assign getMant64_res_wget =
	     { getMant64_argwget_BITS_191_TO_128__q22[51:0],
	       getMant64_argwget_BITS_127_TO_64__q23[51:0],
	       getMant64_argwget_BITS_63_TO_0__q24[51:0] } ;
  assign getExp64_res_wget =
	     { getMant64_argwget_BITS_191_TO_128__q22[62:52],
	       getMant64_argwget_BITS_127_TO_64__q23[62:52],
	       getMant64_argwget_BITS_63_TO_0__q24[62:52] } ;
  assign setCanonicalNaN_arg_wget =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101 ||
	       ff_input_D_OUT[12:8] == 5'b00100) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[208:81], 64'hFFFFFFFFFFFFFFFF } :
	       ((ff_input_D_OUT[12:8] == 5'b11000 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  { ff_input_D_OUT[208:145], 128'd0 } :
		  (((ff_input_D_OUT[12:8] == 5'b11100 &&
		     ff_input_D_OUT[5:3] == 3'b001 ||
		     ff_input_D_OUT[12:8] == 5'b01000) &&
		    ff_input_D_OUT[16:13] == 4'b0100) ?
		     { ff_input_D_OUT[208:145],
		       128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF } :
		     (((ff_input_D_OUT[12:8] == 5'b0 ||
			ff_input_D_OUT[12:8] == 5'b00001 ||
			ff_input_D_OUT[12:8] == 5'b00011) &&
		       ff_input_D_OUT[16:13] == 4'b0100) ?
			{ ff_input_D_OUT[208:81], 64'hFFFFFFFFFFFFFFFF } :
			((ff_input_D_OUT[12:8] == 5'b01011 &&
			  ff_input_D_OUT[16:13] == 4'b0100) ?
			   { ff_input_D_OUT[208:145],
			     128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF } :
			   ((ff_input_D_OUT[12:8] == 5'b00010 &&
			     ff_input_D_OUT[16:13] == 4'b0100) ?
			      { ff_input_D_OUT[208:81],
				64'hFFFFFFFFFFFFFFFF } :
			      ff_input_D_OUT[208:17]))))) ;
  assign setCanonicalNaN_res_wget = { x__h220916, x__h221057, x__h221139 } ;

  // register inst_dpfm_add_sub_ff_input_register
  assign inst_dpfm_add_sub_ff_input_register_D_IN =
	     { _0_CONCAT_INV_IF_condFlags64_res_whas__428_THEN_ETC___d5277[105:0],
	       lv_summed_exponent__h270303,
	       ((ff_input_D_OUT[12:8] == 5'b0 ||
		 ff_input_D_OUT[12:8] == 5'b00001) &&
		ff_input_D_OUT[16:13] == 4'b0100) ?
		 ff_input_D_OUT[208] :
		 ff_input_first__309_BIT_208_447_XOR_ff_input_f_ETC___d3810,
	       ((ff_input_D_OUT[12:8] == 5'b0 ||
		 ff_input_D_OUT[12:8] == 5'b00001) &&
		ff_input_D_OUT[16:13] == 4'b0100) ?
		 ff_input_D_OUT[144] :
		 (ff_input_D_OUT[12:8] != 5'b00010 ||
		  ff_input_D_OUT[16:13] != 4'b0100) &&
		 ff_input_D_OUT[80],
	       getExp64_res_wget[10:0],
	       getMant64_res_wget[51:0],
	       x__h270606,
	       x__h270869,
	       x__h270875,
	       condFlags64_res_wget[4:0],
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5325 } ;
  assign inst_dpfm_add_sub_ff_input_register_EN =
	     MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 ;

  // register inst_dpfm_add_sub_ff_stage2
  assign inst_dpfm_add_sub_ff_stage2_D_IN =
	     { inst_dpfm_add_sub_ff_input_register[81],
	       inst_dpfm_add_sub_ff_input_register[4],
	       x_lv_product_exponent__h90528,
	       x_lv_product_mantissa__h90529,
	       inst_dpfm_add_sub_ff_input_register[80:17],
	       inst_dpfm_add_sub_ff_input_register[13:9],
	       inst_dpfm_add_sub_ff_input_register[5],
	       inst_dpfm_add_sub_ff_input_register[3:2],
	       inst_dpfm_add_sub_ff_input_register[8:6],
	       inst_dpfm_add_sub_ff_input_register[16],
	       inst_dpfm_add_sub_ff_input_register[14],
	       inst_dpfm_add_sub_ff_input_register[15],
	       x__h117714,
	       x__h117775,
	       inst_dpfm_add_sub_ff_input_register[1:0] } ;
  assign inst_dpfm_add_sub_ff_stage2_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ;

  // register inst_dpfm_add_sub_ff_stage4
  assign inst_dpfm_add_sub_ff_stage4_D_IN =
	     { x__h167503,
	       x__h118123,
	       _theResult_____1__h118017,
	       lv_minuend__h118003,
	       mantissa2__h118013,
	       mantissa3__h118014,
	       inst_dpfm_add_sub_ff_stage2[9:7],
	       x__h167395,
	       x__h167511,
	       x__h167552,
	       inst_dpfm_add_sub_ff_stage2[3:2],
	       x__h167576,
	       x__h167618,
	       inst_dpfm_add_sub_ff_stage2[5] } ;
  assign inst_dpfm_add_sub_ff_stage4_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ;

  // register inst_dpfm_add_sub_ff_stage5
  assign inst_dpfm_add_sub_ff_stage5_D_IN =
	     { inst_dpfm_add_sub_ff_stage4[345:333],
	       _theResult____h167734,
	       inst_dpfm_add_sub_ff_stage4[347],
	       inst_dpfm_add_sub_ff_stage4[12:10],
	       x__h167811,
	       inst_dpfm_add_sub_ff_stage4[9:0],
	       lv_zeros_on_left__h167736 } ;
  assign inst_dpfm_add_sub_ff_stage5_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // register inst_dpfm_add_sub_rg_state_handler
  always@(MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage or
	  EN_flush)
  case (1'b1)
    MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd1;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd0;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd4;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd3;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd2;
    EN_flush: inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd0;
    default: inst_dpfm_add_sub_rg_state_handler_D_IN =
		 3'bxxx /* unspecified value */ ;
  endcase
  assign inst_dpfm_add_sub_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5266 ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // register inst_dpfpu_divider_int_div_rg_inter_stage
  assign inst_dpfpu_divider_int_div_rg_inter_stage_D_IN = x_wget__h66729 ;
  assign inst_dpfpu_divider_int_div_rg_inter_stage_EN =
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;

  // register inst_dpfpu_divider_int_div_rg_state
  always@(WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage or
	  MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2 or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 or
	  EN_flush or WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2)
  case (1'b1)
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage:
	inst_dpfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2;
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2;
    EN_flush: inst_dpfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2;
    default: inst_dpfpu_divider_int_div_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_divider_int_div_rg_state_EN =
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage ||
	     EN_flush ;

  // register inst_dpfpu_divider_rg_stage1
  assign inst_dpfpu_divider_rg_stage1_D_IN =
	     { lv_exponent__h284182,
	       x__h301424,
	       x__h301452,
	       ff_input_first__309_BIT_208_447_XOR_ff_input_f_ETC___d3810,
	       IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 ||
	       lv_op2_Nan__h228478 ||
	       condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	       condFlags64_reswget_BITS_9_TO_5__q31[1] ||
	       condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	       condFlags64_reswget_BITS_9_TO_5__q31[3],
	       x__h301534,
	       x__h301548,
	       x__h301553,
	       ff_input_D_OUT[5:3],
	       quiet_nan_two__h270297 } ;
  assign inst_dpfpu_divider_rg_stage1_EN =
	     MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 ;

  // register inst_dpfpu_divider_rg_stage2
  assign inst_dpfpu_divider_rg_stage2_D_IN =
	     { inst_dpfpu_divider_rg_stage1[127:115],
	       inst_dpfpu_divider_rg_stage1[8],
	       inst_dpfpu_divider_rg_stage1[6],
	       inst_dpfpu_divider_rg_stage1[7],
	       inst_dpfpu_divider_rg_stage1[5:0] } ;
  assign inst_dpfpu_divider_rg_stage2_EN =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 ;

  // register inst_dpfpu_divider_rg_stage3
  assign inst_dpfpu_divider_rg_stage3_D_IN =
	     { x_lv_quotient__h72915,
	       x_wget__h66729[113:57],
	       x_lv_exponent__h72916,
	       inst_dpfpu_divider_rg_stage2[8:5],
	       x__h87307,
	       !inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447,
	       x__h87312,
	       inst_dpfpu_divider_rg_stage2[4:1],
	       inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447 &&
	       NOT_inst_dpfpu_divider_rg_stage2_444_BITS_21_T_ETC___d1649,
	       inst_dpfpu_divider_rg_stage2[0] } ;
  assign inst_dpfpu_divider_rg_stage3_EN =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // register inst_dpfpu_divider_rg_state_handler
  always@(MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd1;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd3;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd2;
    EN_flush: inst_dpfpu_divider_rg_state_handler_D_IN = 2'd0;
    default: inst_dpfpu_divider_rg_state_handler_D_IN =
		 2'bxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_divider_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5462 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // register inst_dpfpu_sqrt_ff_final_out
  assign inst_dpfpu_sqrt_ff_final_out_D_IN =
	     inst_dpfpu_sqrt_ff_final_out_1_whas ?
	       inst_dpfpu_sqrt_ff_final_out_1_wget :
	       { 1'd0,
		 69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign inst_dpfpu_sqrt_ff_final_out_EN = 1'd1 ;

  // register inst_dpfpu_sqrt_rg_inter_stage
  assign inst_dpfpu_sqrt_rg_inter_stage_D_IN =
	     MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1 ?
	       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1 :
	       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2 ;
  assign inst_dpfpu_sqrt_rg_inter_stage_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5867 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ;

  // register inst_dpfpu_sqrt_rg_state
  always@(MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1 or
	  MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1 or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage:
	inst_dpfpu_sqrt_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    EN_flush: inst_dpfpu_sqrt_rg_state_D_IN = 6'd0;
    default: inst_dpfpu_sqrt_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_sqrt_rg_state_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5865 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ||
	     EN_flush ;

  // register inst_spfm_add_sub_ff_input_register
  assign inst_spfm_add_sub_ff_input_register_D_IN =
	     { _0_CONCAT_INV_IF_condFlags32_res_whas__343_THEN_ETC___d5198[47:0],
	       lv_summed_exponent__h268116,
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5208,
	       ((ff_input_D_OUT[12:8] == 5'b0 ||
		 ff_input_D_OUT[12:8] == 5'b00001) &&
		ff_input_D_OUT[16:13] == 4'b0100) ?
		 setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] :
		 (ff_input_D_OUT[12:8] != 5'b00010 ||
		  ff_input_D_OUT[16:13] != 4'b0100) &&
		 setCanonicalNaN_reswget_BITS_31_TO_0__q59[31],
	       getExp32_res_wget[7:0],
	       getMant32_res_wget[22:0],
	       x__h268423,
	       x__h268686,
	       x__h268692,
	       condFlags32_res_wget[4:0],
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5252 } ;
  assign inst_spfm_add_sub_ff_input_register_EN =
	     MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 ;

  // register inst_spfm_add_sub_ff_stage2
  assign inst_spfm_add_sub_ff_stage2_D_IN =
	     { inst_spfm_add_sub_ff_input_register[49],
	       inst_spfm_add_sub_ff_input_register[4],
	       x_lv_product_exponent__h17305,
	       x_lv_product_mantissa__h17306,
	       inst_spfm_add_sub_ff_input_register[48:17],
	       inst_spfm_add_sub_ff_input_register[13:9],
	       inst_spfm_add_sub_ff_input_register[5],
	       inst_spfm_add_sub_ff_input_register[3:2],
	       inst_spfm_add_sub_ff_input_register[8:6],
	       inst_spfm_add_sub_ff_input_register[16],
	       inst_spfm_add_sub_ff_input_register[14],
	       inst_spfm_add_sub_ff_input_register[15],
	       x__h29991,
	       x__h30052,
	       inst_spfm_add_sub_ff_input_register[1:0] } ;
  assign inst_spfm_add_sub_ff_stage2_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ;

  // register inst_spfm_add_sub_ff_stage4
  assign inst_spfm_add_sub_ff_stage4_D_IN =
	     { x__h53245,
	       x__h30400,
	       _theResult_____1__h30294,
	       lv_minuend__h30280,
	       mantissa2__h30290,
	       mantissa3__h30291,
	       inst_spfm_add_sub_ff_stage2[9:7],
	       x__h53137,
	       x__h53253,
	       x__h53294,
	       inst_spfm_add_sub_ff_stage2[3:2],
	       x__h53318,
	       x__h53360,
	       inst_spfm_add_sub_ff_stage2[5] } ;
  assign inst_spfm_add_sub_ff_stage4_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ;

  // register inst_spfm_add_sub_ff_stage5
  assign inst_spfm_add_sub_ff_stage5_D_IN =
	     { inst_spfm_add_sub_ff_stage4[168:159],
	       _theResult____h53476,
	       inst_spfm_add_sub_ff_stage4[170],
	       inst_spfm_add_sub_ff_stage4[12:10],
	       x__h53553,
	       inst_spfm_add_sub_ff_stage4[9:0],
	       lv_zeros_on_left__h53478 } ;
  assign inst_spfm_add_sub_ff_stage5_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // register inst_spfm_add_sub_rg_state_handler
  always@(MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage or
	  EN_flush)
  case (1'b1)
    MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd1;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd0;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd4;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd3;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd2;
    EN_flush: inst_spfm_add_sub_rg_state_handler_D_IN = 3'd0;
    default: inst_spfm_add_sub_rg_state_handler_D_IN =
		 3'bxxx /* unspecified value */ ;
  endcase
  assign inst_spfm_add_sub_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5187 ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // register inst_spfpu_divider_int_div_rg_inter_stage
  assign inst_spfpu_divider_int_div_rg_inter_stage_D_IN = x_wget__h695 ;
  assign inst_spfpu_divider_int_div_rg_inter_stage_EN =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;

  // register inst_spfpu_divider_int_div_rg_state
  always@(WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage or
	  MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2 or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 or
	  EN_flush or WILL_FIRE_RL_inst_spfpu_divider_rl_stage2)
  case (1'b1)
    WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage:
	inst_spfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2;
    WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2;
    EN_flush: inst_spfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2;
    default: inst_spfpu_divider_int_div_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_divider_int_div_rg_state_EN =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage ||
	     EN_flush ;

  // register inst_spfpu_divider_rg_stage1
  assign inst_spfpu_divider_rg_stage1_D_IN =
	     { lv_exponent__h274180,
	       x__h282084,
	       x__h282112,
	       x__h282142,
	       IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 ||
	       lv_op2_Nan__h225899 ||
	       condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	       condFlags32_reswget_BITS_9_TO_5__q53[1] ||
	       condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q53[3],
	       x__h282206,
	       x__h282220,
	       x__h282225,
	       ff_input_D_OUT[5:3],
	       quiet_nan_two__h268110 } ;
  assign inst_spfpu_divider_rg_stage1_EN =
	     MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 ;

  // register inst_spfpu_divider_rg_stage2
  assign inst_spfpu_divider_rg_stage2_D_IN =
	     { inst_spfpu_divider_rg_stage1[66:57],
	       inst_spfpu_divider_rg_stage1[8],
	       inst_spfpu_divider_rg_stage1[6],
	       inst_spfpu_divider_rg_stage1[7],
	       inst_spfpu_divider_rg_stage1[5:0] } ;
  assign inst_spfpu_divider_rg_stage2_EN =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 ;

  // register inst_spfpu_divider_rg_stage3
  assign inst_spfpu_divider_rg_stage3_D_IN =
	     { x_lv_quotient__h6908,
	       x_wget__h695[55:28],
	       x_lv_exponent__h6909,
	       inst_spfpu_divider_rg_stage2[8:5],
	       x__h14079,
	       !inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131,
	       x__h14084,
	       inst_spfpu_divider_rg_stage2[4:1],
	       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 &&
	       NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d246,
	       inst_spfpu_divider_rg_stage2[0] } ;
  assign inst_spfpu_divider_rg_stage3_EN =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // register inst_spfpu_divider_rg_state_handler
  always@(MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd1;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage3:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd3;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage4:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd0;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd2;
    EN_flush: inst_spfpu_divider_rg_state_handler_D_IN = 2'd0;
    default: inst_spfpu_divider_rg_state_handler_D_IN =
		 2'bxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_divider_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5340 ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // register inst_spfpu_sqrt_ff_final_out
  assign inst_spfpu_sqrt_ff_final_out_D_IN =
	     inst_spfpu_sqrt_ff_final_out_1_whas ?
	       inst_spfpu_sqrt_ff_final_out_1_wget :
	       { 1'd0,
		 37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign inst_spfpu_sqrt_ff_final_out_EN = 1'd1 ;

  // register inst_spfpu_sqrt_rg_inter_stage
  assign inst_spfpu_sqrt_rg_inter_stage_D_IN =
	     MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1 ?
	       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1 :
	       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2 ;
  assign inst_spfpu_sqrt_rg_inter_stage_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5748 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ;

  // register inst_spfpu_sqrt_rg_state
  always@(MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1 or
	  MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1 or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage:
	inst_spfpu_sqrt_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    EN_flush: inst_spfpu_sqrt_rg_state_D_IN = 6'd0;
    default: inst_spfpu_sqrt_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_sqrt_rg_state_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5746 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ||
	     EN_flush ;

  // register rg_multicycle_op
  assign rg_multicycle_op_D_IN = MUX_rg_multicycle_op_write_1__SEL_1 ;
  assign rg_multicycle_op_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5176 ||
	     EN_flush ||
	     WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_fm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ;

  // register rg_result
  assign rg_result_D_IN =
	     rg_result_1_whas ?
	       rg_result_1_wget :
	       { 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		 6'd0 } ;
  assign rg_result_EN = 1'd1 ;

  // submodule ff_input
  assign ff_input_D_IN =
	     { _start_operand1,
	       _start_operand2,
	       _start_operand3,
	       _start_opcode,
	       _start_funct7,
	       _start_funct3,
	       _start_imm,
	       _start_issp } ;
  assign ff_input_ENQ = EN__start ;
  assign ff_input_DEQ = CAN_FIRE_RL_start_stage ;
  assign ff_input_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__343_ETC___d5820 =
	     _theResult_____3__h304203[28] ? 26'd0 : 26'd1 ;
  assign IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__428_ETC___d5996 =
	     _theResult_____3__h314794[57] ? 55'd0 : 55'd1 ;
  assign IF_0b0_CONCAT_getExp64_res_wget__986_BITS_32_T_ETC___d4051 =
	     (x__h251251[10:0] == 11'd2047 &&
	      (ff_input_D_OUT[5:3] == 3'b100 ||
	       ff_input_D_OUT[5:3] == 3'b0 &&
	       getMant64_res_wget[155:104] != 52'd0)) ?
	       (ff_input_D_OUT[208] ?
		  IF_ff_input_first__309_BIT_1_534_THEN_0_ELSE_1_ETC___d3883 :
		  64'd1) :
	       64'd0 ;
  assign IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58 =
	     IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__343_ETC___d5820[0] ?
	       26'd1 :
	       26'd0 ;
  assign IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q37 =
	     IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__428_ETC___d5996[0] ?
	       55'd1 :
	       55'd0 ;
  assign IF_IF_IF_condFlags32_res_whas__343_THEN_condFl_ETC___d5813 =
	     IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5806[0] ?
	       mantissa__h304195 :
	       mantissa___1__h313190 ;
  assign IF_IF_IF_condFlags64_res_whas__428_THEN_condFl_ETC___d5989 =
	     IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5982[0] ?
	       mantissa__h314786 :
	       mantissa___1__h333118 ;
  assign IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3232 =
	     (_theResult_____5__h193878[53] ||
	      IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[159:158] ==
	      2'b0 &&
	      _theResult_____5__h193878[52]) ?
	       resultant_exponent___1__h194591 :
	       resultant_exponent__h193860 ;
  assign IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3245 =
	     _theResult_____5__h193878[53] ?
	       lv_rounded_mantissa__h194592 :
	       _theResult_____5__h193878 ;
  assign IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1383 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q17[57] ?
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q18[113:1] :
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19[113:1] ;
  assign IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1400 =
	     _remainder__h69437[57] ?
	       { _remainder___1__h69609, _dividend___1__h69610 } :
	       { _remainder__h69437, _dividend__h69440 } ;
  assign IF_IF_IF_inst_dpfpu_divider_rg_stage3_675_BITS_ETC___d1728 =
	     _theResult_____4__h87382[53] ?
	       lv_rounded_quotient__h87779 :
	       _theResult_____4__h87382 ;
  assign IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5015 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5011 ?
	       lv_man___1__h220632 :
	       lv_man__h209758 ;
  assign IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5139 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5135 ?
	       lv_man___1__h209557 :
	       lv_man__h203886 ;
  assign IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249 =
	     (_theResult_____5__h65526[24] ||
	      IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[72:71] ==
	      2'b0 &&
	      _theResult_____5__h65526[23]) ?
	       resultant_exponent___1__h66239 :
	       resultant_exponent__h65508 ;
  assign IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1262 =
	     _theResult_____5__h65526[24] ?
	       lv_rounded_mantissa__h66240 :
	       _theResult_____5__h65526 ;
  assign IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q11[28] ?
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12[55:1] :
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13[55:1] ;
  assign IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d84 =
	     _remainder__h3424[28] ?
	       { _remainder___1__h3596, _dividend___1__h3597 } :
	       { _remainder__h3424, _dividend__h3427 } ;
  assign IF_IF_IF_inst_spfpu_divider_rg_stage3_72_BITS__ETC___d325 =
	     _theResult_____4__h14154[24] ?
	       lv_rounded_quotient__h14551 :
	       _theResult_____4__h14154 ;
  assign IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3404 =
	     IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 ?
	       setCanonicalNaN_res_wget[63:32] :
	       (lv_op2_Nan__h225899 ?
		  setCanonicalNaN_res_wget[95:64] :
		  IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3402) ;
  assign IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[3] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[4] ||
	      IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822[7] &&
	      !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3827) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h248295 ;
  assign IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d4423 =
	     condFlags32_reswget_BITS_14_TO_10__q52[4] ?
	       { expo__h258378, man__h258380 } :
	       { expo__h258319, mant__h258320 } ;
  assign IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d4426 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[0]) ?
	       64'h7FF8000000000000 :
	       { setCanonicalNaN_reswget_BITS_95_TO_64__q41[31],
		 condFlags32_reswget_BITS_14_TO_10__q52[1] ?
		   63'h7FF0000000000000 :
		   IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d4423 } ;
  assign IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5753 =
	     condFlags32_reswget_BITS_14_TO_10__q52[4] ? 2'd0 : 2'd1 ;
  assign IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5806 =
	     x__h304746 - y__h304747 ;
  assign IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d3483 =
	     IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 ?
	       ff_input_D_OUT[144:81] :
	       (lv_op2_Nan__h228478 ?
		  ff_input_D_OUT[208:145] :
		  IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3481) ;
  assign IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[3] ||
	      condFlags64_reswget_BITS_14_TO_10__q30[4] ||
	      x__h251251[10] &&
	      !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3994) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h251370 ;
  assign IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4363 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[2] ||
	      condFlags64_reswget_BITS_14_TO_10__q30[0]) ?
	       32'h7FC00000 :
	       (condFlags64_reswget_BITS_14_TO_10__q30[1] ?
		  { ff_input_D_OUT[208], 31'h7F800000 } :
		  IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4361) ;
  assign IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4442 =
	     condFlags64_reswget_BITS_14_TO_10__q30[1] ?
	       5'd0 :
	       (IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4295 ?
		  result__h264946 :
		  5'd5) ;
  assign IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5871 =
	     condFlags64_reswget_BITS_14_TO_10__q30[4] ? 2'd0 : 2'd1 ;
  assign IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5982 =
	     x__h315336 - y__h315337 ;
  assign IF_IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0_ETC___d3706 =
	     IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3702 ?
	       lv_man___1__h245706 :
	       lv_man__h235047 ;
  assign IF_IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0_ETC___d4340 =
	     _theResult_____4___1__h264655 ?
	       fman___1__h265205 :
	       fman__h264863 ;
  assign IF_IF_getExp32_res_whas__818_THEN_getExp32_res_ETC___d3885 =
	     (getExp32_res_wget[23:16] == 8'd126 &&
	      (ff_input_D_OUT[5:3] == 3'b100 ||
	       ff_input_D_OUT[5:3] == 3'b0 &&
	       getMant32_res_wget[68:46] != 23'd0)) ?
	       (setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
		  IF_ff_input_first__309_BIT_1_534_THEN_0_ELSE_1_ETC___d3883 :
		  64'd1) :
	       64'd0 ;
  assign IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313 =
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 ?
	       49'd0 :
	       y_avValue_snd_snd_fst__h264722 ;
  assign IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4361 =
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4295 ?
	       x1_avValue_snd_fst__h265179 :
	       CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q36 ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage2_read__373_BI_ETC___d2414 =
	     mantissa_to_shift__h118006 >> exponent_difference__h118007 ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_BI_ETC___d3276 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3183 ?
	       (!resultant_exponent__h193860[12] ||
		inst_dpfm_add_sub_ff_stage5[8]) &&
	       !inst_dpfm_add_sub_ff_stage5[11] :
	       !inst_dpfm_add_sub_ff_stage5[11] ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_BI_ETC___d3292 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3183 ?
	       resultant_exponent__h193860[12] &&
	       !inst_dpfm_add_sub_ff_stage5[8] ||
	       inst_dpfm_add_sub_ff_stage5[11] :
	       inst_dpfm_add_sub_ff_stage5[11] ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1351 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[113] ?
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q15[113:1] :
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[113:1] ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1376 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1351,
	       !inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[113] } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1401 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[1] ?
	       IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1400 :
	       { IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1383,
		 !IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q17[57] } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q17 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1351[112:55] ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q18 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1376[112:0],
	       1'd0 } +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       57'd0 } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1376[112:0],
	       1'd0 } -
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       57'd0 } ;
  assign IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_ETC__q5 =
	     IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_BI_ETC___d1833 ?
	       _theResult_____1_fst__h90053 :
	       inst_dpfpu_sqrt_rg_inter_stage[128:117] ;
  assign IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_ETC__q6 =
	     IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_BI_ETC___d1833 ?
	       lv_extended_mantissa___1__h90052 :
	       lv_extended_mantissa__h89562 ;
  assign IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986 =
	     _theResult____h209743 << x__h210053[5:0] ;
  assign IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110 =
	     _theResult____h203871 << x__h204163[4:0] ;
  assign IF_IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_ETC___d779 =
	     mantissa_to_shift__h30283 >> exponent_difference__h30284 ;
  assign IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1293 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1200 ?
	       (!resultant_exponent__h65508[9] ||
		inst_spfm_add_sub_ff_stage5[7]) &&
	       !inst_spfm_add_sub_ff_stage5[10] :
	       !inst_spfm_add_sub_ff_stage5[10] ;
  assign IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1309 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1200 ?
	       resultant_exponent__h65508[9] &&
	       !inst_spfm_add_sub_ff_stage5[7] ||
	       inst_spfm_add_sub_ff_stage5[10] :
	       inst_spfm_add_sub_ff_stage5[10] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[55] ?
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[55:1] :
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10[55:1] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d60 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35,
	       !inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[55] } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d85 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[1] ?
	       IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d84 :
	       { IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67,
		 !IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q11[28] } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q11 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35[54:26] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d60[54:0],
	       1'd0 } +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       28'd0 } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d60[54:0],
	       1'd0 } -
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       28'd0 } ;
  assign IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q3 =
	     IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 ?
	       _theResult_____1_fst__h16826 :
	       inst_spfpu_sqrt_rg_inter_stage[67:59] ;
  assign IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q4 =
	     IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 ?
	       lv_extended_mantissa___1__h16825 :
	       lv_extended_mantissa__h16335 ;
  assign IF_NOT_IF_condFlags32_res_whas__343_THEN_condF_ETC___d4182 =
	     lv_invalid__h248061 | condFlags32_reswget_BITS_14_TO_10__q52[1] ;
  assign IF_NOT_IF_condFlags32_res_whas__343_THEN_condF_ETC___d4234 =
	     (!condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	      NOT_IF_condFlags32_res_whas__343_THEN_condFlag_ETC___d3844) ?
	       lv_inexact___1__h248632 :
	       lv_inexact__h248052 ;
  assign IF_NOT_IF_condFlags64_res_whas__428_THEN_condF_ETC___d4218 =
	     lv_invalid__h251133 | condFlags64_reswget_BITS_14_TO_10__q30[1] ;
  assign IF_NOT_IF_condFlags64_res_whas__428_THEN_condF_ETC___d4248 =
	     (!condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	      NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d4012) ?
	       lv_inexact___1__h251707 :
	       lv_inexact__h251124 ;
  assign IF_NOT_IF_getExp64_res_whas__293_THEN_getExp64_ETC___d4436 =
	     (!IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 &&
	      IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4306 &&
	      x__h264835) ?
	       result__h264977 :
	       exception__h264518 ;
  assign IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__15_ETC___d3248 =
	     (ex_overflow__h193868 || inst_dpfm_add_sub_ff_stage5[12] ||
	      IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3232[10:0] ==
	      11'd2047) ?
	       ((inst_dpfm_add_sub_ff_stage5[22:20] == 3'b001 ||
		 inst_dpfm_add_sub_ff_stage5[22:20] == 3'b010 &&
		 !inst_dpfm_add_sub_ff_stage5[23] ||
		 inst_dpfm_add_sub_ff_stage5[22:20] == 3'b011 &&
		 inst_dpfm_add_sub_ff_stage5[23]) ?
		  63'h7FEFFFFFFFFFFFFF :
		  63'h7FF0000000000000) :
	       { IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3232[10:0],
		 IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3245[51:0] } ;
  assign IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1265 =
	     (ex_overflow__h65516 || inst_spfm_add_sub_ff_stage5[11] ||
	      IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249[7:0] ==
	      8'd255) ?
	       ((inst_spfm_add_sub_ff_stage5[21:19] == 3'b001 ||
		 inst_spfm_add_sub_ff_stage5[21:19] == 3'b010 &&
		 !inst_spfm_add_sub_ff_stage5[22] ||
		 inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 &&
		 inst_spfm_add_sub_ff_stage5[22]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249[7:0],
		 IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1262[22:0] } ;
  assign IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682 =
	     _theResult____h220847 << x__h235143[5:0] ;
  assign IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3400 =
	     (!ff_input_D_OUT[3] && lv_compare_result__h225903 == 2'b01 ||
	      ff_input_D_OUT[3] && lv_compare_result__h225903 == 2'b10) ?
	       setCanonicalNaN_res_wget[95:64] :
	       setCanonicalNaN_res_wget[63:32] ;
  assign IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3402 =
	     (!ff_input_D_OUT[3] &&
	      condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) ?
	       lv_result__h226641 :
	       IF_ff_input_first__309_BIT_3_362_AND_IF_condFl_ETC___d3401 ;
  assign IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3481 =
	     (!ff_input_D_OUT[3] &&
	      condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	      condFlags64_reswget_BITS_9_TO_5__q31[3]) ?
	       lv_result__h229188 :
	       IF_ff_input_first__309_BIT_3_362_AND_IF_condFl_ETC___d3480 ;
  assign IF_NOT_inst_dpfpu_divider_rg_stage3_675_BITS_8_ETC___d1753 =
	     (NOT_inst_dpfpu_divider_rg_stage3_675_BITS_82_T_ETC___d1698 &&
	      inst_dpfpu_divider_rg_stage3[1] ||
	      inst_dpfpu_divider_rg_stage3[8]) ?
	       { 11'd0,
		 IF_IF_IF_inst_dpfpu_divider_rg_stage3_675_BITS_ETC___d1728[51:0] } :
	       IF_inst_dpfpu_divider_rg_stage3_675_BIT_7_731__ETC___d1752 ;
  assign IF_NOT_inst_dpfpu_divider_rg_stage3_675_BIT_13_ETC___d1740 =
	     (!inst_dpfpu_divider_rg_stage3[138] &&
	      IF_IF_IF_inst_dpfpu_divider_rg_stage3_675_BITS_ETC___d1728[52]) ?
	       lv_exponent___1__h87865 :
	       lv_exponent__h87384 ;
  assign IF_NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_ETC___d350 =
	     (NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_TO_ETC___d295 &&
	      inst_spfpu_divider_rg_stage3[1] ||
	      inst_spfpu_divider_rg_stage3[8]) ?
	       { 8'd0,
		 IF_IF_IF_inst_spfpu_divider_rg_stage3_72_BITS__ETC___d325[22:0] } :
	       IF_inst_spfpu_divider_rg_stage3_72_BIT_7_28_OR_ETC___d349 ;
  assign IF_NOT_inst_spfpu_divider_rg_stage3_72_BIT_77__ETC___d337 =
	     (!inst_spfpu_divider_rg_stage3[77] &&
	      IF_IF_IF_inst_spfpu_divider_rg_stage3_72_BITS__ETC___d325[23]) ?
	       lv_exponent___1__h14637 :
	       lv_exponent__h14156 ;
  assign IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 =
	     condFlags32_reswget_BITS_14_TO_10__q52[2] |
	     condFlags32_reswget_BITS_14_TO_10__q52[0] ;
  assign IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3827 =
	     condFlags32_reswget_BITS_14_TO_10__q52[1] | lv_invalid__h248034 ;
  assign IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d4231 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[4] ||
	      IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822[7] &&
	      !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3827) &&
	     (!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ||
	      !ff_input_D_OUT[1] ||
	      NOT_IF_getExp32_res_whas__818_THEN_getExp32_re_ETC___d4229) ;
  assign IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d5215 =
	     condFlags32_reswget_BITS_9_TO_5__q53[0] |
	     condFlags32_reswget_BITS_9_TO_5__q53[2] ;
  assign IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 =
	     condFlags64_reswget_BITS_14_TO_10__q30[2] |
	     condFlags64_reswget_BITS_14_TO_10__q30[0] ;
  assign IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3994 =
	     condFlags64_reswget_BITS_14_TO_10__q30[1] | lv_invalid__h251105 ;
  assign IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d4245 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[4] ||
	      x__h251251[10] &&
	      !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3994) &&
	     (!ff_input_D_OUT[208] || !ff_input_D_OUT[1] ||
	      NOT_0b0_CONCAT_getExp64_res_wget__986_BITS_32__ETC___d4243) ;
  assign IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d5292 =
	     condFlags64_reswget_BITS_9_TO_5__q31[0] |
	     condFlags64_reswget_BITS_9_TO_5__q31[2] ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d4639 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001 ||
	       ff_input_D_OUT[12:8] == 5'b00011) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant32_res_wget[45:23],
		 getExp32_res_wget[15:8],
		 getMant32_res_wget[22:0],
		 getExp32_res_wget[7:0] } :
	       ((ff_input_D_OUT[12:8] == 5'b01011 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  62'd0 :
		  { getMant32_res_wget[45:23],
		    getExp32_res_wget[15:8],
		    getMant32_res_wget[22:0],
		    getExp32_res_wget[7:0] }) ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d4774 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 getMant64_res_wget[51:0],
		 getExp64_res_wget[10:0] } :
	       IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4773 ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5208 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] :
	       x__h282142 ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5252 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[5:3],
		 ff_input_D_OUT[8],
		 3'd0,
		 x__h268749,
		 x__h268852 } :
	       { ff_input_D_OUT[5:3],
		 IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d5250 } ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d5325 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[5:3],
		 ff_input_D_OUT[8],
		 3'd0,
		 x__h270931,
		 x__h271034 } :
	       { ff_input_D_OUT[5:3],
		 IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d5323 } ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4457 =
	     (ff_input_D_OUT[12:8] == 5'b11100 &&
	      ff_input_D_OUT[5:3] == 3'b001) ?
	       { 54'd0, ff_input_D_OUT[0] ? x__h254619 : x__h256096, 6'd32 } :
	       ((ff_input_D_OUT[12:8] == 5'b01000) ?
		  IF_ff_input_first__309_BIT_0_341_THEN_0xFFFFFF_ETC___d4449 :
		  { ((ff_input_D_OUT[12:6] == 7'b1110000 ||
		      ff_input_D_OUT[12:6] == 7'b1111000) &&
		     ff_input_D_OUT[5:3] == 3'b0) ?
		      x_data__h265345 :
		      ff_input_D_OUT[208:145],
		    6'd32 }) ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4641 =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant32_res_wget[45:23], getExp32_res_wget[15:8], 31'd0 } :
	       (ff_input_first__309_BITS_12_TO_8_310_EQ_0b1100_ETC___d4597 ?
		  62'd0 :
		  IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d4639) ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4773 =
	     (ff_input_D_OUT[12:8] == 5'b00011 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 63'd0 } :
	       ((ff_input_D_OUT[12:8] == 5'b01011 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  126'd0 :
		  { getMant64_res_wget[103:52],
		    getExp64_res_wget[21:11],
		    getMant64_res_wget[51:0],
		    getExp64_res_wget[10:0] }) ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d4776 =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 63'd0 } :
	       (ff_input_first__309_BITS_12_TO_8_310_EQ_0b1100_ETC___d4597 ?
		  126'd0 :
		  IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b0_ETC___d4774) ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d5250 =
	     (ff_input_D_OUT[12:8] == 5'b00010 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { 4'd10, x__h268749, x__h268852 } :
	       { x__h342352,
		 ff_input_D_OUT[14],
		 2'd1,
		 x__h268749,
		 x__h268852 } ;
  assign IF_ff_input_first__309_BITS_12_TO_8_310_EQ_0b1_ETC___d5323 =
	     (ff_input_D_OUT[12:8] == 5'b00010 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { 4'd10, x__h270931, x__h271034 } :
	       { x__h342352,
		 ff_input_D_OUT[14],
		 2'd1,
		 x__h270931,
		 x__h271034 } ;
  assign IF_ff_input_first__309_BIT_0_341_THEN_0xFFFFFF_ETC___d4449 =
	     { ff_input_D_OUT[0] ? x_data__h265273 : x_data__h258075,
	       1'd1,
	       ff_input_D_OUT[0] ? x_fflags__h265275 : x_fflags__h258077 } ;
  assign IF_ff_input_first__309_BIT_0_341_THEN_42949672_ETC___d3802 =
	     { ff_input_D_OUT[0] ? x_data__h229480 : x_data__h229636,
	       1'd1,
	       ff_input_D_OUT[0] ? x_fflags__h229482 : x_fflags__h229638 } ;
  assign IF_ff_input_first__309_BIT_0_341_THEN_IF_NOT_I_ETC___d4251 =
	     { ff_input_D_OUT[0] ?
		 IF_NOT_IF_condFlags32_res_whas__343_THEN_condF_ETC___d4182 :
		 IF_NOT_IF_condFlags64_res_whas__428_THEN_condF_ETC___d4218,
	       3'd0,
	       ff_input_D_OUT[0] ?
		 _theResult_____1_snd__h249804 :
		 _theResult_____1_snd__h252875 } ;
  assign IF_ff_input_first__309_BIT_0_341_THEN_IF_NOT_I_ETC___d4252 =
	     { ff_input_D_OUT[0] ? x_data__h248077 : x_data__h251149,
	       1'd1,
	       IF_ff_input_first__309_BIT_0_341_THEN_IF_NOT_I_ETC___d4251 } ;
  assign IF_ff_input_first__309_BIT_0_341_THEN_IF_ff_in_ETC___d3521 =
	     { ff_input_D_OUT[0] ? x_data__h225919 : x_data__h228497,
	       1'd1,
	       ff_input_D_OUT[0] ? x_fflags__h225921 : x_fflags__h228499 } ;
  assign IF_ff_input_first__309_BIT_1_534_THEN_0_ELSE_1_ETC___d3883 =
	     ff_input_D_OUT[1] ? 64'd0 : 64'hFFFFFFFFFFFFFFFF ;
  assign IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d3837 =
	     ff_input_D_OUT[1] ?
	       !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	       !lv_invalid__h248034 &&
	       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3833 :
	       !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	       !lv_invalid__h248034 &&
	       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3835 ;
  assign IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d3842 =
	     ff_input_D_OUT[1] ?
	       !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	       !lv_invalid__h248034 &&
	       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3838 :
	       !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	       !lv_invalid__h248034 &&
	       IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3840 ;
  assign IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d4005 =
	     ff_input_D_OUT[1] ?
	       !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	       !lv_invalid__h251105 &&
	       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4001 :
	       !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	       !lv_invalid__h251105 &&
	       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4003 ;
  assign IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d4010 =
	     ff_input_D_OUT[1] ?
	       !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	       !lv_invalid__h251105 &&
	       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4006 :
	       !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	       !lv_invalid__h251105 &&
	       _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4008 ;
  assign IF_ff_input_first__309_BIT_3_362_AND_IF_condFl_ETC___d3401 =
	     (ff_input_D_OUT[3] &&
	      condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) ?
	       lv_result__h226682 :
	       IF_NOT_ff_input_first__309_BIT_3_362_363_AND_I_ETC___d3400 ;
  assign IF_ff_input_first__309_BIT_3_362_AND_IF_condFl_ETC___d3480 =
	     (ff_input_D_OUT[3] &&
	      condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	      condFlags64_reswget_BITS_9_TO_5__q31[3]) ?
	       lv_result__h229229 :
	       ((!ff_input_D_OUT[3] && lv_compare_result__h228482 == 2'b01 ||
		 ff_input_D_OUT[3] && lv_compare_result__h228482 == 2'b10) ?
		  ff_input_D_OUT[208:145] :
		  ff_input_D_OUT[144:81]) ;
  assign IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822 =
	     getExp32_res_wget[23:16] - 8'd127 ;
  assign IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3833 =
	     (IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822 ^
	      8'h80) <
	     8'd192 ;
  assign IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3835 =
	     (IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822 ^
	      8'h80) <
	     8'd191 ;
  assign IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3838 =
	     (IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822 ^
	      8'h80) <
	     8'd160 ;
  assign IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3840 =
	     (IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822 ^
	      8'h80) <
	     8'd159 ;
  assign IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d4152 =
	     getExp32_res_wget[23:16] == 8'd126 &&
	     (ff_input_D_OUT[5:3] == 3'b100 ||
	      ff_input_D_OUT[5:3] == 3'b0 &&
	      getMant32_res_wget[68:46] != 23'd0) ||
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822[7] &&
	     ff_input_D_OUT[5:3] == 3'b010 ;
  assign IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4295 =
	     getExp64_res_wget[32:22] <= 11'd1150 ;
  assign IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 =
	     getExp64_res_wget[32:22] <= 11'd872 ;
  assign IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4306 =
	     getExp64_res_wget[32:22] <= 11'd896 ;
  assign IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2109 =
	     lv_product_mantissa__h107902 >>
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1871 ;
  assign IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2330 =
	     IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2109[0] |
	     ((_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1871 ^
	       13'h1000) >
	      ({ 6'd0, lsb_zeros__h107906 } ^ 13'h1000) ||
	      lv_product_mantissa__h107902[0]) ;
  assign IF_inst_dpfm_add_sub_ff_stage2_read__373_BITS__ETC___d2789 =
	     (inst_dpfm_add_sub_ff_stage2[9:7] == 3'b010 &&
	      sign2__h117969 | op_xor_sign3__h117982 ||
	      inst_dpfm_add_sub_ff_stage2[9:7] != 3'b010 &&
	      sign2__h117969 & op_xor_sign3__h117982) ?
	       2'b11 :
	       (sign2__h117969 ? lv_result_is_zero___1__h167564 : 2'b01) ;
  assign IF_inst_dpfm_add_sub_ff_stage2_read__373_BIT_5_ETC___d2390 =
	     exponent2__h117993 <= exponent3__h117984 ;
  assign IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3183 =
	     (resultant_exponent__h193860 - 13'd1023 ^ 13'h1000) <= 13'd5119 ;
  assign IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200 =
	     inst_dpfm_add_sub_ff_stage5[183] ?
	       resultant_mantissa___1__h194162 :
	       _theResult___snd_fst__h194407 ;
  assign IF_inst_dpfpu_divider_int_div_wr_final_out_wha_ETC___d1574 =
	     x_wget__h66729[55:0] >>
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1449 ;
  assign IF_inst_dpfpu_divider_rg_stage3_675_BIT_10_682_ETC___d1763 =
	     inst_dpfpu_divider_rg_stage3[10] ?
	       { 64'h7FF8000000000000, _theResult_____1_snd__h87496 } :
	       { _theResult_____1_fst__h87506,
		 _theResult_____1_snd__h87507 } ;
  assign IF_inst_dpfpu_divider_rg_stage3_675_BIT_7_731__ETC___d1752 =
	     (inst_dpfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_dpfpu_divider_rg_stage3_675_BIT_13_ETC___d1740[10:0] ==
	      11'd2047) ?
	       ((inst_dpfpu_divider_rg_stage3[4:2] == 3'b001 ||
		 inst_dpfpu_divider_rg_stage3[4:2] == 3'b010 &&
		 !inst_dpfpu_divider_rg_stage3[12] ||
		 inst_dpfpu_divider_rg_stage3[4:2] == 3'b011 &&
		 inst_dpfpu_divider_rg_stage3[12]) ?
		  63'h7FEFFFFFFFFFFFFF :
		  63'h7FF0000000000000) :
	       { IF_NOT_inst_dpfpu_divider_rg_stage3_675_BIT_13_ETC___d1740[10:0],
		 IF_IF_IF_inst_dpfpu_divider_rg_stage3_675_BITS_ETC___d1728[51:0] } ;
  assign IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d590 =
	     lv_product_mantissa__h25341 >>
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 ;
  assign IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d695 =
	     IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d590[0] |
	     ((_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 ^
	       10'h200) >
	      ({ 4'd0, lsb_zeros__h25345 } ^ 10'h200) ||
	      lv_product_mantissa__h25341[0]) ;
  assign IF_inst_spfm_add_sub_ff_stage2_read__38_BITS_9_ETC___d980 =
	     (inst_spfm_add_sub_ff_stage2[9:7] == 3'b010 &&
	      sign2__h30246 | op_xor_sign3__h30259 ||
	      inst_spfm_add_sub_ff_stage2[9:7] != 3'b010 &&
	      sign2__h30246 & op_xor_sign3__h30259) ?
	       2'b11 :
	       (sign2__h30246 ? lv_result_is_zero___1__h53306 : 2'b01) ;
  assign IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 =
	     exponent2__h30270 <= exponent3__h30261 ;
  assign IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1200 =
	     (resultant_exponent__h65508 - 10'd127 ^ 10'h200) <= 10'd639 ;
  assign IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217 =
	     inst_spfm_add_sub_ff_stage5[95] ?
	       resultant_mantissa___1__h65810 :
	       _theResult___snd_fst__h66055 ;
  assign IF_inst_spfpu_divider_int_div_wr_final_out_wha_ETC___d200 =
	     x_wget__h695[26:0] >>
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ;
  assign IF_inst_spfpu_divider_rg_stage3_72_BIT_10_79_T_ETC___d360 =
	     inst_spfpu_divider_rg_stage3[10] ?
	       { 32'h7FC00000, _theResult_____1_snd__h14268 } :
	       { _theResult_____1_fst__h14278,
		 _theResult_____1_snd__h14279 } ;
  assign IF_inst_spfpu_divider_rg_stage3_72_BIT_7_28_OR_ETC___d349 =
	     (inst_spfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_spfpu_divider_rg_stage3_72_BIT_77__ETC___d337[7:0] ==
	      8'd255) ?
	       ((inst_spfpu_divider_rg_stage3[4:2] == 3'b001 ||
		 inst_spfpu_divider_rg_stage3[4:2] == 3'b010 &&
		 !inst_spfpu_divider_rg_stage3[12] ||
		 inst_spfpu_divider_rg_stage3[4:2] == 3'b011 &&
		 inst_spfpu_divider_rg_stage3[12]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_NOT_inst_spfpu_divider_rg_stage3_72_BIT_77__ETC___d337[7:0],
		 IF_IF_IF_inst_spfpu_divider_rg_stage3_72_BITS__ETC___d325[22:0] } ;
  assign INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2091 =
	     shift_neg__h107909 < { 6'd0, x__h107970 } ;
  assign INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d572 =
	     shift_neg__h25348 < { 4'd0, x__h25409 } ;
  assign INV_1_MINUS_inst_dpfpu_divider_rg_stage2_444_B_ETC___d1569 =
	     shift_neg__h73024 < { 7'd0, msb_zeros__h72864 } ;
  assign INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d195 =
	     shift_neg__h7017 < { 5'd0, msb_zeros__h6857 } ;
  assign NOT_0b0_CONCAT_getExp64_res_wget__986_BITS_32__ETC___d4243 =
	     (x__h251251[10:0] != 11'd2047 ||
	      ff_input_D_OUT[5:3] != 3'b100 &&
	      (ff_input_D_OUT[5:3] != 3'b0 ||
	       getMant64_res_wget[155:104] == 52'd0)) &&
	     (!x__h251251[10] || ff_input_D_OUT[5:3] != 3'b010) ;
  assign NOT_IF_condFlags32_res_whas__343_THEN_condFlag_ETC___d3844 =
	     !condFlags32_reswget_BITS_14_TO_10__q52[4] &&
	     (!IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822[7] ||
	      IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3827) &&
	     (ff_input_D_OUT[2] ?
		IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d3837 :
		IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d3842) ;
  assign NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d4012 =
	     !condFlags64_reswget_BITS_14_TO_10__q30[4] &&
	     (!x__h251251[10] ||
	      IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3994) &&
	     (ff_input_D_OUT[2] ?
		IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d4005 :
		IF_ff_input_first__309_BIT_1_534_THEN_NOT_IF_c_ETC___d4010) ;
  assign NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d5153 =
	     !condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[2] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4295 &&
	     !IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 &&
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4306 ;
  assign NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d5159 =
	     !condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[2] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4295 &&
	     !IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 &&
	     !IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4306 ;
  assign NOT_IF_getExp32_res_whas__818_THEN_getExp32_re_ETC___d4229 =
	     (getExp32_res_wget[23:16] != 8'd126 ||
	      ff_input_D_OUT[5:3] != 3'b100 &&
	      (ff_input_D_OUT[5:3] != 3'b0 ||
	       getMant32_res_wget[68:46] == 23'd0)) &&
	     (!IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822[7] ||
	      ff_input_D_OUT[5:3] != 3'b010) ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5338 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 &&
	     !lv_op2_Nan__h225899 &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	     condFlags32_reswget_BITS_9_TO_5__q53[3] ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5340 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5460 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] &&
	     !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 &&
	     !lv_op2_Nan__h228478 &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	     condFlags64_reswget_BITS_9_TO_5__q31[3] ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5462 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5721 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     (IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 ||
	      ff_input_D_OUT[176] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[3]) ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5746 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 &&
	     !ff_input_D_OUT[176] &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      !condFlags32_reswget_BITS_14_TO_10__q52[3]) ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5748 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5840 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] &&
	     (IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 ||
	      ff_input_D_OUT[208] ||
	      condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      condFlags64_reswget_BITS_14_TO_10__q30[3]) ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5865 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] &&
	     !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 &&
	     !ff_input_D_OUT[208] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      !condFlags64_reswget_BITS_14_TO_10__q30[3]) ;
  assign NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5867 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5176 =
	     (ff_input_D_OUT[12:8] == 5'b0 ||
	      ff_input_D_OUT[12:8] == 5'b00001) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[12:8] == 5'b00010 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[16:13] == 4'b0 ||
	     ff_input_D_OUT[16:13] == 4'b0001 ||
	     ff_input_D_OUT[16:13] == 4'b0010 ||
	     ff_input_D_OUT[16:13] == 4'b0011 ;
  assign NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5187 =
	     (ff_input_D_OUT[12:8] != 5'b11010 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b00100 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11100 ||
	      ff_input_D_OUT[5:3] != 3'b001 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b01000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110001 &&
	      ff_input_D_OUT[12:6] != 7'b1111001 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100 &&
	      ff_input_D_OUT[0] ||
	      (ff_input_D_OUT[12:8] != 5'b0 &&
	       ff_input_D_OUT[12:8] != 5'b00001 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b00011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b01011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      ff_input_first__309_BITS_12_TO_8_310_EQ_0b10_5_ETC___d4533) ;
  assign NOT_ff_input_first__309_BITS_12_TO_8_310_EQ_0b_ETC___d5266 =
	     (ff_input_D_OUT[12:8] != 5'b11010 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b00100 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11100 ||
	      ff_input_D_OUT[5:3] != 3'b001 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b01000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110001 &&
	      ff_input_D_OUT[12:6] != 7'b1111001 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100 &&
	      !ff_input_D_OUT[0] ||
	      (ff_input_D_OUT[12:8] != 5'b0 &&
	       ff_input_D_OUT[12:8] != 5'b00001 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b00011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b01011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      ff_input_first__309_BITS_12_TO_8_310_EQ_0b10_5_ETC___d4714) ;
  assign NOT_ff_input_first__309_BIT_1_534_548_AND_ff_i_ETC___d3713 =
	     { sign__h235042,
	       IF_IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0_ETC___d3706[52] ?
		 local_expo___1__h245729 :
		 expo__h220850,
	       IF_IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0_ETC___d3706[51:0] } ;
  assign NOT_ff_input_first__309_BIT_2_523_527_AND_NOT__ETC___d3941 =
	     !ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd157 &&
	     final_result__h248054[30:0] == 31'h7FFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign NOT_ff_input_first__309_BIT_2_523_527_AND_NOT__ETC___d4106 =
	     !ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     x__h251251[10:0] == 11'd30 &&
	     final_result__h251126[30:0] == 31'h7FFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign NOT_ff_input_first__309_BIT_2_523_527_AND_ff_i_ETC___d3948 =
	     !ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd158 &&
	     final_result__h248054[31:0] == 32'hFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign NOT_ff_input_first__309_BIT_2_523_527_AND_ff_i_ETC___d4112 =
	     !ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     x__h251251[10:0] == 11'd31 &&
	     final_result__h251126[31:0] == 32'hFFFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign NOT_inst_dpfpu_divider_rg_stage2_444_BITS_21_T_ETC___d1649 =
	     !inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1448 &&
	     (!_1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1450 ||
	      !x_wget__h66729[55] &&
	      INV_1_MINUS_inst_dpfpu_divider_rg_stage2_444_B_ETC___d1569) ;
  assign NOT_inst_dpfpu_divider_rg_stage3_675_BITS_82_T_ETC___d1698 =
	     x__h87541 | inst_dpfpu_divider_rg_stage3[84] ;
  assign NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d246 =
	     !inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 &&
	     (!_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 ||
	      !x_wget__h695[26] &&
	      INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d195) ;
  assign NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_TO_ETC___d295 =
	     x__h14313 | inst_spfpu_divider_rg_stage3[52] ;
  assign _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2742 =
	     ({ 5'd0, x__h153079 } < exponent_difference__h118007 ||
	      IF_IF_inst_dpfm_add_sub_ff_stage2_read__373_BI_ETC___d2414[0]) &&
	     mantissa_to_shift__h118006 != 160'd0 ;
  assign _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d933 =
	     ({ 3'd0, x__h46564 } < exponent_difference__h30284 ||
	      IF_IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_ETC___d779[0]) &&
	     mantissa_to_shift__h30283 != 73'd0 ;
  assign _0_CONCAT_INV_IF_condFlags32_res_whas__343_THEN_ETC___d5198 =
	     { 24'd0, x__h268167 } * { 24'd0, x__h268253 } ;
  assign _0_CONCAT_INV_IF_condFlags64_res_whas__428_THEN_ETC___d5277 =
	     { 53'd0, x__h270354 } * { 53'd0, x__h270440 } ;
  assign _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3175 =
	     { 5'd0, inst_dpfm_add_sub_ff_stage5[7:0] } - 13'd1 ;
  assign _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3177 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3175 <=
	     resultant_exponent_sub__h193853 ;
  assign _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1192 =
	     { 3'd0, inst_spfm_add_sub_ff_stage5[6:0] } - 10'd1 ;
  assign _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1192 <=
	     resultant_exponent_sub__h65501 ;
  assign _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4001 =
	     (x__h251251[10:0] ^ 11'h400) < 11'd1088 ;
  assign _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4003 =
	     (x__h251251[10:0] ^ 11'h400) < 11'd1087 ;
  assign _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4006 =
	     (x__h251251[10:0] ^ 11'h400) < 11'd1056 ;
  assign _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4008 =
	     (x__h251251[10:0] ^ 11'h400) < 11'd1055 ;
  assign _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4188 =
	     x__h251251[10:0] == 11'd2047 &&
	     (ff_input_D_OUT[5:3] == 3'b100 ||
	      ff_input_D_OUT[5:3] == 3'b0 &&
	      getMant64_res_wget[155:104] != 52'd0) ||
	     x__h251251[10] && ff_input_D_OUT[5:3] == 3'b010 ;
  assign _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858 =
	     final_man__h248046 <<
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822 ;
  assign _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC__q48 =
	     _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858[54:23] ;
  assign _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025 =
	     final_man__h251118 << x__h251251[10:0] ;
  assign _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC__q26 =
	     _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025[83:52] ;
  assign _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1871 =
	     13'd1 - lv_product_exponent__h107900 ;
  assign _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1872 =
	     (_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1871 ^
	      13'h1000) <=
	     13'd4096 ;
  assign _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 =
	     10'd1 - lv_product_exponent__h25339 ;
  assign _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d469 =
	     (_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 ^
	      10'h200) <=
	     10'd512 ;
  assign _1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1449 =
	     13'd1 - inst_dpfpu_divider_rg_stage2[21:9] ;
  assign _1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1450 =
	     (_1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1449 ^
	      13'h1000) <=
	     13'd4096 ;
  assign _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 =
	     10'd1 - inst_spfpu_divider_rg_stage2[18:9] ;
  assign _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 =
	     (_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ^
	      10'h200) <=
	     10'd512 ;
  assign _denominator__h5391 = { inst_spfpu_divider_rg_stage1[32:9], 3'd0 } ;
  assign _denominator__h71398 = { inst_dpfpu_divider_rg_stage1[61:9], 3'd0 } ;
  assign _dividend___1__h3597 = _dividend__h3427 - 27'd1 ;
  assign _dividend___1__h69610 = _dividend__h69440 - 56'd1 ;
  assign _dividend__h2789 =
	     { IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67[25:0],
	       !IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q11[28] } ;
  assign _dividend__h2925 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35[25:0],
	       !inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[55] } ;
  assign _dividend__h3426 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       _dividend__h2925 :
	       _dividend__h2789 ;
  assign _dividend__h3427 = _dividend__h3426 - ~_dividend__h3426 ;
  assign _dividend__h68802 =
	     { IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1383[54:0],
	       !IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q17[57] } ;
  assign _dividend__h68938 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1351[54:0],
	       !inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[113] } ;
  assign _dividend__h69439 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       _dividend__h68938 :
	       _dividend__h68802 ;
  assign _dividend__h69440 = _dividend__h69439 - ~_dividend__h69439 ;
  assign _numerator__h5392 = { inst_spfpu_divider_rg_stage1[56:33], 3'd0 } ;
  assign _numerator__h71399 = { inst_dpfpu_divider_rg_stage1[114:62], 3'd0 } ;
  assign _remainder___1__h3596 =
	     _remainder__h3424 +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       1'b0 } ;
  assign _remainder___1__h69609 =
	     _remainder__h69437 +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       1'b0 } ;
  assign _remainder__h3424 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35[54:26] :
	       IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67[54:26] ;
  assign _remainder__h69437 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1351[112:55] :
	       IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1383[112:55] ;
  assign _theResult_____1__h118017 = mantissa2__h118013 > mantissa3__h118014 ;
  assign _theResult_____1__h30294 = mantissa2__h30290 > mantissa3__h30291 ;
  assign _theResult_____1_fst__h107960 =
	     (msb_zeros__h107904 == 7'b0000001) ?
	       lv_product_exponent__h107900 :
	       _theResult_____1_fst__h107963 ;
  assign _theResult_____1_fst__h107963 =
	     INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2091 ?
	       lv_product_exponent_sub_shift__h107911 :
	       lv_product_exponent_sub_zerosMSB__h107913 ;
  assign _theResult_____1_fst__h14278 =
	     { inst_spfpu_divider_rg_stage3[12],
	       inst_spfpu_divider_rg_stage3[9] ?
		 31'h7F800000 :
		 (inst_spfpu_divider_rg_stage3[5] ?
		    31'd0 :
		    IF_NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_ETC___d350) } ;
  assign _theResult_____1_fst__h16826 =
	     lv_extended_mantissa___1__h16825[26] ?
	       result_exponent___1__h16848 :
	       inst_spfpu_sqrt_rg_inter_stage[67:59] ;
  assign _theResult_____1_fst__h194732 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     inst_dpfm_add_sub_ff_stage5_read__156_BIT_15_1_ETC___d3282 &&
	     _theResult_____3_fst__h193997 ;
  assign _theResult_____1_fst__h249736 =
	     ff_input_D_OUT[1] &&
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ||
	     lv_invalid___2__h248634 ;
  assign _theResult_____1_fst__h252807 =
	     ff_input_D_OUT[1] && ff_input_D_OUT[208] ||
	     lv_invalid___2__h251709 ;
  assign _theResult_____1_fst__h25399 =
	     (msb_zeros__h25343 == 6'b000001) ?
	       lv_product_exponent__h25339 :
	       _theResult_____1_fst__h25402 ;
  assign _theResult_____1_fst__h25402 =
	     INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d572 ?
	       lv_product_exponent_sub_shift__h25350 :
	       lv_product_exponent_sub_zerosMSB__h25352 ;
  assign _theResult_____1_fst__h66380 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     inst_spfm_add_sub_ff_stage5_read__173_BIT_14_1_ETC___d1299 &&
	     _theResult_____3_fst__h65645 ;
  assign _theResult_____1_fst__h87506 =
	     { inst_dpfpu_divider_rg_stage3[12],
	       inst_dpfpu_divider_rg_stage3[9] ?
		 63'h7FF0000000000000 :
		 (inst_dpfpu_divider_rg_stage3[5] ?
		    63'd0 :
		    IF_NOT_inst_dpfpu_divider_rg_stage3_675_BITS_8_ETC___d1753) } ;
  assign _theResult_____1_fst__h90053 =
	     lv_extended_mantissa___1__h90052[55] ?
	       result_exponent___1__h90075 :
	       inst_dpfpu_sqrt_rg_inter_stage[128:117] ;
  assign _theResult_____1_snd__h107961 =
	     (msb_zeros__h107904 == 7'b0000001) ?
	       lv_product_mantissa__h107902 :
	       _theResult_____1_snd__h107964 ;
  assign _theResult_____1_snd__h107964 =
	     INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2091 ?
	       lv_product_mantissa_shiftL_expo__h107910 :
	       lv_product_mantissa_shiftL_zerosMSB__h107912 ;
  assign _theResult_____1_snd__h14257 =
	     inst_spfpu_divider_rg_stage3[9] ? 5'd8 : 5'd0 ;
  assign _theResult_____1_snd__h14268 =
	     (~inst_spfpu_divider_rg_stage3[0]) ? 5'd16 : 5'd0 ;
  assign _theResult_____1_snd__h14279 =
	     inst_spfpu_divider_rg_stage3[9] ?
	       5'd8 :
	       _theResult_____1_snd__h14296 ;
  assign _theResult_____1_snd__h14296 =
	     inst_spfpu_divider_rg_stage3[5] ?
	       5'd0 :
	       _theResult_____1_snd__h14406 ;
  assign _theResult_____1_snd__h14406 =
	     (NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_TO_ETC___d295 &&
	      inst_spfpu_divider_rg_stage3[1] ||
	      inst_spfpu_divider_rg_stage3[8]) ?
	       5'd3 :
	       _theResult_____1_snd__h14646 ;
  assign _theResult_____1_snd__h14646 =
	     (inst_spfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_spfpu_divider_rg_stage3_72_BIT_77__ETC___d337[7:0] ==
	      8'd255) ?
	       5'd5 :
	       _theResult_____1_snd__h14664 ;
  assign _theResult_____1_snd__h14664 =
	     NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_TO_ETC___d295 ?
	       5'd1 :
	       5'd0 ;
  assign _theResult_____1_snd__h249737 =
	     (ff_input_D_OUT[1] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q41[31]) ?
	       64'd0 :
	       final_result___3__h248635 ;
  assign _theResult_____1_snd__h249804 =
	     !IF_NOT_IF_condFlags32_res_whas__343_THEN_condF_ETC___d4182 &&
	     IF_NOT_IF_condFlags32_res_whas__343_THEN_condF_ETC___d4234 ;
  assign _theResult_____1_snd__h252808 =
	     (ff_input_D_OUT[1] && ff_input_D_OUT[208]) ?
	       64'd0 :
	       final_result___3__h251710 ;
  assign _theResult_____1_snd__h252875 =
	     !IF_NOT_IF_condFlags64_res_whas__428_THEN_condF_ETC___d4218 &&
	     IF_NOT_IF_condFlags64_res_whas__428_THEN_condF_ETC___d4248 ;
  assign _theResult_____1_snd__h25400 =
	     (msb_zeros__h25343 == 6'b000001) ?
	       lv_product_mantissa__h25341 :
	       _theResult_____1_snd__h25403 ;
  assign _theResult_____1_snd__h25403 =
	     INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d572 ?
	       lv_product_mantissa_shiftL_expo__h25349 :
	       lv_product_mantissa_shiftL_zerosMSB__h25351 ;
  assign _theResult_____1_snd__h87485 =
	     inst_dpfpu_divider_rg_stage3[9] ? 5'd8 : 5'd0 ;
  assign _theResult_____1_snd__h87496 =
	     (~inst_dpfpu_divider_rg_stage3[0]) ? 5'd16 : 5'd0 ;
  assign _theResult_____1_snd__h87507 =
	     inst_dpfpu_divider_rg_stage3[9] ?
	       5'd8 :
	       _theResult_____1_snd__h87524 ;
  assign _theResult_____1_snd__h87524 =
	     inst_dpfpu_divider_rg_stage3[5] ?
	       5'd0 :
	       _theResult_____1_snd__h87634 ;
  assign _theResult_____1_snd__h87634 =
	     (NOT_inst_dpfpu_divider_rg_stage3_675_BITS_82_T_ETC___d1698 &&
	      inst_dpfpu_divider_rg_stage3[1] ||
	      inst_dpfpu_divider_rg_stage3[8]) ?
	       5'd3 :
	       _theResult_____1_snd__h87874 ;
  assign _theResult_____1_snd__h87874 =
	     (inst_dpfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_dpfpu_divider_rg_stage3_675_BIT_13_ETC___d1740[10:0] ==
	      11'd2047) ?
	       5'd5 :
	       _theResult_____1_snd__h87892 ;
  assign _theResult_____1_snd__h87892 =
	     NOT_inst_dpfpu_divider_rg_stage3_675_BITS_82_T_ETC___d1698 ?
	       5'd1 :
	       5'd0 ;
  assign _theResult_____1_snd_snd_fst__h194760 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     _theResult_____3_snd_fst__h193999 ;
  assign _theResult_____1_snd_snd_fst__h66408 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     _theResult_____3_snd_fst__h65647 ;
  assign _theResult_____1_snd_snd_snd__h194761 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     _theResult_____3_snd_snd_fst__h194001 ;
  assign _theResult_____1_snd_snd_snd__h66409 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     _theResult_____3_snd_snd_fst__h65649 ;
  assign _theResult_____2__h264919 =
	     IF_IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0_ETC___d4340[23] ?
	       expo___1__h265208 :
	       expo__h264520 ;
  assign _theResult_____2_fst__h249411 =
	     NOT_ff_input_first__309_BIT_2_523_527_AND_NOT__ETC___d3941 ||
	     NOT_ff_input_first__309_BIT_2_523_527_AND_ff_i_ETC___d3948 ||
	     ff_input_first__309_BIT_2_523_AND_NOT_ff_input_ETC___d3955 ||
	     ff_input_first__309_BIT_2_523_AND_ff_input_fir_ETC___d3961 ;
  assign _theResult_____2_fst__h252484 =
	     NOT_ff_input_first__309_BIT_2_523_527_AND_NOT__ETC___d4106 ||
	     NOT_ff_input_first__309_BIT_2_523_527_AND_ff_i_ETC___d4112 ||
	     ff_input_first__309_BIT_2_523_AND_NOT_ff_input_ETC___d4118 ||
	     ff_input_first__309_BIT_2_523_AND_ff_input_fir_ETC___d4123 ;
  assign _theResult_____2_snd__h249412 =
	     NOT_ff_input_first__309_BIT_2_523_527_AND_NOT__ETC___d3941 ?
	       64'h000000007FFFFFFF :
	       _theResult_____2_snd__h249519 ;
  assign _theResult_____2_snd__h249519 =
	     NOT_ff_input_first__309_BIT_2_523_527_AND_ff_i_ETC___d3948 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h249571 ;
  assign _theResult_____2_snd__h249571 =
	     ff_input_first__309_BIT_2_523_AND_NOT_ff_input_ETC___d3955 ?
	       64'h7FFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h249622 ;
  assign _theResult_____2_snd__h249622 =
	     ff_input_first__309_BIT_2_523_AND_ff_input_fir_ETC___d3961 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h249625 ;
  assign _theResult_____2_snd__h249625 =
	     (!ff_input_D_OUT[2] && final_result___2__h249624[31]) ?
	       final_result___1__h249663 :
	       final_result___2__h249624 ;
  assign _theResult_____2_snd__h252485 =
	     NOT_ff_input_first__309_BIT_2_523_527_AND_NOT__ETC___d4106 ?
	       64'h000000007FFFFFFF :
	       _theResult_____2_snd__h252590 ;
  assign _theResult_____2_snd__h252590 =
	     NOT_ff_input_first__309_BIT_2_523_527_AND_ff_i_ETC___d4112 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h252642 ;
  assign _theResult_____2_snd__h252642 =
	     ff_input_first__309_BIT_2_523_AND_NOT_ff_input_ETC___d4118 ?
	       64'h7FFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h252693 ;
  assign _theResult_____2_snd__h252693 =
	     ff_input_first__309_BIT_2_523_AND_ff_input_fir_ETC___d4123 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h252696 ;
  assign _theResult_____2_snd__h252696 =
	     (!ff_input_D_OUT[2] && final_result___2__h252695[31]) ?
	       final_result___1__h252734 :
	       final_result___2__h252695 ;
  assign _theResult_____3__h304203 =
	     { 27'd0,
	       IF_IF_IF_condFlags32_res_whas__343_THEN_condFl_ETC___d5813[51:50] } -
	     29'd1 ;
  assign _theResult_____3__h314794 =
	     { 56'd0,
	       IF_IF_IF_condFlags64_res_whas__428_THEN_condFl_ETC___d5989[109:108] } -
	     58'd1 ;
  assign _theResult_____3_fst__h193997 =
	     !inst_dpfm_add_sub_ff_stage5[15] && _theResult_____6__h193877 ;
  assign _theResult_____3_fst__h194647 =
	     ex_overflow__h193868 || inst_dpfm_add_sub_ff_stage5[12] ||
	     IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3232[10:0] ==
	     11'd2047 ;
  assign _theResult_____3_fst__h225974 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[2] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[0]) ?
	       _theResult_____3_fst__h226179 :
	       5'd0 ;
  assign _theResult_____3_fst__h226179 =
	     (ff_input_D_OUT[5:3] != 3'b010 ||
	      condFlags32_reswget_BITS_14_TO_10__q52[0] |
	      condFlags32_reswget_BITS_9_TO_5__q53[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h226596 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h228527 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[2] ||
	      condFlags64_reswget_BITS_14_TO_10__q30[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[2] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[0]) ?
	       _theResult_____3_fst__h228732 :
	       5'd0 ;
  assign _theResult_____3_fst__h228732 =
	     (ff_input_D_OUT[5:3] != 3'b010 ||
	      condFlags64_reswget_BITS_14_TO_10__q30[0] |
	      condFlags64_reswget_BITS_9_TO_5__q31[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h229143 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h248637 =
	     (!ff_input_D_OUT[1] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q41[31]) ?
	       lv_invalid___2__h248634 :
	       _theResult_____1_fst__h249736 ;
  assign _theResult_____3_fst__h251712 =
	     sign__h235042 ?
	       lv_invalid___2__h251709 :
	       _theResult_____1_fst__h252807 ;
  assign _theResult_____3_fst__h65645 =
	     !inst_spfm_add_sub_ff_stage5[14] && _theResult_____6__h65525 ;
  assign _theResult_____3_fst__h66295 =
	     ex_overflow__h65516 || inst_spfm_add_sub_ff_stage5[11] ||
	     IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249[7:0] ==
	     8'd255 ;
  assign _theResult_____3_snd__h225975 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[2] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[0]) ?
	       32'd0 :
	       CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q54 ;
  assign _theResult_____3_snd__h226597 =
	     (IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 &
	      lv_op2_Nan__h225899) ?
	       32'h7FC00000 :
	       IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3404 ;
  assign _theResult_____3_snd__h228528 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[2] ||
	      condFlags64_reswget_BITS_14_TO_10__q30[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[2] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[0]) ?
	       64'd0 :
	       CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q32 ;
  assign _theResult_____3_snd__h229144 =
	     (IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 &
	      lv_op2_Nan__h228478) ?
	       64'h7FF8000000000000 :
	       IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d3483 ;
  assign _theResult_____3_snd_fst__h193999 =
	     !inst_dpfm_add_sub_ff_stage5[15] &&
	     ((inst_dpfm_add_sub_ff_stage5[13] ||
	       inst_dpfm_add_sub_ff_stage5[18]) ?
		ex_overflow__h193868 :
		_theResult_____3_fst__h194647) ;
  assign _theResult_____3_snd_fst__h194649 =
	     ex_overflow__h193868 || inst_dpfm_add_sub_ff_stage5[12] ||
	     IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3232[10:0] ==
	     11'd2047 ||
	     lv_inexact__h193876 ;
  assign _theResult_____3_snd_fst__h65647 =
	     !inst_spfm_add_sub_ff_stage5[14] &&
	     ((inst_spfm_add_sub_ff_stage5[12] ||
	       inst_spfm_add_sub_ff_stage5[17]) ?
		ex_overflow__h65516 :
		_theResult_____3_fst__h66295) ;
  assign _theResult_____3_snd_fst__h66297 =
	     ex_overflow__h65516 || inst_spfm_add_sub_ff_stage5[11] ||
	     IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249[7:0] ==
	     8'd255 ||
	     lv_inexact__h65524 ;
  assign _theResult_____3_snd_snd_fst__h194001 =
	     !inst_dpfm_add_sub_ff_stage5[15] &&
	     ((inst_dpfm_add_sub_ff_stage5[13] ||
	       inst_dpfm_add_sub_ff_stage5[18]) ?
		lv_inexact__h193876 :
		_theResult_____3_snd_fst__h194649) ;
  assign _theResult_____3_snd_snd_fst__h248640 =
	     (!ff_input_D_OUT[1] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q41[31]) ?
	       ((!ff_input_D_OUT[2] && final_result___2__h248683[31]) ?
		  final_result___1__h249693 :
		  final_result___2__h248683) :
	       _theResult_____1_snd__h249737 ;
  assign _theResult_____3_snd_snd_fst__h251715 =
	     sign__h235042 ?
	       ((!ff_input_D_OUT[2] && final_result___2__h251757[31]) ?
		  final_result___1__h252764 :
		  final_result___2__h251757) :
	       _theResult_____1_snd__h252808 ;
  assign _theResult_____3_snd_snd_fst__h65649 =
	     !inst_spfm_add_sub_ff_stage5[14] &&
	     ((inst_spfm_add_sub_ff_stage5[12] ||
	       inst_spfm_add_sub_ff_stage5[17]) ?
		lv_inexact__h65524 :
		_theResult_____3_snd_fst__h66297) ;
  assign _theResult_____3_snd_snd_snd__h194002 =
	     inst_dpfm_add_sub_ff_stage5[15] ?
	       { inst_dpfm_add_sub_ff_stage5[16], 63'h7FF0000000000000 } :
	       { inst_dpfm_add_sub_ff_stage5[13] ?
		   inst_dpfm_add_sub_ff_stage5[14] :
		   (inst_dpfm_add_sub_ff_stage5[18] ?
		      inst_dpfm_add_sub_ff_stage5[19] :
		      inst_dpfm_add_sub_ff_stage5[23]),
		 (inst_dpfm_add_sub_ff_stage5[13] ||
		  inst_dpfm_add_sub_ff_stage5[18]) ?
		   63'd0 :
		   IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__15_ETC___d3248 } ;
  assign _theResult_____3_snd_snd_snd__h65650 =
	     inst_spfm_add_sub_ff_stage5[14] ?
	       { inst_spfm_add_sub_ff_stage5[15], 31'h7F800000 } :
	       { inst_spfm_add_sub_ff_stage5[12] ?
		   inst_spfm_add_sub_ff_stage5[13] :
		   (inst_spfm_add_sub_ff_stage5[17] ?
		      inst_spfm_add_sub_ff_stage5[18] :
		      inst_spfm_add_sub_ff_stage5[22]),
		 (inst_spfm_add_sub_ff_stage5[12] ||
		  inst_spfm_add_sub_ff_stage5[17]) ?
		   31'd0 :
		   IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1265 } ;
  assign _theResult_____4__h14154 =
	     IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317 ?
	       lv_rounded_quotient___1__h14521 :
	       lv_rounded_quotient__h14153 ;
  assign _theResult_____4__h87382 =
	     IF_inst_dpfpu_divider_rg_stage3_675_BITS_4_TO__ETC___d1720 ?
	       lv_rounded_quotient___1__h87749 :
	       lv_rounded_quotient__h87381 ;
  assign _theResult_____4_snd_fst__h118212 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__373_BIT_5_ETC___d2390 ?
	       exponent2__h117993 :
	       exponent3__h117984 ;
  assign _theResult_____4_snd_fst__h30489 =
	     IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 ?
	       exponent2__h30270 :
	       exponent3__h30261 ;
  assign _theResult_____5__h193878 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BITS__ETC___d3221 ?
	       lv_rounded_mantissa___1__h194562 :
	       IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[159:106] ;
  assign _theResult_____5__h65526 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238 ?
	       lv_rounded_mantissa___1__h66210 :
	       IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[72:48] ;
  assign _theResult_____6__h193877 =
	     !inst_dpfm_add_sub_ff_stage5[183] &&
	     !inst_dpfm_add_sub_ff_stage5[182] &&
	     !_0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3177 &&
	     lv_inexact__h193876 ||
	     IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_BI_ETC___d3292 ;
  assign _theResult_____6__h65525 =
	     !inst_spfm_add_sub_ff_stage5[95] &&
	     !inst_spfm_add_sub_ff_stage5[94] &&
	     !_0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194 &&
	     lv_inexact__h65524 ||
	     IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1309 ;
  assign _theResult_____6_fst__h167465 =
	     (!inst_dpfm_add_sub_ff_stage2[4] ||
	      !inst_dpfm_add_sub_ff_stage2[14]) &&
	     inst_dpfm_add_sub_ff_stage2[1] ;
  assign _theResult_____6_fst__h53207 =
	     (!inst_spfm_add_sub_ff_stage2[4] ||
	      !inst_spfm_add_sub_ff_stage2[14]) &&
	     inst_spfm_add_sub_ff_stage2[1] ;
  assign _theResult_____6_snd_snd__h167468 =
	     (inst_dpfm_add_sub_ff_stage2[4] &&
	      inst_dpfm_add_sub_ff_stage2[14]) ?
	       lv_result_is_infinity___1__h167469 :
	       ((inst_dpfm_add_sub_ff_stage2[4] ||
		 inst_dpfm_add_sub_ff_stage2[14]) ?
		  lv_result_is_infinity___1__h167531 :
		  2'd0) ;
  assign _theResult_____6_snd_snd__h53210 =
	     (inst_spfm_add_sub_ff_stage2[4] &&
	      inst_spfm_add_sub_ff_stage2[14]) ?
	       lv_result_is_infinity___1__h53211 :
	       ((inst_spfm_add_sub_ff_stage2[4] ||
		 inst_spfm_add_sub_ff_stage2[14]) ?
		  lv_result_is_infinity___1__h53273 :
		  2'd0) ;
  assign _theResult_____6_snd_snd_snd__h167515 =
	     (inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       (inst_dpfm_add_sub_ff_stage2[11] ?
		  lv_result_is_zero___1__h167568 :
		  IF_inst_dpfm_add_sub_ff_stage2_read__373_BITS__ETC___d2789) :
	       2'd0 ;
  assign _theResult_____6_snd_snd_snd__h53257 =
	     (inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       (inst_spfm_add_sub_ff_stage2[11] ?
		  lv_result_is_zero___1__h53310 :
		  IF_inst_spfm_add_sub_ff_stage2_read__38_BITS_9_ETC___d980) :
	       2'd0 ;
  assign _theResult____h117983 =
	     (!inst_dpfm_add_sub_ff_stage2[14] &&
	      !inst_dpfm_add_sub_ff_stage2_read__373_BIT_15_3_ETC___d2398 &&
	      !inst_dpfm_add_sub_ff_stage2[16]) ?
	       mantissa3___1__h137703 :
	       160'd0 ;
  assign _theResult____h14151 =
	     inst_spfpu_divider_rg_stage3[50:23] != 28'd0 ||
	     inst_spfpu_divider_rg_stage3[51] ||
	     inst_spfpu_divider_rg_stage3[6] ;
  assign _theResult____h15990 =
	     inst_spfpu_sqrt_rg_inter_stage[57] ?
	       lv_remainder__h16106 :
	       lv_remainder__h16196 ;
  assign _theResult____h167734 =
	     inst_dpfm_add_sub_ff_stage4[348] ?
	       sub_mantissa__h167733 :
	       add_mantissa__h167730 ;
  assign _theResult____h203871 =
	     (!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	      inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20[31]) ?
	       ~inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] + 32'd1 :
	       inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] ;
  assign _theResult____h203883 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110[5:0] !=
	     6'd0 ;
  assign _theResult____h209743 =
	     (!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	      inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21[63]) ?
	       ~inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] + 64'd1 :
	       inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] ;
  assign _theResult____h209755 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986[37:0] !=
	     38'd0 ;
  assign _theResult____h220834 =
	     lv_sign__h220830 ? inp32___1__h230088 : ff_input_D_OUT[176:145] ;
  assign _theResult____h220847 =
	     sign__h235042 ?
	       ~ff_input_D_OUT[208:145] + 64'd1 :
	       ff_input_D_OUT[208:145] ;
  assign _theResult____h226196 =
	     (setCanonicalNaN_reswget_BITS_95_TO_64__q41[30:23] <
	      setCanonicalNaN_reswget_BITS_63_TO_32__q42[30:23]) ?
	       2'b01 :
	       ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[30:23] ==
		 setCanonicalNaN_reswget_BITS_63_TO_32__q42[30:23]) ?
		  ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[22:0] <
		    setCanonicalNaN_reswget_BITS_63_TO_32__q42[22:0]) ?
		     2'b01 :
		     ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[22:0] ==
		       setCanonicalNaN_reswget_BITS_63_TO_32__q42[22:0]) ?
			2'b11 :
			2'b10)) :
		  2'b10) ;
  assign _theResult____h228749 =
	     (ff_input_D_OUT[207:197] < ff_input_D_OUT[143:133]) ?
	       2'b01 :
	       ((ff_input_D_OUT[207:197] == ff_input_D_OUT[143:133]) ?
		  ((ff_input_D_OUT[196:145] < ff_input_D_OUT[132:81]) ?
		     2'b01 :
		     ((ff_input_D_OUT[196:145] == ff_input_D_OUT[132:81]) ?
			2'b11 :
			2'b10)) :
		  2'b10) ;
  assign _theResult____h235044 =
	     IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682[8:0] !=
	     9'd0 ;
  assign _theResult____h30260 =
	     (!inst_spfm_add_sub_ff_stage2[14] &&
	      !inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 &&
	      !inst_spfm_add_sub_ff_stage2[16]) ?
	       mantissa3___1__h39482 :
	       73'd0 ;
  assign _theResult____h53476 =
	     inst_spfm_add_sub_ff_stage4[171] ?
	       sub_mantissa__h53475 :
	       add_mantissa__h53472 ;
  assign _theResult____h87379 =
	     inst_dpfpu_divider_rg_stage3[82:26] != 57'd0 ||
	     inst_dpfpu_divider_rg_stage3[83] ||
	     inst_dpfpu_divider_rg_stage3[6] ;
  assign _theResult____h89217 =
	     inst_dpfpu_sqrt_rg_inter_stage[115] ?
	       lv_remainder__h89333 :
	       lv_remainder__h89423 ;
  assign _theResult___fst__h107916 =
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1872 ?
	       _theResult_____1_fst__h107960 :
	       lv_product_exponent_inc_shift__h107908 ;
  assign _theResult___fst__h13937 =
	     x_wget__h695[26] ?
	       x_wget__h695[26:0] :
	       _theResult___fst__h13941 ;
  assign _theResult___fst__h13941 =
	     INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d195 ?
	       lv_quotient_shiftL_expo__h7018 :
	       lv_quotient_shiftL_zerosMSB__h7020 ;
  assign _theResult___fst__h194190 =
	     inst_dpfm_add_sub_ff_stage5[182] ?
	       inst_dpfm_add_sub_ff_stage5[196:184] :
	       _theResult___fst__h194194 ;
  assign _theResult___fst__h194194 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3177 ?
	       resultant_exponent_sub_zerosMSB__h193858 :
	       13'd0 ;
  assign _theResult___fst__h248295 =
	     ff_input_D_OUT[2] ?
	       _theResult___fst__h248473 :
	       _theResult___fst__h248305 ;
  assign _theResult___fst__h248305 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h248412 :
	       _theResult___fst__h248352 ;
  assign _theResult___fst__h248352 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248034) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h248393 ;
  assign _theResult___fst__h248393 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3840 ?
	       _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h248412 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248034) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h248454 ;
  assign _theResult___fst__h248454 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3838 ?
	       _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h248473 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h248561 :
	       _theResult___fst__h248501 ;
  assign _theResult___fst__h248501 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248034) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h248543 ;
  assign _theResult___fst__h248543 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3835 ?
	       _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h248561 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248034) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h248603 ;
  assign _theResult___fst__h248603 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3833 ?
	       _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h249001 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
	     ff_input_D_OUT[1] &&
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d4152 ||
	     lv_invalid__h248034 ;
  assign _theResult___fst__h249122 =
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ||
	     getExp32_res_wget[23:16] != 8'd158 ||
	     getMant32_res_wget[68:46] != 23'd0 ;
  assign _theResult___fst__h249192 =
	     !IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3838 ||
	     lv_invalid__h248034 ;
  assign _theResult___fst__h249266 =
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ||
	     getExp32_res_wget[23:16] != 8'd190 ||
	     getMant32_res_wget[68:46] != 23'd0 ;
  assign _theResult___fst__h249337 =
	     !IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3833 ||
	     lv_invalid__h248034 ;
  assign _theResult___fst__h251370 =
	     ff_input_D_OUT[2] ?
	       _theResult___fst__h251548 :
	       _theResult___fst__h251380 ;
  assign _theResult___fst__h251380 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h251487 :
	       _theResult___fst__h251427 ;
  assign _theResult___fst__h251427 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251105) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h251468 ;
  assign _theResult___fst__h251468 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4008 ?
	       _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___fst__h251487 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251105) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h251529 ;
  assign _theResult___fst__h251529 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4006 ?
	       _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___fst__h251548 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h251636 :
	       _theResult___fst__h251576 ;
  assign _theResult___fst__h251576 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251105) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h251618 ;
  assign _theResult___fst__h251618 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4003 ?
	       _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___fst__h251636 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251105) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h251678 ;
  assign _theResult___fst__h251678 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4001 ?
	       _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___fst__h252076 =
	     ff_input_D_OUT[208] && ff_input_D_OUT[1] &&
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4188 ||
	     lv_invalid__h251105 ;
  assign _theResult___fst__h252195 =
	     !ff_input_D_OUT[208] || x__h251251[10:0] != 11'd31 ||
	     getMant64_res_wget[155:104] != 52'd0 ;
  assign _theResult___fst__h252265 =
	     !_0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4006 ||
	     lv_invalid__h251105 ;
  assign _theResult___fst__h252339 =
	     !ff_input_D_OUT[208] || x__h251251[10:0] != 11'd63 ||
	     getMant64_res_wget[155:104] != 52'd0 ;
  assign _theResult___fst__h252410 =
	     !_0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4001 ||
	     lv_invalid__h251105 ;
  assign _theResult___fst__h25355 =
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d469 ?
	       _theResult_____1_fst__h25399 :
	       lv_product_exponent_inc_shift__h25347 ;
  assign _theResult___fst__h268609 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[1]) ?
	       _theResult___fst__h268617 :
	       quiet_nan_two__h268110 ;
  assign _theResult___fst__h268617 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) &&
	     quiet_nan_two__h268110 ;
  assign _theResult___fst__h270792 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[1]) ?
	       _theResult___fst__h270800 :
	       quiet_nan_two__h270297 ;
  assign _theResult___fst__h270800 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[3]) &&
	     quiet_nan_two__h270297 ;
  assign _theResult___fst__h65838 =
	     inst_spfm_add_sub_ff_stage5[94] ?
	       inst_spfm_add_sub_ff_stage5[105:96] :
	       _theResult___fst__h65842 ;
  assign _theResult___fst__h65842 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194 ?
	       resultant_exponent_sub_zerosMSB__h65506 :
	       10'd0 ;
  assign _theResult___fst__h7006 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ?
	       27'd1 :
	       _theResult___fst__h7025 ;
  assign _theResult___fst__h7025 =
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 ?
	       _theResult___fst__h13937 :
	       lv_quotient___1__h7042 ;
  assign _theResult___fst__h73013 =
	     inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1448 ?
	       56'd1 :
	       _theResult___fst__h73032 ;
  assign _theResult___fst__h73032 =
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1450 ?
	       _theResult___fst__h87165 :
	       lv_quotient___1__h73049 ;
  assign _theResult___fst__h87165 =
	     x_wget__h66729[55] ?
	       x_wget__h66729[55:0] :
	       _theResult___fst__h87169 ;
  assign _theResult___fst__h87169 =
	     INV_1_MINUS_inst_dpfpu_divider_rg_stage2_444_B_ETC___d1569 ?
	       lv_quotient_shiftL_expo__h73025 :
	       lv_quotient_shiftL_zerosMSB__h73027 ;
  assign _theResult___snd__h249119 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3840 ?
	       64'd0 :
	       _theResult___snd__h249123 ;
  assign _theResult___snd__h249123 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       64'hFFFFFFFF80000000 :
	       64'h000000007FFFFFFF ;
  assign _theResult___snd__h249193 =
	     (IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3838 ||
	      setCanonicalNaN_reswget_BITS_95_TO_64__q41[31]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___snd__h249263 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3835 ?
	       64'd0 :
	       _theResult___snd__h249267 ;
  assign _theResult___snd__h249267 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       64'h8000000000000000 :
	       64'h7FFFFFFFFFFFFFFF ;
  assign _theResult___snd__h249338 =
	     (IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3833 ||
	      setCanonicalNaN_reswget_BITS_95_TO_64__q41[31]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___snd__h252192 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4008 ?
	       64'd0 :
	       _theResult___snd__h252196 ;
  assign _theResult___snd__h252196 =
	     ff_input_D_OUT[208] ?
	       64'hFFFFFFFF80000000 :
	       64'h000000007FFFFFFF ;
  assign _theResult___snd__h252266 =
	     (_0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4006 ||
	      ff_input_D_OUT[208]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___snd__h252336 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4003 ?
	       64'd0 :
	       _theResult___snd__h252340 ;
  assign _theResult___snd__h252340 =
	     ff_input_D_OUT[208] ?
	       64'h8000000000000000 :
	       64'h7FFFFFFFFFFFFFFF ;
  assign _theResult___snd__h252411 =
	     (_0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4001 ||
	      ff_input_D_OUT[208]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___snd_final_result__h220855 =
	     ff_input_D_OUT[2] ?
	       NOT_ff_input_first__309_BIT_1_534_548_AND_ff_i_ETC___d3713 :
	       { lv_sign__h220830, expo__h220837, mantissa__h220838 } ;
  assign _theResult___snd_fst__h108001 =
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1872 ?
	       _theResult_____1_snd__h107961 :
	       lv_product_mantissa___1__h107947 ;
  assign _theResult___snd_fst__h14021 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 ?
	       _theResult___snd_fst__h14031 :
	       inst_spfpu_divider_rg_stage2[18:9] ;
  assign _theResult___snd_fst__h14031 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ?
	       10'd0 :
	       _theResult___snd_fst__h14039 ;
  assign _theResult___snd_fst__h14039 =
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 ?
	       _theResult___snd_fst__h14049 :
	       lv_exponent_inc_shift__h7016 ;
  assign _theResult___snd_fst__h14049 =
	     x_wget__h695[26] ?
	       inst_spfpu_divider_rg_stage2[18:9] :
	       _theResult___snd_fst__h14051 ;
  assign _theResult___snd_fst__h14051 =
	     INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d195 ?
	       lv_exponent_sub_shift__h7019 :
	       lv_exponent_sub_zerosMSB__h7021 ;
  assign _theResult___snd_fst__h194407 =
	     inst_dpfm_add_sub_ff_stage5[182] ?
	       inst_dpfm_add_sub_ff_stage5[183:24] :
	       _theResult___snd_fst__h194409 ;
  assign _theResult___snd_fst__h194409 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3177 ?
	       resultant_mantissa_norm_zerosMSB__h193857 :
	       resultant_mantissa_norm_expo__h193856 ;
  assign _theResult___snd_fst__h248259 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[4] ||
	      IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822[7] &&
	      !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3827) ?
	       _theResult___fst__h249001 :
	       _theResult___snd_fst__h248297 ;
  assign _theResult___snd_fst__h248297 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_fst__h248475 :
	       _theResult___snd_fst__h248307 ;
  assign _theResult___snd_fst__h248307 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h248414 :
	       _theResult___snd_fst__h248354 ;
  assign _theResult___snd_fst__h248354 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248034 ||
	      IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3840) ?
	       lv_invalid__h248034 :
	       _theResult___fst__h249122 ;
  assign _theResult___snd_fst__h248414 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248034 ||
	      IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3838) ?
	       lv_invalid__h248034 :
	       _theResult___fst__h249192 ;
  assign _theResult___snd_fst__h248475 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h248563 :
	       _theResult___snd_fst__h248503 ;
  assign _theResult___snd_fst__h248503 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248034 ||
	      IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3835) ?
	       lv_invalid__h248034 :
	       _theResult___fst__h249266 ;
  assign _theResult___snd_fst__h248563 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248034 ||
	      IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3833) ?
	       lv_invalid__h248034 :
	       _theResult___fst__h249337 ;
  assign _theResult___snd_fst__h251334 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[4] ||
	      x__h251251[10] &&
	      !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3994) ?
	       _theResult___fst__h252076 :
	       _theResult___snd_fst__h251372 ;
  assign _theResult___snd_fst__h251372 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_fst__h251550 :
	       _theResult___snd_fst__h251382 ;
  assign _theResult___snd_fst__h251382 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h251489 :
	       _theResult___snd_fst__h251429 ;
  assign _theResult___snd_fst__h251429 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251105 ||
	      _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4008) ?
	       lv_invalid__h251105 :
	       _theResult___fst__h252195 ;
  assign _theResult___snd_fst__h251489 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251105 ||
	      _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4006) ?
	       lv_invalid__h251105 :
	       _theResult___fst__h252265 ;
  assign _theResult___snd_fst__h251550 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h251638 :
	       _theResult___snd_fst__h251578 ;
  assign _theResult___snd_fst__h251578 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251105 ||
	      _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4003) ?
	       lv_invalid__h251105 :
	       _theResult___fst__h252339 ;
  assign _theResult___snd_fst__h251638 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251105 ||
	      _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4001) ?
	       lv_invalid__h251105 :
	       _theResult___fst__h252410 ;
  assign _theResult___snd_fst__h25440 =
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d469 ?
	       _theResult_____1_snd__h25400 :
	       lv_product_mantissa___1__h25386 ;
  assign _theResult___snd_fst__h265182 =
	     (ff_input_D_OUT[5:3] == 3'b010 && ff_input_D_OUT[208]) ?
	       32'h80000001 :
	       ((ff_input_D_OUT[5:3] == 3'b011 && !ff_input_D_OUT[208]) ?
		  32'd1 :
		  { ff_input_D_OUT[208], 31'b0 }) ;
  assign _theResult___snd_fst__h66055 =
	     inst_spfm_add_sub_ff_stage5[94] ?
	       inst_spfm_add_sub_ff_stage5[95:23] :
	       _theResult___snd_fst__h66057 ;
  assign _theResult___snd_fst__h66057 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194 ?
	       resultant_mantissa_norm_zerosMSB__h65505 :
	       resultant_mantissa_norm_expo__h65504 ;
  assign _theResult___snd_fst__h87249 =
	     inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447 ?
	       _theResult___snd_fst__h87259 :
	       inst_dpfpu_divider_rg_stage2[21:9] ;
  assign _theResult___snd_fst__h87259 =
	     inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1448 ?
	       13'd0 :
	       _theResult___snd_fst__h87267 ;
  assign _theResult___snd_fst__h87267 =
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1450 ?
	       _theResult___snd_fst__h87277 :
	       lv_exponent_inc_shift__h73023 ;
  assign _theResult___snd_fst__h87277 =
	     x_wget__h66729[55] ?
	       inst_dpfpu_divider_rg_stage2[21:9] :
	       _theResult___snd_fst__h87279 ;
  assign _theResult___snd_fst__h87279 =
	     INV_1_MINUS_inst_dpfpu_divider_rg_stage2_444_B_ETC___d1569 ?
	       lv_exponent_sub_shift__h73026 :
	       lv_exponent_sub_zerosMSB__h73028 ;
  assign _theResult___snd_snd__h249004 =
	     (!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
	      ff_input_D_OUT[5:3] == 3'b011) ?
	       64'd1 :
	       ((ff_input_D_OUT[5:3] == 3'b010 &&
		 setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
		 !ff_input_D_OUT[1]) ?
		  64'hFFFFFFFFFFFFFFFF :
		  IF_IF_getExp32_res_whas__818_THEN_getExp32_res_ETC___d3885) ;
  assign _theResult___snd_snd__h252079 =
	     (!ff_input_D_OUT[208] && ff_input_D_OUT[5:3] == 3'b011) ?
	       64'd1 :
	       ((ff_input_D_OUT[5:3] == 3'b010 && ff_input_D_OUT[208] &&
		 !ff_input_D_OUT[1]) ?
		  64'hFFFFFFFFFFFFFFFF :
		  IF_0b0_CONCAT_getExp64_res_wget__986_BITS_32_T_ETC___d4051) ;
  assign _theResult___snd_snd_snd_fst__h249054 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_snd_snd_fst__h249200 :
	       _theResult___snd_snd_snd_fst__h249056 ;
  assign _theResult___snd_snd_snd_fst__h249056 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_snd_fst__h249137 :
	       _theResult___snd_snd_snd_fst__h249060 ;
  assign _theResult___snd_snd_snd_fst__h249060 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248034) ?
	       final_result___1__h249064 :
	       _theResult___snd_snd_snd_fst__h249088 ;
  assign _theResult___snd_snd_snd_fst__h249088 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3840 ?
	       final_result___1__h248401 :
	       _theResult___snd__h249119 ;
  assign _theResult___snd_snd_snd_fst__h249137 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248034) ?
	       final_result___1__h248433 :
	       _theResult___snd_snd_snd_fst__h249162 ;
  assign _theResult___snd_snd_snd_fst__h249162 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3838 ?
	       final_result___1__h248401 :
	       _theResult___snd__h249193 ;
  assign _theResult___snd_snd_snd_fst__h249200 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_snd_fst__h249281 :
	       _theResult___snd_snd_snd_fst__h249204 ;
  assign _theResult___snd_snd_snd_fst__h249204 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248034) ?
	       final_result___1__h248522 :
	       _theResult___snd_snd_snd_fst__h249231 ;
  assign _theResult___snd_snd_snd_fst__h249231 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3835 ?
	       _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858[86:23] :
	       _theResult___snd__h249263 ;
  assign _theResult___snd_snd_snd_fst__h249281 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      lv_invalid__h248034) ?
	       final_result___1__h248433 :
	       _theResult___snd_snd_snd_fst__h249306 ;
  assign _theResult___snd_snd_snd_fst__h249306 =
	     IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3833 ?
	       _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC___d3858[86:23] :
	       _theResult___snd__h249338 ;
  assign _theResult___snd_snd_snd_fst__h252127 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_snd_snd_fst__h252273 :
	       _theResult___snd_snd_snd_fst__h252129 ;
  assign _theResult___snd_snd_snd_fst__h252129 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_snd_fst__h252210 :
	       _theResult___snd_snd_snd_fst__h252133 ;
  assign _theResult___snd_snd_snd_fst__h252133 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251105) ?
	       final_result___1__h252137 :
	       _theResult___snd_snd_snd_fst__h252161 ;
  assign _theResult___snd_snd_snd_fst__h252161 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4008 ?
	       final_result___1__h251476 :
	       _theResult___snd__h252192 ;
  assign _theResult___snd_snd_snd_fst__h252210 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251105) ?
	       final_result___1__h251508 :
	       _theResult___snd_snd_snd_fst__h252235 ;
  assign _theResult___snd_snd_snd_fst__h252235 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4006 ?
	       final_result___1__h251476 :
	       _theResult___snd__h252266 ;
  assign _theResult___snd_snd_snd_fst__h252273 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_snd_fst__h252354 :
	       _theResult___snd_snd_snd_fst__h252277 ;
  assign _theResult___snd_snd_snd_fst__h252277 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251105) ?
	       final_result___1__h251597 :
	       _theResult___snd_snd_snd_fst__h252304 ;
  assign _theResult___snd_snd_snd_fst__h252304 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4003 ?
	       _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025[115:52] :
	       _theResult___snd__h252336 ;
  assign _theResult___snd_snd_snd_fst__h252354 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      lv_invalid__h251105) ?
	       final_result___1__h251508 :
	       _theResult___snd_snd_snd_fst__h252379 ;
  assign _theResult___snd_snd_snd_fst__h252379 =
	     _0b0_CONCAT_getExp64_res_wget__986_BITS_32_TO_2_ETC___d4001 ?
	       _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC___d4025[115:52] :
	       _theResult___snd__h252411 ;
  assign _theResult___snd_snd_snd_snd_fst__h248998 =
	     (condFlags32_reswget_BITS_14_TO_10__q52[4] ||
	      IF_getExp32_res_whas__818_THEN_getExp32_res_wg_ETC___d3822[7] &&
	      !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3827) ?
	       _theResult___snd_snd__h249004 :
	       _theResult___snd_snd_snd_fst__h249054 ;
  assign _theResult___snd_snd_snd_snd_fst__h252073 =
	     (condFlags64_reswget_BITS_14_TO_10__q30[4] ||
	      x__h251251[10] &&
	      !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3994) ?
	       _theResult___snd_snd__h252079 :
	       _theResult___snd_snd_snd_fst__h252127 ;
  assign add_mantissa__h167730 =
	     inst_dpfm_add_sub_ff_stage4[332:173] +
	     inst_dpfm_add_sub_ff_stage4[172:13] ;
  assign add_mantissa__h53472 =
	     inst_spfm_add_sub_ff_stage4[158:86] +
	     inst_spfm_add_sub_ff_stage4[85:13] ;
  assign and_sign__h225901 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &
	     setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] ;
  assign and_sign__h228480 = ff_input_D_OUT[208] & ff_input_D_OUT[144] ;
  assign condFlags32_argwget_BITS_30_TO_8__q51 = condFlags32_arg_wget[30:8] ;
  assign condFlags32_argwget_BITS_61_TO_39__q50 =
	     condFlags32_arg_wget[61:39] ;
  assign condFlags32_argwget_BITS_92_TO_70__q49 =
	     condFlags32_arg_wget[92:70] ;
  assign condFlags32_reswget_BITS_14_TO_10__q52 =
	     condFlags32_res_wget[14:10] ;
  assign condFlags32_reswget_BITS_9_TO_5__q53 = condFlags32_res_wget[9:5] ;
  assign condFlags64_argwget_BITS_125_TO_74__q28 =
	     condFlags64_arg_wget[125:74] ;
  assign condFlags64_argwget_BITS_188_TO_137__q27 =
	     condFlags64_arg_wget[188:137] ;
  assign condFlags64_argwget_BITS_62_TO_11__q29 =
	     condFlags64_arg_wget[62:11] ;
  assign condFlags64_reswget_BITS_14_TO_10__q30 =
	     condFlags64_res_wget[14:10] ;
  assign condFlags64_reswget_BITS_9_TO_5__q31 = condFlags64_res_wget[9:5] ;
  assign ex_overflow__h193868 =
	     !IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3183 ;
  assign ex_overflow__h65516 =
	     !IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1200 ;
  assign exception__h264518 =
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 ?
	       5'd3 :
	       5'd0 ;
  assign exp1__h274178 = exp1_temp__h268114 - { 5'd0, x__h274249 } ;
  assign exp1__h284180 = exp1_temp__h270301 - { 7'd0, x__h284251 } ;
  assign exp1_temp__h268114 = { 2'b0, getExp32_res_wget[23:16] } ;
  assign exp1_temp__h270301 = { 2'b0, getExp64_res_wget[32:22] } ;
  assign exp2__h274179 = exp2_temp__h268115 - { 5'd0, x__h278168 } ;
  assign exp2__h284181 = exp2_temp__h270302 - { 7'd0, x__h292839 } ;
  assign exp2_temp__h268115 = { 2'b0, getExp32_res_wget[15:8] } ;
  assign exp2_temp__h270302 = { 2'b0, getExp64_res_wget[21:11] } ;
  assign expo3_zero__h117981 = inst_dpfm_add_sub_ff_stage2[80:70] != 11'd0 ;
  assign expo3_zero__h30258 = inst_spfm_add_sub_ff_stage2[48:41] != 8'd0 ;
  assign expo___1__h265208 = expo__h264520 + 8'd1 ;
  assign expo__h203873 = 8'd158 - { 3'd0, x__h204163[4:0] } ;
  assign expo__h209745 = 8'd190 - { 2'd0, x__h210053[5:0] } ;
  assign expo__h220837 = 11'd1054 - { 6'd0, x__h229708[4:0] } ;
  assign expo__h220850 = 11'd1086 - { 5'd0, x__h235143[5:0] } ;
  assign expo__h258319 = { 3'd0, getExp32_res_wget[23:16] } + 11'd896 ;
  assign expo__h258378 = 11'd896 - { 6'd0, x__h258383 } ;
  assign expo__h264520 =
	     (IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 ||
	      IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4306) ?
	       8'd0 :
	       x__h264405[7:0] ;
  assign exponent2__h117993 =
	     inst_dpfm_add_sub_ff_stage2[5] ?
	       13'd0 :
	       inst_dpfm_add_sub_ff_stage2[201:189] ;
  assign exponent2__h30270 =
	     inst_spfm_add_sub_ff_stage2[5] ?
	       10'd0 :
	       inst_spfm_add_sub_ff_stage2[108:99] ;
  assign exponent3__h117972 = { 2'b0, inst_dpfm_add_sub_ff_stage2[80:70] } ;
  assign exponent3__h117984 =
	     exponent3__h117972 + { 12'd0, inst_dpfm_add_sub_ff_stage2[17] } ;
  assign exponent3__h30249 = { 2'b0, inst_spfm_add_sub_ff_stage2[48:41] } ;
  assign exponent3__h30261 =
	     exponent3__h30249 + { 9'd0, inst_spfm_add_sub_ff_stage2[17] } ;
  assign exponent___1__h304775 = exponent__h304189 + 9'd1 ;
  assign exponent___1__h315365 = lv_exp__h251115 + 12'd1 ;
  assign exponent__h304189 = { 1'b0, getExp32_res_wget[23:16] } ;
  assign exponent_difference__h118007 =
	     lv_minuend__h118003 - _theResult_____4_snd_fst__h118212 ;
  assign exponent_difference__h30284 =
	     lv_minuend__h30280 - _theResult_____4_snd_fst__h30489 ;
  assign ff_inputD_OUT_BITS_176_TO_145__q1 = ff_input_D_OUT[176:145] ;
  assign ff_input_first__309_BITS_12_TO_8_310_EQ_0b100__ETC___d3335 =
	     ff_input_D_OUT[12:8] == 5'b00100 ||
	     ff_input_D_OUT[12:8] == 5'b11000 ||
	     ff_input_D_OUT[12:8] == 5'b11100 &&
	     ff_input_D_OUT[5:3] == 3'b001 ||
	     ff_input_D_OUT[12:8] == 5'b01000 ||
	     (ff_input_D_OUT[12:6] == 7'b1110000 ||
	      ff_input_D_OUT[12:6] == 7'b1111000 ||
	      ff_input_D_OUT[12:6] == 7'b1110001 ||
	      ff_input_D_OUT[12:6] == 7'b1111001) &&
	     ff_input_D_OUT[5:3] == 3'b0 ;
  assign ff_input_first__309_BITS_12_TO_8_310_EQ_0b10_5_ETC___d4533 =
	     ff_input_D_OUT[12:8] == 5'b00010 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ||
	     (ff_input_D_OUT[16:13] == 4'b0 ||
	      ff_input_D_OUT[16:13] == 4'b0001 ||
	      ff_input_D_OUT[16:13] == 4'b0010 ||
	      ff_input_D_OUT[16:13] == 4'b0011) &&
	     ff_input_D_OUT[0] ;
  assign ff_input_first__309_BITS_12_TO_8_310_EQ_0b10_5_ETC___d4714 =
	     ff_input_D_OUT[12:8] == 5'b00010 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] ||
	     (ff_input_D_OUT[16:13] == 4'b0 ||
	      ff_input_D_OUT[16:13] == 4'b0001 ||
	      ff_input_D_OUT[16:13] == 4'b0010 ||
	      ff_input_D_OUT[16:13] == 4'b0011) &&
	     !ff_input_D_OUT[0] ;
  assign ff_input_first__309_BITS_12_TO_8_310_EQ_0b1100_ETC___d4597 =
	     (ff_input_D_OUT[12:8] == 5'b11000 ||
	      ff_input_D_OUT[12:8] == 5'b11100 &&
	      ff_input_D_OUT[5:3] == 3'b001 ||
	      ff_input_D_OUT[12:8] == 5'b01000) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ;
  assign ff_input_first__309_BIT_0_341_AND_NOT_IF_condF_ETC___d5150 =
	     ff_input_D_OUT[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[2] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4295 ;
  assign ff_input_first__309_BIT_208_447_XOR_ff_input_f_ETC___d3810 =
	     ff_input_D_OUT[208] ^ ff_input_D_OUT[144] ;
  assign ff_input_first__309_BIT_2_523_AND_NOT_ff_input_ETC___d3955 =
	     ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd189 &&
	     final_result__h248054[62:0] == 63'h7FFFFFFFFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign ff_input_first__309_BIT_2_523_AND_NOT_ff_input_ETC___d4118 =
	     ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     x__h251251[10:0] == 11'd62 &&
	     final_result__h251126[62:0] == 63'h7FFFFFFFFFFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign ff_input_first__309_BIT_2_523_AND_ff_input_fir_ETC___d3961 =
	     ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd190 &&
	     final_result__h248054 == 64'hFFFFFFFFFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign ff_input_first__309_BIT_2_523_AND_ff_input_fir_ETC___d4123 =
	     ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     x__h251251[10:0] == 11'd63 &&
	     final_result__h251126 == 64'hFFFFFFFFFFFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign fflags__h16383 = { 4'b0, lv_inexact__h16334 } ;
  assign fflags__h193899 =
	     { !inst_dpfm_add_sub_ff_stage5[10] &&
	       !inst_dpfm_add_sub_ff_stage5[9] &&
	       inst_dpfm_add_sub_ff_stage5[17],
	       1'b0,
	       _theResult_____1_snd_snd_fst__h194760,
	       _theResult_____1_fst__h194732,
	       _theResult_____1_snd_snd_snd__h194761 } ;
  assign fflags__h203888 = { 4'd0, inexact__h203884 } ;
  assign fflags__h209760 = { 4'd0, inexact__h209756 } ;
  assign fflags__h304454 =
	     { condFlags32_reswget_BITS_14_TO_10__q52[0] | y__h304468,
	       4'b0 } ;
  assign fflags__h315044 =
	     { condFlags64_reswget_BITS_14_TO_10__q30[0] | y__h315058,
	       4'b0 } ;
  assign fflags__h65547 =
	     { !inst_spfm_add_sub_ff_stage5[9] &&
	       !inst_spfm_add_sub_ff_stage5[8] &&
	       inst_spfm_add_sub_ff_stage5[16],
	       1'b0,
	       _theResult_____1_snd_snd_fst__h66408,
	       _theResult_____1_fst__h66380,
	       _theResult_____1_snd_snd_snd__h66409 } ;
  assign fflags__h89610 = { 4'b0, lv_inexact__h89561 } ;
  assign final_man__h248046 = { 64'd1, getMant32_res_wget[68:46] } ;
  assign final_man__h251118 = { 64'd1, getMant64_res_wget[155:104] } ;
  assign final_result___1__h248401 =
	     { {32{_1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC__q48[31]}},
	       _1_CONCAT_getMant32_res_wget__852_BITS_68_TO_46_ETC__q48 } ;
  assign final_result___1__h248433 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       (lv_invalid__h248034 ? 64'hFFFFFFFFFFFFFFFF : 64'd0) :
	       64'hFFFFFFFFFFFFFFFF ;
  assign final_result___1__h248522 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       (lv_invalid__h248034 ?
		  64'h7FFFFFFFFFFFFFFF :
		  64'h8000000000000000) :
	       64'h7FFFFFFFFFFFFFFF ;
  assign final_result___1__h249064 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       (lv_invalid__h248034 ?
		  64'h000000007FFFFFFF :
		  64'hFFFFFFFF80000000) :
	       64'h000000007FFFFFFF ;
  assign final_result___1__h249663 =
	     { {32{final_result___249624_BITS_31_TO_0__q56[31]}},
	       final_result___249624_BITS_31_TO_0__q56 } ;
  assign final_result___1__h249693 =
	     { {32{final_result___248683_BITS_31_TO_0__q57[31]}},
	       final_result___248683_BITS_31_TO_0__q57 } ;
  assign final_result___1__h251476 =
	     { {32{_1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC__q26[31]}},
	       _1_CONCAT_getMant64_res_wget__019_BITS_155_TO_1_ETC__q26 } ;
  assign final_result___1__h251508 =
	     ff_input_D_OUT[208] ?
	       (lv_invalid__h251105 ? 64'hFFFFFFFFFFFFFFFF : 64'd0) :
	       64'hFFFFFFFFFFFFFFFF ;
  assign final_result___1__h251597 =
	     ff_input_D_OUT[208] ?
	       (lv_invalid__h251105 ?
		  64'h7FFFFFFFFFFFFFFF :
		  64'h8000000000000000) :
	       64'h7FFFFFFFFFFFFFFF ;
  assign final_result___1__h252137 =
	     ff_input_D_OUT[208] ?
	       (lv_invalid__h251105 ?
		  64'h000000007FFFFFFF :
		  64'hFFFFFFFF80000000) :
	       64'h000000007FFFFFFF ;
  assign final_result___1__h252734 =
	     { {32{final_result___252695_BITS_31_TO_0__q34[31]}},
	       final_result___252695_BITS_31_TO_0__q34 } ;
  assign final_result___1__h252764 =
	     { {32{final_result___251757_BITS_31_TO_0__q35[31]}},
	       final_result___251757_BITS_31_TO_0__q35 } ;
  assign final_result___248683_BITS_31_TO_0__q57 =
	     final_result___2__h248683[31:0] ;
  assign final_result___249624_BITS_31_TO_0__q56 =
	     final_result___2__h249624[31:0] ;
  assign final_result___251757_BITS_31_TO_0__q35 =
	     final_result___2__h251757[31:0] ;
  assign final_result___252695_BITS_31_TO_0__q34 =
	     final_result___2__h252695[31:0] ;
  assign final_result___2__h248683 = ~final_result___3__h248635 + 64'd1 ;
  assign final_result___2__h249624 = final_result__h248054 + 64'd1 ;
  assign final_result___2__h251757 = ~final_result___3__h251710 + 64'd1 ;
  assign final_result___2__h252695 = final_result__h251126 + 64'd1 ;
  assign final_result___3__h248635 =
	     IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3934 ?
	       _theResult_____2_snd__h249412 :
	       final_result__h248054 ;
  assign final_result___3__h251710 =
	     IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d4100 ?
	       _theResult_____2_snd__h252485 :
	       final_result__h251126 ;
  assign final_result__h16339 =
	     { inst_spfpu_sqrt_rg_inter_stage[58],
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q3[7:0],
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q4[24:2] } ;
  assign final_result__h248054 =
	     condFlags32_reswget_BITS_14_TO_10__q52[3] ?
	       64'd0 :
	       _theResult___snd_snd_snd_snd_fst__h248998 ;
  assign final_result__h251126 =
	     condFlags64_reswget_BITS_14_TO_10__q30[3] ?
	       64'd0 :
	       _theResult___snd_snd_snd_snd_fst__h252073 ;
  assign final_result__h265349 =
	     { {32{ff_inputD_OUT_BITS_176_TO_145__q1[31]}},
	       ff_inputD_OUT_BITS_176_TO_145__q1 } ;
  assign final_result__h265372 = { 32'hFFFFFFFF, ff_input_D_OUT[176:145] } ;
  assign final_result__h304629 = { ff_input_D_OUT[176], 31'd0 } ;
  assign final_result__h315219 = { ff_input_D_OUT[208], 63'd0 } ;
  assign final_result__h89566 =
	     { inst_dpfpu_sqrt_rg_inter_stage[116],
	       IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_ETC__q5[10:0],
	       IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_ETC__q6[53:2] } ;
  assign fman___1__h265205 = fman__h264863 + 24'd1 ;
  assign fman__h264863 =
	     { 1'd0,
	       IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313[48:26] } ;
  assign getMant32_argwget_BITS_31_TO_0__q46 = getMant32_arg_wget[31:0] ;
  assign getMant32_argwget_BITS_63_TO_32__q45 = getMant32_arg_wget[63:32] ;
  assign getMant32_argwget_BITS_95_TO_64__q44 = getMant32_arg_wget[95:64] ;
  assign getMant32_reswget_BITS_45_TO_23__q55 = getMant32_res_wget[45:23] ;
  assign getMant32_reswget_BITS_68_TO_46__q47 = getMant32_res_wget[68:46] ;
  assign getMant64_argwget_BITS_127_TO_64__q23 = getMant64_arg_wget[127:64] ;
  assign getMant64_argwget_BITS_191_TO_128__q22 =
	     getMant64_arg_wget[191:128] ;
  assign getMant64_argwget_BITS_63_TO_0__q24 = getMant64_arg_wget[63:0] ;
  assign getMant64_reswget_BITS_103_TO_52__q33 = getMant64_res_wget[103:52] ;
  assign getMant64_reswget_BITS_155_TO_104__q25 =
	     getMant64_res_wget[155:104] ;
  assign inexact__h203884 = x__h203902 | _theResult____h203883 ;
  assign inexact__h209756 = x__h209774 | _theResult____h209755 ;
  assign inexact__h235045 = x__h235063 | _theResult____h235044 ;
  assign inp32___1__h230088 = ~ff_input_D_OUT[176:145] + 32'd1 ;
  assign inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1862 =
	     inst_dpfm_add_sub_ff_input_register[94:82] - 13'd1023 ;
  assign inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1863 =
	     (inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1862 ^
	      13'h1000) <=
	     13'd5119 ;
  assign inst_dpfm_add_sub_ff_stage2_read__373_BIT_15_3_ETC___d2398 =
	     inst_dpfm_add_sub_ff_stage2[15] |
	     inst_dpfm_add_sub_ff_stage2[13] ;
  assign inst_dpfm_add_sub_ff_stage5_read__156_BIT_15_1_ETC___d3282 =
	     inst_dpfm_add_sub_ff_stage5[15] ||
	     (inst_dpfm_add_sub_ff_stage5[183] ||
	      inst_dpfm_add_sub_ff_stage5[182] ||
	      _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3177 ||
	      !lv_inexact__h193876) &&
	     IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_BI_ETC___d3276 ||
	     !IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3245[52] ||
	     inst_dpfm_add_sub_ff_stage5[22:20] == 3'b011 ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[171:2] ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q15 =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[112:0],
	       1'd0 } +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       57'd0 } ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16 =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[112:0],
	       1'd0 } -
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       57'd0 } ;
  assign inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1446 =
	     inst_dpfpu_divider_rg_stage2[21:9] - 13'd1023 ;
  assign inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447 =
	     (inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1446 ^
	      13'h1000) <=
	     13'd5120 ;
  assign inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1448 =
	     (inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1446 ^
	      13'h1000) <
	     13'd3020 ;
  assign inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21 =
	     inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] ;
  assign inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20 =
	     inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] ;
  assign inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d459 =
	     inst_spfm_add_sub_ff_input_register[59:50] - 10'd127 ;
  assign inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460 =
	     (inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d459 ^
	      10'h200) <=
	     10'd639 ;
  assign inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 =
	     inst_spfm_add_sub_ff_stage2[15] |
	     inst_spfm_add_sub_ff_stage2[13] ;
  assign inst_spfm_add_sub_ff_stage5_read__173_BIT_14_1_ETC___d1299 =
	     inst_spfm_add_sub_ff_stage5[14] ||
	     (inst_spfm_add_sub_ff_stage5[95] ||
	      inst_spfm_add_sub_ff_stage5[94] ||
	      _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194 ||
	      !lv_inexact__h65524) &&
	     IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1293 ||
	     !IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1262[23] ||
	     inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[54:0],
	       1'd0 } -
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       28'd0 } ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[84:2] ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[54:0],
	       1'd0 } +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       28'd0 } ;
  assign inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130 =
	     inst_spfpu_divider_rg_stage2[18:9] - 10'd127 ;
  assign inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 =
	     (inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130 ^
	      10'h200) <=
	     10'd640 ;
  assign inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 =
	     (inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130 ^
	      10'h200) <
	     10'd361 ;
  assign local_expo___1__h209582 = expo__h203873 + 8'd1 ;
  assign local_expo___1__h220657 = expo__h209745 + 8'd1 ;
  assign local_expo___1__h245729 = expo__h220850 + 11'd1 ;
  assign lsb_zeros__h107906 =
	     lv_product_mantissa__h107902[0] ?
	       7'd0 :
	       (lv_product_mantissa__h107902[1] ?
		  7'd1 :
		  (lv_product_mantissa__h107902[2] ?
		     7'd2 :
		     (lv_product_mantissa__h107902[3] ?
			7'd3 :
			(lv_product_mantissa__h107902[4] ?
			   7'd4 :
			   (lv_product_mantissa__h107902[5] ?
			      7'd5 :
			      (lv_product_mantissa__h107902[6] ?
				 7'd6 :
				 (lv_product_mantissa__h107902[7] ?
				    7'd7 :
				    (lv_product_mantissa__h107902[8] ?
				       7'd8 :
				       (lv_product_mantissa__h107902[9] ?
					  7'd9 :
					  (lv_product_mantissa__h107902[10] ?
					     7'd10 :
					     (lv_product_mantissa__h107902[11] ?
						7'd11 :
						(lv_product_mantissa__h107902[12] ?
						   7'd12 :
						   (lv_product_mantissa__h107902[13] ?
						      7'd13 :
						      (lv_product_mantissa__h107902[14] ?
							 7'd14 :
							 (lv_product_mantissa__h107902[15] ?
							    7'd15 :
							    (lv_product_mantissa__h107902[16] ?
							       7'd16 :
							       (lv_product_mantissa__h107902[17] ?
								  7'd17 :
								  (lv_product_mantissa__h107902[18] ?
								     7'd18 :
								     (lv_product_mantissa__h107902[19] ?
									7'd19 :
									(lv_product_mantissa__h107902[20] ?
									   7'd20 :
									   (lv_product_mantissa__h107902[21] ?
									      7'd21 :
									      (lv_product_mantissa__h107902[22] ?
										 7'd22 :
										 (lv_product_mantissa__h107902[23] ?
										    7'd23 :
										    (lv_product_mantissa__h107902[24] ?
										       7'd24 :
										       (lv_product_mantissa__h107902[25] ?
											  7'd25 :
											  (lv_product_mantissa__h107902[26] ?
											     7'd26 :
											     (lv_product_mantissa__h107902[27] ?
												7'd27 :
												(lv_product_mantissa__h107902[28] ?
												   7'd28 :
												   (lv_product_mantissa__h107902[29] ?
												      7'd29 :
												      (lv_product_mantissa__h107902[30] ?
													 7'd30 :
													 (lv_product_mantissa__h107902[31] ?
													    7'd31 :
													    (lv_product_mantissa__h107902[32] ?
													       7'd32 :
													       (lv_product_mantissa__h107902[33] ?
														  7'd33 :
														  (lv_product_mantissa__h107902[34] ?
														     7'd34 :
														     (lv_product_mantissa__h107902[35] ?
															7'd35 :
															(lv_product_mantissa__h107902[36] ?
															   7'd36 :
															   (lv_product_mantissa__h107902[37] ?
															      7'd37 :
															      (lv_product_mantissa__h107902[38] ?
																 7'd38 :
																 (lv_product_mantissa__h107902[39] ?
																    7'd39 :
																    (lv_product_mantissa__h107902[40] ?
																       7'd40 :
																       (lv_product_mantissa__h107902[41] ?
																	  7'd41 :
																	  (lv_product_mantissa__h107902[42] ?
																	     7'd42 :
																	     (lv_product_mantissa__h107902[43] ?
																		7'd43 :
																		(lv_product_mantissa__h107902[44] ?
																		   7'd44 :
																		   (lv_product_mantissa__h107902[45] ?
																		      7'd45 :
																		      (lv_product_mantissa__h107902[46] ?
																			 7'd46 :
																			 (lv_product_mantissa__h107902[47] ?
																			    7'd47 :
																			    (lv_product_mantissa__h107902[48] ?
																			       7'd48 :
																			       (lv_product_mantissa__h107902[49] ?
																				  7'd49 :
																				  (lv_product_mantissa__h107902[50] ?
																				     7'd50 :
																				     (lv_product_mantissa__h107902[51] ?
																					7'd51 :
																					(lv_product_mantissa__h107902[52] ?
																					   7'd52 :
																					   (lv_product_mantissa__h107902[53] ?
																					      7'd53 :
																					      (lv_product_mantissa__h107902[54] ?
																						 7'd54 :
																						 (lv_product_mantissa__h107902[55] ?
																						    7'd55 :
																						    (lv_product_mantissa__h107902[56] ?
																						       7'd56 :
																						       (lv_product_mantissa__h107902[57] ?
																							  7'd57 :
																							  (lv_product_mantissa__h107902[58] ?
																							     7'd58 :
																							     (lv_product_mantissa__h107902[59] ?
																								7'd59 :
																								(lv_product_mantissa__h107902[60] ?
																								   7'd60 :
																								   (lv_product_mantissa__h107902[61] ?
																								      7'd61 :
																								      (lv_product_mantissa__h107902[62] ?
																									 7'd62 :
																									 (lv_product_mantissa__h107902[63] ?
																									    7'd63 :
																									    (lv_product_mantissa__h107902[64] ?
																									       7'd64 :
																									       (lv_product_mantissa__h107902[65] ?
																										  7'd65 :
																										  (lv_product_mantissa__h107902[66] ?
																										     7'd66 :
																										     (lv_product_mantissa__h107902[67] ?
																											7'd67 :
																											(lv_product_mantissa__h107902[68] ?
																											   7'd68 :
																											   (lv_product_mantissa__h107902[69] ?
																											      7'd69 :
																											      (lv_product_mantissa__h107902[70] ?
																												 7'd70 :
																												 (lv_product_mantissa__h107902[71] ?
																												    7'd71 :
																												    (lv_product_mantissa__h107902[72] ?
																												       7'd72 :
																												       (lv_product_mantissa__h107902[73] ?
																													  7'd73 :
																													  (lv_product_mantissa__h107902[74] ?
																													     7'd74 :
																													     (lv_product_mantissa__h107902[75] ?
																														7'd75 :
																														(lv_product_mantissa__h107902[76] ?
																														   7'd76 :
																														   (lv_product_mantissa__h107902[77] ?
																														      7'd77 :
																														      (lv_product_mantissa__h107902[78] ?
																															 7'd78 :
																															 (lv_product_mantissa__h107902[79] ?
																															    7'd79 :
																															    (lv_product_mantissa__h107902[80] ?
																															       7'd80 :
																															       (lv_product_mantissa__h107902[81] ?
																																  7'd81 :
																																  (lv_product_mantissa__h107902[82] ?
																																     7'd82 :
																																     (lv_product_mantissa__h107902[83] ?
																																	7'd83 :
																																	(lv_product_mantissa__h107902[84] ?
																																	   7'd84 :
																																	   (lv_product_mantissa__h107902[85] ?
																																	      7'd85 :
																																	      (lv_product_mantissa__h107902[86] ?
																																		 7'd86 :
																																		 (lv_product_mantissa__h107902[87] ?
																																		    7'd87 :
																																		    (lv_product_mantissa__h107902[88] ?
																																		       7'd88 :
																																		       (lv_product_mantissa__h107902[89] ?
																																			  7'd89 :
																																			  (lv_product_mantissa__h107902[90] ?
																																			     7'd90 :
																																			     (lv_product_mantissa__h107902[91] ?
																																				7'd91 :
																																				(lv_product_mantissa__h107902[92] ?
																																				   7'd92 :
																																				   (lv_product_mantissa__h107902[93] ?
																																				      7'd93 :
																																				      (lv_product_mantissa__h107902[94] ?
																																					 7'd94 :
																																					 (lv_product_mantissa__h107902[95] ?
																																					    7'd95 :
																																					    (lv_product_mantissa__h107902[96] ?
																																					       7'd96 :
																																					       (lv_product_mantissa__h107902[97] ?
																																						  7'd97 :
																																						  (lv_product_mantissa__h107902[98] ?
																																						     7'd98 :
																																						     (lv_product_mantissa__h107902[99] ?
																																							7'd99 :
																																							(lv_product_mantissa__h107902[100] ?
																																							   7'd100 :
																																							   (lv_product_mantissa__h107902[101] ?
																																							      7'd101 :
																																							      (lv_product_mantissa__h107902[102] ?
																																								 7'd102 :
																																								 (lv_product_mantissa__h107902[103] ?
																																								    7'd103 :
																																								    (lv_product_mantissa__h107902[104] ?
																																								       7'd104 :
																																								       (lv_product_mantissa__h107902[105] ?
																																									  7'd105 :
																																									  (lv_product_mantissa__h107902[106] ?
																																									     7'd106 :
																																									     7'd107)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lsb_zeros__h25345 =
	     lv_product_mantissa__h25341[0] ?
	       6'd0 :
	       (lv_product_mantissa__h25341[1] ?
		  6'd1 :
		  (lv_product_mantissa__h25341[2] ?
		     6'd2 :
		     (lv_product_mantissa__h25341[3] ?
			6'd3 :
			(lv_product_mantissa__h25341[4] ?
			   6'd4 :
			   (lv_product_mantissa__h25341[5] ?
			      6'd5 :
			      (lv_product_mantissa__h25341[6] ?
				 6'd6 :
				 (lv_product_mantissa__h25341[7] ?
				    6'd7 :
				    (lv_product_mantissa__h25341[8] ?
				       6'd8 :
				       (lv_product_mantissa__h25341[9] ?
					  6'd9 :
					  (lv_product_mantissa__h25341[10] ?
					     6'd10 :
					     (lv_product_mantissa__h25341[11] ?
						6'd11 :
						(lv_product_mantissa__h25341[12] ?
						   6'd12 :
						   (lv_product_mantissa__h25341[13] ?
						      6'd13 :
						      (lv_product_mantissa__h25341[14] ?
							 6'd14 :
							 (lv_product_mantissa__h25341[15] ?
							    6'd15 :
							    (lv_product_mantissa__h25341[16] ?
							       6'd16 :
							       (lv_product_mantissa__h25341[17] ?
								  6'd17 :
								  (lv_product_mantissa__h25341[18] ?
								     6'd18 :
								     (lv_product_mantissa__h25341[19] ?
									6'd19 :
									(lv_product_mantissa__h25341[20] ?
									   6'd20 :
									   (lv_product_mantissa__h25341[21] ?
									      6'd21 :
									      (lv_product_mantissa__h25341[22] ?
										 6'd22 :
										 (lv_product_mantissa__h25341[23] ?
										    6'd23 :
										    (lv_product_mantissa__h25341[24] ?
										       6'd24 :
										       (lv_product_mantissa__h25341[25] ?
											  6'd25 :
											  (lv_product_mantissa__h25341[26] ?
											     6'd26 :
											     (lv_product_mantissa__h25341[27] ?
												6'd27 :
												(lv_product_mantissa__h25341[28] ?
												   6'd28 :
												   (lv_product_mantissa__h25341[29] ?
												      6'd29 :
												      (lv_product_mantissa__h25341[30] ?
													 6'd30 :
													 (lv_product_mantissa__h25341[31] ?
													    6'd31 :
													    (lv_product_mantissa__h25341[32] ?
													       6'd32 :
													       (lv_product_mantissa__h25341[33] ?
														  6'd33 :
														  (lv_product_mantissa__h25341[34] ?
														     6'd34 :
														     (lv_product_mantissa__h25341[35] ?
															6'd35 :
															(lv_product_mantissa__h25341[36] ?
															   6'd36 :
															   (lv_product_mantissa__h25341[37] ?
															      6'd37 :
															      (lv_product_mantissa__h25341[38] ?
																 6'd38 :
																 (lv_product_mantissa__h25341[39] ?
																    6'd39 :
																    (lv_product_mantissa__h25341[40] ?
																       6'd40 :
																       (lv_product_mantissa__h25341[41] ?
																	  6'd41 :
																	  (lv_product_mantissa__h25341[42] ?
																	     6'd42 :
																	     (lv_product_mantissa__h25341[43] ?
																		6'd43 :
																		(lv_product_mantissa__h25341[44] ?
																		   6'd44 :
																		   (lv_product_mantissa__h25341[45] ?
																		      6'd45 :
																		      (lv_product_mantissa__h25341[46] ?
																			 6'd46 :
																			 (lv_product_mantissa__h25341[47] ?
																			    6'd47 :
																			    (lv_product_mantissa__h25341[48] ?
																			       6'd48 :
																			       6'd49)))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lsb_zeros__h7014 =
	     x_wget__h695[0] ?
	       5'd0 :
	       (x_wget__h695[1] ?
		  5'd1 :
		  (x_wget__h695[2] ?
		     5'd2 :
		     (x_wget__h695[3] ?
			5'd3 :
			(x_wget__h695[4] ?
			   5'd4 :
			   (x_wget__h695[5] ?
			      5'd5 :
			      (x_wget__h695[6] ?
				 5'd6 :
				 (x_wget__h695[7] ?
				    5'd7 :
				    (x_wget__h695[8] ?
				       5'd8 :
				       (x_wget__h695[9] ?
					  5'd9 :
					  (x_wget__h695[10] ?
					     5'd10 :
					     (x_wget__h695[11] ?
						5'd11 :
						(x_wget__h695[12] ?
						   5'd12 :
						   (x_wget__h695[13] ?
						      5'd13 :
						      (x_wget__h695[14] ?
							 5'd14 :
							 (x_wget__h695[15] ?
							    5'd15 :
							    (x_wget__h695[16] ?
							       5'd16 :
							       (x_wget__h695[17] ?
								  5'd17 :
								  (x_wget__h695[18] ?
								     5'd18 :
								     (x_wget__h695[19] ?
									5'd19 :
									(x_wget__h695[20] ?
									   5'd20 :
									   (x_wget__h695[21] ?
									      5'd21 :
									      (x_wget__h695[22] ?
										 5'd22 :
										 (x_wget__h695[23] ?
										    5'd23 :
										    (x_wget__h695[24] ?
										       5'd24 :
										       (x_wget__h695[25] ?
											  5'd25 :
											  (x_wget__h695[26] ?
											     5'd26 :
											     5'd27)))))))))))))))))))))))))) ;
  assign lsb_zeros__h73021 =
	     x_wget__h66729[0] ?
	       6'd0 :
	       (x_wget__h66729[1] ?
		  6'd1 :
		  (x_wget__h66729[2] ?
		     6'd2 :
		     (x_wget__h66729[3] ?
			6'd3 :
			(x_wget__h66729[4] ?
			   6'd4 :
			   (x_wget__h66729[5] ?
			      6'd5 :
			      (x_wget__h66729[6] ?
				 6'd6 :
				 (x_wget__h66729[7] ?
				    6'd7 :
				    (x_wget__h66729[8] ?
				       6'd8 :
				       (x_wget__h66729[9] ?
					  6'd9 :
					  (x_wget__h66729[10] ?
					     6'd10 :
					     (x_wget__h66729[11] ?
						6'd11 :
						(x_wget__h66729[12] ?
						   6'd12 :
						   (x_wget__h66729[13] ?
						      6'd13 :
						      (x_wget__h66729[14] ?
							 6'd14 :
							 (x_wget__h66729[15] ?
							    6'd15 :
							    (x_wget__h66729[16] ?
							       6'd16 :
							       (x_wget__h66729[17] ?
								  6'd17 :
								  (x_wget__h66729[18] ?
								     6'd18 :
								     (x_wget__h66729[19] ?
									6'd19 :
									(x_wget__h66729[20] ?
									   6'd20 :
									   (x_wget__h66729[21] ?
									      6'd21 :
									      (x_wget__h66729[22] ?
										 6'd22 :
										 (x_wget__h66729[23] ?
										    6'd23 :
										    (x_wget__h66729[24] ?
										       6'd24 :
										       (x_wget__h66729[25] ?
											  6'd25 :
											  (x_wget__h66729[26] ?
											     6'd26 :
											     (x_wget__h66729[27] ?
												6'd27 :
												(x_wget__h66729[28] ?
												   6'd28 :
												   (x_wget__h66729[29] ?
												      6'd29 :
												      (x_wget__h66729[30] ?
													 6'd30 :
													 (x_wget__h66729[31] ?
													    6'd31 :
													    (x_wget__h66729[32] ?
													       6'd32 :
													       (x_wget__h66729[33] ?
														  6'd33 :
														  (x_wget__h66729[34] ?
														     6'd34 :
														     (x_wget__h66729[35] ?
															6'd35 :
															(x_wget__h66729[36] ?
															   6'd36 :
															   (x_wget__h66729[37] ?
															      6'd37 :
															      (x_wget__h66729[38] ?
																 6'd38 :
																 (x_wget__h66729[39] ?
																    6'd39 :
																    (x_wget__h66729[40] ?
																       6'd40 :
																       (x_wget__h66729[41] ?
																	  6'd41 :
																	  (x_wget__h66729[42] ?
																	     6'd42 :
																	     (x_wget__h66729[43] ?
																		6'd43 :
																		(x_wget__h66729[44] ?
																		   6'd44 :
																		   (x_wget__h66729[45] ?
																		      6'd45 :
																		      (x_wget__h66729[46] ?
																			 6'd46 :
																			 (x_wget__h66729[47] ?
																			    6'd47 :
																			    (x_wget__h66729[48] ?
																			       6'd48 :
																			       (x_wget__h66729[49] ?
																				  6'd49 :
																				  (x_wget__h66729[50] ?
																				     6'd50 :
																				     (x_wget__h66729[51] ?
																					6'd51 :
																					(x_wget__h66729[52] ?
																					   6'd52 :
																					   (x_wget__h66729[53] ?
																					      6'd53 :
																					      (x_wget__h66729[54] ?
																						 6'd54 :
																						 (x_wget__h66729[55] ?
																						    6'd55 :
																						    6'd56))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_compare_result__h225903 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ?
	       (setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] ?
		  { _theResult____h226196[0], _theResult____h226196[1] } :
		  2'b01) :
	       (setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] ?
		  2'b10 :
		  _theResult____h226196) ;
  assign lv_compare_result__h228482 =
	     ff_input_D_OUT[208] ?
	       (ff_input_D_OUT[144] ?
		  { _theResult____h228749[0], _theResult____h228749[1] } :
		  2'b01) :
	       (ff_input_D_OUT[144] ? 2'b10 : _theResult____h228749) ;
  assign lv_exp__h251115 = { 1'b0, getExp64_res_wget[32:22] } ;
  assign lv_exponent___1__h14550 =
	     inst_spfpu_divider_rg_stage3[22:13] + 10'd1 ;
  assign lv_exponent___1__h14637 = lv_exponent__h14156 + 10'd1 ;
  assign lv_exponent___1__h87778 =
	     inst_dpfpu_divider_rg_stage3[25:13] + 13'd1 ;
  assign lv_exponent___1__h87865 = lv_exponent__h87384 + 13'd1 ;
  assign lv_exponent__h14156 =
	     _theResult_____4__h14154[24] ?
	       lv_exponent___1__h14550 :
	       inst_spfpu_divider_rg_stage3[22:13] ;
  assign lv_exponent__h274180 = 10'd127 + y__h274241 ;
  assign lv_exponent__h284182 = 13'd1023 + y__h284243 ;
  assign lv_exponent__h87384 =
	     _theResult_____4__h87382[53] ?
	       lv_exponent___1__h87778 :
	       inst_dpfpu_divider_rg_stage3[25:13] ;
  assign lv_exponent_inc_shift__h7016 =
	     inst_spfpu_divider_rg_stage2[18:9] +
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ;
  assign lv_exponent_inc_shift__h73023 =
	     inst_dpfpu_divider_rg_stage2[21:9] +
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1449 ;
  assign lv_exponent_sub_shift__h7019 =
	     inst_spfpu_divider_rg_stage2[18:9] - shift_neg__h7017 ;
  assign lv_exponent_sub_shift__h73026 =
	     inst_dpfpu_divider_rg_stage2[21:9] - shift_neg__h73024 ;
  assign lv_exponent_sub_zerosMSB__h7021 =
	     inst_spfpu_divider_rg_stage2[18:9] - { 5'd0, msb_zeros__h6857 } ;
  assign lv_exponent_sub_zerosMSB__h73028 =
	     inst_dpfpu_divider_rg_stage2[21:9] -
	     { 7'd0, msb_zeros__h72864 } ;
  assign lv_extended_mantissa___1__h16825 =
	     lv_extended_mantissa__h16335 + 27'd4 ;
  assign lv_extended_mantissa___1__h90052 =
	     lv_extended_mantissa__h89562 + 56'd4 ;
  assign lv_extended_mantissa__h16335 = { 1'b0, result_mantissa__h16326 } ;
  assign lv_extended_mantissa__h89562 = { 1'b0, result_mantissa__h89553 } ;
  assign lv_final_output__h14256 =
	     { inst_spfpu_divider_rg_stage3[12], 31'h7F800000 } ;
  assign lv_final_output__h87484 =
	     { inst_dpfpu_divider_rg_stage3[12], 63'h7FF0000000000000 } ;
  assign lv_inexact1__h248059 = x__h249386 | lv_sticky__h248057 ;
  assign lv_inexact1__h251131 = x__h252459 | lv_sticky__h251129 ;
  assign lv_inexact___1__h248632 =
	     lv_inexact__h248052 | lv_inexact1__h248059 ;
  assign lv_inexact___1__h251707 =
	     lv_inexact__h251124 | lv_inexact1__h251131 ;
  assign lv_inexact__h16334 = x__h16812 | lv_sticky__h16332 ;
  assign lv_inexact__h193876 = x__h194542 | lv_sticky__h193874 ;
  assign lv_inexact__h248052 =
	     !condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	     IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d4231 ;
  assign lv_inexact__h251124 =
	     !condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	     IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d4245 ;
  assign lv_inexact__h65524 = x__h66190 | lv_sticky__h65522 ;
  assign lv_inexact__h89561 = x__h90039 | lv_sticky__h89559 ;
  assign lv_invalid___2__h248634 =
	     IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3934 ?
	       _theResult_____2_fst__h249411 :
	       lv_invalid__h248050 ;
  assign lv_invalid___2__h251709 =
	     IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d4100 ?
	       _theResult_____2_fst__h252484 :
	       lv_invalid__h251122 ;
  assign lv_invalid__h248034 =
	     condFlags32_reswget_BITS_14_TO_10__q52[0] |
	     condFlags32_reswget_BITS_14_TO_10__q52[2] ;
  assign lv_invalid__h248050 =
	     condFlags32_reswget_BITS_14_TO_10__q52[3] ?
	       lv_invalid__h248034 :
	       _theResult___snd_fst__h248259 ;
  assign lv_invalid__h248061 =
	     (!condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	      NOT_IF_condFlags32_res_whas__343_THEN_condFlag_ETC___d3844) ?
	       _theResult_____3_fst__h248637 :
	       lv_invalid__h248050 ;
  assign lv_invalid__h251105 =
	     condFlags64_reswget_BITS_14_TO_10__q30[0] |
	     condFlags64_reswget_BITS_14_TO_10__q30[2] ;
  assign lv_invalid__h251122 =
	     condFlags64_reswget_BITS_14_TO_10__q30[3] ?
	       lv_invalid__h251105 :
	       _theResult___snd_fst__h251334 ;
  assign lv_invalid__h251133 =
	     (!condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	      NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d4012) ?
	       _theResult_____3_fst__h251712 :
	       lv_invalid__h251122 ;
  assign lv_leading_zeros__h304194 =
	     IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5753[1] ?
	       6'd0 :
	       (IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5753[0] ?
		  6'd1 :
		  (getMant32_res_wget[68] ?
		     6'd2 :
		     (getMant32_res_wget[67] ?
			6'd3 :
			(getMant32_res_wget[66] ?
			   6'd4 :
			   (getMant32_res_wget[65] ?
			      6'd5 :
			      (getMant32_res_wget[64] ?
				 6'd6 :
				 (getMant32_res_wget[63] ?
				    6'd7 :
				    (getMant32_res_wget[62] ?
				       6'd8 :
				       (getMant32_res_wget[61] ?
					  6'd9 :
					  (getMant32_res_wget[60] ?
					     6'd10 :
					     (getMant32_res_wget[59] ?
						6'd11 :
						(getMant32_res_wget[58] ?
						   6'd12 :
						   (getMant32_res_wget[57] ?
						      6'd13 :
						      (getMant32_res_wget[56] ?
							 6'd14 :
							 (getMant32_res_wget[55] ?
							    6'd15 :
							    (getMant32_res_wget[54] ?
							       6'd16 :
							       (getMant32_res_wget[53] ?
								  6'd17 :
								  (getMant32_res_wget[52] ?
								     6'd18 :
								     (getMant32_res_wget[51] ?
									6'd19 :
									(getMant32_res_wget[50] ?
									   6'd20 :
									   (getMant32_res_wget[49] ?
									      6'd21 :
									      (getMant32_res_wget[48] ?
										 6'd22 :
										 (getMant32_res_wget[47] ?
										    6'd23 :
										    (getMant32_res_wget[46] ?
										       6'd24 :
										       6'd52)))))))))))))))))))))))) ;
  assign lv_leading_zeros__h314785 =
	     IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5871[1] ?
	       7'd0 :
	       (IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5871[0] ?
		  7'd1 :
		  (getMant64_res_wget[155] ?
		     7'd2 :
		     (getMant64_res_wget[154] ?
			7'd3 :
			(getMant64_res_wget[153] ?
			   7'd4 :
			   (getMant64_res_wget[152] ?
			      7'd5 :
			      (getMant64_res_wget[151] ?
				 7'd6 :
				 (getMant64_res_wget[150] ?
				    7'd7 :
				    (getMant64_res_wget[149] ?
				       7'd8 :
				       (getMant64_res_wget[148] ?
					  7'd9 :
					  (getMant64_res_wget[147] ?
					     7'd10 :
					     (getMant64_res_wget[146] ?
						7'd11 :
						(getMant64_res_wget[145] ?
						   7'd12 :
						   (getMant64_res_wget[144] ?
						      7'd13 :
						      (getMant64_res_wget[143] ?
							 7'd14 :
							 (getMant64_res_wget[142] ?
							    7'd15 :
							    (getMant64_res_wget[141] ?
							       7'd16 :
							       (getMant64_res_wget[140] ?
								  7'd17 :
								  (getMant64_res_wget[139] ?
								     7'd18 :
								     (getMant64_res_wget[138] ?
									7'd19 :
									(getMant64_res_wget[137] ?
									   7'd20 :
									   (getMant64_res_wget[136] ?
									      7'd21 :
									      (getMant64_res_wget[135] ?
										 7'd22 :
										 (getMant64_res_wget[134] ?
										    7'd23 :
										    (getMant64_res_wget[133] ?
										       7'd24 :
										       (getMant64_res_wget[132] ?
											  7'd25 :
											  (getMant64_res_wget[131] ?
											     7'd26 :
											     (getMant64_res_wget[130] ?
												7'd27 :
												(getMant64_res_wget[129] ?
												   7'd28 :
												   (getMant64_res_wget[128] ?
												      7'd29 :
												      (getMant64_res_wget[127] ?
													 7'd30 :
													 (getMant64_res_wget[126] ?
													    7'd31 :
													    (getMant64_res_wget[125] ?
													       7'd32 :
													       (getMant64_res_wget[124] ?
														  7'd33 :
														  (getMant64_res_wget[123] ?
														     7'd34 :
														     (getMant64_res_wget[122] ?
															7'd35 :
															(getMant64_res_wget[121] ?
															   7'd36 :
															   (getMant64_res_wget[120] ?
															      7'd37 :
															      (getMant64_res_wget[119] ?
																 7'd38 :
																 (getMant64_res_wget[118] ?
																    7'd39 :
																    (getMant64_res_wget[117] ?
																       7'd40 :
																       (getMant64_res_wget[116] ?
																	  7'd41 :
																	  (getMant64_res_wget[115] ?
																	     7'd42 :
																	     (getMant64_res_wget[114] ?
																		7'd43 :
																		(getMant64_res_wget[113] ?
																		   7'd44 :
																		   (getMant64_res_wget[112] ?
																		      7'd45 :
																		      (getMant64_res_wget[111] ?
																			 7'd46 :
																			 (getMant64_res_wget[110] ?
																			    7'd47 :
																			    (getMant64_res_wget[109] ?
																			       7'd48 :
																			       (getMant64_res_wget[108] ?
																				  7'd49 :
																				  (getMant64_res_wget[107] ?
																				     7'd50 :
																				     (getMant64_res_wget[106] ?
																					7'd51 :
																					(getMant64_res_wget[105] ?
																					   7'd52 :
																					   (getMant64_res_wget[104] ?
																					      7'd53 :
																					      7'd110))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_man___1__h209557 = lv_man__h203886 + 25'd1 ;
  assign lv_man___1__h220632 = lv_man__h209758 + 25'd1 ;
  assign lv_man___1__h245706 = lv_man__h235047 + 54'd1 ;
  assign lv_man__h203886 =
	     { 2'b0,
	       IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110[30:8] } ;
  assign lv_man__h209758 =
	     { 2'b0,
	       IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986[62:40] } ;
  assign lv_man__h235047 =
	     { 2'b0,
	       IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682[62:11] } ;
  assign lv_minuend__h118003 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__373_BIT_5_ETC___d2390 ?
	       exponent3__h117984 :
	       exponent2__h117993 ;
  assign lv_minuend__h30280 =
	     IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 ?
	       exponent3__h30261 :
	       exponent2__h30270 ;
  assign lv_op1_subnormal__h268105 =
	     condFlags32_reswget_BITS_14_TO_10__q52[4] |
	     condFlags32_reswget_BITS_14_TO_10__q52[3] ;
  assign lv_op1_subnormal__h270292 =
	     condFlags64_reswget_BITS_14_TO_10__q30[4] |
	     condFlags64_reswget_BITS_14_TO_10__q30[3] ;
  assign lv_op2_Nan__h225899 =
	     condFlags32_reswget_BITS_9_TO_5__q53[2] |
	     condFlags32_reswget_BITS_9_TO_5__q53[0] ;
  assign lv_op2_Nan__h228478 =
	     condFlags64_reswget_BITS_9_TO_5__q31[2] |
	     condFlags64_reswget_BITS_9_TO_5__q31[0] ;
  assign lv_op2_subnormal__h268106 =
	     condFlags32_reswget_BITS_9_TO_5__q53[4] |
	     condFlags32_reswget_BITS_9_TO_5__q53[3] ;
  assign lv_op2_subnormal__h270293 =
	     condFlags64_reswget_BITS_9_TO_5__q31[4] |
	     condFlags64_reswget_BITS_9_TO_5__q31[3] ;
  assign lv_product_exponent___1__h107933 =
	     inst_dpfm_add_sub_ff_input_register[94:82] + 13'd1 ;
  assign lv_product_exponent___1__h25372 =
	     inst_spfm_add_sub_ff_input_register[59:50] + 10'd1 ;
  assign lv_product_exponent__h107900 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       lv_product_exponent___1__h107933 :
	       inst_dpfm_add_sub_ff_input_register[94:82] ;
  assign lv_product_exponent__h25339 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       lv_product_exponent___1__h25372 :
	       inst_spfm_add_sub_ff_input_register[59:50] ;
  assign lv_product_exponent_inc_shift__h107908 =
	     lv_product_exponent__h107900 +
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1871 ;
  assign lv_product_exponent_inc_shift__h25347 =
	     lv_product_exponent__h25339 +
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 ;
  assign lv_product_exponent_sub_shift__h107911 =
	     lv_product_exponent__h107900 - shift_neg__h107909 ;
  assign lv_product_exponent_sub_shift__h25350 =
	     lv_product_exponent__h25339 - shift_neg__h25348 ;
  assign lv_product_exponent_sub_zerosMSB__h107913 =
	     lv_product_exponent__h107900 - y__h107995 ;
  assign lv_product_exponent_sub_zerosMSB__h25352 =
	     lv_product_exponent__h25339 - y__h25434 ;
  assign lv_product_mantissa___1__h107932 =
	     { 1'd0, inst_dpfm_add_sub_ff_input_register[200:95] } ;
  assign lv_product_mantissa___1__h107947 =
	     { IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2109[106:1],
	       IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2330 } ;
  assign lv_product_mantissa___1__h25371 =
	     { 1'd0, inst_spfm_add_sub_ff_input_register[107:60] } ;
  assign lv_product_mantissa___1__h25386 =
	     { IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d590[48:1],
	       IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d695 } ;
  assign lv_product_mantissa__h107902 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       lv_product_mantissa___1__h107932 :
	       lv_product_mantissa__h90452 ;
  assign lv_product_mantissa__h17229 =
	     { inst_spfm_add_sub_ff_input_register[107:60], 1'b0 } ;
  assign lv_product_mantissa__h25341 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       lv_product_mantissa___1__h25371 :
	       lv_product_mantissa__h17229 ;
  assign lv_product_mantissa__h90452 =
	     { inst_dpfm_add_sub_ff_input_register[200:95], 1'b0 } ;
  assign lv_product_mantissa_shiftL_expo__h107910 =
	     lv_product_mantissa__h107902 << shift_neg__h107909 ;
  assign lv_product_mantissa_shiftL_expo__h25349 =
	     lv_product_mantissa__h25341 << shift_neg__h25348 ;
  assign lv_product_mantissa_shiftL_zerosMSB__h107912 =
	     lv_product_mantissa__h107902 << x__h107970 ;
  assign lv_product_mantissa_shiftL_zerosMSB__h25351 =
	     lv_product_mantissa__h25341 << x__h25409 ;
  assign lv_quotient___1__h7042 =
	     { IF_inst_spfpu_divider_int_div_wr_final_out_wha_ETC___d200[26:1],
	       lv_sticky___1__h7043 } ;
  assign lv_quotient___1__h73049 =
	     { IF_inst_dpfpu_divider_int_div_wr_final_out_wha_ETC___d1574[55:1],
	       lv_sticky___1__h73050 } ;
  assign lv_quotient_shiftL_expo__h7018 =
	     x_wget__h695[26:0] << shift_neg__h7017 ;
  assign lv_quotient_shiftL_expo__h73025 =
	     x_wget__h66729[55:0] << shift_neg__h73024 ;
  assign lv_quotient_shiftL_zerosMSB__h7020 =
	     x_wget__h695[26:0] << msb_zeros__h6857 ;
  assign lv_quotient_shiftL_zerosMSB__h73027 =
	     x_wget__h66729[55:0] << msb_zeros__h72864 ;
  assign lv_remainder__h16106 =
	     lv_remainder_temp__h15987 + lv_root_temp_1__h15988 ;
  assign lv_remainder__h16196 =
	     lv_remainder_temp__h15987 - lv_root_temp_2__h15989 ;
  assign lv_remainder__h16760 = _theResult____h15990 + lv_root_rem__h16327 ;
  assign lv_remainder__h89333 =
	     lv_remainder_temp__h89214 + lv_root_temp_1__h89215 ;
  assign lv_remainder__h89423 =
	     lv_remainder_temp__h89214 - lv_root_temp_2__h89216 ;
  assign lv_remainder__h89987 = _theResult____h89217 + lv_root_rem__h89554 ;
  assign lv_remainder_temp__h15987 =
	     { inst_spfpu_sqrt_rg_inter_stage[55:29],
	       inst_spfpu_sqrt_rg_inter_stage[145:144] } ;
  assign lv_remainder_temp__h89214 =
	     { inst_dpfpu_sqrt_rg_inter_stage[113:58],
	       inst_dpfpu_sqrt_rg_inter_stage[293:292] } ;
  assign lv_result__h226641 =
	     { or_sign__h225900,
	       setCanonicalNaN_reswget_BITS_63_TO_32__q42[30:0] } ;
  assign lv_result__h226682 =
	     { and_sign__h225901,
	       setCanonicalNaN_reswget_BITS_95_TO_64__q41[30:0] } ;
  assign lv_result__h229188 = { or_sign__h228479, ff_input_D_OUT[143:81] } ;
  assign lv_result__h229229 = { and_sign__h228480, ff_input_D_OUT[207:145] } ;
  assign lv_result_is_infinity___1__h167469 =
	     { sign2__h117969, ~x__h167503 } ;
  assign lv_result_is_infinity___1__h167531 =
	     { x__h167543 | y__h167544, 1'd1 } ;
  assign lv_result_is_infinity___1__h53211 = { sign2__h30246, ~x__h53245 } ;
  assign lv_result_is_infinity___1__h53273 = { x__h53285 | y__h53286, 1'd1 } ;
  assign lv_result_is_zero___1__h167564 = { op_xor_sign3__h117982, 1'b1 } ;
  assign lv_result_is_zero___1__h167568 = { sign2__h117969, 1'd1 } ;
  assign lv_result_is_zero___1__h53306 = { op_xor_sign3__h30259, 1'b1 } ;
  assign lv_result_is_zero___1__h53310 = { sign2__h30246, 1'd1 } ;
  assign lv_root_rem__h16327 = { 2'b0, x__h16299, 1'b1 } ;
  assign lv_root_rem__h89554 = { 2'b0, x__h89526, 1'b1 } ;
  assign lv_root_temp_1__h15988 =
	     { 1'b0, inst_spfpu_sqrt_rg_inter_stage[28:3], 2'd3 } ;
  assign lv_root_temp_1__h89215 =
	     { 1'b0, inst_dpfpu_sqrt_rg_inter_stage[57:3], 2'd3 } ;
  assign lv_root_temp_2__h15989 =
	     { 1'b0, inst_spfpu_sqrt_rg_inter_stage[28:3], 2'd1 } ;
  assign lv_root_temp_2__h89216 =
	     { 1'b0, inst_dpfpu_sqrt_rg_inter_stage[57:3], 2'd1 } ;
  assign lv_round_up___1__h14450 =
	     inst_spfpu_divider_rg_stage3[53] & y__h14462 ;
  assign lv_round_up___1__h14486 = x__h14498 & y__h14499 ;
  assign lv_round_up___1__h194308 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[105] &
	     y__h194320 ;
  assign lv_round_up___1__h194530 =
	     lv_inexact__h193876 & inst_dpfm_add_sub_ff_stage5[23] ;
  assign lv_round_up___1__h248717 =
	     IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871[22] &
	     y__h248729 ;
  assign lv_round_up___1__h249374 =
	     lv_inexact1__h248059 &
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign lv_round_up___1__h251792 =
	     IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038[51] &
	     y__h251804 ;
  assign lv_round_up___1__h252447 =
	     lv_inexact1__h251131 & ff_input_D_OUT[208] ;
  assign lv_round_up___1__h264684 =
	     IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313[25] &
	     y__h264696 ;
  assign lv_round_up___1__h264823 = x__h264835 & y__h252472 ;
  assign lv_round_up___1__h65956 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[47] &
	     y__h65968 ;
  assign lv_round_up___1__h66178 =
	     lv_inexact__h65524 & inst_spfm_add_sub_ff_stage5[22] ;
  assign lv_round_up___1__h87678 =
	     inst_dpfpu_divider_rg_stage3[85] & y__h87690 ;
  assign lv_round_up___1__h87714 = x__h87726 & y__h87727 ;
  assign lv_rounded_mantissa___1__h194562 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[159:106] +
	     54'd1 ;
  assign lv_rounded_mantissa___1__h66210 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[72:48] +
	     25'd1 ;
  assign lv_rounded_mantissa__h194592 =
	     { 1'd0, _theResult_____5__h193878[53:1] } ;
  assign lv_rounded_mantissa__h66240 =
	     { 1'd0, _theResult_____5__h65526[24:1] } ;
  assign lv_rounded_quotient___1__h14521 =
	     lv_rounded_quotient__h14153 + 25'd1 ;
  assign lv_rounded_quotient___1__h87749 =
	     lv_rounded_quotient__h87381 + 54'd1 ;
  assign lv_rounded_quotient__h14153 =
	     { 1'b0, inst_spfpu_divider_rg_stage3[77:54] } ;
  assign lv_rounded_quotient__h14551 =
	     { 1'd0, _theResult_____4__h14154[24:1] } ;
  assign lv_rounded_quotient__h87381 =
	     { 1'b0, inst_dpfpu_divider_rg_stage3[138:86] } ;
  assign lv_rounded_quotient__h87779 =
	     { 1'd0, _theResult_____4__h87382[53:1] } ;
  assign lv_roundup___1__h16406 =
	     inst_spfpu_sqrt_rg_inter_stage[69] & y__h16418 ;
  assign lv_roundup___1__h16788 = lv_inexact__h16334 & y__h16800 ;
  assign lv_roundup___1__h209485 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110[7] &
	     y__h209497 ;
  assign lv_roundup___1__h209522 = inexact__h203884 & y__h209535 ;
  assign lv_roundup___1__h220560 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986[39] &
	     y__h220572 ;
  assign lv_roundup___1__h220597 = inexact__h209756 & y__h220610 ;
  assign lv_roundup___1__h245635 =
	     IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682[10] &
	     y__h245647 ;
  assign lv_roundup___1__h245671 = inexact__h235045 & y__h245684 ;
  assign lv_roundup___1__h89633 =
	     inst_dpfpu_sqrt_rg_inter_stage[130] & y__h89645 ;
  assign lv_roundup___1__h90015 = lv_inexact__h89561 & y__h90027 ;
  assign lv_sign__h220830 = !ff_input_D_OUT[1] && ff_input_D_OUT[176] ;
  assign lv_sticky___1__h7043 =
	     IF_inst_spfpu_divider_int_div_wr_final_out_wha_ETC___d200[0] |
	     ((_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ^
	       10'h200) >
	      ({ 5'd0, lsb_zeros__h7014 } ^ 10'h200) ||
	      x_wget__h695[0]) ;
  assign lv_sticky___1__h73050 =
	     IF_inst_dpfpu_divider_int_div_wr_final_out_wha_ETC___d1574[0] |
	     ((_1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1449 ^
	       13'h1000) >
	      ({ 7'd0, lsb_zeros__h73021 } ^ 13'h1000) ||
	      x_wget__h66729[0]) ;
  assign lv_sticky__h16332 = x__h16738 != 29'd0 ;
  assign lv_sticky__h193874 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[103:0] !=
	     104'd0 ;
  assign lv_sticky__h248057 =
	     IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871[20:0] !=
	     21'd0 ;
  assign lv_sticky__h251129 =
	     IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038[49:0] !=
	     50'd0 ;
  assign lv_sticky__h264136 =
	     getMant64_reswget_BITS_155_TO_104__q25[26:0] != 27'd0 ;
  assign lv_sticky__h264527 =
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 ?
	       lv_sticky__h264136 :
	       y_avValue_snd_snd_snd_snd_snd_snd__h264766 ;
  assign lv_sticky__h65522 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[45:0] !=
	     46'd0 ;
  assign lv_sticky__h89559 = x__h89965 != 58'd0 ;
  assign lv_summed_exponent__h268116 = x__h268368 + y__h268369 ;
  assign lv_summed_exponent__h270303 = x__h270555 + y__h270556 ;
  assign lv_zeros_on_left__h167736 =
	     _theResult____h167734[159] ?
	       8'd0 :
	       (_theResult____h167734[158] ?
		  8'd1 :
		  (_theResult____h167734[157] ?
		     8'd2 :
		     (_theResult____h167734[156] ?
			8'd3 :
			(_theResult____h167734[155] ?
			   8'd4 :
			   (_theResult____h167734[154] ?
			      8'd5 :
			      (_theResult____h167734[153] ?
				 8'd6 :
				 (_theResult____h167734[152] ?
				    8'd7 :
				    (_theResult____h167734[151] ?
				       8'd8 :
				       (_theResult____h167734[150] ?
					  8'd9 :
					  (_theResult____h167734[149] ?
					     8'd10 :
					     (_theResult____h167734[148] ?
						8'd11 :
						(_theResult____h167734[147] ?
						   8'd12 :
						   (_theResult____h167734[146] ?
						      8'd13 :
						      (_theResult____h167734[145] ?
							 8'd14 :
							 (_theResult____h167734[144] ?
							    8'd15 :
							    (_theResult____h167734[143] ?
							       8'd16 :
							       (_theResult____h167734[142] ?
								  8'd17 :
								  (_theResult____h167734[141] ?
								     8'd18 :
								     (_theResult____h167734[140] ?
									8'd19 :
									(_theResult____h167734[139] ?
									   8'd20 :
									   (_theResult____h167734[138] ?
									      8'd21 :
									      (_theResult____h167734[137] ?
										 8'd22 :
										 (_theResult____h167734[136] ?
										    8'd23 :
										    (_theResult____h167734[135] ?
										       8'd24 :
										       (_theResult____h167734[134] ?
											  8'd25 :
											  (_theResult____h167734[133] ?
											     8'd26 :
											     (_theResult____h167734[132] ?
												8'd27 :
												(_theResult____h167734[131] ?
												   8'd28 :
												   (_theResult____h167734[130] ?
												      8'd29 :
												      (_theResult____h167734[129] ?
													 8'd30 :
													 (_theResult____h167734[128] ?
													    8'd31 :
													    (_theResult____h167734[127] ?
													       8'd32 :
													       (_theResult____h167734[126] ?
														  8'd33 :
														  (_theResult____h167734[125] ?
														     8'd34 :
														     (_theResult____h167734[124] ?
															8'd35 :
															(_theResult____h167734[123] ?
															   8'd36 :
															   (_theResult____h167734[122] ?
															      8'd37 :
															      (_theResult____h167734[121] ?
																 8'd38 :
																 (_theResult____h167734[120] ?
																    8'd39 :
																    (_theResult____h167734[119] ?
																       8'd40 :
																       (_theResult____h167734[118] ?
																	  8'd41 :
																	  (_theResult____h167734[117] ?
																	     8'd42 :
																	     (_theResult____h167734[116] ?
																		8'd43 :
																		(_theResult____h167734[115] ?
																		   8'd44 :
																		   (_theResult____h167734[114] ?
																		      8'd45 :
																		      (_theResult____h167734[113] ?
																			 8'd46 :
																			 (_theResult____h167734[112] ?
																			    8'd47 :
																			    (_theResult____h167734[111] ?
																			       8'd48 :
																			       (_theResult____h167734[110] ?
																				  8'd49 :
																				  (_theResult____h167734[109] ?
																				     8'd50 :
																				     (_theResult____h167734[108] ?
																					8'd51 :
																					(_theResult____h167734[107] ?
																					   8'd52 :
																					   (_theResult____h167734[106] ?
																					      8'd53 :
																					      (_theResult____h167734[105] ?
																						 8'd54 :
																						 (_theResult____h167734[104] ?
																						    8'd55 :
																						    (_theResult____h167734[103] ?
																						       8'd56 :
																						       (_theResult____h167734[102] ?
																							  8'd57 :
																							  (_theResult____h167734[101] ?
																							     8'd58 :
																							     (_theResult____h167734[100] ?
																								8'd59 :
																								(_theResult____h167734[99] ?
																								   8'd60 :
																								   (_theResult____h167734[98] ?
																								      8'd61 :
																								      (_theResult____h167734[97] ?
																									 8'd62 :
																									 (_theResult____h167734[96] ?
																									    8'd63 :
																									    (_theResult____h167734[95] ?
																									       8'd64 :
																									       (_theResult____h167734[94] ?
																										  8'd65 :
																										  (_theResult____h167734[93] ?
																										     8'd66 :
																										     (_theResult____h167734[92] ?
																											8'd67 :
																											(_theResult____h167734[91] ?
																											   8'd68 :
																											   (_theResult____h167734[90] ?
																											      8'd69 :
																											      (_theResult____h167734[89] ?
																												 8'd70 :
																												 (_theResult____h167734[88] ?
																												    8'd71 :
																												    (_theResult____h167734[87] ?
																												       8'd72 :
																												       (_theResult____h167734[86] ?
																													  8'd73 :
																													  (_theResult____h167734[85] ?
																													     8'd74 :
																													     (_theResult____h167734[84] ?
																														8'd75 :
																														(_theResult____h167734[83] ?
																														   8'd76 :
																														   (_theResult____h167734[82] ?
																														      8'd77 :
																														      (_theResult____h167734[81] ?
																															 8'd78 :
																															 (_theResult____h167734[80] ?
																															    8'd79 :
																															    (_theResult____h167734[79] ?
																															       8'd80 :
																															       (_theResult____h167734[78] ?
																																  8'd81 :
																																  (_theResult____h167734[77] ?
																																     8'd82 :
																																     (_theResult____h167734[76] ?
																																	8'd83 :
																																	(_theResult____h167734[75] ?
																																	   8'd84 :
																																	   (_theResult____h167734[74] ?
																																	      8'd85 :
																																	      (_theResult____h167734[73] ?
																																		 8'd86 :
																																		 (_theResult____h167734[72] ?
																																		    8'd87 :
																																		    (_theResult____h167734[71] ?
																																		       8'd88 :
																																		       (_theResult____h167734[70] ?
																																			  8'd89 :
																																			  (_theResult____h167734[69] ?
																																			     8'd90 :
																																			     (_theResult____h167734[68] ?
																																				8'd91 :
																																				(_theResult____h167734[67] ?
																																				   8'd92 :
																																				   (_theResult____h167734[66] ?
																																				      8'd93 :
																																				      (_theResult____h167734[65] ?
																																					 8'd94 :
																																					 (_theResult____h167734[64] ?
																																					    8'd95 :
																																					    (_theResult____h167734[63] ?
																																					       8'd96 :
																																					       (_theResult____h167734[62] ?
																																						  8'd97 :
																																						  (_theResult____h167734[61] ?
																																						     8'd98 :
																																						     (_theResult____h167734[60] ?
																																							8'd99 :
																																							(_theResult____h167734[59] ?
																																							   8'd100 :
																																							   (_theResult____h167734[58] ?
																																							      8'd101 :
																																							      (_theResult____h167734[57] ?
																																								 8'd102 :
																																								 (_theResult____h167734[56] ?
																																								    8'd103 :
																																								    (_theResult____h167734[55] ?
																																								       8'd104 :
																																								       (_theResult____h167734[54] ?
																																									  8'd105 :
																																									  (_theResult____h167734[53] ?
																																									     8'd106 :
																																									     (_theResult____h167734[52] ?
																																										8'd107 :
																																										(_theResult____h167734[51] ?
																																										   8'd108 :
																																										   (_theResult____h167734[50] ?
																																										      8'd109 :
																																										      (_theResult____h167734[49] ?
																																											 8'd110 :
																																											 (_theResult____h167734[48] ?
																																											    8'd111 :
																																											    (_theResult____h167734[47] ?
																																											       8'd112 :
																																											       (_theResult____h167734[46] ?
																																												  8'd113 :
																																												  (_theResult____h167734[45] ?
																																												     8'd114 :
																																												     (_theResult____h167734[44] ?
																																													8'd115 :
																																													(_theResult____h167734[43] ?
																																													   8'd116 :
																																													   (_theResult____h167734[42] ?
																																													      8'd117 :
																																													      (_theResult____h167734[41] ?
																																														 8'd118 :
																																														 (_theResult____h167734[40] ?
																																														    8'd119 :
																																														    (_theResult____h167734[39] ?
																																														       8'd120 :
																																														       (_theResult____h167734[38] ?
																																															  8'd121 :
																																															  (_theResult____h167734[37] ?
																																															     8'd122 :
																																															     (_theResult____h167734[36] ?
																																																8'd123 :
																																																(_theResult____h167734[35] ?
																																																   8'd124 :
																																																   (_theResult____h167734[34] ?
																																																      8'd125 :
																																																      (_theResult____h167734[33] ?
																																																	 8'd126 :
																																																	 (_theResult____h167734[32] ?
																																																	    8'd127 :
																																																	    (_theResult____h167734[31] ?
																																																	       8'd128 :
																																																	       (_theResult____h167734[30] ?
																																																		  8'd129 :
																																																		  (_theResult____h167734[29] ?
																																																		     8'd130 :
																																																		     (_theResult____h167734[28] ?
																																																			8'd131 :
																																																			(_theResult____h167734[27] ?
																																																			   8'd132 :
																																																			   (_theResult____h167734[26] ?
																																																			      8'd133 :
																																																			      (_theResult____h167734[25] ?
																																																				 8'd134 :
																																																				 (_theResult____h167734[24] ?
																																																				    8'd135 :
																																																				    (_theResult____h167734[23] ?
																																																				       8'd136 :
																																																				       (_theResult____h167734[22] ?
																																																					  8'd137 :
																																																					  (_theResult____h167734[21] ?
																																																					     8'd138 :
																																																					     (_theResult____h167734[20] ?
																																																						8'd139 :
																																																						(_theResult____h167734[19] ?
																																																						   8'd140 :
																																																						   (_theResult____h167734[18] ?
																																																						      8'd141 :
																																																						      (_theResult____h167734[17] ?
																																																							 8'd142 :
																																																							 (_theResult____h167734[16] ?
																																																							    8'd143 :
																																																							    (_theResult____h167734[15] ?
																																																							       8'd144 :
																																																							       (_theResult____h167734[14] ?
																																																								  8'd145 :
																																																								  (_theResult____h167734[13] ?
																																																								     8'd146 :
																																																								     (_theResult____h167734[12] ?
																																																									8'd147 :
																																																									(_theResult____h167734[11] ?
																																																									   8'd148 :
																																																									   (_theResult____h167734[10] ?
																																																									      8'd149 :
																																																									      (_theResult____h167734[9] ?
																																																										 8'd150 :
																																																										 (_theResult____h167734[8] ?
																																																										    8'd151 :
																																																										    (_theResult____h167734[7] ?
																																																										       8'd152 :
																																																										       (_theResult____h167734[6] ?
																																																											  8'd153 :
																																																											  (_theResult____h167734[5] ?
																																																											     8'd154 :
																																																											     (_theResult____h167734[4] ?
																																																												8'd155 :
																																																												(_theResult____h167734[3] ?
																																																												   8'd156 :
																																																												   (_theResult____h167734[2] ?
																																																												      8'd157 :
																																																												      (_theResult____h167734[1] ?
																																																													 8'd158 :
																																																													 (_theResult____h167734[0] ?
																																																													    8'd159 :
																																																													    8'd160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_zeros_on_left__h53478 =
	     _theResult____h53476[72] ?
	       7'd0 :
	       (_theResult____h53476[71] ?
		  7'd1 :
		  (_theResult____h53476[70] ?
		     7'd2 :
		     (_theResult____h53476[69] ?
			7'd3 :
			(_theResult____h53476[68] ?
			   7'd4 :
			   (_theResult____h53476[67] ?
			      7'd5 :
			      (_theResult____h53476[66] ?
				 7'd6 :
				 (_theResult____h53476[65] ?
				    7'd7 :
				    (_theResult____h53476[64] ?
				       7'd8 :
				       (_theResult____h53476[63] ?
					  7'd9 :
					  (_theResult____h53476[62] ?
					     7'd10 :
					     (_theResult____h53476[61] ?
						7'd11 :
						(_theResult____h53476[60] ?
						   7'd12 :
						   (_theResult____h53476[59] ?
						      7'd13 :
						      (_theResult____h53476[58] ?
							 7'd14 :
							 (_theResult____h53476[57] ?
							    7'd15 :
							    (_theResult____h53476[56] ?
							       7'd16 :
							       (_theResult____h53476[55] ?
								  7'd17 :
								  (_theResult____h53476[54] ?
								     7'd18 :
								     (_theResult____h53476[53] ?
									7'd19 :
									(_theResult____h53476[52] ?
									   7'd20 :
									   (_theResult____h53476[51] ?
									      7'd21 :
									      (_theResult____h53476[50] ?
										 7'd22 :
										 (_theResult____h53476[49] ?
										    7'd23 :
										    (_theResult____h53476[48] ?
										       7'd24 :
										       (_theResult____h53476[47] ?
											  7'd25 :
											  (_theResult____h53476[46] ?
											     7'd26 :
											     (_theResult____h53476[45] ?
												7'd27 :
												(_theResult____h53476[44] ?
												   7'd28 :
												   (_theResult____h53476[43] ?
												      7'd29 :
												      (_theResult____h53476[42] ?
													 7'd30 :
													 (_theResult____h53476[41] ?
													    7'd31 :
													    (_theResult____h53476[40] ?
													       7'd32 :
													       (_theResult____h53476[39] ?
														  7'd33 :
														  (_theResult____h53476[38] ?
														     7'd34 :
														     (_theResult____h53476[37] ?
															7'd35 :
															(_theResult____h53476[36] ?
															   7'd36 :
															   (_theResult____h53476[35] ?
															      7'd37 :
															      (_theResult____h53476[34] ?
																 7'd38 :
																 (_theResult____h53476[33] ?
																    7'd39 :
																    (_theResult____h53476[32] ?
																       7'd40 :
																       (_theResult____h53476[31] ?
																	  7'd41 :
																	  (_theResult____h53476[30] ?
																	     7'd42 :
																	     (_theResult____h53476[29] ?
																		7'd43 :
																		(_theResult____h53476[28] ?
																		   7'd44 :
																		   (_theResult____h53476[27] ?
																		      7'd45 :
																		      (_theResult____h53476[26] ?
																			 7'd46 :
																			 (_theResult____h53476[25] ?
																			    7'd47 :
																			    (_theResult____h53476[24] ?
																			       7'd48 :
																			       (_theResult____h53476[23] ?
																				  7'd49 :
																				  (_theResult____h53476[22] ?
																				     7'd50 :
																				     (_theResult____h53476[21] ?
																					7'd51 :
																					(_theResult____h53476[20] ?
																					   7'd52 :
																					   (_theResult____h53476[19] ?
																					      7'd53 :
																					      (_theResult____h53476[18] ?
																						 7'd54 :
																						 (_theResult____h53476[17] ?
																						    7'd55 :
																						    (_theResult____h53476[16] ?
																						       7'd56 :
																						       (_theResult____h53476[15] ?
																							  7'd57 :
																							  (_theResult____h53476[14] ?
																							     7'd58 :
																							     (_theResult____h53476[13] ?
																								7'd59 :
																								(_theResult____h53476[12] ?
																								   7'd60 :
																								   (_theResult____h53476[11] ?
																								      7'd61 :
																								      (_theResult____h53476[10] ?
																									 7'd62 :
																									 (_theResult____h53476[9] ?
																									    7'd63 :
																									    (_theResult____h53476[8] ?
																									       7'd64 :
																									       (_theResult____h53476[7] ?
																										  7'd65 :
																										  (_theResult____h53476[6] ?
																										     7'd66 :
																										     (_theResult____h53476[5] ?
																											7'd67 :
																											(_theResult____h53476[4] ?
																											   7'd68 :
																											   (_theResult____h53476[3] ?
																											      7'd69 :
																											      (_theResult____h53476[2] ?
																												 7'd70 :
																												 (_theResult____h53476[1] ?
																												    7'd71 :
																												    (_theResult____h53476[0] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign man1__h274170 =
	     { ~condFlags32_reswget_BITS_14_TO_10__q52[4],
	       getMant32_res_wget[68:46] } ;
  assign man1__h284172 =
	     { ~condFlags64_reswget_BITS_14_TO_10__q30[4],
	       getMant64_res_wget[155:104] } ;
  assign man2__h274171 =
	     { ~condFlags32_reswget_BITS_9_TO_5__q53[4],
	       getMant32_res_wget[45:23] } ;
  assign man2__h284173 =
	     { ~condFlags64_reswget_BITS_9_TO_5__q31[4],
	       getMant64_res_wget[103:52] } ;
  assign man__h258380 = { value__h262139[21:0], 30'd0 } ;
  assign man__h264258 =
	     { 1'b1, getMant64_reswget_BITS_155_TO_104__q25[51:27], 23'd0 } >>
	     shiftDist__h264257 ;
  assign man__h264375 =
	     { getMant64_reswget_BITS_155_TO_104__q25[51:27], 24'd0 } ;
  assign mant__h258320 = { getMant32_res_wget[68:46], 29'd0 } ;
  assign mantissa2__h117970 = { inst_dpfm_add_sub_ff_stage2[188:82], 53'd0 } ;
  assign mantissa2__h117992 =
	     inst_dpfm_add_sub_ff_stage2[5] ? 160'd0 : mantissa2__h117970 ;
  assign mantissa2__h118013 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__373_BIT_5_ETC___d2390 ?
	       mantissa_to_shift___1__h118011 :
	       mantissa2__h117992 ;
  assign mantissa2__h30247 = { inst_spfm_add_sub_ff_stage2[98:50], 24'd0 } ;
  assign mantissa2__h30269 =
	     inst_spfm_add_sub_ff_stage2[5] ? 73'd0 : mantissa2__h30247 ;
  assign mantissa2__h30290 =
	     IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 ?
	       mantissa_to_shift___1__h30288 :
	       mantissa2__h30269 ;
  assign mantissa3___1__h137703 =
	     { 1'd0,
	       expo3_zero__h117981,
	       inst_dpfm_add_sub_ff_stage2[69:18],
	       106'd0 } ;
  assign mantissa3___1__h39482 =
	     { 1'd0,
	       expo3_zero__h30258,
	       inst_spfm_add_sub_ff_stage2[40:18],
	       48'd0 } ;
  assign mantissa3__h118014 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__373_BIT_5_ETC___d2390 ?
	       _theResult____h117983 :
	       mantissa_to_shift___1__h118011 ;
  assign mantissa3__h30291 =
	     IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 ?
	       _theResult____h30260 :
	       mantissa_to_shift___1__h30288 ;
  assign mantissa___1__h313190 = { mantissa__h304195[50:0], 1'd0 } ;
  assign mantissa___1__h333118 = { mantissa__h314786[108:0], 1'd0 } ;
  assign mantissa__h15992 = { inst_spfpu_sqrt_rg_inter_stage[143:94], 2'd0 } ;
  assign mantissa__h220838 =
	     { theResult__20834_SL_x29708_BITS_4_TO_0__q2[30:0], 21'd0 } ;
  assign mantissa__h304193 =
	     { IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5753,
	       getMant32_res_wget[68:46],
	       27'd0 } ;
  assign mantissa__h304195 = mantissa__h304193 << x__h313193 ;
  assign mantissa__h304205 =
	     { IF_IF_IF_condFlags32_res_whas__343_THEN_condFl_ETC___d5813[49:0],
	       2'd0 } ;
  assign mantissa__h314784 =
	     { IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5871,
	       getMant64_res_wget[155:104],
	       56'd0 } ;
  assign mantissa__h314786 = mantissa__h314784 << x__h333121 ;
  assign mantissa__h314796 =
	     { IF_IF_IF_condFlags64_res_whas__428_THEN_condFl_ETC___d5989[107:0],
	       2'd0 } ;
  assign mantissa__h89219 =
	     { inst_dpfpu_sqrt_rg_inter_stage[291:184], 2'd0 } ;
  assign mantissa_to_shift___1__h118011 =
	     { IF_IF_inst_dpfm_add_sub_ff_stage2_read__373_BI_ETC___d2414[159:1],
	       _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2742 } ;
  assign mantissa_to_shift___1__h30288 =
	     { IF_IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_ETC___d779[72:1],
	       _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d933 } ;
  assign mantissa_to_shift__h118006 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__373_BIT_5_ETC___d2390 ?
	       mantissa2__h117992 :
	       _theResult____h117983 ;
  assign mantissa_to_shift__h30283 =
	     IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 ?
	       mantissa2__h30269 :
	       _theResult____h30260 ;
  assign msb_zeros___1__h107935 = msb_zeros__h90471 + 7'd1 ;
  assign msb_zeros___1__h25374 = msb_zeros__h17248 + 6'd1 ;
  assign msb_zeros__h107904 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       msb_zeros___1__h107935 :
	       msb_zeros__h90471 ;
  assign msb_zeros__h17248 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       6'd0 :
	       (inst_spfm_add_sub_ff_input_register[106] ?
		  6'd1 :
		  (inst_spfm_add_sub_ff_input_register[105] ?
		     6'd2 :
		     (inst_spfm_add_sub_ff_input_register[104] ?
			6'd3 :
			(inst_spfm_add_sub_ff_input_register[103] ?
			   6'd4 :
			   (inst_spfm_add_sub_ff_input_register[102] ?
			      6'd5 :
			      (inst_spfm_add_sub_ff_input_register[101] ?
				 6'd6 :
				 (inst_spfm_add_sub_ff_input_register[100] ?
				    6'd7 :
				    (inst_spfm_add_sub_ff_input_register[99] ?
				       6'd8 :
				       (inst_spfm_add_sub_ff_input_register[98] ?
					  6'd9 :
					  (inst_spfm_add_sub_ff_input_register[97] ?
					     6'd10 :
					     (inst_spfm_add_sub_ff_input_register[96] ?
						6'd11 :
						(inst_spfm_add_sub_ff_input_register[95] ?
						   6'd12 :
						   (inst_spfm_add_sub_ff_input_register[94] ?
						      6'd13 :
						      (inst_spfm_add_sub_ff_input_register[93] ?
							 6'd14 :
							 (inst_spfm_add_sub_ff_input_register[92] ?
							    6'd15 :
							    (inst_spfm_add_sub_ff_input_register[91] ?
							       6'd16 :
							       (inst_spfm_add_sub_ff_input_register[90] ?
								  6'd17 :
								  (inst_spfm_add_sub_ff_input_register[89] ?
								     6'd18 :
								     (inst_spfm_add_sub_ff_input_register[88] ?
									6'd19 :
									(inst_spfm_add_sub_ff_input_register[87] ?
									   6'd20 :
									   (inst_spfm_add_sub_ff_input_register[86] ?
									      6'd21 :
									      (inst_spfm_add_sub_ff_input_register[85] ?
										 6'd22 :
										 (inst_spfm_add_sub_ff_input_register[84] ?
										    6'd23 :
										    (inst_spfm_add_sub_ff_input_register[83] ?
										       6'd24 :
										       (inst_spfm_add_sub_ff_input_register[82] ?
											  6'd25 :
											  (inst_spfm_add_sub_ff_input_register[81] ?
											     6'd26 :
											     (inst_spfm_add_sub_ff_input_register[80] ?
												6'd27 :
												(inst_spfm_add_sub_ff_input_register[79] ?
												   6'd28 :
												   (inst_spfm_add_sub_ff_input_register[78] ?
												      6'd29 :
												      (inst_spfm_add_sub_ff_input_register[77] ?
													 6'd30 :
													 (inst_spfm_add_sub_ff_input_register[76] ?
													    6'd31 :
													    (inst_spfm_add_sub_ff_input_register[75] ?
													       6'd32 :
													       (inst_spfm_add_sub_ff_input_register[74] ?
														  6'd33 :
														  (inst_spfm_add_sub_ff_input_register[73] ?
														     6'd34 :
														     (inst_spfm_add_sub_ff_input_register[72] ?
															6'd35 :
															(inst_spfm_add_sub_ff_input_register[71] ?
															   6'd36 :
															   (inst_spfm_add_sub_ff_input_register[70] ?
															      6'd37 :
															      (inst_spfm_add_sub_ff_input_register[69] ?
																 6'd38 :
																 (inst_spfm_add_sub_ff_input_register[68] ?
																    6'd39 :
																    (inst_spfm_add_sub_ff_input_register[67] ?
																       6'd40 :
																       (inst_spfm_add_sub_ff_input_register[66] ?
																	  6'd41 :
																	  (inst_spfm_add_sub_ff_input_register[65] ?
																	     6'd42 :
																	     (inst_spfm_add_sub_ff_input_register[64] ?
																		6'd43 :
																		(inst_spfm_add_sub_ff_input_register[63] ?
																		   6'd44 :
																		   (inst_spfm_add_sub_ff_input_register[62] ?
																		      6'd45 :
																		      (inst_spfm_add_sub_ff_input_register[61] ?
																			 6'd46 :
																			 (inst_spfm_add_sub_ff_input_register[60] ?
																			    6'd47 :
																			    6'd49))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h25343 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       msb_zeros___1__h25374 :
	       msb_zeros__h17248 ;
  assign msb_zeros__h6857 =
	     x_wget__h695[26] ?
	       5'd0 :
	       (x_wget__h695[25] ?
		  5'd1 :
		  (x_wget__h695[24] ?
		     5'd2 :
		     (x_wget__h695[23] ?
			5'd3 :
			(x_wget__h695[22] ?
			   5'd4 :
			   (x_wget__h695[21] ?
			      5'd5 :
			      (x_wget__h695[20] ?
				 5'd6 :
				 (x_wget__h695[19] ?
				    5'd7 :
				    (x_wget__h695[18] ?
				       5'd8 :
				       (x_wget__h695[17] ?
					  5'd9 :
					  (x_wget__h695[16] ?
					     5'd10 :
					     (x_wget__h695[15] ?
						5'd11 :
						(x_wget__h695[14] ?
						   5'd12 :
						   (x_wget__h695[13] ?
						      5'd13 :
						      (x_wget__h695[12] ?
							 5'd14 :
							 (x_wget__h695[11] ?
							    5'd15 :
							    (x_wget__h695[10] ?
							       5'd16 :
							       (x_wget__h695[9] ?
								  5'd17 :
								  (x_wget__h695[8] ?
								     5'd18 :
								     (x_wget__h695[7] ?
									5'd19 :
									(x_wget__h695[6] ?
									   5'd20 :
									   (x_wget__h695[5] ?
									      5'd21 :
									      (x_wget__h695[4] ?
										 5'd22 :
										 (x_wget__h695[3] ?
										    5'd23 :
										    (x_wget__h695[2] ?
										       5'd24 :
										       (x_wget__h695[1] ?
											  5'd25 :
											  (x_wget__h695[0] ?
											     5'd26 :
											     5'd27)))))))))))))))))))))))))) ;
  assign msb_zeros__h72864 =
	     x_wget__h66729[55] ?
	       6'd0 :
	       (x_wget__h66729[54] ?
		  6'd1 :
		  (x_wget__h66729[53] ?
		     6'd2 :
		     (x_wget__h66729[52] ?
			6'd3 :
			(x_wget__h66729[51] ?
			   6'd4 :
			   (x_wget__h66729[50] ?
			      6'd5 :
			      (x_wget__h66729[49] ?
				 6'd6 :
				 (x_wget__h66729[48] ?
				    6'd7 :
				    (x_wget__h66729[47] ?
				       6'd8 :
				       (x_wget__h66729[46] ?
					  6'd9 :
					  (x_wget__h66729[45] ?
					     6'd10 :
					     (x_wget__h66729[44] ?
						6'd11 :
						(x_wget__h66729[43] ?
						   6'd12 :
						   (x_wget__h66729[42] ?
						      6'd13 :
						      (x_wget__h66729[41] ?
							 6'd14 :
							 (x_wget__h66729[40] ?
							    6'd15 :
							    (x_wget__h66729[39] ?
							       6'd16 :
							       (x_wget__h66729[38] ?
								  6'd17 :
								  (x_wget__h66729[37] ?
								     6'd18 :
								     (x_wget__h66729[36] ?
									6'd19 :
									(x_wget__h66729[35] ?
									   6'd20 :
									   (x_wget__h66729[34] ?
									      6'd21 :
									      (x_wget__h66729[33] ?
										 6'd22 :
										 (x_wget__h66729[32] ?
										    6'd23 :
										    (x_wget__h66729[31] ?
										       6'd24 :
										       (x_wget__h66729[30] ?
											  6'd25 :
											  (x_wget__h66729[29] ?
											     6'd26 :
											     (x_wget__h66729[28] ?
												6'd27 :
												(x_wget__h66729[27] ?
												   6'd28 :
												   (x_wget__h66729[26] ?
												      6'd29 :
												      (x_wget__h66729[25] ?
													 6'd30 :
													 (x_wget__h66729[24] ?
													    6'd31 :
													    (x_wget__h66729[23] ?
													       6'd32 :
													       (x_wget__h66729[22] ?
														  6'd33 :
														  (x_wget__h66729[21] ?
														     6'd34 :
														     (x_wget__h66729[20] ?
															6'd35 :
															(x_wget__h66729[19] ?
															   6'd36 :
															   (x_wget__h66729[18] ?
															      6'd37 :
															      (x_wget__h66729[17] ?
																 6'd38 :
																 (x_wget__h66729[16] ?
																    6'd39 :
																    (x_wget__h66729[15] ?
																       6'd40 :
																       (x_wget__h66729[14] ?
																	  6'd41 :
																	  (x_wget__h66729[13] ?
																	     6'd42 :
																	     (x_wget__h66729[12] ?
																		6'd43 :
																		(x_wget__h66729[11] ?
																		   6'd44 :
																		   (x_wget__h66729[10] ?
																		      6'd45 :
																		      (x_wget__h66729[9] ?
																			 6'd46 :
																			 (x_wget__h66729[8] ?
																			    6'd47 :
																			    (x_wget__h66729[7] ?
																			       6'd48 :
																			       (x_wget__h66729[6] ?
																				  6'd49 :
																				  (x_wget__h66729[5] ?
																				     6'd50 :
																				     (x_wget__h66729[4] ?
																					6'd51 :
																					(x_wget__h66729[3] ?
																					   6'd52 :
																					   (x_wget__h66729[2] ?
																					      6'd53 :
																					      (x_wget__h66729[1] ?
																						 6'd54 :
																						 (x_wget__h66729[0] ?
																						    6'd55 :
																						    6'd56))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h90471 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       7'd0 :
	       (inst_dpfm_add_sub_ff_input_register[199] ?
		  7'd1 :
		  (inst_dpfm_add_sub_ff_input_register[198] ?
		     7'd2 :
		     (inst_dpfm_add_sub_ff_input_register[197] ?
			7'd3 :
			(inst_dpfm_add_sub_ff_input_register[196] ?
			   7'd4 :
			   (inst_dpfm_add_sub_ff_input_register[195] ?
			      7'd5 :
			      (inst_dpfm_add_sub_ff_input_register[194] ?
				 7'd6 :
				 (inst_dpfm_add_sub_ff_input_register[193] ?
				    7'd7 :
				    (inst_dpfm_add_sub_ff_input_register[192] ?
				       7'd8 :
				       (inst_dpfm_add_sub_ff_input_register[191] ?
					  7'd9 :
					  (inst_dpfm_add_sub_ff_input_register[190] ?
					     7'd10 :
					     (inst_dpfm_add_sub_ff_input_register[189] ?
						7'd11 :
						(inst_dpfm_add_sub_ff_input_register[188] ?
						   7'd12 :
						   (inst_dpfm_add_sub_ff_input_register[187] ?
						      7'd13 :
						      (inst_dpfm_add_sub_ff_input_register[186] ?
							 7'd14 :
							 (inst_dpfm_add_sub_ff_input_register[185] ?
							    7'd15 :
							    (inst_dpfm_add_sub_ff_input_register[184] ?
							       7'd16 :
							       (inst_dpfm_add_sub_ff_input_register[183] ?
								  7'd17 :
								  (inst_dpfm_add_sub_ff_input_register[182] ?
								     7'd18 :
								     (inst_dpfm_add_sub_ff_input_register[181] ?
									7'd19 :
									(inst_dpfm_add_sub_ff_input_register[180] ?
									   7'd20 :
									   (inst_dpfm_add_sub_ff_input_register[179] ?
									      7'd21 :
									      (inst_dpfm_add_sub_ff_input_register[178] ?
										 7'd22 :
										 (inst_dpfm_add_sub_ff_input_register[177] ?
										    7'd23 :
										    (inst_dpfm_add_sub_ff_input_register[176] ?
										       7'd24 :
										       (inst_dpfm_add_sub_ff_input_register[175] ?
											  7'd25 :
											  (inst_dpfm_add_sub_ff_input_register[174] ?
											     7'd26 :
											     (inst_dpfm_add_sub_ff_input_register[173] ?
												7'd27 :
												(inst_dpfm_add_sub_ff_input_register[172] ?
												   7'd28 :
												   (inst_dpfm_add_sub_ff_input_register[171] ?
												      7'd29 :
												      (inst_dpfm_add_sub_ff_input_register[170] ?
													 7'd30 :
													 (inst_dpfm_add_sub_ff_input_register[169] ?
													    7'd31 :
													    (inst_dpfm_add_sub_ff_input_register[168] ?
													       7'd32 :
													       (inst_dpfm_add_sub_ff_input_register[167] ?
														  7'd33 :
														  (inst_dpfm_add_sub_ff_input_register[166] ?
														     7'd34 :
														     (inst_dpfm_add_sub_ff_input_register[165] ?
															7'd35 :
															(inst_dpfm_add_sub_ff_input_register[164] ?
															   7'd36 :
															   (inst_dpfm_add_sub_ff_input_register[163] ?
															      7'd37 :
															      (inst_dpfm_add_sub_ff_input_register[162] ?
																 7'd38 :
																 (inst_dpfm_add_sub_ff_input_register[161] ?
																    7'd39 :
																    (inst_dpfm_add_sub_ff_input_register[160] ?
																       7'd40 :
																       (inst_dpfm_add_sub_ff_input_register[159] ?
																	  7'd41 :
																	  (inst_dpfm_add_sub_ff_input_register[158] ?
																	     7'd42 :
																	     (inst_dpfm_add_sub_ff_input_register[157] ?
																		7'd43 :
																		(inst_dpfm_add_sub_ff_input_register[156] ?
																		   7'd44 :
																		   (inst_dpfm_add_sub_ff_input_register[155] ?
																		      7'd45 :
																		      (inst_dpfm_add_sub_ff_input_register[154] ?
																			 7'd46 :
																			 (inst_dpfm_add_sub_ff_input_register[153] ?
																			    7'd47 :
																			    (inst_dpfm_add_sub_ff_input_register[152] ?
																			       7'd48 :
																			       (inst_dpfm_add_sub_ff_input_register[151] ?
																				  7'd49 :
																				  (inst_dpfm_add_sub_ff_input_register[150] ?
																				     7'd50 :
																				     (inst_dpfm_add_sub_ff_input_register[149] ?
																					7'd51 :
																					(inst_dpfm_add_sub_ff_input_register[148] ?
																					   7'd52 :
																					   (inst_dpfm_add_sub_ff_input_register[147] ?
																					      7'd53 :
																					      (inst_dpfm_add_sub_ff_input_register[146] ?
																						 7'd54 :
																						 (inst_dpfm_add_sub_ff_input_register[145] ?
																						    7'd55 :
																						    (inst_dpfm_add_sub_ff_input_register[144] ?
																						       7'd56 :
																						       (inst_dpfm_add_sub_ff_input_register[143] ?
																							  7'd57 :
																							  (inst_dpfm_add_sub_ff_input_register[142] ?
																							     7'd58 :
																							     (inst_dpfm_add_sub_ff_input_register[141] ?
																								7'd59 :
																								(inst_dpfm_add_sub_ff_input_register[140] ?
																								   7'd60 :
																								   (inst_dpfm_add_sub_ff_input_register[139] ?
																								      7'd61 :
																								      (inst_dpfm_add_sub_ff_input_register[138] ?
																									 7'd62 :
																									 (inst_dpfm_add_sub_ff_input_register[137] ?
																									    7'd63 :
																									    (inst_dpfm_add_sub_ff_input_register[136] ?
																									       7'd64 :
																									       (inst_dpfm_add_sub_ff_input_register[135] ?
																										  7'd65 :
																										  (inst_dpfm_add_sub_ff_input_register[134] ?
																										     7'd66 :
																										     (inst_dpfm_add_sub_ff_input_register[133] ?
																											7'd67 :
																											(inst_dpfm_add_sub_ff_input_register[132] ?
																											   7'd68 :
																											   (inst_dpfm_add_sub_ff_input_register[131] ?
																											      7'd69 :
																											      (inst_dpfm_add_sub_ff_input_register[130] ?
																												 7'd70 :
																												 (inst_dpfm_add_sub_ff_input_register[129] ?
																												    7'd71 :
																												    (inst_dpfm_add_sub_ff_input_register[128] ?
																												       7'd72 :
																												       (inst_dpfm_add_sub_ff_input_register[127] ?
																													  7'd73 :
																													  (inst_dpfm_add_sub_ff_input_register[126] ?
																													     7'd74 :
																													     (inst_dpfm_add_sub_ff_input_register[125] ?
																														7'd75 :
																														(inst_dpfm_add_sub_ff_input_register[124] ?
																														   7'd76 :
																														   (inst_dpfm_add_sub_ff_input_register[123] ?
																														      7'd77 :
																														      (inst_dpfm_add_sub_ff_input_register[122] ?
																															 7'd78 :
																															 (inst_dpfm_add_sub_ff_input_register[121] ?
																															    7'd79 :
																															    (inst_dpfm_add_sub_ff_input_register[120] ?
																															       7'd80 :
																															       (inst_dpfm_add_sub_ff_input_register[119] ?
																																  7'd81 :
																																  (inst_dpfm_add_sub_ff_input_register[118] ?
																																     7'd82 :
																																     (inst_dpfm_add_sub_ff_input_register[117] ?
																																	7'd83 :
																																	(inst_dpfm_add_sub_ff_input_register[116] ?
																																	   7'd84 :
																																	   (inst_dpfm_add_sub_ff_input_register[115] ?
																																	      7'd85 :
																																	      (inst_dpfm_add_sub_ff_input_register[114] ?
																																		 7'd86 :
																																		 (inst_dpfm_add_sub_ff_input_register[113] ?
																																		    7'd87 :
																																		    (inst_dpfm_add_sub_ff_input_register[112] ?
																																		       7'd88 :
																																		       (inst_dpfm_add_sub_ff_input_register[111] ?
																																			  7'd89 :
																																			  (inst_dpfm_add_sub_ff_input_register[110] ?
																																			     7'd90 :
																																			     (inst_dpfm_add_sub_ff_input_register[109] ?
																																				7'd91 :
																																				(inst_dpfm_add_sub_ff_input_register[108] ?
																																				   7'd92 :
																																				   (inst_dpfm_add_sub_ff_input_register[107] ?
																																				      7'd93 :
																																				      (inst_dpfm_add_sub_ff_input_register[106] ?
																																					 7'd94 :
																																					 (inst_dpfm_add_sub_ff_input_register[105] ?
																																					    7'd95 :
																																					    (inst_dpfm_add_sub_ff_input_register[104] ?
																																					       7'd96 :
																																					       (inst_dpfm_add_sub_ff_input_register[103] ?
																																						  7'd97 :
																																						  (inst_dpfm_add_sub_ff_input_register[102] ?
																																						     7'd98 :
																																						     (inst_dpfm_add_sub_ff_input_register[101] ?
																																							7'd99 :
																																							(inst_dpfm_add_sub_ff_input_register[100] ?
																																							   7'd100 :
																																							   (inst_dpfm_add_sub_ff_input_register[99] ?
																																							      7'd101 :
																																							      (inst_dpfm_add_sub_ff_input_register[98] ?
																																								 7'd102 :
																																								 (inst_dpfm_add_sub_ff_input_register[97] ?
																																								    7'd103 :
																																								    (inst_dpfm_add_sub_ff_input_register[96] ?
																																								       7'd104 :
																																								       (inst_dpfm_add_sub_ff_input_register[95] ?
																																									  7'd105 :
																																									  7'd107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign new_value_final_result__h193908 =
	     inst_dpfm_add_sub_ff_stage5[17] ?
	       64'h7FF8000000000000 :
	       _theResult_____3_snd_snd_snd__h194002 ;
  assign new_value_final_result__h65556 =
	     inst_spfm_add_sub_ff_stage5[16] ?
	       32'h7FC00000 :
	       _theResult_____3_snd_snd_snd__h65650 ;
  assign op_xor_sign3__h117982 =
	     inst_dpfm_add_sub_ff_stage2[12] ^ sign3__h117971 ;
  assign op_xor_sign3__h30259 =
	     inst_spfm_add_sub_ff_stage2[12] ^ sign3__h30248 ;
  assign or_sign__h225900 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] |
	     setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] ;
  assign or_sign__h228479 = ff_input_D_OUT[208] | ff_input_D_OUT[144] ;
  assign quiet_nan_two__h268110 = x__h268762 | y__h268763 ;
  assign quiet_nan_two__h270297 = x__h270944 | y__h270945 ;
  assign res___1__h265184 =
	     { ff_input_D_OUT[208],
	       _theResult_____2__h264919,
	       IF_IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0_ETC___d4340[22:0] } ;
  assign res__h203788 = ff_input_D_OUT[176] ? 32'hCF000000 : 32'd0 ;
  assign res__h264525 =
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 ?
	       _theResult___snd_fst__h265182 :
	       32'd0 ;
  assign result__h258191 =
	     condFlags32_reswget_BITS_14_TO_10__q52[0] ? 5'd16 : 5'd0 ;
  assign result__h263874 =
	     condFlags64_reswget_BITS_14_TO_10__q30[0] ? 5'd16 : 5'd0 ;
  assign result__h264946 =
	     { IF_NOT_IF_getExp64_res_whas__293_THEN_getExp64_ETC___d4436[4:1],
	       IF_NOT_IF_getExp64_res_whas__293_THEN_getExp64_ETC___d4436[0] |
	       x__h264835 } ;
  assign result__h264977 = { exception__h264518[4:2], 2'd3 } ;
  assign result_exponent___1__h16848 =
	     inst_spfpu_sqrt_rg_inter_stage[67:59] + 9'd1 ;
  assign result_exponent___1__h90075 =
	     inst_dpfpu_sqrt_rg_inter_stage[128:117] + 12'd1 ;
  assign result_exponent__h304202 = x__h313463 + y__h313464 ;
  assign result_exponent__h314793 = x__h333391 + y__h333392 ;
  assign result_mantissa__h16326 =
	     { inst_spfpu_sqrt_rg_inter_stage[93:69],
	       !_theResult____h15990[28] } ;
  assign result_mantissa__h89553 =
	     { inst_dpfpu_sqrt_rg_inter_stage[183:130],
	       !_theResult____h89217[57] } ;
  assign resultant_exponent___1__h194591 =
	     resultant_exponent__h193860 + 13'd1 ;
  assign resultant_exponent___1__h66239 = resultant_exponent__h65508 + 10'd1 ;
  assign resultant_exponent__h193860 =
	     inst_dpfm_add_sub_ff_stage5[183] ?
	       resultant_exponent_inc__h193855 :
	       _theResult___fst__h194190 ;
  assign resultant_exponent__h65508 =
	     inst_spfm_add_sub_ff_stage5[95] ?
	       resultant_exponent_inc__h65503 :
	       _theResult___fst__h65838 ;
  assign resultant_exponent_inc__h193855 =
	     inst_dpfm_add_sub_ff_stage5[196:184] + 13'd1 ;
  assign resultant_exponent_inc__h65503 =
	     inst_spfm_add_sub_ff_stage5[105:96] + 10'd1 ;
  assign resultant_exponent_sub__h193853 =
	     inst_dpfm_add_sub_ff_stage5[196:184] - 13'd1 ;
  assign resultant_exponent_sub__h65501 =
	     inst_spfm_add_sub_ff_stage5[105:96] - 10'd1 ;
  assign resultant_exponent_sub_zerosMSB__h193858 =
	     inst_dpfm_add_sub_ff_stage5[196:184] -
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__156_ETC___d3175 ;
  assign resultant_exponent_sub_zerosMSB__h65506 =
	     inst_spfm_add_sub_ff_stage5[105:96] -
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1192 ;
  assign resultant_mantissa___1__h194162 =
	     { 1'd0,
	       inst_dpfm_add_sub_ff_stage5[183:26],
	       inst_dpfm_add_sub_ff_stage5[24] |
	       inst_dpfm_add_sub_ff_stage5[25] } ;
  assign resultant_mantissa___1__h65810 =
	     { 1'd0,
	       inst_spfm_add_sub_ff_stage5[95:25],
	       inst_spfm_add_sub_ff_stage5[23] |
	       inst_spfm_add_sub_ff_stage5[24] } ;
  assign resultant_mantissa_norm_expo__h193856 =
	     inst_dpfm_add_sub_ff_stage5[183:24] <<
	     resultant_exponent_sub__h193853 ;
  assign resultant_mantissa_norm_expo__h65504 =
	     inst_spfm_add_sub_ff_stage5[95:23] <<
	     resultant_exponent_sub__h65501 ;
  assign resultant_mantissa_norm_zerosMSB__h193857 =
	     inst_dpfm_add_sub_ff_stage5[183:24] << x__h194439 ;
  assign resultant_mantissa_norm_zerosMSB__h65505 =
	     inst_spfm_add_sub_ff_stage5[95:23] << x__h66087 ;
  assign setCanonicalNaN_argwget_BITS_127_TO_64__q39 =
	     setCanonicalNaN_arg_wget[127:64] ;
  assign setCanonicalNaN_argwget_BITS_191_TO_128__q38 =
	     setCanonicalNaN_arg_wget[191:128] ;
  assign setCanonicalNaN_argwget_BITS_63_TO_0__q40 =
	     setCanonicalNaN_arg_wget[63:0] ;
  assign setCanonicalNaN_reswget_BITS_31_TO_0__q59 =
	     setCanonicalNaN_res_wget[31:0] ;
  assign setCanonicalNaN_reswget_BITS_63_TO_32__q42 =
	     setCanonicalNaN_res_wget[63:32] ;
  assign setCanonicalNaN_reswget_BITS_95_TO_64__q41 =
	     setCanonicalNaN_res_wget[95:64] ;
  assign shiftDist__h264257 = 11'd896 - getExp64_res_wget[32:22] ;
  assign shift_neg__h107909 =
	     ~_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1871 +
	     13'd1 ;
  assign shift_neg__h25348 =
	     ~_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 +
	     10'd1 ;
  assign shift_neg__h7017 =
	     ~_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 +
	     10'd1 ;
  assign shift_neg__h73024 =
	     ~_1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1449 +
	     13'd1 ;
  assign sign2__h117969 =
	     inst_dpfm_add_sub_ff_stage2[203] ^
	     inst_dpfm_add_sub_ff_stage2[202] ;
  assign sign2__h30246 =
	     inst_spfm_add_sub_ff_stage2[110] ^
	     inst_spfm_add_sub_ff_stage2[109] ;
  assign sign3__h117971 =
	     inst_dpfm_add_sub_ff_stage2[81] ^
	     inst_dpfm_add_sub_ff_stage2[202] ;
  assign sign3__h30248 =
	     inst_spfm_add_sub_ff_stage2[49] ^
	     inst_spfm_add_sub_ff_stage2[109] ;
  assign sign__h235042 = !ff_input_D_OUT[1] && ff_input_D_OUT[208] ;
  assign sub_mantissa1__h167731 =
	     inst_dpfm_add_sub_ff_stage4[346] ?
	       inst_dpfm_add_sub_ff_stage4[332:173] :
	       inst_dpfm_add_sub_ff_stage4[172:13] ;
  assign sub_mantissa1__h53473 =
	     inst_spfm_add_sub_ff_stage4[169] ?
	       inst_spfm_add_sub_ff_stage4[158:86] :
	       inst_spfm_add_sub_ff_stage4[85:13] ;
  assign sub_mantissa2__h167732 =
	     inst_dpfm_add_sub_ff_stage4[346] ?
	       inst_dpfm_add_sub_ff_stage4[172:13] :
	       inst_dpfm_add_sub_ff_stage4[332:173] ;
  assign sub_mantissa2__h53474 =
	     inst_spfm_add_sub_ff_stage4[169] ?
	       inst_spfm_add_sub_ff_stage4[85:13] :
	       inst_spfm_add_sub_ff_stage4[158:86] ;
  assign sub_mantissa__h167733 =
	     sub_mantissa1__h167731 - sub_mantissa2__h167732 ;
  assign sub_mantissa__h53475 =
	     sub_mantissa1__h53473 - sub_mantissa2__h53474 ;
  assign theResult__20834_SL_x29708_BITS_4_TO_0__q2 =
	     _theResult____h220834 << x__h229708[4:0] ;
  assign value__h262139 = getMant32_res_wget[68:46] << x__h258383 ;
  assign wr_final_out_fflags__h220854 = { 4'd0, inexact__h235045 } ;
  assign x1_avValue_fflags__h203794 =
	     (ff_input_D_OUT[175:145] == 31'd0) ?
	       5'd0 :
	       x_wget__h195058[36:32] ;
  assign x1_avValue_fflags__h209653 =
	     ff_input_D_OUT[1] ?
	       x_wget__h195058[36:32] :
	       x1_avValue_fflags__h203794 ;
  assign x1_avValue_fflags__h220733 =
	     ff_input_D_OUT[2] ?
	       x_wget__h195196[36:32] :
	       x1_avValue_fflags__h209653 ;
  assign x1_avValue_final_result__h203793 =
	     (ff_input_D_OUT[175:145] == 31'd0) ?
	       res__h203788 :
	       x_wget__h195058[31:0] ;
  assign x1_avValue_final_result__h209652 =
	     ff_input_D_OUT[1] ?
	       x_wget__h195058[31:0] :
	       x1_avValue_final_result__h203793 ;
  assign x1_avValue_final_result__h220732 =
	     ff_input_D_OUT[2] ?
	       x_wget__h195196[31:0] :
	       x1_avValue_final_result__h209652 ;
  assign x1_avValue_final_result__h220740 =
	     (ff_input_D_OUT[208:145] == 64'd0 && ff_input_D_OUT[2] ||
	      ff_input_D_OUT[176:145] == 32'd0 && !ff_input_D_OUT[2]) ?
	       32'b0 :
	       x1_avValue_final_result__h220732 ;
  assign x1_avValue_final_result__h245798 =
	     { CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q43,
	       setCanonicalNaN_reswget_BITS_95_TO_64__q41[30:0] } ;
  assign x1_avValue_snd_fst__h265179 =
	     (!condFlags64_reswget_BITS_14_TO_10__q30[2] &&
	      !condFlags64_reswget_BITS_14_TO_10__q30[0] &&
	      !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	      !condFlags64_reswget_BITS_14_TO_10__q30[3]) ?
	       y_avValue_snd_fst__h265176 :
	       res__h264525 ;
  assign x__h107970 = msb_zeros__h107904 - 7'd1 ;
  assign x__h107996 = { 6'd0, msb_zeros__h107904 } ;
  assign x__h117714 =
	     (!inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1863 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) &&
	     (!inst_dpfm_add_sub_ff_input_register[2] ||
	      !(x__h117745 ^ inst_dpfm_add_sub_ff_input_register[5])) ;
  assign x__h117745 =
	     inst_dpfm_add_sub_ff_input_register[81] ^
	     inst_dpfm_add_sub_ff_input_register[80] ;
  assign x__h117775 =
	     inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1863 &&
	     (!inst_dpfm_add_sub_ff_input_register[200] ||
	      inst_dpfm_add_sub_ff_input_register[94:82] != 13'd2046) &&
	     (inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1862 ^
	      13'h1000) <
	     13'd3020 &&
	     (!inst_dpfm_add_sub_ff_input_register[2] ||
	      inst_dpfm_add_sub_ff_input_register[12] ||
	      inst_dpfm_add_sub_ff_input_register[13]) &&
	     !inst_dpfm_add_sub_ff_input_register[14] ;
  assign x__h118123 = x__h118135 | y__h118136 ;
  assign x__h118135 = _theResult_____1__h118017 & sign2__h117969 ;
  assign x__h14079 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 &&
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ;
  assign x__h14084 =
	     (!inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 ||
	      inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ||
	      _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134) ?
	       x_wget__h695[0] :
	       lv_sticky___1__h7043 ;
  assign x__h14313 = _theResult____h14151 | inst_spfpu_divider_rg_stage3[53] ;
  assign x__h14463 = inst_spfpu_divider_rg_stage3[52] | _theResult____h14151 ;
  assign x__h14498 = x__h14500 | _theResult____h14151 ;
  assign x__h14500 =
	     inst_spfpu_divider_rg_stage3[53] |
	     inst_spfpu_divider_rg_stage3[52] ;
  assign x__h153079 =
	     mantissa_to_shift__h118006[0] ?
	       8'd0 :
	       (mantissa_to_shift__h118006[1] ?
		  8'd1 :
		  (mantissa_to_shift__h118006[2] ?
		     8'd2 :
		     (mantissa_to_shift__h118006[3] ?
			8'd3 :
			(mantissa_to_shift__h118006[4] ?
			   8'd4 :
			   (mantissa_to_shift__h118006[5] ?
			      8'd5 :
			      (mantissa_to_shift__h118006[6] ?
				 8'd6 :
				 (mantissa_to_shift__h118006[7] ?
				    8'd7 :
				    (mantissa_to_shift__h118006[8] ?
				       8'd8 :
				       (mantissa_to_shift__h118006[9] ?
					  8'd9 :
					  (mantissa_to_shift__h118006[10] ?
					     8'd10 :
					     (mantissa_to_shift__h118006[11] ?
						8'd11 :
						(mantissa_to_shift__h118006[12] ?
						   8'd12 :
						   (mantissa_to_shift__h118006[13] ?
						      8'd13 :
						      (mantissa_to_shift__h118006[14] ?
							 8'd14 :
							 (mantissa_to_shift__h118006[15] ?
							    8'd15 :
							    (mantissa_to_shift__h118006[16] ?
							       8'd16 :
							       (mantissa_to_shift__h118006[17] ?
								  8'd17 :
								  (mantissa_to_shift__h118006[18] ?
								     8'd18 :
								     (mantissa_to_shift__h118006[19] ?
									8'd19 :
									(mantissa_to_shift__h118006[20] ?
									   8'd20 :
									   (mantissa_to_shift__h118006[21] ?
									      8'd21 :
									      (mantissa_to_shift__h118006[22] ?
										 8'd22 :
										 (mantissa_to_shift__h118006[23] ?
										    8'd23 :
										    (mantissa_to_shift__h118006[24] ?
										       8'd24 :
										       (mantissa_to_shift__h118006[25] ?
											  8'd25 :
											  (mantissa_to_shift__h118006[26] ?
											     8'd26 :
											     (mantissa_to_shift__h118006[27] ?
												8'd27 :
												(mantissa_to_shift__h118006[28] ?
												   8'd28 :
												   (mantissa_to_shift__h118006[29] ?
												      8'd29 :
												      (mantissa_to_shift__h118006[30] ?
													 8'd30 :
													 (mantissa_to_shift__h118006[31] ?
													    8'd31 :
													    (mantissa_to_shift__h118006[32] ?
													       8'd32 :
													       (mantissa_to_shift__h118006[33] ?
														  8'd33 :
														  (mantissa_to_shift__h118006[34] ?
														     8'd34 :
														     (mantissa_to_shift__h118006[35] ?
															8'd35 :
															(mantissa_to_shift__h118006[36] ?
															   8'd36 :
															   (mantissa_to_shift__h118006[37] ?
															      8'd37 :
															      (mantissa_to_shift__h118006[38] ?
																 8'd38 :
																 (mantissa_to_shift__h118006[39] ?
																    8'd39 :
																    (mantissa_to_shift__h118006[40] ?
																       8'd40 :
																       (mantissa_to_shift__h118006[41] ?
																	  8'd41 :
																	  (mantissa_to_shift__h118006[42] ?
																	     8'd42 :
																	     (mantissa_to_shift__h118006[43] ?
																		8'd43 :
																		(mantissa_to_shift__h118006[44] ?
																		   8'd44 :
																		   (mantissa_to_shift__h118006[45] ?
																		      8'd45 :
																		      (mantissa_to_shift__h118006[46] ?
																			 8'd46 :
																			 (mantissa_to_shift__h118006[47] ?
																			    8'd47 :
																			    (mantissa_to_shift__h118006[48] ?
																			       8'd48 :
																			       (mantissa_to_shift__h118006[49] ?
																				  8'd49 :
																				  (mantissa_to_shift__h118006[50] ?
																				     8'd50 :
																				     (mantissa_to_shift__h118006[51] ?
																					8'd51 :
																					(mantissa_to_shift__h118006[52] ?
																					   8'd52 :
																					   (mantissa_to_shift__h118006[53] ?
																					      8'd53 :
																					      (mantissa_to_shift__h118006[54] ?
																						 8'd54 :
																						 (mantissa_to_shift__h118006[55] ?
																						    8'd55 :
																						    (mantissa_to_shift__h118006[56] ?
																						       8'd56 :
																						       (mantissa_to_shift__h118006[57] ?
																							  8'd57 :
																							  (mantissa_to_shift__h118006[58] ?
																							     8'd58 :
																							     (mantissa_to_shift__h118006[59] ?
																								8'd59 :
																								(mantissa_to_shift__h118006[60] ?
																								   8'd60 :
																								   (mantissa_to_shift__h118006[61] ?
																								      8'd61 :
																								      (mantissa_to_shift__h118006[62] ?
																									 8'd62 :
																									 (mantissa_to_shift__h118006[63] ?
																									    8'd63 :
																									    (mantissa_to_shift__h118006[64] ?
																									       8'd64 :
																									       (mantissa_to_shift__h118006[65] ?
																										  8'd65 :
																										  (mantissa_to_shift__h118006[66] ?
																										     8'd66 :
																										     (mantissa_to_shift__h118006[67] ?
																											8'd67 :
																											(mantissa_to_shift__h118006[68] ?
																											   8'd68 :
																											   (mantissa_to_shift__h118006[69] ?
																											      8'd69 :
																											      (mantissa_to_shift__h118006[70] ?
																												 8'd70 :
																												 (mantissa_to_shift__h118006[71] ?
																												    8'd71 :
																												    (mantissa_to_shift__h118006[72] ?
																												       8'd72 :
																												       (mantissa_to_shift__h118006[73] ?
																													  8'd73 :
																													  (mantissa_to_shift__h118006[74] ?
																													     8'd74 :
																													     (mantissa_to_shift__h118006[75] ?
																														8'd75 :
																														(mantissa_to_shift__h118006[76] ?
																														   8'd76 :
																														   (mantissa_to_shift__h118006[77] ?
																														      8'd77 :
																														      (mantissa_to_shift__h118006[78] ?
																															 8'd78 :
																															 (mantissa_to_shift__h118006[79] ?
																															    8'd79 :
																															    (mantissa_to_shift__h118006[80] ?
																															       8'd80 :
																															       (mantissa_to_shift__h118006[81] ?
																																  8'd81 :
																																  (mantissa_to_shift__h118006[82] ?
																																     8'd82 :
																																     (mantissa_to_shift__h118006[83] ?
																																	8'd83 :
																																	(mantissa_to_shift__h118006[84] ?
																																	   8'd84 :
																																	   (mantissa_to_shift__h118006[85] ?
																																	      8'd85 :
																																	      (mantissa_to_shift__h118006[86] ?
																																		 8'd86 :
																																		 (mantissa_to_shift__h118006[87] ?
																																		    8'd87 :
																																		    (mantissa_to_shift__h118006[88] ?
																																		       8'd88 :
																																		       (mantissa_to_shift__h118006[89] ?
																																			  8'd89 :
																																			  (mantissa_to_shift__h118006[90] ?
																																			     8'd90 :
																																			     (mantissa_to_shift__h118006[91] ?
																																				8'd91 :
																																				(mantissa_to_shift__h118006[92] ?
																																				   8'd92 :
																																				   (mantissa_to_shift__h118006[93] ?
																																				      8'd93 :
																																				      (mantissa_to_shift__h118006[94] ?
																																					 8'd94 :
																																					 (mantissa_to_shift__h118006[95] ?
																																					    8'd95 :
																																					    (mantissa_to_shift__h118006[96] ?
																																					       8'd96 :
																																					       (mantissa_to_shift__h118006[97] ?
																																						  8'd97 :
																																						  (mantissa_to_shift__h118006[98] ?
																																						     8'd98 :
																																						     (mantissa_to_shift__h118006[99] ?
																																							8'd99 :
																																							(mantissa_to_shift__h118006[100] ?
																																							   8'd100 :
																																							   (mantissa_to_shift__h118006[101] ?
																																							      8'd101 :
																																							      (mantissa_to_shift__h118006[102] ?
																																								 8'd102 :
																																								 (mantissa_to_shift__h118006[103] ?
																																								    8'd103 :
																																								    (mantissa_to_shift__h118006[104] ?
																																								       8'd104 :
																																								       (mantissa_to_shift__h118006[105] ?
																																									  8'd105 :
																																									  (mantissa_to_shift__h118006[106] ?
																																									     8'd106 :
																																									     (mantissa_to_shift__h118006[107] ?
																																										8'd107 :
																																										(mantissa_to_shift__h118006[108] ?
																																										   8'd108 :
																																										   (mantissa_to_shift__h118006[109] ?
																																										      8'd109 :
																																										      (mantissa_to_shift__h118006[110] ?
																																											 8'd110 :
																																											 (mantissa_to_shift__h118006[111] ?
																																											    8'd111 :
																																											    (mantissa_to_shift__h118006[112] ?
																																											       8'd112 :
																																											       (mantissa_to_shift__h118006[113] ?
																																												  8'd113 :
																																												  (mantissa_to_shift__h118006[114] ?
																																												     8'd114 :
																																												     (mantissa_to_shift__h118006[115] ?
																																													8'd115 :
																																													(mantissa_to_shift__h118006[116] ?
																																													   8'd116 :
																																													   (mantissa_to_shift__h118006[117] ?
																																													      8'd117 :
																																													      (mantissa_to_shift__h118006[118] ?
																																														 8'd118 :
																																														 (mantissa_to_shift__h118006[119] ?
																																														    8'd119 :
																																														    (mantissa_to_shift__h118006[120] ?
																																														       8'd120 :
																																														       (mantissa_to_shift__h118006[121] ?
																																															  8'd121 :
																																															  (mantissa_to_shift__h118006[122] ?
																																															     8'd122 :
																																															     (mantissa_to_shift__h118006[123] ?
																																																8'd123 :
																																																(mantissa_to_shift__h118006[124] ?
																																																   8'd124 :
																																																   (mantissa_to_shift__h118006[125] ?
																																																      8'd125 :
																																																      (mantissa_to_shift__h118006[126] ?
																																																	 8'd126 :
																																																	 (mantissa_to_shift__h118006[127] ?
																																																	    8'd127 :
																																																	    (mantissa_to_shift__h118006[128] ?
																																																	       8'd128 :
																																																	       (mantissa_to_shift__h118006[129] ?
																																																		  8'd129 :
																																																		  (mantissa_to_shift__h118006[130] ?
																																																		     8'd130 :
																																																		     (mantissa_to_shift__h118006[131] ?
																																																			8'd131 :
																																																			(mantissa_to_shift__h118006[132] ?
																																																			   8'd132 :
																																																			   (mantissa_to_shift__h118006[133] ?
																																																			      8'd133 :
																																																			      (mantissa_to_shift__h118006[134] ?
																																																				 8'd134 :
																																																				 (mantissa_to_shift__h118006[135] ?
																																																				    8'd135 :
																																																				    (mantissa_to_shift__h118006[136] ?
																																																				       8'd136 :
																																																				       (mantissa_to_shift__h118006[137] ?
																																																					  8'd137 :
																																																					  (mantissa_to_shift__h118006[138] ?
																																																					     8'd138 :
																																																					     (mantissa_to_shift__h118006[139] ?
																																																						8'd139 :
																																																						(mantissa_to_shift__h118006[140] ?
																																																						   8'd140 :
																																																						   (mantissa_to_shift__h118006[141] ?
																																																						      8'd141 :
																																																						      (mantissa_to_shift__h118006[142] ?
																																																							 8'd142 :
																																																							 (mantissa_to_shift__h118006[143] ?
																																																							    8'd143 :
																																																							    (mantissa_to_shift__h118006[144] ?
																																																							       8'd144 :
																																																							       (mantissa_to_shift__h118006[145] ?
																																																								  8'd145 :
																																																								  (mantissa_to_shift__h118006[146] ?
																																																								     8'd146 :
																																																								     (mantissa_to_shift__h118006[147] ?
																																																									8'd147 :
																																																									(mantissa_to_shift__h118006[148] ?
																																																									   8'd148 :
																																																									   (mantissa_to_shift__h118006[149] ?
																																																									      8'd149 :
																																																									      (mantissa_to_shift__h118006[150] ?
																																																										 8'd150 :
																																																										 (mantissa_to_shift__h118006[151] ?
																																																										    8'd151 :
																																																										    (mantissa_to_shift__h118006[152] ?
																																																										       8'd152 :
																																																										       (mantissa_to_shift__h118006[153] ?
																																																											  8'd153 :
																																																											  (mantissa_to_shift__h118006[154] ?
																																																											     8'd154 :
																																																											     (mantissa_to_shift__h118006[155] ?
																																																												8'd155 :
																																																												(mantissa_to_shift__h118006[156] ?
																																																												   8'd156 :
																																																												   (mantissa_to_shift__h118006[157] ?
																																																												      8'd157 :
																																																												      (mantissa_to_shift__h118006[158] ?
																																																													 8'd158 :
																																																													 (mantissa_to_shift__h118006[159] ?
																																																													    8'd159 :
																																																													    8'd160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h16036 =
	     { inst_spfpu_sqrt_rg_inter_stage[92:69],
	       !_theResult____h15990[28],
	       1'd0 } ;
  assign x__h16299 =
	     { inst_spfpu_sqrt_rg_inter_stage[27:3],
	       !_theResult____h15990[28] } ;
  assign x__h16697 =
	     inst_spfpu_sqrt_rg_inter_stage[70] | !_theResult____h15990[28] ;
  assign x__h16738 =
	     _theResult____h15990[28] ?
	       lv_remainder__h16760 :
	       _theResult____h15990 ;
  assign x__h167388 = ~_theResult_____1__h118017 ;
  assign x__h167395 =
	     inst_dpfm_add_sub_ff_stage2_read__373_BIT_15_3_ETC___d2398 ||
	     inst_dpfm_add_sub_ff_stage2[6] ||
	     (!inst_dpfm_add_sub_ff_stage2[16] ||
	      !inst_dpfm_add_sub_ff_stage2[5]) &&
	     inst_dpfm_add_sub_ff_stage2[4] &&
	     inst_dpfm_add_sub_ff_stage2[14] &&
	     x__h167503 ;
  assign x__h167503 = sign2__h117969 ^ op_xor_sign3__h117982 ;
  assign x__h167511 =
	     (inst_dpfm_add_sub_ff_stage2_read__373_BIT_15_3_ETC___d2398 ||
	      inst_dpfm_add_sub_ff_stage2[6] ||
	      inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       2'd0 :
	       _theResult_____6_snd_snd__h167468 ;
  assign x__h167543 = x__h167545 & sign2__h117969 ;
  assign x__h167545 = inst_dpfm_add_sub_ff_stage2[4] & y__h167546 ;
  assign x__h167547 = x__h167548 & inst_dpfm_add_sub_ff_stage2[14] ;
  assign x__h167548 = ~inst_dpfm_add_sub_ff_stage2[4] ;
  assign x__h167552 =
	     (inst_dpfm_add_sub_ff_stage2_read__373_BIT_15_3_ETC___d2398 ||
	      inst_dpfm_add_sub_ff_stage2[6]) ?
	       2'd0 :
	       _theResult_____6_snd_snd_snd__h167515 ;
  assign x__h167576 = x__h167588 & y__h167589 ;
  assign x__h167588 =
	     (inst_dpfm_add_sub_ff_stage2_read__373_BIT_15_3_ETC___d2398 ||
	      inst_dpfm_add_sub_ff_stage2[6] ||
	      inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       inst_dpfm_add_sub_ff_stage2[1] :
	       _theResult_____6_fst__h167465 ;
  assign x__h167618 =
	     (inst_dpfm_add_sub_ff_stage2[1] ||
	      !inst_dpfm_add_sub_ff_stage2[6]) &&
	     inst_dpfm_add_sub_ff_stage2[15] ;
  assign x__h167811 =
	     (_theResult____h167734 == 160'd0) ?
	       ((inst_dpfm_add_sub_ff_stage4[12:10] == 3'b010) ?
		  2'b11 :
		  2'b01) :
	       2'd0 ;
  assign x__h16812 =
	     inst_spfpu_sqrt_rg_inter_stage[69] | !_theResult____h15990[28] ;
  assign x__h194439 = inst_dpfm_add_sub_ff_stage5[7:0] - 8'd1 ;
  assign x__h194460 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[106] |
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[104] ;
  assign x__h194542 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[105] |
	     IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[104] ;
  assign x__h203902 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110[7] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110[6] ;
  assign x__h204163 =
	     _theResult____h203871[31] ?
	       6'd0 :
	       (_theResult____h203871[30] ?
		  6'd1 :
		  (_theResult____h203871[29] ?
		     6'd2 :
		     (_theResult____h203871[28] ?
			6'd3 :
			(_theResult____h203871[27] ?
			   6'd4 :
			   (_theResult____h203871[26] ?
			      6'd5 :
			      (_theResult____h203871[25] ?
				 6'd6 :
				 (_theResult____h203871[24] ?
				    6'd7 :
				    (_theResult____h203871[23] ?
				       6'd8 :
				       (_theResult____h203871[22] ?
					  6'd9 :
					  (_theResult____h203871[21] ?
					     6'd10 :
					     (_theResult____h203871[20] ?
						6'd11 :
						(_theResult____h203871[19] ?
						   6'd12 :
						   (_theResult____h203871[18] ?
						      6'd13 :
						      (_theResult____h203871[17] ?
							 6'd14 :
							 (_theResult____h203871[16] ?
							    6'd15 :
							    (_theResult____h203871[15] ?
							       6'd16 :
							       (_theResult____h203871[14] ?
								  6'd17 :
								  (_theResult____h203871[13] ?
								     6'd18 :
								     (_theResult____h203871[12] ?
									6'd19 :
									(_theResult____h203871[11] ?
									   6'd20 :
									   (_theResult____h203871[10] ?
									      6'd21 :
									      (_theResult____h203871[9] ?
										 6'd22 :
										 (_theResult____h203871[8] ?
										    6'd23 :
										    (_theResult____h203871[7] ?
										       6'd24 :
										       (_theResult____h203871[6] ?
											  6'd25 :
											  (_theResult____h203871[5] ?
											     6'd26 :
											     (_theResult____h203871[4] ?
												6'd27 :
												(_theResult____h203871[3] ?
												   6'd28 :
												   (_theResult____h203871[2] ?
												      6'd29 :
												      (_theResult____h203871[1] ?
													 6'd30 :
													 (_theResult____h203871[0] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign x__h209498 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110[8] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110[6] ;
  assign x__h209774 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986[39] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986[38] ;
  assign x__h210053 =
	     _theResult____h209743[63] ?
	       7'd0 :
	       (_theResult____h209743[62] ?
		  7'd1 :
		  (_theResult____h209743[61] ?
		     7'd2 :
		     (_theResult____h209743[60] ?
			7'd3 :
			(_theResult____h209743[59] ?
			   7'd4 :
			   (_theResult____h209743[58] ?
			      7'd5 :
			      (_theResult____h209743[57] ?
				 7'd6 :
				 (_theResult____h209743[56] ?
				    7'd7 :
				    (_theResult____h209743[55] ?
				       7'd8 :
				       (_theResult____h209743[54] ?
					  7'd9 :
					  (_theResult____h209743[53] ?
					     7'd10 :
					     (_theResult____h209743[52] ?
						7'd11 :
						(_theResult____h209743[51] ?
						   7'd12 :
						   (_theResult____h209743[50] ?
						      7'd13 :
						      (_theResult____h209743[49] ?
							 7'd14 :
							 (_theResult____h209743[48] ?
							    7'd15 :
							    (_theResult____h209743[47] ?
							       7'd16 :
							       (_theResult____h209743[46] ?
								  7'd17 :
								  (_theResult____h209743[45] ?
								     7'd18 :
								     (_theResult____h209743[44] ?
									7'd19 :
									(_theResult____h209743[43] ?
									   7'd20 :
									   (_theResult____h209743[42] ?
									      7'd21 :
									      (_theResult____h209743[41] ?
										 7'd22 :
										 (_theResult____h209743[40] ?
										    7'd23 :
										    (_theResult____h209743[39] ?
										       7'd24 :
										       (_theResult____h209743[38] ?
											  7'd25 :
											  (_theResult____h209743[37] ?
											     7'd26 :
											     (_theResult____h209743[36] ?
												7'd27 :
												(_theResult____h209743[35] ?
												   7'd28 :
												   (_theResult____h209743[34] ?
												      7'd29 :
												      (_theResult____h209743[33] ?
													 7'd30 :
													 (_theResult____h209743[32] ?
													    7'd31 :
													    (_theResult____h209743[31] ?
													       7'd32 :
													       (_theResult____h209743[30] ?
														  7'd33 :
														  (_theResult____h209743[29] ?
														     7'd34 :
														     (_theResult____h209743[28] ?
															7'd35 :
															(_theResult____h209743[27] ?
															   7'd36 :
															   (_theResult____h209743[26] ?
															      7'd37 :
															      (_theResult____h209743[25] ?
																 7'd38 :
																 (_theResult____h209743[24] ?
																    7'd39 :
																    (_theResult____h209743[23] ?
																       7'd40 :
																       (_theResult____h209743[22] ?
																	  7'd41 :
																	  (_theResult____h209743[21] ?
																	     7'd42 :
																	     (_theResult____h209743[20] ?
																		7'd43 :
																		(_theResult____h209743[19] ?
																		   7'd44 :
																		   (_theResult____h209743[18] ?
																		      7'd45 :
																		      (_theResult____h209743[17] ?
																			 7'd46 :
																			 (_theResult____h209743[16] ?
																			    7'd47 :
																			    (_theResult____h209743[15] ?
																			       7'd48 :
																			       (_theResult____h209743[14] ?
																				  7'd49 :
																				  (_theResult____h209743[13] ?
																				     7'd50 :
																				     (_theResult____h209743[12] ?
																					7'd51 :
																					(_theResult____h209743[11] ?
																					   7'd52 :
																					   (_theResult____h209743[10] ?
																					      7'd53 :
																					      (_theResult____h209743[9] ?
																						 7'd54 :
																						 (_theResult____h209743[8] ?
																						    7'd55 :
																						    (_theResult____h209743[7] ?
																						       7'd56 :
																						       (_theResult____h209743[6] ?
																							  7'd57 :
																							  (_theResult____h209743[5] ?
																							     7'd58 :
																							     (_theResult____h209743[4] ?
																								7'd59 :
																								(_theResult____h209743[3] ?
																								   7'd60 :
																								   (_theResult____h209743[2] ?
																								      7'd61 :
																								      (_theResult____h209743[1] ?
																									 7'd62 :
																									 (_theResult____h209743[0] ?
																									    7'd63 :
																									    7'd64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h220573 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986[40] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986[38] ;
  assign x__h220916 =
	     (setCanonicalNaN_argwget_BITS_191_TO_128__q38[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_191_TO_128__q38[31:0] :
	       32'h7FC00000 ;
  assign x__h221057 =
	     (setCanonicalNaN_argwget_BITS_127_TO_64__q39[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_127_TO_64__q39[31:0] :
	       32'h7FC00000 ;
  assign x__h221139 =
	     (setCanonicalNaN_argwget_BITS_63_TO_0__q40[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_63_TO_0__q40[31:0] :
	       32'h7FC00000 ;
  assign x__h229708 =
	     _theResult____h220834[31] ?
	       6'd0 :
	       (_theResult____h220834[30] ?
		  6'd1 :
		  (_theResult____h220834[29] ?
		     6'd2 :
		     (_theResult____h220834[28] ?
			6'd3 :
			(_theResult____h220834[27] ?
			   6'd4 :
			   (_theResult____h220834[26] ?
			      6'd5 :
			      (_theResult____h220834[25] ?
				 6'd6 :
				 (_theResult____h220834[24] ?
				    6'd7 :
				    (_theResult____h220834[23] ?
				       6'd8 :
				       (_theResult____h220834[22] ?
					  6'd9 :
					  (_theResult____h220834[21] ?
					     6'd10 :
					     (_theResult____h220834[20] ?
						6'd11 :
						(_theResult____h220834[19] ?
						   6'd12 :
						   (_theResult____h220834[18] ?
						      6'd13 :
						      (_theResult____h220834[17] ?
							 6'd14 :
							 (_theResult____h220834[16] ?
							    6'd15 :
							    (_theResult____h220834[15] ?
							       6'd16 :
							       (_theResult____h220834[14] ?
								  6'd17 :
								  (_theResult____h220834[13] ?
								     6'd18 :
								     (_theResult____h220834[12] ?
									6'd19 :
									(_theResult____h220834[11] ?
									   6'd20 :
									   (_theResult____h220834[10] ?
									      6'd21 :
									      (_theResult____h220834[9] ?
										 6'd22 :
										 (_theResult____h220834[8] ?
										    6'd23 :
										    (_theResult____h220834[7] ?
										       6'd24 :
										       (_theResult____h220834[6] ?
											  6'd25 :
											  (_theResult____h220834[5] ?
											     6'd26 :
											     (_theResult____h220834[4] ?
												6'd27 :
												(_theResult____h220834[3] ?
												   6'd28 :
												   (_theResult____h220834[2] ?
												      6'd29 :
												      (_theResult____h220834[1] ?
													 6'd30 :
													 (_theResult____h220834[0] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign x__h235063 =
	     IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682[10] |
	     IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682[9] ;
  assign x__h235143 =
	     _theResult____h220847[63] ?
	       7'd0 :
	       (_theResult____h220847[62] ?
		  7'd1 :
		  (_theResult____h220847[61] ?
		     7'd2 :
		     (_theResult____h220847[60] ?
			7'd3 :
			(_theResult____h220847[59] ?
			   7'd4 :
			   (_theResult____h220847[58] ?
			      7'd5 :
			      (_theResult____h220847[57] ?
				 7'd6 :
				 (_theResult____h220847[56] ?
				    7'd7 :
				    (_theResult____h220847[55] ?
				       7'd8 :
				       (_theResult____h220847[54] ?
					  7'd9 :
					  (_theResult____h220847[53] ?
					     7'd10 :
					     (_theResult____h220847[52] ?
						7'd11 :
						(_theResult____h220847[51] ?
						   7'd12 :
						   (_theResult____h220847[50] ?
						      7'd13 :
						      (_theResult____h220847[49] ?
							 7'd14 :
							 (_theResult____h220847[48] ?
							    7'd15 :
							    (_theResult____h220847[47] ?
							       7'd16 :
							       (_theResult____h220847[46] ?
								  7'd17 :
								  (_theResult____h220847[45] ?
								     7'd18 :
								     (_theResult____h220847[44] ?
									7'd19 :
									(_theResult____h220847[43] ?
									   7'd20 :
									   (_theResult____h220847[42] ?
									      7'd21 :
									      (_theResult____h220847[41] ?
										 7'd22 :
										 (_theResult____h220847[40] ?
										    7'd23 :
										    (_theResult____h220847[39] ?
										       7'd24 :
										       (_theResult____h220847[38] ?
											  7'd25 :
											  (_theResult____h220847[37] ?
											     7'd26 :
											     (_theResult____h220847[36] ?
												7'd27 :
												(_theResult____h220847[35] ?
												   7'd28 :
												   (_theResult____h220847[34] ?
												      7'd29 :
												      (_theResult____h220847[33] ?
													 7'd30 :
													 (_theResult____h220847[32] ?
													    7'd31 :
													    (_theResult____h220847[31] ?
													       7'd32 :
													       (_theResult____h220847[30] ?
														  7'd33 :
														  (_theResult____h220847[29] ?
														     7'd34 :
														     (_theResult____h220847[28] ?
															7'd35 :
															(_theResult____h220847[27] ?
															   7'd36 :
															   (_theResult____h220847[26] ?
															      7'd37 :
															      (_theResult____h220847[25] ?
																 7'd38 :
																 (_theResult____h220847[24] ?
																    7'd39 :
																    (_theResult____h220847[23] ?
																       7'd40 :
																       (_theResult____h220847[22] ?
																	  7'd41 :
																	  (_theResult____h220847[21] ?
																	     7'd42 :
																	     (_theResult____h220847[20] ?
																		7'd43 :
																		(_theResult____h220847[19] ?
																		   7'd44 :
																		   (_theResult____h220847[18] ?
																		      7'd45 :
																		      (_theResult____h220847[17] ?
																			 7'd46 :
																			 (_theResult____h220847[16] ?
																			    7'd47 :
																			    (_theResult____h220847[15] ?
																			       7'd48 :
																			       (_theResult____h220847[14] ?
																				  7'd49 :
																				  (_theResult____h220847[13] ?
																				     7'd50 :
																				     (_theResult____h220847[12] ?
																					7'd51 :
																					(_theResult____h220847[11] ?
																					   7'd52 :
																					   (_theResult____h220847[10] ?
																					      7'd53 :
																					      (_theResult____h220847[9] ?
																						 7'd54 :
																						 (_theResult____h220847[8] ?
																						    7'd55 :
																						    (_theResult____h220847[7] ?
																						       7'd56 :
																						       (_theResult____h220847[6] ?
																							  7'd57 :
																							  (_theResult____h220847[5] ?
																							     7'd58 :
																							     (_theResult____h220847[4] ?
																								7'd59 :
																								(_theResult____h220847[3] ?
																								   7'd60 :
																								   (_theResult____h220847[2] ?
																								      7'd61 :
																								      (_theResult____h220847[1] ?
																									 7'd62 :
																									 (_theResult____h220847[0] ?
																									    7'd63 :
																									    7'd64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h245648 =
	     IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682[11] |
	     IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682[9] ;
  assign x__h247272 =
	     { condFlags32_arg_wget[69:62] == 8'd0 &&
	       condFlags32_arg_wget[92:70] != 23'd0,
	       condFlags32_arg_wget[92:70] == 23'd0 &&
	       condFlags32_arg_wget[69:62] == 8'd0,
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       condFlags32_argwget_BITS_92_TO_70__q49[22],
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       condFlags32_arg_wget[92:70] == 23'd0,
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       !condFlags32_argwget_BITS_92_TO_70__q49[22] &&
	       condFlags32_arg_wget[92:70] != 23'd0 } ;
  assign x__h247606 =
	     { condFlags32_arg_wget[38:31] == 8'd0 &&
	       condFlags32_arg_wget[61:39] != 23'd0,
	       condFlags32_arg_wget[61:39] == 23'd0 &&
	       condFlags32_arg_wget[38:31] == 8'd0,
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       condFlags32_argwget_BITS_61_TO_39__q50[22],
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       condFlags32_arg_wget[61:39] == 23'd0,
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       !condFlags32_argwget_BITS_61_TO_39__q50[22] &&
	       condFlags32_arg_wget[61:39] != 23'd0 } ;
  assign x__h247787 =
	     { condFlags32_arg_wget[7:0] == 8'd0 &&
	       condFlags32_arg_wget[30:8] != 23'd0,
	       condFlags32_arg_wget[30:8] == 23'd0 &&
	       condFlags32_arg_wget[7:0] == 8'd0,
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       condFlags32_argwget_BITS_30_TO_8__q51[22],
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       condFlags32_arg_wget[30:8] == 23'd0,
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       !condFlags32_argwget_BITS_30_TO_8__q51[22] &&
	       condFlags32_arg_wget[30:8] != 23'd0 } ;
  assign x__h248975 =
	     final_result__h248054[0] |
	     IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871[21] ;
  assign x__h249386 =
	     IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871[22] |
	     IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871[21] ;
  assign x__h250343 =
	     { condFlags64_arg_wget[136:126] == 11'd0 &&
	       condFlags64_arg_wget[188:137] != 52'd0,
	       condFlags64_arg_wget[188:137] == 52'd0 &&
	       condFlags64_arg_wget[136:126] == 11'd0,
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       condFlags64_argwget_BITS_188_TO_137__q27[51],
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       condFlags64_arg_wget[188:137] == 52'd0,
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       !condFlags64_argwget_BITS_188_TO_137__q27[51] &&
	       condFlags64_arg_wget[188:137] != 52'd0 } ;
  assign x__h250677 =
	     { condFlags64_arg_wget[73:63] == 11'd0 &&
	       condFlags64_arg_wget[125:74] != 52'd0,
	       condFlags64_arg_wget[125:74] == 52'd0 &&
	       condFlags64_arg_wget[73:63] == 11'd0,
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       condFlags64_argwget_BITS_125_TO_74__q28[51],
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       condFlags64_arg_wget[125:74] == 52'd0,
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       !condFlags64_argwget_BITS_125_TO_74__q28[51] &&
	       condFlags64_arg_wget[125:74] != 52'd0 } ;
  assign x__h250858 =
	     { condFlags64_arg_wget[10:0] == 11'd0 &&
	       condFlags64_arg_wget[62:11] != 52'd0,
	       condFlags64_arg_wget[62:11] == 52'd0 &&
	       condFlags64_arg_wget[10:0] == 11'd0,
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       condFlags64_argwget_BITS_62_TO_11__q29[51],
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       condFlags64_arg_wget[62:11] == 52'd0,
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       !condFlags64_argwget_BITS_62_TO_11__q29[51] &&
	       condFlags64_arg_wget[62:11] != 52'd0 } ;
  assign x__h251251 = lv_exp__h251115 - 12'd1023 ;
  assign x__h252050 =
	     final_result__h251126[0] |
	     IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038[50] ;
  assign x__h252459 =
	     IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038[51] |
	     IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038[50] ;
  assign x__h25409 = msb_zeros__h25343 - 6'd1 ;
  assign x__h25435 = { 4'd0, msb_zeros__h25343 } ;
  assign x__h254619 =
	     (setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
	      condFlags32_reswget_BITS_14_TO_10__q52[1]) ?
	       10'd1 :
	       ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
		 condFlags32_res_wget[14:10] == 5'd0) ?
		  10'd2 :
		  ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
		    condFlags32_reswget_BITS_14_TO_10__q52[4]) ?
		     10'd4 :
		     ((setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
		       condFlags32_reswget_BITS_14_TO_10__q52[3]) ?
			10'd8 :
			((!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
			  condFlags32_reswget_BITS_14_TO_10__q52[3]) ?
			   10'd16 :
			   ((!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
			     condFlags32_reswget_BITS_14_TO_10__q52[4]) ?
			      10'd32 :
			      ((!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
				condFlags32_res_wget[14:10] == 5'd0) ?
				 10'd64 :
				 ((!setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] &&
				   condFlags32_reswget_BITS_14_TO_10__q52[1]) ?
				    10'd128 :
				    (condFlags32_reswget_BITS_14_TO_10__q52[0] ?
				       10'd256 :
				       10'd512)))))))) ;
  assign x__h256096 =
	     (ff_input_D_OUT[208] &&
	      condFlags64_reswget_BITS_14_TO_10__q30[1]) ?
	       10'd1 :
	       ((ff_input_D_OUT[208] && condFlags64_res_wget[14:10] == 5'd0) ?
		  10'd2 :
		  ((ff_input_D_OUT[208] &&
		    condFlags64_reswget_BITS_14_TO_10__q30[4]) ?
		     10'd4 :
		     ((ff_input_D_OUT[208] &&
		       condFlags64_reswget_BITS_14_TO_10__q30[3]) ?
			10'd8 :
			((!ff_input_D_OUT[208] &&
			  condFlags64_reswget_BITS_14_TO_10__q30[3]) ?
			   10'd16 :
			   ((!ff_input_D_OUT[208] &&
			     condFlags64_reswget_BITS_14_TO_10__q30[4]) ?
			      10'd32 :
			      ((!ff_input_D_OUT[208] &&
				condFlags64_res_wget[14:10] == 5'd0) ?
				 10'd64 :
				 ((!ff_input_D_OUT[208] &&
				   condFlags64_reswget_BITS_14_TO_10__q30[1]) ?
				    10'd128 :
				    (condFlags64_reswget_BITS_14_TO_10__q30[0] ?
				       10'd256 :
				       10'd512)))))))) ;
  assign x__h258383 =
	     getMant32_reswget_BITS_68_TO_46__q47[22] ?
	       5'd0 :
	       (getMant32_reswget_BITS_68_TO_46__q47[21] ?
		  5'd1 :
		  (getMant32_reswget_BITS_68_TO_46__q47[20] ?
		     5'd2 :
		     (getMant32_reswget_BITS_68_TO_46__q47[19] ?
			5'd3 :
			(getMant32_reswget_BITS_68_TO_46__q47[18] ?
			   5'd4 :
			   (getMant32_reswget_BITS_68_TO_46__q47[17] ?
			      5'd5 :
			      (getMant32_reswget_BITS_68_TO_46__q47[16] ?
				 5'd6 :
				 (getMant32_reswget_BITS_68_TO_46__q47[15] ?
				    5'd7 :
				    (getMant32_reswget_BITS_68_TO_46__q47[14] ?
				       5'd8 :
				       (getMant32_reswget_BITS_68_TO_46__q47[13] ?
					  5'd9 :
					  (getMant32_reswget_BITS_68_TO_46__q47[12] ?
					     5'd10 :
					     (getMant32_reswget_BITS_68_TO_46__q47[11] ?
						5'd11 :
						(getMant32_reswget_BITS_68_TO_46__q47[10] ?
						   5'd12 :
						   (getMant32_reswget_BITS_68_TO_46__q47[9] ?
						      5'd13 :
						      (getMant32_reswget_BITS_68_TO_46__q47[8] ?
							 5'd14 :
							 (getMant32_reswget_BITS_68_TO_46__q47[7] ?
							    5'd15 :
							    (getMant32_reswget_BITS_68_TO_46__q47[6] ?
							       5'd16 :
							       (getMant32_reswget_BITS_68_TO_46__q47[5] ?
								  5'd17 :
								  (getMant32_reswget_BITS_68_TO_46__q47[4] ?
								     5'd18 :
								     (getMant32_reswget_BITS_68_TO_46__q47[3] ?
									5'd19 :
									(getMant32_reswget_BITS_68_TO_46__q47[2] ?
									   5'd20 :
									   (getMant32_reswget_BITS_68_TO_46__q47[1] ?
									      5'd21 :
									      (getMant32_reswget_BITS_68_TO_46__q47[0] ?
										 5'd22 :
										 5'd23)))))))))))))))))))))) ;
  assign x__h264405 = getExp64_res_wget[32:22] - 11'd896 ;
  assign x__h264734 =
	     IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313[24] |
	     lv_sticky__h264527 ;
  assign x__h264835 = x__h264837 | lv_sticky__h264527 ;
  assign x__h264837 =
	     IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313[25] |
	     IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313[24] ;
  assign x__h268167 =
	     { ~lv_op1_subnormal__h268105, getMant32_res_wget[68:46] } ;
  assign x__h268253 =
	     { ~lv_op2_subnormal__h268106, getMant32_res_wget[45:23] } ;
  assign x__h268368 = x__h268370 + y__h268371 ;
  assign x__h268370 = x__h268372 - 10'd127 ;
  assign x__h268372 = exp1_temp__h268114 + exp2_temp__h268115 ;
  assign x__h268423 =
	     lv_invalid__h248034 ||
	     IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d5215 ||
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[1]) &&
	     (condFlags32_reswget_BITS_14_TO_10__q52[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) ;
  assign x__h268686 =
	     !lv_invalid__h248034 &&
	     !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d5215 &&
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[1]) &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	     !condFlags32_reswget_BITS_9_TO_5__q53[3] ;
  assign x__h268692 =
	     !lv_invalid__h248034 &&
	     !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d5215 &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	     !condFlags32_reswget_BITS_9_TO_5__q53[1] &&
	     (condFlags32_reswget_BITS_14_TO_10__q52[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) ;
  assign x__h268749 =
	     (lv_invalid__h248034 ||
	      IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d5215) ?
	       quiet_nan_two__h268110 :
	       _theResult___fst__h268609 ;
  assign x__h268762 = condFlags32_reswget_BITS_14_TO_10__q52[2] & y__h268765 ;
  assign x__h268852 = lv_op1_subnormal__h268105 | lv_op2_subnormal__h268106 ;
  assign x__h270354 =
	     { ~lv_op1_subnormal__h270292, getMant64_res_wget[155:104] } ;
  assign x__h270440 =
	     { ~lv_op2_subnormal__h270293, getMant64_res_wget[103:52] } ;
  assign x__h270555 = x__h270557 + y__h270558 ;
  assign x__h270557 = x__h270559 - 13'd1023 ;
  assign x__h270559 = exp1_temp__h270301 + exp2_temp__h270302 ;
  assign x__h270606 =
	     lv_invalid__h251105 ||
	     IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d5292 ||
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[1]) &&
	     (condFlags64_reswget_BITS_14_TO_10__q30[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[3]) ;
  assign x__h270869 =
	     !lv_invalid__h251105 &&
	     !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d5292 &&
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[1]) &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	     !condFlags64_reswget_BITS_9_TO_5__q31[3] ;
  assign x__h270875 =
	     !lv_invalid__h251105 &&
	     !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d5292 &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	     !condFlags64_reswget_BITS_9_TO_5__q31[1] &&
	     (condFlags64_reswget_BITS_14_TO_10__q30[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[3]) ;
  assign x__h270931 =
	     (lv_invalid__h251105 ||
	      IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d5292) ?
	       quiet_nan_two__h270297 :
	       _theResult___fst__h270792 ;
  assign x__h270944 = condFlags64_reswget_BITS_14_TO_10__q30[2] & y__h270947 ;
  assign x__h271034 = lv_op1_subnormal__h270292 | lv_op2_subnormal__h270293 ;
  assign x__h274242 = exp1__h274178 + y__h274244 ;
  assign x__h274249 =
	     (~condFlags32_reswget_BITS_14_TO_10__q52[4]) ?
	       5'd0 :
	       (getMant32_reswget_BITS_68_TO_46__q47[22] ?
		  5'd1 :
		  (getMant32_reswget_BITS_68_TO_46__q47[21] ?
		     5'd2 :
		     (getMant32_reswget_BITS_68_TO_46__q47[20] ?
			5'd3 :
			(getMant32_reswget_BITS_68_TO_46__q47[19] ?
			   5'd4 :
			   (getMant32_reswget_BITS_68_TO_46__q47[18] ?
			      5'd5 :
			      (getMant32_reswget_BITS_68_TO_46__q47[17] ?
				 5'd6 :
				 (getMant32_reswget_BITS_68_TO_46__q47[16] ?
				    5'd7 :
				    (getMant32_reswget_BITS_68_TO_46__q47[15] ?
				       5'd8 :
				       (getMant32_reswget_BITS_68_TO_46__q47[14] ?
					  5'd9 :
					  (getMant32_reswget_BITS_68_TO_46__q47[13] ?
					     5'd10 :
					     (getMant32_reswget_BITS_68_TO_46__q47[12] ?
						5'd11 :
						(getMant32_reswget_BITS_68_TO_46__q47[11] ?
						   5'd12 :
						   (getMant32_reswget_BITS_68_TO_46__q47[10] ?
						      5'd13 :
						      (getMant32_reswget_BITS_68_TO_46__q47[9] ?
							 5'd14 :
							 (getMant32_reswget_BITS_68_TO_46__q47[8] ?
							    5'd15 :
							    (getMant32_reswget_BITS_68_TO_46__q47[7] ?
							       5'd16 :
							       (getMant32_reswget_BITS_68_TO_46__q47[6] ?
								  5'd17 :
								  (getMant32_reswget_BITS_68_TO_46__q47[5] ?
								     5'd18 :
								     (getMant32_reswget_BITS_68_TO_46__q47[4] ?
									5'd19 :
									(getMant32_reswget_BITS_68_TO_46__q47[3] ?
									   5'd20 :
									   (getMant32_reswget_BITS_68_TO_46__q47[2] ?
									      5'd21 :
									      (getMant32_reswget_BITS_68_TO_46__q47[1] ?
										 5'd22 :
										 (getMant32_reswget_BITS_68_TO_46__q47[0] ?
										    5'd23 :
										    5'd24))))))))))))))))))))))) ;
  assign x__h278168 =
	     (~condFlags32_reswget_BITS_9_TO_5__q53[4]) ?
	       5'd0 :
	       (getMant32_reswget_BITS_45_TO_23__q55[22] ?
		  5'd1 :
		  (getMant32_reswget_BITS_45_TO_23__q55[21] ?
		     5'd2 :
		     (getMant32_reswget_BITS_45_TO_23__q55[20] ?
			5'd3 :
			(getMant32_reswget_BITS_45_TO_23__q55[19] ?
			   5'd4 :
			   (getMant32_reswget_BITS_45_TO_23__q55[18] ?
			      5'd5 :
			      (getMant32_reswget_BITS_45_TO_23__q55[17] ?
				 5'd6 :
				 (getMant32_reswget_BITS_45_TO_23__q55[16] ?
				    5'd7 :
				    (getMant32_reswget_BITS_45_TO_23__q55[15] ?
				       5'd8 :
				       (getMant32_reswget_BITS_45_TO_23__q55[14] ?
					  5'd9 :
					  (getMant32_reswget_BITS_45_TO_23__q55[13] ?
					     5'd10 :
					     (getMant32_reswget_BITS_45_TO_23__q55[12] ?
						5'd11 :
						(getMant32_reswget_BITS_45_TO_23__q55[11] ?
						   5'd12 :
						   (getMant32_reswget_BITS_45_TO_23__q55[10] ?
						      5'd13 :
						      (getMant32_reswget_BITS_45_TO_23__q55[9] ?
							 5'd14 :
							 (getMant32_reswget_BITS_45_TO_23__q55[8] ?
							    5'd15 :
							    (getMant32_reswget_BITS_45_TO_23__q55[7] ?
							       5'd16 :
							       (getMant32_reswget_BITS_45_TO_23__q55[6] ?
								  5'd17 :
								  (getMant32_reswget_BITS_45_TO_23__q55[5] ?
								     5'd18 :
								     (getMant32_reswget_BITS_45_TO_23__q55[4] ?
									5'd19 :
									(getMant32_reswget_BITS_45_TO_23__q55[3] ?
									   5'd20 :
									   (getMant32_reswget_BITS_45_TO_23__q55[2] ?
									      5'd21 :
									      (getMant32_reswget_BITS_45_TO_23__q55[1] ?
										 5'd22 :
										 (getMant32_reswget_BITS_45_TO_23__q55[0] ?
										    5'd23 :
										    5'd24))))))))))))))))))))))) ;
  assign x__h282084 = man1__h274170 << x__h274249 ;
  assign x__h282112 = man2__h274171 << x__h278168 ;
  assign x__h282142 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ^
	     setCanonicalNaN_reswget_BITS_63_TO_32__q42[31] ;
  assign x__h282206 =
	     !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 &&
	     !lv_op2_Nan__h225899 &&
	     (!condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      !condFlags32_reswget_BITS_9_TO_5__q53[1]) &&
	     (!condFlags32_reswget_BITS_14_TO_10__q52[3] ||
	      !condFlags32_reswget_BITS_9_TO_5__q53[3]) &&
	     (condFlags32_reswget_BITS_14_TO_10__q52[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q53[3]) ;
  assign x__h282220 =
	     !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 &&
	     !lv_op2_Nan__h225899 &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	     condFlags32_reswget_BITS_9_TO_5__q53[3] ;
  assign x__h282225 =
	     !IF_condFlags32_res_whas__343_THEN_condFlags32__ETC___d3349 &&
	     !lv_op2_Nan__h225899 &&
	     !condFlags32_reswget_BITS_14_TO_10__q52[1] &&
	     !condFlags32_reswget_BITS_9_TO_5__q53[3] &&
	     (condFlags32_reswget_BITS_9_TO_5__q53[1] ||
	      condFlags32_reswget_BITS_14_TO_10__q52[3]) ;
  assign x__h284244 = exp1__h284180 + y__h284246 ;
  assign x__h284251 =
	     (~condFlags64_reswget_BITS_14_TO_10__q30[4]) ?
	       6'd0 :
	       (getMant64_reswget_BITS_155_TO_104__q25[51] ?
		  6'd1 :
		  (getMant64_reswget_BITS_155_TO_104__q25[50] ?
		     6'd2 :
		     (getMant64_reswget_BITS_155_TO_104__q25[49] ?
			6'd3 :
			(getMant64_reswget_BITS_155_TO_104__q25[48] ?
			   6'd4 :
			   (getMant64_reswget_BITS_155_TO_104__q25[47] ?
			      6'd5 :
			      (getMant64_reswget_BITS_155_TO_104__q25[46] ?
				 6'd6 :
				 (getMant64_reswget_BITS_155_TO_104__q25[45] ?
				    6'd7 :
				    (getMant64_reswget_BITS_155_TO_104__q25[44] ?
				       6'd8 :
				       (getMant64_reswget_BITS_155_TO_104__q25[43] ?
					  6'd9 :
					  (getMant64_reswget_BITS_155_TO_104__q25[42] ?
					     6'd10 :
					     (getMant64_reswget_BITS_155_TO_104__q25[41] ?
						6'd11 :
						(getMant64_reswget_BITS_155_TO_104__q25[40] ?
						   6'd12 :
						   (getMant64_reswget_BITS_155_TO_104__q25[39] ?
						      6'd13 :
						      (getMant64_reswget_BITS_155_TO_104__q25[38] ?
							 6'd14 :
							 (getMant64_reswget_BITS_155_TO_104__q25[37] ?
							    6'd15 :
							    (getMant64_reswget_BITS_155_TO_104__q25[36] ?
							       6'd16 :
							       (getMant64_reswget_BITS_155_TO_104__q25[35] ?
								  6'd17 :
								  (getMant64_reswget_BITS_155_TO_104__q25[34] ?
								     6'd18 :
								     (getMant64_reswget_BITS_155_TO_104__q25[33] ?
									6'd19 :
									(getMant64_reswget_BITS_155_TO_104__q25[32] ?
									   6'd20 :
									   (getMant64_reswget_BITS_155_TO_104__q25[31] ?
									      6'd21 :
									      (getMant64_reswget_BITS_155_TO_104__q25[30] ?
										 6'd22 :
										 (getMant64_reswget_BITS_155_TO_104__q25[29] ?
										    6'd23 :
										    (getMant64_reswget_BITS_155_TO_104__q25[28] ?
										       6'd24 :
										       (getMant64_reswget_BITS_155_TO_104__q25[27] ?
											  6'd25 :
											  (getMant64_reswget_BITS_155_TO_104__q25[26] ?
											     6'd26 :
											     (getMant64_reswget_BITS_155_TO_104__q25[25] ?
												6'd27 :
												(getMant64_reswget_BITS_155_TO_104__q25[24] ?
												   6'd28 :
												   (getMant64_reswget_BITS_155_TO_104__q25[23] ?
												      6'd29 :
												      (getMant64_reswget_BITS_155_TO_104__q25[22] ?
													 6'd30 :
													 (getMant64_reswget_BITS_155_TO_104__q25[21] ?
													    6'd31 :
													    (getMant64_reswget_BITS_155_TO_104__q25[20] ?
													       6'd32 :
													       (getMant64_reswget_BITS_155_TO_104__q25[19] ?
														  6'd33 :
														  (getMant64_reswget_BITS_155_TO_104__q25[18] ?
														     6'd34 :
														     (getMant64_reswget_BITS_155_TO_104__q25[17] ?
															6'd35 :
															(getMant64_reswget_BITS_155_TO_104__q25[16] ?
															   6'd36 :
															   (getMant64_reswget_BITS_155_TO_104__q25[15] ?
															      6'd37 :
															      (getMant64_reswget_BITS_155_TO_104__q25[14] ?
																 6'd38 :
																 (getMant64_reswget_BITS_155_TO_104__q25[13] ?
																    6'd39 :
																    (getMant64_reswget_BITS_155_TO_104__q25[12] ?
																       6'd40 :
																       (getMant64_reswget_BITS_155_TO_104__q25[11] ?
																	  6'd41 :
																	  (getMant64_reswget_BITS_155_TO_104__q25[10] ?
																	     6'd42 :
																	     (getMant64_reswget_BITS_155_TO_104__q25[9] ?
																		6'd43 :
																		(getMant64_reswget_BITS_155_TO_104__q25[8] ?
																		   6'd44 :
																		   (getMant64_reswget_BITS_155_TO_104__q25[7] ?
																		      6'd45 :
																		      (getMant64_reswget_BITS_155_TO_104__q25[6] ?
																			 6'd46 :
																			 (getMant64_reswget_BITS_155_TO_104__q25[5] ?
																			    6'd47 :
																			    (getMant64_reswget_BITS_155_TO_104__q25[4] ?
																			       6'd48 :
																			       (getMant64_reswget_BITS_155_TO_104__q25[3] ?
																				  6'd49 :
																				  (getMant64_reswget_BITS_155_TO_104__q25[2] ?
																				     6'd50 :
																				     (getMant64_reswget_BITS_155_TO_104__q25[1] ?
																					6'd51 :
																					(getMant64_reswget_BITS_155_TO_104__q25[0] ?
																					   6'd52 :
																					   6'd53)))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h292839 =
	     (~condFlags64_reswget_BITS_9_TO_5__q31[4]) ?
	       6'd0 :
	       (getMant64_reswget_BITS_103_TO_52__q33[51] ?
		  6'd1 :
		  (getMant64_reswget_BITS_103_TO_52__q33[50] ?
		     6'd2 :
		     (getMant64_reswget_BITS_103_TO_52__q33[49] ?
			6'd3 :
			(getMant64_reswget_BITS_103_TO_52__q33[48] ?
			   6'd4 :
			   (getMant64_reswget_BITS_103_TO_52__q33[47] ?
			      6'd5 :
			      (getMant64_reswget_BITS_103_TO_52__q33[46] ?
				 6'd6 :
				 (getMant64_reswget_BITS_103_TO_52__q33[45] ?
				    6'd7 :
				    (getMant64_reswget_BITS_103_TO_52__q33[44] ?
				       6'd8 :
				       (getMant64_reswget_BITS_103_TO_52__q33[43] ?
					  6'd9 :
					  (getMant64_reswget_BITS_103_TO_52__q33[42] ?
					     6'd10 :
					     (getMant64_reswget_BITS_103_TO_52__q33[41] ?
						6'd11 :
						(getMant64_reswget_BITS_103_TO_52__q33[40] ?
						   6'd12 :
						   (getMant64_reswget_BITS_103_TO_52__q33[39] ?
						      6'd13 :
						      (getMant64_reswget_BITS_103_TO_52__q33[38] ?
							 6'd14 :
							 (getMant64_reswget_BITS_103_TO_52__q33[37] ?
							    6'd15 :
							    (getMant64_reswget_BITS_103_TO_52__q33[36] ?
							       6'd16 :
							       (getMant64_reswget_BITS_103_TO_52__q33[35] ?
								  6'd17 :
								  (getMant64_reswget_BITS_103_TO_52__q33[34] ?
								     6'd18 :
								     (getMant64_reswget_BITS_103_TO_52__q33[33] ?
									6'd19 :
									(getMant64_reswget_BITS_103_TO_52__q33[32] ?
									   6'd20 :
									   (getMant64_reswget_BITS_103_TO_52__q33[31] ?
									      6'd21 :
									      (getMant64_reswget_BITS_103_TO_52__q33[30] ?
										 6'd22 :
										 (getMant64_reswget_BITS_103_TO_52__q33[29] ?
										    6'd23 :
										    (getMant64_reswget_BITS_103_TO_52__q33[28] ?
										       6'd24 :
										       (getMant64_reswget_BITS_103_TO_52__q33[27] ?
											  6'd25 :
											  (getMant64_reswget_BITS_103_TO_52__q33[26] ?
											     6'd26 :
											     (getMant64_reswget_BITS_103_TO_52__q33[25] ?
												6'd27 :
												(getMant64_reswget_BITS_103_TO_52__q33[24] ?
												   6'd28 :
												   (getMant64_reswget_BITS_103_TO_52__q33[23] ?
												      6'd29 :
												      (getMant64_reswget_BITS_103_TO_52__q33[22] ?
													 6'd30 :
													 (getMant64_reswget_BITS_103_TO_52__q33[21] ?
													    6'd31 :
													    (getMant64_reswget_BITS_103_TO_52__q33[20] ?
													       6'd32 :
													       (getMant64_reswget_BITS_103_TO_52__q33[19] ?
														  6'd33 :
														  (getMant64_reswget_BITS_103_TO_52__q33[18] ?
														     6'd34 :
														     (getMant64_reswget_BITS_103_TO_52__q33[17] ?
															6'd35 :
															(getMant64_reswget_BITS_103_TO_52__q33[16] ?
															   6'd36 :
															   (getMant64_reswget_BITS_103_TO_52__q33[15] ?
															      6'd37 :
															      (getMant64_reswget_BITS_103_TO_52__q33[14] ?
																 6'd38 :
																 (getMant64_reswget_BITS_103_TO_52__q33[13] ?
																    6'd39 :
																    (getMant64_reswget_BITS_103_TO_52__q33[12] ?
																       6'd40 :
																       (getMant64_reswget_BITS_103_TO_52__q33[11] ?
																	  6'd41 :
																	  (getMant64_reswget_BITS_103_TO_52__q33[10] ?
																	     6'd42 :
																	     (getMant64_reswget_BITS_103_TO_52__q33[9] ?
																		6'd43 :
																		(getMant64_reswget_BITS_103_TO_52__q33[8] ?
																		   6'd44 :
																		   (getMant64_reswget_BITS_103_TO_52__q33[7] ?
																		      6'd45 :
																		      (getMant64_reswget_BITS_103_TO_52__q33[6] ?
																			 6'd46 :
																			 (getMant64_reswget_BITS_103_TO_52__q33[5] ?
																			    6'd47 :
																			    (getMant64_reswget_BITS_103_TO_52__q33[4] ?
																			       6'd48 :
																			       (getMant64_reswget_BITS_103_TO_52__q33[3] ?
																				  6'd49 :
																				  (getMant64_reswget_BITS_103_TO_52__q33[2] ?
																				     6'd50 :
																				     (getMant64_reswget_BITS_103_TO_52__q33[1] ?
																					6'd51 :
																					(getMant64_reswget_BITS_103_TO_52__q33[0] ?
																					   6'd52 :
																					   6'd53)))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h29991 =
	     (!inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) &&
	     (!inst_spfm_add_sub_ff_input_register[2] ||
	      !(x__h30022 ^ inst_spfm_add_sub_ff_input_register[5])) ;
  assign x__h30022 =
	     inst_spfm_add_sub_ff_input_register[49] ^
	     inst_spfm_add_sub_ff_input_register[48] ;
  assign x__h30052 =
	     inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460 &&
	     (!inst_spfm_add_sub_ff_input_register[107] ||
	      inst_spfm_add_sub_ff_input_register[59:50] != 10'd254) &&
	     (inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d459 ^
	      10'h200) <
	     10'd361 &&
	     (!inst_spfm_add_sub_ff_input_register[2] ||
	      inst_spfm_add_sub_ff_input_register[12] ||
	      inst_spfm_add_sub_ff_input_register[13]) &&
	     !inst_spfm_add_sub_ff_input_register[14] ;
  assign x__h301424 = man1__h284172 << x__h284251 ;
  assign x__h301452 = man2__h284173 << x__h292839 ;
  assign x__h301534 =
	     !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 &&
	     !lv_op2_Nan__h228478 &&
	     (!condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      !condFlags64_reswget_BITS_9_TO_5__q31[1]) &&
	     (!condFlags64_reswget_BITS_14_TO_10__q30[3] ||
	      !condFlags64_reswget_BITS_9_TO_5__q31[3]) &&
	     (condFlags64_reswget_BITS_14_TO_10__q30[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q31[3]) ;
  assign x__h301548 =
	     !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 &&
	     !lv_op2_Nan__h228478 &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	     condFlags64_reswget_BITS_9_TO_5__q31[3] ;
  assign x__h301553 =
	     !IF_condFlags64_res_whas__428_THEN_condFlags64__ETC___d3434 &&
	     !lv_op2_Nan__h228478 &&
	     !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	     !condFlags64_reswget_BITS_9_TO_5__q31[3] &&
	     (condFlags64_reswget_BITS_9_TO_5__q31[1] ||
	      condFlags64_reswget_BITS_14_TO_10__q30[3]) ;
  assign x__h30400 = x__h30412 | y__h30413 ;
  assign x__h30412 = _theResult_____1__h30294 & sign2__h30246 ;
  assign x__h304746 =
	     condFlags32_reswget_BITS_14_TO_10__q52[4] ?
	       exponent___1__h304775 :
	       exponent__h304189 ;
  assign x__h304777 = { 3'd0, lv_leading_zeros__h304194 } ;
  assign x__h313193 = lv_leading_zeros__h304194 - 6'd1 ;
  assign x__h313219 =
	     { IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58[24:0],
	       1'd0 } ;
  assign x__h313463 = x__h313465 + 9'd63 ;
  assign x__h313465 =
	     { 1'd0,
	       IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5806[8:1] } ;
  assign x__h315336 =
	     condFlags64_reswget_BITS_14_TO_10__q30[4] ?
	       exponent___1__h315365 :
	       lv_exp__h251115 ;
  assign x__h315367 = { 5'd0, lv_leading_zeros__h314785 } ;
  assign x__h333121 = lv_leading_zeros__h314785 - 7'd1 ;
  assign x__h333147 =
	     { IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q37[53:0],
	       1'd0 } ;
  assign x__h333391 = x__h333393 + 12'd511 ;
  assign x__h333393 =
	     { 1'd0,
	       IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5982[11:1] } ;
  assign x__h342352 = ff_input_D_OUT[13] ^ ff_input_D_OUT[14] ;
  assign x__h46564 =
	     mantissa_to_shift__h30283[0] ?
	       7'd0 :
	       (mantissa_to_shift__h30283[1] ?
		  7'd1 :
		  (mantissa_to_shift__h30283[2] ?
		     7'd2 :
		     (mantissa_to_shift__h30283[3] ?
			7'd3 :
			(mantissa_to_shift__h30283[4] ?
			   7'd4 :
			   (mantissa_to_shift__h30283[5] ?
			      7'd5 :
			      (mantissa_to_shift__h30283[6] ?
				 7'd6 :
				 (mantissa_to_shift__h30283[7] ?
				    7'd7 :
				    (mantissa_to_shift__h30283[8] ?
				       7'd8 :
				       (mantissa_to_shift__h30283[9] ?
					  7'd9 :
					  (mantissa_to_shift__h30283[10] ?
					     7'd10 :
					     (mantissa_to_shift__h30283[11] ?
						7'd11 :
						(mantissa_to_shift__h30283[12] ?
						   7'd12 :
						   (mantissa_to_shift__h30283[13] ?
						      7'd13 :
						      (mantissa_to_shift__h30283[14] ?
							 7'd14 :
							 (mantissa_to_shift__h30283[15] ?
							    7'd15 :
							    (mantissa_to_shift__h30283[16] ?
							       7'd16 :
							       (mantissa_to_shift__h30283[17] ?
								  7'd17 :
								  (mantissa_to_shift__h30283[18] ?
								     7'd18 :
								     (mantissa_to_shift__h30283[19] ?
									7'd19 :
									(mantissa_to_shift__h30283[20] ?
									   7'd20 :
									   (mantissa_to_shift__h30283[21] ?
									      7'd21 :
									      (mantissa_to_shift__h30283[22] ?
										 7'd22 :
										 (mantissa_to_shift__h30283[23] ?
										    7'd23 :
										    (mantissa_to_shift__h30283[24] ?
										       7'd24 :
										       (mantissa_to_shift__h30283[25] ?
											  7'd25 :
											  (mantissa_to_shift__h30283[26] ?
											     7'd26 :
											     (mantissa_to_shift__h30283[27] ?
												7'd27 :
												(mantissa_to_shift__h30283[28] ?
												   7'd28 :
												   (mantissa_to_shift__h30283[29] ?
												      7'd29 :
												      (mantissa_to_shift__h30283[30] ?
													 7'd30 :
													 (mantissa_to_shift__h30283[31] ?
													    7'd31 :
													    (mantissa_to_shift__h30283[32] ?
													       7'd32 :
													       (mantissa_to_shift__h30283[33] ?
														  7'd33 :
														  (mantissa_to_shift__h30283[34] ?
														     7'd34 :
														     (mantissa_to_shift__h30283[35] ?
															7'd35 :
															(mantissa_to_shift__h30283[36] ?
															   7'd36 :
															   (mantissa_to_shift__h30283[37] ?
															      7'd37 :
															      (mantissa_to_shift__h30283[38] ?
																 7'd38 :
																 (mantissa_to_shift__h30283[39] ?
																    7'd39 :
																    (mantissa_to_shift__h30283[40] ?
																       7'd40 :
																       (mantissa_to_shift__h30283[41] ?
																	  7'd41 :
																	  (mantissa_to_shift__h30283[42] ?
																	     7'd42 :
																	     (mantissa_to_shift__h30283[43] ?
																		7'd43 :
																		(mantissa_to_shift__h30283[44] ?
																		   7'd44 :
																		   (mantissa_to_shift__h30283[45] ?
																		      7'd45 :
																		      (mantissa_to_shift__h30283[46] ?
																			 7'd46 :
																			 (mantissa_to_shift__h30283[47] ?
																			    7'd47 :
																			    (mantissa_to_shift__h30283[48] ?
																			       7'd48 :
																			       (mantissa_to_shift__h30283[49] ?
																				  7'd49 :
																				  (mantissa_to_shift__h30283[50] ?
																				     7'd50 :
																				     (mantissa_to_shift__h30283[51] ?
																					7'd51 :
																					(mantissa_to_shift__h30283[52] ?
																					   7'd52 :
																					   (mantissa_to_shift__h30283[53] ?
																					      7'd53 :
																					      (mantissa_to_shift__h30283[54] ?
																						 7'd54 :
																						 (mantissa_to_shift__h30283[55] ?
																						    7'd55 :
																						    (mantissa_to_shift__h30283[56] ?
																						       7'd56 :
																						       (mantissa_to_shift__h30283[57] ?
																							  7'd57 :
																							  (mantissa_to_shift__h30283[58] ?
																							     7'd58 :
																							     (mantissa_to_shift__h30283[59] ?
																								7'd59 :
																								(mantissa_to_shift__h30283[60] ?
																								   7'd60 :
																								   (mantissa_to_shift__h30283[61] ?
																								      7'd61 :
																								      (mantissa_to_shift__h30283[62] ?
																									 7'd62 :
																									 (mantissa_to_shift__h30283[63] ?
																									    7'd63 :
																									    (mantissa_to_shift__h30283[64] ?
																									       7'd64 :
																									       (mantissa_to_shift__h30283[65] ?
																										  7'd65 :
																										  (mantissa_to_shift__h30283[66] ?
																										     7'd66 :
																										     (mantissa_to_shift__h30283[67] ?
																											7'd67 :
																											(mantissa_to_shift__h30283[68] ?
																											   7'd68 :
																											   (mantissa_to_shift__h30283[69] ?
																											      7'd69 :
																											      (mantissa_to_shift__h30283[70] ?
																												 7'd70 :
																												 (mantissa_to_shift__h30283[71] ?
																												    7'd71 :
																												    (mantissa_to_shift__h30283[72] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h53130 = ~_theResult_____1__h30294 ;
  assign x__h53137 =
	     inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 ||
	     inst_spfm_add_sub_ff_stage2[6] ||
	     (!inst_spfm_add_sub_ff_stage2[16] ||
	      !inst_spfm_add_sub_ff_stage2[5]) &&
	     inst_spfm_add_sub_ff_stage2[4] &&
	     inst_spfm_add_sub_ff_stage2[14] &&
	     x__h53245 ;
  assign x__h53245 = sign2__h30246 ^ op_xor_sign3__h30259 ;
  assign x__h53253 =
	     (inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 ||
	      inst_spfm_add_sub_ff_stage2[6] ||
	      inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       2'd0 :
	       _theResult_____6_snd_snd__h53210 ;
  assign x__h53285 = x__h53287 & sign2__h30246 ;
  assign x__h53287 = inst_spfm_add_sub_ff_stage2[4] & y__h53288 ;
  assign x__h53289 = x__h53290 & inst_spfm_add_sub_ff_stage2[14] ;
  assign x__h53290 = ~inst_spfm_add_sub_ff_stage2[4] ;
  assign x__h53294 =
	     (inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 ||
	      inst_spfm_add_sub_ff_stage2[6]) ?
	       2'd0 :
	       _theResult_____6_snd_snd_snd__h53257 ;
  assign x__h53318 = x__h53330 & y__h53331 ;
  assign x__h53330 =
	     (inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 ||
	      inst_spfm_add_sub_ff_stage2[6] ||
	      inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       inst_spfm_add_sub_ff_stage2[1] :
	       _theResult_____6_fst__h53207 ;
  assign x__h53360 =
	     (inst_spfm_add_sub_ff_stage2[1] ||
	      !inst_spfm_add_sub_ff_stage2[6]) &&
	     inst_spfm_add_sub_ff_stage2[15] ;
  assign x__h53553 =
	     (_theResult____h53476 == 73'd0) ?
	       ((inst_spfm_add_sub_ff_stage4[12:10] == 3'b010) ?
		  2'b11 :
		  2'b01) :
	       2'd0 ;
  assign x__h5456 = { _denominator__h5391, 2'b0, _numerator__h5392, 27'd0 } ;
  assign x__h66087 = inst_spfm_add_sub_ff_stage5[6:0] - 7'd1 ;
  assign x__h66108 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[48] |
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[46] ;
  assign x__h66190 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[47] |
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[46] ;
  assign x__h71463 =
	     { _denominator__h71398, 2'b0, _numerator__h71399, 56'd0 } ;
  assign x__h87307 =
	     inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447 &&
	     inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1448 ;
  assign x__h87312 =
	     (!inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447 ||
	      inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1448 ||
	      _1_MINUS_inst_dpfpu_divider_rg_stage2_444_BITS__ETC___d1450) ?
	       x_wget__h66729[0] :
	       lv_sticky___1__h73050 ;
  assign x__h87541 = _theResult____h87379 | inst_dpfpu_divider_rg_stage3[85] ;
  assign x__h87691 = inst_dpfpu_divider_rg_stage3[84] | _theResult____h87379 ;
  assign x__h87726 = x__h87728 | _theResult____h87379 ;
  assign x__h87728 =
	     inst_dpfpu_divider_rg_stage3[85] |
	     inst_dpfpu_divider_rg_stage3[84] ;
  assign x__h89263 =
	     { inst_dpfpu_sqrt_rg_inter_stage[182:130],
	       !_theResult____h89217[57],
	       1'd0 } ;
  assign x__h89526 =
	     { inst_dpfpu_sqrt_rg_inter_stage[56:3],
	       !_theResult____h89217[57] } ;
  assign x__h89924 =
	     inst_dpfpu_sqrt_rg_inter_stage[131] | !_theResult____h89217[57] ;
  assign x__h89965 =
	     _theResult____h89217[57] ?
	       lv_remainder__h89987 :
	       _theResult____h89217 ;
  assign x__h90039 =
	     inst_dpfpu_sqrt_rg_inter_stage[130] | !_theResult____h89217[57] ;
  assign x_data__h225919 =
	     ff_input_D_OUT[8] ?
	       { 32'hFFFFFFFF, _theResult_____3_snd__h226597 } :
	       { 32'd0, _theResult_____3_snd__h225975 } ;
  assign x_data__h228497 =
	     ff_input_D_OUT[8] ?
	       _theResult_____3_snd__h229144 :
	       _theResult_____3_snd__h228528 ;
  assign x_data__h229480 =
	     { 32'hFFFFFFFF, x1_avValue_final_result__h220740 } ;
  assign x_data__h229636 =
	     (ff_input_D_OUT[208:145] == 64'd0 && ff_input_D_OUT[2] ||
	      ff_input_D_OUT[176:145] == 32'd0 && !ff_input_D_OUT[2]) ?
	       64'b0 :
	       _theResult___snd_final_result__h220855 ;
  assign x_data__h245809 =
	     { 32'hFFFFFFFF, x1_avValue_final_result__h245798 } ;
  assign x_data__h246113 =
	     { CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q7,
	       ff_input_D_OUT[207:145] } ;
  assign x_data__h248077 =
	     (!condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	      NOT_IF_condFlags32_res_whas__343_THEN_condFlag_ETC___d3844) ?
	       _theResult_____3_snd_snd_fst__h248640 :
	       final_result__h248054 ;
  assign x_data__h251149 =
	     (!condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	      NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d4012) ?
	       _theResult_____3_snd_snd_fst__h251715 :
	       final_result__h251126 ;
  assign x_data__h258075 =
	     condFlags32_reswget_BITS_14_TO_10__q52[3] ?
	       { setCanonicalNaN_reswget_BITS_95_TO_64__q41[31], 63'b0 } :
	       IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d4426 ;
  assign x_data__h265273 =
	     { 32'hFFFFFFFF,
	       condFlags64_reswget_BITS_14_TO_10__q30[3] ?
		 { ff_input_D_OUT[208], 31'b0 } :
		 IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4363 } ;
  assign x_data__h265345 =
	     (ff_input_D_OUT[12:6] == 7'b1110000) ?
	       final_result__h265349 :
	       final_result__h265372 ;
  assign x_data__h344813 =
	     { 32'hFFFFFFFF, inst_spfpu_divider_wr_final_out_wget[36:5] } ;
  assign x_data__h344937 =
	     { 32'hFFFFFFFF, inst_spfpu_sqrt_ff_final_out[36:5] } ;
  assign x_data__h345052 =
	     { 32'hFFFFFFFF, inst_spfm_add_sub_ff_final_out_wget[36:5] } ;
  assign x_fflags__h225921 =
	     ff_input_D_OUT[8] ?
	       _theResult_____3_fst__h226596 :
	       _theResult_____3_fst__h225974 ;
  assign x_fflags__h228499 =
	     ff_input_D_OUT[8] ?
	       _theResult_____3_fst__h229143 :
	       _theResult_____3_fst__h228527 ;
  assign x_fflags__h229482 =
	     (ff_input_D_OUT[208:145] == 64'd0 && ff_input_D_OUT[2] ||
	      ff_input_D_OUT[176:145] == 32'd0 && !ff_input_D_OUT[2]) ?
	       5'b0 :
	       x1_avValue_fflags__h220733 ;
  assign x_fflags__h229638 =
	     (ff_input_D_OUT[208:145] == 64'd0 || !ff_input_D_OUT[2]) ?
	       5'b0 :
	       wr_final_out_fflags__h220854 ;
  assign x_fflags__h258077 =
	     condFlags32_reswget_BITS_14_TO_10__q52[3] ?
	       5'b0 :
	       ((condFlags32_reswget_BITS_14_TO_10__q52[2] ||
		 condFlags32_reswget_BITS_14_TO_10__q52[0]) ?
		  result__h258191 :
		  5'd0) ;
  assign x_fflags__h265275 =
	     condFlags64_reswget_BITS_14_TO_10__q30[3] ?
	       5'b0 :
	       ((condFlags64_reswget_BITS_14_TO_10__q30[2] ||
		 condFlags64_reswget_BITS_14_TO_10__q30[0]) ?
		  result__h263874 :
		  IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4442) ;
  assign x_lv_exponent__h6909 =
	     (inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 &&
	      NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d246) ?
	       10'd0 :
	       _theResult___snd_fst__h14021 ;
  assign x_lv_exponent__h72916 =
	     (inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447 &&
	      NOT_inst_dpfpu_divider_rg_stage2_444_BITS_21_T_ETC___d1649) ?
	       13'd0 :
	       _theResult___snd_fst__h87249 ;
  assign x_lv_product_exponent__h17305 =
	     (!inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) ?
	       inst_spfm_add_sub_ff_input_register[59:50] :
	       _theResult___fst__h25355 ;
  assign x_lv_product_exponent__h90528 =
	     (!inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1863 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) ?
	       inst_dpfm_add_sub_ff_input_register[94:82] :
	       _theResult___fst__h107916 ;
  assign x_lv_product_mantissa__h17306 =
	     (!inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) ?
	       lv_product_mantissa__h17229 :
	       _theResult___snd_fst__h25440 ;
  assign x_lv_product_mantissa__h90529 =
	     (!inst_dpfm_add_sub_ff_input_register_read__858__ETC___d1863 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) ?
	       lv_product_mantissa__h90452 :
	       _theResult___snd_fst__h108001 ;
  assign x_lv_quotient__h6908 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 ?
	       _theResult___fst__h7006 :
	       x_wget__h695[26:0] ;
  assign x_lv_quotient__h72915 =
	     inst_dpfpu_divider_rg_stage2_444_BITS_21_TO_9__ETC___d1447 ?
	       _theResult___fst__h73013 :
	       x_wget__h66729[55:0] ;
  assign x_wget__h195058 =
	     { fflags__h203888,
	       !inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20[31],
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5139[23] ?
		 local_expo___1__h209582 :
		 expo__h203873,
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5139[22:0] } ;
  assign x_wget__h195196 =
	     { fflags__h209760,
	       !inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21[63],
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5015[23] ?
		 local_expo___1__h220657 :
		 expo__h209745,
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5015[22:0] } ;
  assign x_wget__h66729 =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q14[169:114],
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1401 } ;
  assign x_wget__h695 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q8[82:56],
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d85 } ;
  assign y__h107995 = x__h107996 - 13'd1 ;
  assign y__h118136 = x__h167388 & op_xor_sign3__h117982 ;
  assign y__h14462 = x__h14463 | inst_spfpu_divider_rg_stage3[54] ;
  assign y__h14499 = ~inst_spfpu_divider_rg_stage3[12] ;
  assign y__h16418 = x__h16697 | lv_sticky__h16332 ;
  assign y__h167544 = x__h167547 & op_xor_sign3__h117982 ;
  assign y__h167546 = ~inst_dpfm_add_sub_ff_stage2[14] ;
  assign y__h167589 = ~inst_dpfm_add_sub_ff_stage2[13] ;
  assign y__h16800 = ~inst_spfpu_sqrt_rg_inter_stage[58] ;
  assign y__h194320 = x__h194460 | lv_sticky__h193874 ;
  assign y__h194556 = ~inst_dpfm_add_sub_ff_stage5[23] ;
  assign y__h209497 = x__h209498 | _theResult____h203883 ;
  assign y__h209535 =
	     ~(!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20[31]) ;
  assign y__h220572 = x__h220573 | _theResult____h209755 ;
  assign y__h220610 =
	     ~(!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21[63]) ;
  assign y__h245647 = x__h245648 | _theResult____h235044 ;
  assign y__h245684 = ~sign__h235042 ;
  assign y__h248729 = x__h248975 | lv_sticky__h248057 ;
  assign y__h249399 = ~setCanonicalNaN_reswget_BITS_95_TO_64__q41[31] ;
  assign y__h251804 = x__h252050 | lv_sticky__h251129 ;
  assign y__h252472 = ~ff_input_D_OUT[208] ;
  assign y__h25434 = x__h25435 - 10'd1 ;
  assign y__h264696 =
	     x__h264734 |
	     IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313[26] ;
  assign y__h268369 = { 9'd0, lv_op2_subnormal__h268106 } ;
  assign y__h268371 = { 9'd0, lv_op1_subnormal__h268105 } ;
  assign y__h268763 = condFlags32_reswget_BITS_9_TO_5__q53[2] & y__h268809 ;
  assign y__h268765 = ~condFlags32_reswget_BITS_9_TO_5__q53[0] ;
  assign y__h268809 = ~condFlags32_reswget_BITS_14_TO_10__q52[0] ;
  assign y__h270556 = { 12'd0, lv_op2_subnormal__h270293 } ;
  assign y__h270558 = { 12'd0, lv_op1_subnormal__h270292 } ;
  assign y__h270945 = condFlags64_reswget_BITS_9_TO_5__q31[2] & y__h270991 ;
  assign y__h270947 = ~condFlags64_reswget_BITS_9_TO_5__q31[0] ;
  assign y__h270991 = ~condFlags64_reswget_BITS_14_TO_10__q30[0] ;
  assign y__h274241 = x__h274242 - y__h274243 ;
  assign y__h274243 = exp2__h274179 + y__h278167 ;
  assign y__h274244 = { 9'd0, condFlags32_reswget_BITS_14_TO_10__q52[4] } ;
  assign y__h278167 = { 9'd0, condFlags32_reswget_BITS_9_TO_5__q53[4] } ;
  assign y__h284243 = x__h284244 - y__h284245 ;
  assign y__h284245 = exp2__h284181 + y__h292838 ;
  assign y__h284246 = { 12'd0, condFlags64_reswget_BITS_14_TO_10__q30[4] } ;
  assign y__h292838 = { 12'd0, condFlags64_reswget_BITS_9_TO_5__q31[4] } ;
  assign y__h30413 = x__h53130 & op_xor_sign3__h30259 ;
  assign y__h304468 = ff_input_D_OUT[176] & y__h304489 ;
  assign y__h304489 = ~condFlags32_reswget_BITS_14_TO_10__q52[2] ;
  assign y__h304747 = x__h304777 - 9'd1 ;
  assign y__h313464 =
	     { 8'd0,
	       IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d5806[0] } ;
  assign y__h315058 = ff_input_D_OUT[208] & y__h315079 ;
  assign y__h315079 = ~condFlags64_reswget_BITS_14_TO_10__q30[2] ;
  assign y__h315337 = x__h315367 - 12'd1 ;
  assign y__h333392 =
	     { 11'd0,
	       IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d5982[0] } ;
  assign y__h53286 = x__h53289 & op_xor_sign3__h30259 ;
  assign y__h53288 = ~inst_spfm_add_sub_ff_stage2[14] ;
  assign y__h53331 = ~inst_spfm_add_sub_ff_stage2[13] ;
  assign y__h65968 = x__h66108 | lv_sticky__h65522 ;
  assign y__h66204 = ~inst_spfm_add_sub_ff_stage5[22] ;
  assign y__h87690 = x__h87691 | inst_dpfpu_divider_rg_stage3[86] ;
  assign y__h87727 = ~inst_dpfpu_divider_rg_stage3[12] ;
  assign y__h89645 = x__h89924 | lv_sticky__h89559 ;
  assign y__h90027 = ~inst_dpfpu_sqrt_rg_inter_stage[116] ;
  assign y_avValue_snd_fst__h265176 =
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4301 ?
	       res__h264525 :
	       res___1__h265184 ;
  assign y_avValue_snd_snd_fst__h264722 =
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4306 ?
	       man__h264258 :
	       man__h264375 ;
  assign y_avValue_snd_snd_snd__h264770 =
	     man__h264258[23:0] != 24'd0 || lv_sticky__h264136 ;
  assign y_avValue_snd_snd_snd_snd_snd_snd__h264766 =
	     IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4306 ?
	       y_avValue_snd_snd_snd__h264770 :
	       lv_sticky__h264136 ;
  always@(inst_spfpu_divider_rg_stage3 or
	  x__h14498 or lv_round_up___1__h14450 or lv_round_up___1__h14486)
  begin
    case (inst_spfpu_divider_rg_stage3[4:2])
      3'b0:
	  IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317 =
	      lv_round_up___1__h14450;
      3'b011:
	  IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317 =
	      lv_round_up___1__h14486;
      3'b100:
	  IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317 =
	      inst_spfpu_divider_rg_stage3[53];
      default: IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317 =
		   inst_spfpu_divider_rg_stage3[4:2] == 3'b010 &&
		   x__h14498 & inst_spfpu_divider_rg_stage3[12];
    endcase
  end
  always@(inst_spfpu_sqrt_rg_inter_stage or
	  lv_inexact__h16334 or
	  lv_roundup___1__h16406 or lv_roundup___1__h16788)
  begin
    case (inst_spfpu_sqrt_rg_inter_stage[2:0])
      3'b0:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 =
	      lv_roundup___1__h16406;
      3'b011:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 =
	      lv_roundup___1__h16788;
      3'b100:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 =
	      inst_spfpu_sqrt_rg_inter_stage[69];
      default: IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 =
		   inst_spfpu_sqrt_rg_inter_stage[2:0] == 3'b010 &&
		   lv_inexact__h16334 & inst_spfpu_sqrt_rg_inter_stage[58];
    endcase
  end
  always@(inst_spfm_add_sub_ff_stage5 or
	  lv_inexact__h65524 or
	  y__h66204 or
	  lv_round_up___1__h65956 or
	  lv_round_up___1__h66178 or
	  IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217)
  begin
    case (inst_spfm_add_sub_ff_stage5[21:19])
      3'b0:
	  IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238 =
	      lv_round_up___1__h65956;
      3'b010:
	  IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238 =
	      lv_round_up___1__h66178;
      3'b100:
	  IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238 =
	      IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[47];
      default: IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238 =
		   inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 &&
		   lv_inexact__h65524 & y__h66204;
    endcase
  end
  always@(inst_dpfpu_divider_rg_stage3 or
	  x__h87726 or lv_round_up___1__h87678 or lv_round_up___1__h87714)
  begin
    case (inst_dpfpu_divider_rg_stage3[4:2])
      3'b0:
	  IF_inst_dpfpu_divider_rg_stage3_675_BITS_4_TO__ETC___d1720 =
	      lv_round_up___1__h87678;
      3'b011:
	  IF_inst_dpfpu_divider_rg_stage3_675_BITS_4_TO__ETC___d1720 =
	      lv_round_up___1__h87714;
      3'b100:
	  IF_inst_dpfpu_divider_rg_stage3_675_BITS_4_TO__ETC___d1720 =
	      inst_dpfpu_divider_rg_stage3[85];
      default: IF_inst_dpfpu_divider_rg_stage3_675_BITS_4_TO__ETC___d1720 =
		   inst_dpfpu_divider_rg_stage3[4:2] == 3'b010 &&
		   x__h87726 & inst_dpfpu_divider_rg_stage3[12];
    endcase
  end
  always@(inst_dpfpu_sqrt_rg_inter_stage or
	  lv_inexact__h89561 or
	  lv_roundup___1__h89633 or lv_roundup___1__h90015)
  begin
    case (inst_dpfpu_sqrt_rg_inter_stage[2:0])
      3'b0:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_BI_ETC___d1833 =
	      lv_roundup___1__h89633;
      3'b011:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_BI_ETC___d1833 =
	      lv_roundup___1__h90015;
      3'b100:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_BI_ETC___d1833 =
	      inst_dpfpu_sqrt_rg_inter_stage[130];
      default: IF_inst_dpfpu_sqrt_rg_inter_stage_read__779_BI_ETC___d1833 =
		   inst_dpfpu_sqrt_rg_inter_stage[2:0] == 3'b010 &&
		   lv_inexact__h89561 & inst_dpfpu_sqrt_rg_inter_stage[116];
    endcase
  end
  always@(inst_dpfm_add_sub_ff_stage5 or
	  lv_inexact__h193876 or
	  y__h194556 or
	  lv_round_up___1__h194308 or
	  lv_round_up___1__h194530 or
	  IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200)
  begin
    case (inst_dpfm_add_sub_ff_stage5[22:20])
      3'b0:
	  IF_inst_dpfm_add_sub_ff_stage5_read__156_BITS__ETC___d3221 =
	      lv_round_up___1__h194308;
      3'b010:
	  IF_inst_dpfm_add_sub_ff_stage5_read__156_BITS__ETC___d3221 =
	      lv_round_up___1__h194530;
      3'b100:
	  IF_inst_dpfm_add_sub_ff_stage5_read__156_BITS__ETC___d3221 =
	      IF_inst_dpfm_add_sub_ff_stage5_read__156_BIT_1_ETC___d3200[105];
      default: IF_inst_dpfm_add_sub_ff_stage5_read__156_BITS__ETC___d3221 =
		   inst_dpfm_add_sub_ff_stage5[22:20] == 3'b011 &&
		   lv_inexact__h193876 & y__h194556;
    endcase
  end
  always@(ff_input_D_OUT or
	  inexact__h235045 or
	  sign__h235042 or
	  lv_roundup___1__h245635 or
	  lv_roundup___1__h245671 or
	  IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3702 =
	      lv_roundup___1__h245635;
      3'b011:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3702 =
	      lv_roundup___1__h245671;
      3'b100:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3702 =
	      IF_NOT_ff_input_first__309_BIT_1_534_548_AND_f_ETC___d3682[10];
      default: IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3702 =
		   ff_input_D_OUT[5:3] == 3'b010 &&
		   inexact__h235045 & sign__h235042;
    endcase
  end
  always@(ff_input_D_OUT or
	  ff_input_first__309_BIT_208_447_XOR_ff_input_f_ETC___d3810)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q7 =
	      ff_input_D_OUT[144];
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q7 =
	      ~ff_input_D_OUT[144];
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q7 =
		   ff_input_first__309_BIT_208_447_XOR_ff_input_f_ETC___d3810;
    endcase
  end
  always@(inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget or
	  inexact__h203884 or
	  inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20 or
	  lv_roundup___1__h209485 or
	  lv_roundup___1__h209522 or
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110)
  begin
    case (inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[2:0])
      3'b0:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5135 =
	      lv_roundup___1__h209485;
      3'b011:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5135 =
	      lv_roundup___1__h209522;
      3'b100:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5135 =
	      IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5110[7];
      default: IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5135 =
		   inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[2:0] == 3'b010 &&
		   inexact__h203884 &
		   (!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
		    inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q20[31]);
    endcase
  end
  always@(inst_fpu_int_to_fp_fcvt_s_llu_arg_wget or
	  inexact__h209756 or
	  inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21 or
	  lv_roundup___1__h220560 or
	  lv_roundup___1__h220597 or
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986)
  begin
    case (inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[2:0])
      3'b0:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5011 =
	      lv_roundup___1__h220560;
      3'b011:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5011 =
	      lv_roundup___1__h220597;
      3'b100:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5011 =
	      IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d4986[39];
      default: IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5011 =
		   inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[2:0] == 3'b010 &&
		   inexact__h209756 &
		   (!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
		    inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q21[63]);
    endcase
  end
  always@(ff_input_D_OUT or
	  x__h264835 or
	  lv_round_up___1__h264684 or
	  lv_round_up___1__h264823 or
	  IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0: _theResult_____4___1__h264655 = lv_round_up___1__h264684;
      3'b011: _theResult_____4___1__h264655 = lv_round_up___1__h264823;
      3'b100:
	  _theResult_____4___1__h264655 =
	      IF_IF_getExp64_res_whas__293_THEN_getExp64_res_ETC___d4313[25];
      default: _theResult_____4___1__h264655 =
		   ff_input_D_OUT[5:3] == 3'b010 &&
		   x__h264835 & ff_input_D_OUT[208];
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_compare_result__h228482 or
	  condFlags64_reswget_BITS_14_TO_10__q30 or
	  condFlags64_reswget_BITS_9_TO_5__q31)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q32 =
	      (lv_compare_result__h228482[0] ||
	       condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	       condFlags64_reswget_BITS_9_TO_5__q31[3]) ?
		64'd1 :
		64'd0;
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q32 =
	      (lv_compare_result__h228482 == 2'b01 &&
	       (!condFlags64_reswget_BITS_14_TO_10__q30[3] ||
		!condFlags64_reswget_BITS_9_TO_5__q31[3])) ?
		64'd1 :
		64'd0;
      3'b010:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q32 =
	      (lv_compare_result__h228482 == 2'b11 ||
	       condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	       condFlags64_reswget_BITS_9_TO_5__q31[3]) ?
		64'd1 :
		64'd0;
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q32 = 64'd0;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_inexact1__h251131 or
	  y__h252472 or
	  lv_round_up___1__h251792 or
	  lv_round_up___1__h252447 or
	  IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d4100 =
	      lv_round_up___1__h251792;
      3'b010:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d4100 =
	      lv_round_up___1__h252447;
      3'b100:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d4100 =
	      IF_IF_condFlags64_res_whas__428_THEN_condFlags_ETC___d4038[51];
      default: IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d4100 =
		   ff_input_D_OUT[5:3] == 3'b011 &&
		   lv_inexact1__h251131 & y__h252472;
    endcase
  end
  always@(ff_input_D_OUT)
  begin
    case (ff_input_D_OUT[5:3])
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q36 =
	      { ff_input_D_OUT[208], 31'h7F7FFFFF };
      3'b010:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q36 =
	      { ff_input_D_OUT[208],
		ff_input_D_OUT[208] ? 31'h7F800000 : 31'h7F7FFFFF };
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q36 =
		   { ff_input_D_OUT[208],
		     (ff_input_D_OUT[5:3] == 3'b011 && ff_input_D_OUT[208]) ?
		       31'h7F7FFFFF :
		       31'h7F800000 };
    endcase
  end
  always@(ff_input_D_OUT or
	  x__h282142 or setCanonicalNaN_reswget_BITS_63_TO_32__q42)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q43 =
	      setCanonicalNaN_reswget_BITS_63_TO_32__q42[31];
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q43 =
	      ~setCanonicalNaN_reswget_BITS_63_TO_32__q42[31];
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q43 =
		   x__h282142;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_compare_result__h225903 or
	  condFlags32_reswget_BITS_14_TO_10__q52 or
	  condFlags32_reswget_BITS_9_TO_5__q53)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q54 =
	      (lv_compare_result__h225903[0] ||
	       condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q53[3]) ?
		32'd1 :
		32'd0;
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q54 =
	      (lv_compare_result__h225903 == 2'b01 &&
	       (!condFlags32_reswget_BITS_14_TO_10__q52[3] ||
		!condFlags32_reswget_BITS_9_TO_5__q53[3])) ?
		32'd1 :
		32'd0;
      3'b010:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q54 =
	      (lv_compare_result__h225903 == 2'b11 ||
	       condFlags32_reswget_BITS_14_TO_10__q52[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q53[3]) ?
		32'd1 :
		32'd0;
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q54 = 32'd0;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_inexact1__h248059 or
	  y__h249399 or
	  lv_round_up___1__h248717 or
	  lv_round_up___1__h249374 or
	  IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3934 =
	      lv_round_up___1__h248717;
      3'b010:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3934 =
	      lv_round_up___1__h249374;
      3'b100:
	  IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3934 =
	      IF_IF_condFlags32_res_whas__343_THEN_condFlags_ETC___d3871[22];
      default: IF_ff_input_first__309_BITS_5_TO_3_318_EQ_0b0__ETC___d3934 =
		   ff_input_D_OUT[5:3] == 3'b011 &&
		   lv_inexact1__h248059 & y__h249399;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inst_dpfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inst_dpfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_dpfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inst_dpfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	inst_dpfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	    294'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	inst_dpfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_spfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inst_spfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_spfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inst_spfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	inst_spfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	    146'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	inst_spfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_multicycle_op <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_result <= `BSV_ASSIGNMENT_DELAY
	    { 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	      6'd0 };
      end
    else
      begin
        if (inst_dpfm_add_sub_rg_state_handler_EN)
	  inst_dpfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfm_add_sub_rg_state_handler_D_IN;
	if (inst_dpfpu_divider_int_div_rg_state_EN)
	  inst_dpfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_divider_int_div_rg_state_D_IN;
	if (inst_dpfpu_divider_rg_state_handler_EN)
	  inst_dpfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_divider_rg_state_handler_D_IN;
	if (inst_dpfpu_sqrt_ff_final_out_EN)
	  inst_dpfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_ff_final_out_D_IN;
	if (inst_dpfpu_sqrt_rg_inter_stage_EN)
	  inst_dpfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_rg_inter_stage_D_IN;
	if (inst_dpfpu_sqrt_rg_state_EN)
	  inst_dpfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_rg_state_D_IN;
	if (inst_spfm_add_sub_rg_state_handler_EN)
	  inst_spfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_spfm_add_sub_rg_state_handler_D_IN;
	if (inst_spfpu_divider_int_div_rg_state_EN)
	  inst_spfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_divider_int_div_rg_state_D_IN;
	if (inst_spfpu_divider_rg_state_handler_EN)
	  inst_spfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_divider_rg_state_handler_D_IN;
	if (inst_spfpu_sqrt_ff_final_out_EN)
	  inst_spfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_ff_final_out_D_IN;
	if (inst_spfpu_sqrt_rg_inter_stage_EN)
	  inst_spfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_rg_inter_stage_D_IN;
	if (inst_spfpu_sqrt_rg_state_EN)
	  inst_spfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_rg_state_D_IN;
	if (rg_multicycle_op_EN)
	  rg_multicycle_op <= `BSV_ASSIGNMENT_DELAY rg_multicycle_op_D_IN;
	if (rg_result_EN) rg_result <= `BSV_ASSIGNMENT_DELAY rg_result_D_IN;
      end
    if (inst_dpfm_add_sub_ff_input_register_EN)
      inst_dpfm_add_sub_ff_input_register <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_input_register_D_IN;
    if (inst_dpfm_add_sub_ff_stage2_EN)
      inst_dpfm_add_sub_ff_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage2_D_IN;
    if (inst_dpfm_add_sub_ff_stage4_EN)
      inst_dpfm_add_sub_ff_stage4 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage4_D_IN;
    if (inst_dpfm_add_sub_ff_stage5_EN)
      inst_dpfm_add_sub_ff_stage5 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage5_D_IN;
    if (inst_dpfpu_divider_int_div_rg_inter_stage_EN)
      inst_dpfpu_divider_int_div_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_int_div_rg_inter_stage_D_IN;
    if (inst_dpfpu_divider_rg_stage1_EN)
      inst_dpfpu_divider_rg_stage1 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage1_D_IN;
    if (inst_dpfpu_divider_rg_stage2_EN)
      inst_dpfpu_divider_rg_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage2_D_IN;
    if (inst_dpfpu_divider_rg_stage3_EN)
      inst_dpfpu_divider_rg_stage3 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage3_D_IN;
    if (inst_spfm_add_sub_ff_input_register_EN)
      inst_spfm_add_sub_ff_input_register <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_input_register_D_IN;
    if (inst_spfm_add_sub_ff_stage2_EN)
      inst_spfm_add_sub_ff_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage2_D_IN;
    if (inst_spfm_add_sub_ff_stage4_EN)
      inst_spfm_add_sub_ff_stage4 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage4_D_IN;
    if (inst_spfm_add_sub_ff_stage5_EN)
      inst_spfm_add_sub_ff_stage5 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage5_D_IN;
    if (inst_spfpu_divider_int_div_rg_inter_stage_EN)
      inst_spfpu_divider_int_div_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_int_div_rg_inter_stage_D_IN;
    if (inst_spfpu_divider_rg_stage1_EN)
      inst_spfpu_divider_rg_stage1 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage1_D_IN;
    if (inst_spfpu_divider_rg_stage2_EN)
      inst_spfpu_divider_rg_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage2_D_IN;
    if (inst_spfpu_divider_rg_stage3_EN)
      inst_spfpu_divider_rg_stage3 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage3_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inst_dpfm_add_sub_ff_input_register =
	201'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage2 =
	204'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage4 =
	349'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage5 =
	197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_rg_state_handler = 3'h2;
    inst_dpfpu_divider_int_div_rg_inter_stage =
	170'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_int_div_rg_state = 6'h2A;
    inst_dpfpu_divider_rg_stage1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_rg_stage2 = 22'h2AAAAA;
    inst_dpfpu_divider_rg_stage3 = 139'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_rg_state_handler = 2'h2;
    inst_dpfpu_sqrt_ff_final_out = 70'h2AAAAAAAAAAAAAAAAA;
    inst_dpfpu_sqrt_rg_inter_stage =
	294'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_sqrt_rg_state = 6'h2A;
    inst_spfm_add_sub_ff_input_register = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage2 = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage4 =
	172'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage5 = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_rg_state_handler = 3'h2;
    inst_spfpu_divider_int_div_rg_inter_stage = 83'h2AAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_divider_int_div_rg_state = 6'h2A;
    inst_spfpu_divider_rg_stage1 = 67'h2AAAAAAAAAAAAAAAA;
    inst_spfpu_divider_rg_stage2 = 19'h2AAAA;
    inst_spfpu_divider_rg_stage3 = 78'h2AAAAAAAAAAAAAAAAAAA;
    inst_spfpu_divider_rg_state_handler = 2'h2;
    inst_spfpu_sqrt_ff_final_out = 38'h2AAAAAAAAA;
    inst_spfpu_sqrt_rg_inter_stage =
	146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_sqrt_rg_state = 6'h2A;
    rg_multicycle_op = 1'h0;
    rg_result = 70'h2AAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6060 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6061 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6062 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  v__h345288 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6060 ||
	   TASK_testplusargs___d6061 && TASK_testplusargs___d6062))
	$write("[%10d", v__h345288, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6060 ||
	   TASK_testplusargs___d6061 && TASK_testplusargs___d6062))
	$write("FPU: op1:%h op2:%h op3:%h",
	       _start_operand1,
	       _start_operand2,
	       _start_operand3);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6060 ||
	   TASK_testplusargs___d6061 && TASK_testplusargs___d6062))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6066 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6067 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6068 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  v__h345423 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6066 ||
	   TASK_testplusargs___d6067 && TASK_testplusargs___d6068))
	$write("[%10d", v__h345423, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6066 ||
	   TASK_testplusargs___d6067 && TASK_testplusargs___d6068))
	$write("FPU: opcode:%b f7:%h f3:%b imm:%h issp:%b",
	       _start_opcode,
	       _start_funct7,
	       _start_funct3,
	       _start_imm,
	       _start_issp);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6066 ||
	   TASK_testplusargs___d6067 && TASK_testplusargs___d6068))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_stage_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_stage_1] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_stage_1] and\n  [RL_inst_spfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_recursive_stage] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_rl_stage3)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_flush]\n  and [RL_inst_spfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_rl_stage2)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_flush]\n  and [RL_inst_spfpu_divider_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage3)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_stage2]\n  and [RL_inst_spfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_stage2]\n  and [RL_inst_spfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_stage2]\n  and [RL_inst_spfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_sqrt_rl_inter_stage] and [RL_inst_spfpu_sqrt_rl_final_stage]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_stage_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_stage_1] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_stage_1] and\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_flush]\n  and [RL_inst_dpfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_flush]\n  and [RL_inst_dpfpu_divider_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_stage2]\n  and [RL_inst_dpfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_stage2]\n  and [RL_inst_dpfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_stage2]\n  and [RL_inst_dpfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_sqrt_rl_inter_stage] and [RL_inst_dpfpu_sqrt_rl_final_stage]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and\n  [RL_rl_get_output_from_dpfm_add_sub] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_fm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_dpfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_spfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_divider)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and\n  [RL_rl_get_output_from_dpfpu_divider] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and\n  [RL_rl_get_output_from_dpfm_add_sub] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_fm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_dpfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_spfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_fm_add_sub] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_dpfpu_sqrt] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 122: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_sqrt] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 122: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_sqrt] and [RL_rl_get_output_from_fm_add_sub] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 152: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_fm_add_sub] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0])
	$display("sign : %b exponent %b mantissa %b rounding_mode %b flags %b",
		 ff_input_D_OUT[208],
		 getExp64_res_wget[32:22],
		 getMant64_res_wget[155:104],
		 ff_input_D_OUT[5:3],
		 condFlags64_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0])
	$display("sign : %b exponent : %b mantissa : %b flags : %b",
		 ff_input_D_OUT[208],
		 getExp64_res_wget[32:22],
		 getMant64_res_wget[155:104],
		 condFlags64_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__309_BIT_0_341_AND_NOT_IF_condF_ETC___d5150)
	$display("sign : %b exponent %b mantissa %b rounding %b flags %b",
		 ff_input_D_OUT[208],
		 getExp64_res_wget[32:22],
		 getMant64_res_wget[155:104],
		 ff_input_D_OUT[5:3],
		 condFlags64_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__309_BIT_0_341_AND_NOT_IF_condF_ETC___d5150)
	$display("exponent : %d", getExp64_res_wget[32:22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d5153)
	$display("Denormal lv_sticky : %b", lv_sticky__h264136);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d5153)
	$display("lv_guard : %b shiftDist : %d", 1'd0, shiftDist__h264257);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d5153)
	$display("expo : %b man : %b", 8'd0, man__h264258);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__428_THEN_condFlag_ETC___d5159)
	$display("expo : %b man : %b", x__h264405[7:0], man__h264375);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__309_BIT_0_341_AND_NOT_IF_condF_ETC___d5150)
	$display("lv_roundup : %b", _theResult_____4___1__h264655);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__309_BIT_0_341_AND_NOT_IF_condF_ETC___d5150)
	$display("fman: %b", fman__h264863);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  !condFlags64_reswget_BITS_14_TO_10__q30[3] &&
	  !condFlags64_reswget_BITS_14_TO_10__q30[2] &&
	  !condFlags64_reswget_BITS_14_TO_10__q30[0] &&
	  !condFlags64_reswget_BITS_14_TO_10__q30[1] &&
	  !IF_getExp64_res_whas__293_THEN_getExp64_res_wg_ETC___d4295)
	$display("overflow");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  !ff_input_D_OUT[0])
	$display("sign : %b exponent %b mantissa %b rounding_mode %b flags %b",
		 setCanonicalNaN_reswget_BITS_95_TO_64__q41[31],
		 getExp32_res_wget[23:16],
		 getMant32_res_wget[68:46],
		 ff_input_D_OUT[5:3],
		 condFlags32_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5338)
	$display("Divide_by_zero");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__309_BITS_12_TO_6_322_EQ_0b_ETC___d5460)
	$display("Divide_by_zero");
  end
  // synopsys translate_on
endmodule  // mkfpu

